import {
  A11Y_ACTIVEDESCENDANT,
  A11Y_AUTOCOMPLETE,
  A11Y_CHECKBOX,
  A11Y_CHECKED,
  A11Y_COMBOBOX,
  A11Y_CONTROLS,
  A11Y_DISABLED,
  A11Y_EXPANDED,
  A11Y_HASPOPUP,
  A11Y_HIDDEN,
  A11Y_LABEL,
  A11Y_LISTBOX,
  A11Y_LIVE,
  A11Y_MENU,
  A11Y_MENU_ITEM,
  A11Y_MENU_ITEM_CHECKBOX,
  A11Y_OPTION,
  A11Y_POSINSET,
  A11Y_PRESENTATION,
  A11Y_RELEVANT,
  A11Y_SELECTED,
  A11Y_SETSIZE,
  A11Y_SORT,
  A11Y_TABINDEX,
  A11Y_TEXT,
  ACTIVE_HEADER_TYPE,
  BaseEditor,
  CHECKBOX_CHECKED,
  CHECKBOX_UNCHECKED,
  CONTEXTMENU_ITEMS_ADD_COMMENT,
  CONTEXTMENU_ITEMS_ALIGNMENT,
  CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM,
  CONTEXTMENU_ITEMS_ALIGNMENT_CENTER,
  CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY,
  CONTEXTMENU_ITEMS_ALIGNMENT_LEFT,
  CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE,
  CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT,
  CONTEXTMENU_ITEMS_ALIGNMENT_TOP,
  CONTEXTMENU_ITEMS_BORDERS,
  CONTEXTMENU_ITEMS_BORDERS_BOTTOM,
  CONTEXTMENU_ITEMS_BORDERS_LEFT,
  CONTEXTMENU_ITEMS_BORDERS_RIGHT,
  CONTEXTMENU_ITEMS_BORDERS_TOP,
  CONTEXTMENU_ITEMS_CLEAR_COLUMN,
  CONTEXTMENU_ITEMS_COPY,
  CONTEXTMENU_ITEMS_COPY_COLUMN_HEADERS_ONLY,
  CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_GROUP_HEADERS,
  CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_HEADERS,
  CONTEXTMENU_ITEMS_CUT,
  CONTEXTMENU_ITEMS_EDIT_COMMENT,
  CONTEXTMENU_ITEMS_FREEZE_COLUMN,
  CONTEXTMENU_ITEMS_HIDE_COLUMN,
  CONTEXTMENU_ITEMS_HIDE_ROW,
  CONTEXTMENU_ITEMS_INSERT_LEFT,
  CONTEXTMENU_ITEMS_INSERT_RIGHT,
  CONTEXTMENU_ITEMS_MERGE_CELLS,
  CONTEXTMENU_ITEMS_NESTED_ROWS_DETACH_CHILD,
  CONTEXTMENU_ITEMS_NESTED_ROWS_INSERT_CHILD,
  CONTEXTMENU_ITEMS_NO_ITEMS,
  CONTEXTMENU_ITEMS_READ_ONLY,
  CONTEXTMENU_ITEMS_READ_ONLY_COMMENT,
  CONTEXTMENU_ITEMS_REDO,
  CONTEXTMENU_ITEMS_REMOVE_BORDERS,
  CONTEXTMENU_ITEMS_REMOVE_COLUMN,
  CONTEXTMENU_ITEMS_REMOVE_COMMENT,
  CONTEXTMENU_ITEMS_REMOVE_ROW,
  CONTEXTMENU_ITEMS_ROW_ABOVE,
  CONTEXTMENU_ITEMS_ROW_BELOW,
  CONTEXTMENU_ITEMS_SHOW_COLUMN,
  CONTEXTMENU_ITEMS_SHOW_ROW,
  CONTEXTMENU_ITEMS_UNDO,
  CONTEXTMENU_ITEMS_UNFREEZE_COLUMN,
  CONTEXTMENU_ITEMS_UNMERGE_CELLS,
  DEFAULT_WIDTH,
  EDITOR_EDIT_GROUP,
  EDITOR_STATE,
  FILTERS_BUTTONS_CANCEL,
  FILTERS_BUTTONS_CLEAR,
  FILTERS_BUTTONS_OK,
  FILTERS_BUTTONS_PLACEHOLDER_SEARCH,
  FILTERS_BUTTONS_PLACEHOLDER_SECOND_VALUE,
  FILTERS_BUTTONS_PLACEHOLDER_VALUE,
  FILTERS_BUTTONS_SELECT_ALL,
  FILTERS_CONDITIONS_AFTER,
  FILTERS_CONDITIONS_BEFORE,
  FILTERS_CONDITIONS_BEGINS_WITH,
  FILTERS_CONDITIONS_BETWEEN,
  FILTERS_CONDITIONS_CONTAINS,
  FILTERS_CONDITIONS_EMPTY,
  FILTERS_CONDITIONS_ENDS_WITH,
  FILTERS_CONDITIONS_EQUAL,
  FILTERS_CONDITIONS_GREATER_THAN,
  FILTERS_CONDITIONS_GREATER_THAN_OR_EQUAL,
  FILTERS_CONDITIONS_LESS_THAN,
  FILTERS_CONDITIONS_LESS_THAN_OR_EQUAL,
  FILTERS_CONDITIONS_NAMESPACE,
  FILTERS_CONDITIONS_NONE,
  FILTERS_CONDITIONS_NOT_BETWEEN,
  FILTERS_CONDITIONS_NOT_CONTAIN,
  FILTERS_CONDITIONS_NOT_EMPTY,
  FILTERS_CONDITIONS_NOT_EQUAL,
  FILTERS_CONDITIONS_TODAY,
  FILTERS_CONDITIONS_TOMORROW,
  FILTERS_CONDITIONS_YESTERDAY,
  FILTERS_DIVS_FILTER_BY_CONDITION,
  FILTERS_DIVS_FILTER_BY_VALUE,
  FILTERS_LABELS_CONJUNCTION,
  FILTERS_LABELS_DISJUNCTION,
  FILTERS_NAMESPACE,
  FILTERS_VALUES_BLANK_CELLS,
  HEADER_TYPE,
  HidingMap,
  Hooks,
  IndexMap,
  IndexesSequence,
  KEY_CODES,
  LinkedPhysicalIndexToValueMap,
  PhysicalIndexToValueMap,
  TextCellType,
  TextEditor,
  TrimmingMap,
  _dataToHTML,
  _getEditorInstance,
  _getItem,
  _getItem2,
  _getItem3,
  _getItem4,
  _register,
  _register2,
  _register3,
  _register4,
  addClass,
  alterUtilsFactory,
  arrayEach,
  arrayFilter,
  arrayMap,
  arrayReduce,
  arrayUnique,
  array_exports,
  baseRenderer,
  base_default,
  browser_exports,
  cancelAnimationFrame,
  clamp,
  clone,
  closest,
  coords_default,
  createInputElementResizer,
  curry,
  dataRowToChangesArray,
  data_exports,
  debounce,
  deepClone,
  deepExtend,
  defineGetter,
  detectSelectionType,
  element_exports,
  empty,
  error,
  eventManager_default,
  event_exports,
  extend,
  fastInnerHTML,
  fastInnerText,
  feature_exports,
  function_exports,
  getCaretPosition,
  getComparisonFunction,
  getDecreasedIndexes,
  getIncreasedIndexes,
  getListenersCounter,
  getNames,
  getNames2,
  getNames3,
  getNames4,
  getParentWindow,
  getPlugin,
  getPluginsNames,
  getRegisteredMapsCounter,
  getScrollbarWidth,
  getSelectionEndPosition,
  getStyle,
  getTrimmingContainer,
  hasClass,
  hasHorizontalScrollbar,
  hasItem,
  hasItem2,
  hasItem3,
  hasItem4,
  hasOwnProperty,
  hasPlugin,
  hasVerticalScrollbar,
  htmlToGridSettings,
  isArrayOfArrays,
  isArrayOfObjects,
  isChildOf,
  isChrome,
  isDefined,
  isDetached,
  isEmpty,
  isFunction,
  isFunctionKey,
  isHTMLElement,
  isInternalElement,
  isIpadOS,
  isKey,
  isLeftClick,
  isMobileBrowser,
  isNumeric,
  isObject,
  isObjectEqual,
  isPercentValue,
  isPrintableChar,
  isRightClick,
  isSafari,
  isTouchEvent,
  isTouchSupported,
  isUndefined,
  isVisible,
  isWindowsOS,
  localHooks_default,
  makeElementContentEditableAndSelectItsContent,
  mixed_exports,
  mixin,
  moment_default,
  normalizeSelectionFactory,
  number_exports,
  objectEach,
  object_exports,
  offset,
  offsetRelativeTo,
  outerHeight,
  outerWidth,
  parse,
  parseTable_exports,
  partial,
  pivot,
  rangeEach,
  range_default,
  registerPlugin,
  removeAttribute,
  removeClass,
  removeContentEditableFromElementAndDeselect,
  requestAnimationFrame as requestAnimationFrame2,
  require_a_callable,
  require_add_to_unscopables,
  require_an_object,
  require_export,
  require_function_call,
  require_get_iterator_direct,
  require_get_iterator_method,
  require_is_pure,
  require_iterator_close,
  require_iterator_create_proxy,
  require_iterator_helper_without_closing_on_early_error,
  runWithSelectedContendEditableElement,
  sanitize,
  setAttribute,
  setCaretPosition,
  staticRegister,
  stopImmediatePropagation,
  string_exports,
  stringify,
  stringify2,
  stripTags,
  substitute,
  textRenderer,
  toSingleLine,
  toUpperCaseFirst,
  transformSelectionToColumnDistance,
  transformSelectionToRowDistance,
  unicode_exports,
  valueAccordingPercent,
  warn
} from "./chunk-I3AK7RUK.js";
import {
  __commonJS,
  __export
} from "./chunk-HM4MQYWN.js";

// node_modules/core-js/internals/get-iterator-flattenable.js
var require_get_iterator_flattenable = __commonJS({
  "node_modules/core-js/internals/get-iterator-flattenable.js"(exports, module) {
    "use strict";
    var call = require_function_call();
    var anObject = require_an_object();
    var getIteratorDirect = require_get_iterator_direct();
    var getIteratorMethod = require_get_iterator_method();
    module.exports = function(obj, stringHandling) {
      if (!stringHandling || typeof obj !== "string")
        anObject(obj);
      var method = getIteratorMethod(obj);
      return getIteratorDirect(anObject(method !== void 0 ? call(method, obj) : obj));
    };
  }
});

// node_modules/core-js/modules/es.iterator.flat-map.js
var require_es_iterator_flat_map = __commonJS({
  "node_modules/core-js/modules/es.iterator.flat-map.js"() {
    "use strict";
    var $ = require_export();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var getIteratorDirect = require_get_iterator_direct();
    var getIteratorFlattenable = require_get_iterator_flattenable();
    var createIteratorProxy = require_iterator_create_proxy();
    var iteratorClose = require_iterator_close();
    var IS_PURE = require_is_pure();
    var iteratorHelperWithoutClosingOnEarlyError = require_iterator_helper_without_closing_on_early_error();
    var flatMapWithoutClosingOnEarlyError = !IS_PURE && iteratorHelperWithoutClosingOnEarlyError("flatMap", TypeError);
    var IteratorProxy = createIteratorProxy(function() {
      var iterator = this.iterator;
      var mapper = this.mapper;
      var result, inner;
      while (true) {
        if (inner = this.inner)
          try {
            result = anObject(call(inner.next, inner.iterator));
            if (!result.done)
              return result.value;
            this.inner = null;
          } catch (error2) {
            iteratorClose(iterator, "throw", error2);
          }
        result = anObject(call(this.next, iterator));
        if (this.done = !!result.done)
          return;
        try {
          this.inner = getIteratorFlattenable(mapper(result.value, this.counter++), false);
        } catch (error2) {
          iteratorClose(iterator, "throw", error2);
        }
      }
    });
    $({ target: "Iterator", proto: true, real: true, forced: IS_PURE || flatMapWithoutClosingOnEarlyError }, {
      flatMap: function flatMap(mapper) {
        anObject(this);
        try {
          aCallable(mapper);
        } catch (error2) {
          iteratorClose(this, "throw", error2);
        }
        if (flatMapWithoutClosingOnEarlyError)
          return call(flatMapWithoutClosingOnEarlyError, this, mapper);
        return new IteratorProxy(getIteratorDirect(this), {
          mapper,
          inner: null
        });
      }
    });
  }
});

// node_modules/handsontable/editors/handsontableEditor/handsontableEditor.mjs
var SHORTCUTS_GROUP = "handsontableEditor";
var EDITOR_TYPE = "handsontable";
var HandsontableEditor = class extends TextEditor {
  static get EDITOR_TYPE() {
    return EDITOR_TYPE;
  }
  /**
   * Opens the editor and adjust its size.
   */
  open() {
    super.open();
    const containerStyle = this.htContainer.style;
    if (this.htEditor) {
      this.htEditor.destroy();
      containerStyle.width = "";
      containerStyle.height = "";
      containerStyle.overflow = "";
    }
    if (containerStyle.display === "none") {
      containerStyle.display = "";
    }
    this.htEditor = new this.hot.constructor(this.htContainer, this.htOptions);
    this.htEditor.init();
    this.htEditor.rootElement.style.display = "";
    if (this.cellProperties.strict) {
      this.htEditor.selectCell(0, 0);
    } else {
      this.htEditor.deselectCell();
    }
    setCaretPosition(this.TEXTAREA, 0, this.TEXTAREA.value.length);
    this.htEditor.updateSettings({
      width: this.getWidth(),
      height: this.getHeight()
    });
    this.refreshDimensions();
  }
  /**
   * Closes the editor.
   */
  close() {
    if (this.htEditor) {
      this.htEditor.rootElement.style.display = "none";
    }
    this.removeHooksByKey("beforeKeyDown");
    super.close();
  }
  /**
   * Prepares editor's meta data and configuration of the internal Handsontable's instance.
   *
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).
   */
  prepare(row, col, prop, td, value, cellProperties) {
    super.prepare(row, col, prop, td, value, cellProperties);
    const parent = this;
    const options = {
      startRows: 0,
      startCols: 0,
      minRows: 0,
      minCols: 0,
      className: "listbox",
      copyPaste: false,
      autoColumnSize: false,
      autoRowSize: false,
      readOnly: true,
      fillHandle: false,
      autoWrapCol: false,
      autoWrapRow: false,
      ariaTags: false,
      themeName: this.hot.getCurrentThemeName(),
      afterOnCellMouseDown(_, coords) {
        const sourceValue = this.getSourceData(coords.row, coords.col);
        if (sourceValue !== void 0) {
          parent.setValue(sourceValue);
        }
        parent.hot.destroyEditor();
      },
      preventWheel: true,
      layoutDirection: this.hot.isRtl() ? "rtl" : "ltr"
    };
    if (this.cellProperties.handsontable) {
      extend(options, cellProperties.handsontable);
    }
    this.htOptions = options;
  }
  /**
   * Begins editing on a highlighted cell and hides fillHandle corner if was present.
   *
   * @param {*} newInitialValue The editor initial value.
   * @param {*} event The keyboard event object.
   */
  beginEditing(newInitialValue, event) {
    const onBeginEditing = this.hot.getSettings().onBeginEditing;
    if (onBeginEditing && onBeginEditing() === false) {
      return;
    }
    super.beginEditing(newInitialValue, event);
  }
  /**
   * Creates an editor's elements and adds necessary CSS classnames.
   */
  createElements() {
    super.createElements();
    const DIV = this.hot.rootDocument.createElement("DIV");
    DIV.className = "handsontableEditor";
    this.TEXTAREA_PARENT.appendChild(DIV);
    this.htContainer = DIV;
    this.assignHooks();
  }
  /**
   * Finishes editing and start saving or restoring process for editing cell or last selected range.
   *
   * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.
   * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.
   * @param {Function} callback The callback function, fired after editor closing.
   */
  finishEditing(restoreOriginalValue, ctrlDown, callback) {
    if (this.htEditor && this.htEditor.isListening()) {
      this.hot.listen();
    }
    if (this.htEditor && this.htEditor.getSelectedLast()) {
      const value = this.htEditor.getValue();
      if (value !== void 0) {
        this.setValue(value);
      }
    }
    super.finishEditing(restoreOriginalValue, ctrlDown, callback);
  }
  /**
   * Calculates and return the internal Handsontable's height.
   *
   * @private
   * @returns {number}
   */
  getHeight() {
    return this.htEditor.view.getTableHeight() + 1;
  }
  /**
   * Calculates and return the internal Handsontable's width.
   *
   * @private
   * @returns {number}
   */
  getWidth() {
    return this.htEditor.view.getTableWidth();
  }
  /**
   * Assigns afterDestroy callback to prevent memory leaks.
   *
   * @private
   */
  assignHooks() {
    this.hot.addHook("afterDestroy", () => {
      var _this$htEditor;
      (_this$htEditor = this.htEditor) === null || _this$htEditor === void 0 || _this$htEditor.destroy();
    });
    this.hot.addHook("afterSetTheme", (themeName, firstRun) => {
      if (!firstRun) {
        var _this$htEditor2;
        (_this$htEditor2 = this.htEditor) === null || _this$htEditor2 === void 0 || _this$htEditor2.useTheme(themeName);
      }
    });
  }
  /**
   * Register shortcuts responsible for handling editor.
   *
   * @private
   */
  registerShortcuts() {
    const shortcutManager = this.hot.getShortcutManager();
    const editorContext = shortcutManager.getContext("editor");
    super.registerShortcuts();
    const contextConfig = {
      group: SHORTCUTS_GROUP,
      relativeToGroup: EDITOR_EDIT_GROUP,
      position: "before"
    };
    const action = (rowToSelect, event) => {
      const innerHOT = this.htEditor;
      if (rowToSelect !== void 0) {
        if (rowToSelect < 0 || innerHOT.flipped && rowToSelect > innerHOT.countRows() - 1) {
          innerHOT.deselectCell();
        } else {
          innerHOT.selectCell(rowToSelect, 0);
        }
        if (innerHOT.getData().length) {
          event.preventDefault();
          stopImmediatePropagation(event);
          this.hot.listen();
          this.TEXTAREA.focus();
          return false;
        }
      }
    };
    editorContext.addShortcuts([{
      keys: [["ArrowUp"]],
      callback: (event) => {
        const innerHOT = this.htEditor;
        let rowToSelect;
        let selectedRow;
        if (!innerHOT.getSelectedLast() && innerHOT.flipped) {
          rowToSelect = innerHOT.countRows() - 1;
        } else if (innerHOT.getSelectedLast()) {
          if (innerHOT.flipped) {
            selectedRow = innerHOT.getSelectedLast()[0];
            rowToSelect = Math.max(0, selectedRow - 1);
          } else {
            selectedRow = innerHOT.getSelectedLast()[0];
            rowToSelect = selectedRow - 1;
          }
        }
        return action(rowToSelect, event);
      },
      preventDefault: false
      // Doesn't block default behaviour (navigation) for a `textArea` HTMLElement.
    }, {
      keys: [["ArrowDown"]],
      callback: (event) => {
        const innerHOT = this.htEditor;
        let rowToSelect;
        let selectedRow;
        if (!innerHOT.getSelectedLast() && !innerHOT.flipped) {
          rowToSelect = 0;
        } else if (innerHOT.getSelectedLast()) {
          if (innerHOT.flipped) {
            rowToSelect = innerHOT.getSelectedLast()[0] + 1;
          } else if (!innerHOT.flipped) {
            const lastRow = innerHOT.countRows() - 1;
            selectedRow = innerHOT.getSelectedLast()[0];
            rowToSelect = Math.min(lastRow, selectedRow + 1);
          }
        }
        return action(rowToSelect, event);
      },
      preventDefault: false
      // Doesn't block default behaviour (navigation) for a `textArea` HTMLElement.
    }], contextConfig);
  }
  /**
   * Unregister shortcuts responsible for handling editor.
   *
   * @private
   */
  unregisterShortcuts() {
    super.unregisterShortcuts();
    const shortcutManager = this.hot.getShortcutManager();
    const editorContext = shortcutManager.getContext("editor");
    editorContext.removeShortcutsByGroup(SHORTCUTS_GROUP);
  }
};

// node_modules/handsontable/editors/autocompleteEditor/autocompleteEditor.mjs
function _classPrivateMethodInitSpec(e, a) {
  _checkPrivateRedeclaration(e, a), a.add(e);
}
function _classPrivateFieldInitSpec(e, t, a) {
  _checkPrivateRedeclaration(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _classPrivateFieldGet(s, a) {
  return s.get(_assertClassBrand(s, a));
}
function _assertClassBrand(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var EDITOR_TYPE2 = "autocomplete";
var _idPrefix = /* @__PURE__ */ new WeakMap();
var _focusDebounced = /* @__PURE__ */ new WeakMap();
var _AutocompleteEditor_brand = /* @__PURE__ */ new WeakSet();
var AutocompleteEditor = class extends HandsontableEditor {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec(this, _AutocompleteEditor_brand);
    _defineProperty(this, "query", null);
    _defineProperty(this, "strippedChoices", []);
    _defineProperty(this, "rawChoices", []);
    _classPrivateFieldInitSpec(this, _idPrefix, this.hot.guid.slice(0, 9));
    _classPrivateFieldInitSpec(this, _focusDebounced, debounce(() => {
      this.focus();
    }, 100));
    _defineProperty(this, "sortByRelevance", function(value, choices, caseSensitive) {
      const choicesRelevance = [];
      const result = [];
      const valueLength = value.length;
      let choicesCount = choices.length;
      let charsLeft;
      let currentItem;
      let i;
      let valueIndex;
      if (valueLength === 0) {
        for (i = 0; i < choicesCount; i++) {
          result.push(i);
        }
        return result;
      }
      for (i = 0; i < choicesCount; i++) {
        currentItem = stripTags(stringify(choices[i]));
        if (caseSensitive) {
          valueIndex = currentItem.indexOf(value);
        } else {
          const locale = this.cellProperties.locale;
          valueIndex = currentItem.toLocaleLowerCase(locale).indexOf(value.toLocaleLowerCase(locale));
        }
        if (valueIndex !== -1) {
          charsLeft = currentItem.length - valueIndex - valueLength;
          choicesRelevance.push({
            baseIndex: i,
            index: valueIndex,
            charsLeft,
            value: currentItem
          });
        }
      }
      choicesRelevance.sort((a, b) => {
        if (b.index === -1) {
          return -1;
        }
        if (a.index === -1) {
          return 1;
        }
        if (a.index < b.index) {
          return -1;
        } else if (b.index < a.index) {
          return 1;
        } else if (a.index === b.index) {
          if (a.charsLeft < b.charsLeft) {
            return -1;
          } else if (a.charsLeft > b.charsLeft) {
            return 1;
          }
        }
        return 0;
      });
      for (i = 0, choicesCount = choicesRelevance.length; i < choicesCount; i++) {
        result.push(choicesRelevance[i].baseIndex);
      }
      return result;
    });
  }
  static get EDITOR_TYPE() {
    return EDITOR_TYPE2;
  }
  /**
   * Gets current value from editable element.
   *
   * @returns {string}
   */
  getValue() {
    const selectedValue = this.rawChoices.find((value) => {
      const strippedValue = this.stripValueIfNeeded(value);
      return strippedValue === this.TEXTAREA.value;
    });
    if (isDefined(selectedValue)) {
      return selectedValue;
    }
    return this.TEXTAREA.value;
  }
  /**
   * Creates an editor's elements and adds necessary CSS classnames.
   */
  createElements() {
    super.createElements();
    addClass(this.htContainer, "autocompleteEditor");
    addClass(this.htContainer, this.hot.rootWindow.navigator.platform.indexOf("Mac") === -1 ? "" : "htMacScroll");
    if (this.hot.getSettings().ariaTags) {
      setAttribute(this.TEXTAREA, [A11Y_TEXT(), A11Y_COMBOBOX(), A11Y_HASPOPUP("listbox"), A11Y_AUTOCOMPLETE()]);
    }
  }
  /**
   * Prepares editor's metadata and configuration of the internal Handsontable's instance.
   *
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).
   */
  prepare(row, col, prop, td, value, cellProperties) {
    super.prepare(row, col, prop, td, value, cellProperties);
    if (this.hot.getSettings().ariaTags) {
      setAttribute(this.TEXTAREA, [A11Y_EXPANDED("false"), A11Y_CONTROLS(`${_classPrivateFieldGet(_idPrefix, this)}-listbox-${row}-${col}`)]);
    }
  }
  /**
   * Opens the editor and adjust its size and internal Handsontable's instance.
   */
  open() {
    super.open();
    const trimDropdown = this.cellProperties.trimDropdown === void 0 ? true : this.cellProperties.trimDropdown;
    const rootInstanceAriaTagsEnabled = this.hot.getSettings().ariaTags;
    const sourceArray = Array.isArray(this.cellProperties.source) ? this.cellProperties.source : null;
    const sourceSize = sourceArray === null || sourceArray === void 0 ? void 0 : sourceArray.length;
    const {
      row: rowIndex,
      col: colIndex
    } = this;
    this.showEditableElement();
    this.focus();
    this.addHook("beforeKeyDown", (event) => this.onBeforeKeyDown(event));
    this.htEditor.addHook("afterScroll", _classPrivateFieldGet(_focusDebounced, this));
    this.htEditor.updateSettings({
      colWidths: trimDropdown ? [outerWidth(this.TEXTAREA) - 2] : void 0,
      autoColumnSize: true,
      renderer: (hotInstance, TD, row, col, prop, value, cellProperties) => {
        textRenderer(hotInstance, TD, row, col, prop, value, cellProperties);
        const {
          filteringCaseSensitive,
          allowHtml,
          locale
        } = this.cellProperties;
        const query = this.query;
        let cellValue = stringify(value);
        let indexOfMatch;
        let match;
        if (cellValue && !allowHtml) {
          indexOfMatch = filteringCaseSensitive === true ? cellValue.indexOf(query) : cellValue.toLocaleLowerCase(locale).indexOf(query.toLocaleLowerCase(locale));
          if (indexOfMatch !== -1) {
            match = cellValue.substr(indexOfMatch, query.length);
            cellValue = cellValue.replace(match, `<strong>${match}</strong>`);
          }
        }
        if (rootInstanceAriaTagsEnabled) {
          setAttribute(TD, [
            A11Y_OPTION(),
            // Add `setsize` and `posinset` only if the source is an array.
            ...sourceArray ? [A11Y_SETSIZE(sourceSize)] : [],
            ...sourceArray ? [A11Y_POSINSET(sourceArray.indexOf(value) + 1)] : [],
            ["id", `${this.htEditor.rootElement.id}_${row}-${col}`]
          ]);
        }
        TD.innerHTML = cellValue;
      },
      afterSelectionEnd: (startRow, startCol) => {
        if (rootInstanceAriaTagsEnabled) {
          const setA11yAttributes = (TD2) => {
            setAttribute(TD2, [A11Y_SELECTED()]);
            setAttribute(this.TEXTAREA, ...A11Y_ACTIVEDESCENDANT(TD2.id));
          };
          const TD = this.htEditor.getCell(startRow, startCol, true);
          if (TD !== null) {
            setA11yAttributes(TD);
          } else {
            this.htEditor.addHookOnce("afterScrollVertically", () => {
              const renderedTD = this.htEditor.getCell(startRow, startCol, true);
              setA11yAttributes(renderedTD);
            });
          }
        }
      }
    });
    if (rootInstanceAriaTagsEnabled) {
      setAttribute(this.htEditor.view._wt.wtOverlays.wtTable.TABLE, ...A11Y_PRESENTATION());
      setAttribute(this.htEditor.rootElement, [A11Y_LISTBOX(), A11Y_LIVE("polite"), A11Y_RELEVANT("text"), ["id", `${_classPrivateFieldGet(_idPrefix, this)}-listbox-${rowIndex}-${colIndex}`]]);
      setAttribute(this.TEXTAREA, ...A11Y_EXPANDED("true"));
    }
    this.hot._registerTimeout(() => {
      this.queryChoices(this.TEXTAREA.value);
    });
  }
  /**
   * Closes the editor.
   */
  close() {
    this.removeHooksByKey("beforeKeyDown");
    super.close();
    if (this.hot.getSettings().ariaTags) {
      setAttribute(this.TEXTAREA, [A11Y_EXPANDED("false")]);
    }
  }
  /**
   * Verifies result of validation or closes editor if user's cancelled changes.
   *
   * @param {boolean|undefined} result If `false` and the cell using allowInvalid option,
   *                                   then an editor won't be closed until validation is passed.
   */
  discardEditor(result) {
    super.discardEditor(result);
    this.hot.view.render();
  }
  /**
   * Prepares choices list based on applied argument.
   *
   * @private
   * @param {string} query The query.
   */
  queryChoices(query) {
    const source = this.cellProperties.source;
    this.query = query;
    if (typeof source === "function") {
      source.call(this.cellProperties, query, (choices) => {
        this.rawChoices = choices;
        this.updateChoicesList(this.stripValuesIfNeeded(choices));
      });
    } else if (Array.isArray(source)) {
      this.rawChoices = source;
      this.updateChoicesList(this.stripValuesIfNeeded(source));
    } else {
      this.updateChoicesList([]);
    }
  }
  /**
   * Updates list of the possible completions to choose.
   *
   * @private
   * @param {Array} choicesList The choices list to process.
   */
  updateChoicesList(choicesList) {
    const pos = getCaretPosition(this.TEXTAREA);
    const endPos = getSelectionEndPosition(this.TEXTAREA);
    const sortByRelevanceSetting = this.cellProperties.sortByRelevance;
    const filterSetting = this.cellProperties.filter;
    let orderByRelevance = null;
    let highlightIndex = null;
    let choices = choicesList;
    if (sortByRelevanceSetting) {
      orderByRelevance = this.sortByRelevance(this.stripValueIfNeeded(this.getValue()), choices, this.cellProperties.filteringCaseSensitive);
    }
    const orderByRelevanceLength = Array.isArray(orderByRelevance) ? orderByRelevance.length : 0;
    if (filterSetting === false) {
      if (orderByRelevanceLength) {
        highlightIndex = orderByRelevance[0];
      }
    } else {
      const sorted = [];
      for (let i = 0, choicesCount = choices.length; i < choicesCount; i++) {
        if (sortByRelevanceSetting && orderByRelevanceLength <= i) {
          break;
        }
        if (orderByRelevanceLength) {
          sorted.push(choices[orderByRelevance[i]]);
        } else {
          sorted.push(choices[i]);
        }
      }
      highlightIndex = 0;
      choices = sorted;
    }
    this.strippedChoices = choices;
    if (choices.length === 0) {
      this.htEditor.rootElement.style.display = "none";
    } else {
      this.htEditor.rootElement.style.display = "";
    }
    this.htEditor.loadData(pivot([choices]));
    if (choices.length > 0) {
      this.updateDropdownDimensions();
      this.flipDropdownIfNeeded();
      if (this.cellProperties.strict === true) {
        this.highlightBestMatchingChoice(highlightIndex);
      }
    }
    this.hot.listen();
    setCaretPosition(this.TEXTAREA, pos, pos === endPos ? void 0 : endPos);
  }
  /**
   * Checks where is enough place to open editor.
   *
   * @private
   * @returns {boolean}
   */
  flipDropdownIfNeeded() {
    const editorRect = this.getEditedCellRect();
    const editorHeight = editorRect.height;
    let spaceAbove = editorRect.top;
    if (this.hot.view.isVerticallyScrollableByWindow()) {
      const topOffset = this.hot.view.getTableOffset().top - this.hot.rootWindow.scrollY;
      spaceAbove = Math.max(spaceAbove + topOffset, 0);
    }
    const dropdownHeight = this.getHeight();
    const spaceBelow = this.hot.view.getWorkspaceHeight() - spaceAbove - editorHeight;
    const flipNeeded = dropdownHeight > spaceBelow && spaceAbove > spaceBelow + editorHeight;
    if (flipNeeded) {
      this.flipDropdown(dropdownHeight);
    } else {
      this.unflipDropdown();
    }
    this.limitDropdownIfNeeded(flipNeeded ? spaceAbove : spaceBelow, dropdownHeight);
    return flipNeeded;
  }
  /**
   * Checks if the internal table should generate scrollbar or could be rendered without it.
   *
   * @private
   * @param {number} spaceAvailable The free space as height defined in px available for dropdown list.
   * @param {number} dropdownHeight The dropdown height.
   */
  limitDropdownIfNeeded(spaceAvailable, dropdownHeight) {
    if (dropdownHeight > spaceAvailable) {
      let tempHeight = 0;
      let i = 0;
      let lastRowHeight = 0;
      let height = null;
      do {
        lastRowHeight = this.htEditor.getRowHeight(i) || this.htEditor.view.getDefaultRowHeight();
        tempHeight += lastRowHeight;
        i += 1;
      } while (tempHeight < spaceAvailable);
      height = tempHeight - lastRowHeight;
      if (this.htEditor.flipped) {
        this.htEditor.rootElement.style.top = `${parseInt(this.htEditor.rootElement.style.top, 10) + dropdownHeight - height}px`;
      }
      this.setDropdownHeight(tempHeight - lastRowHeight);
    }
  }
  /**
   * Configures editor to open it at the top.
   *
   * @private
   * @param {number} dropdownHeight The dropdown height.
   */
  flipDropdown(dropdownHeight) {
    const dropdownStyle = this.htEditor.rootElement.style;
    dropdownStyle.position = "absolute";
    dropdownStyle.top = `${-dropdownHeight}px`;
    this.htEditor.flipped = true;
  }
  /**
   * Configures editor to open it at the bottom.
   *
   * @private
   */
  unflipDropdown() {
    const dropdownStyle = this.htEditor.rootElement.style;
    dropdownStyle.position = "absolute";
    dropdownStyle.top = "";
    this.htEditor.flipped = void 0;
  }
  /**
   * Updates width and height of the internal Handsontable's instance.
   *
   * @private
   */
  updateDropdownDimensions() {
    this.htEditor.updateSettings({
      width: this.getWidth(),
      height: this.getHeight()
    });
    _assertClassBrand(_AutocompleteEditor_brand, this, _fixDropdownWidth).call(this);
    this.htEditor.view._wt.wtTable.alignOverlaysWithTrimmingContainer();
  }
  /**
   * Sets new height of the internal Handsontable's instance.
   *
   * @private
   * @param {number} height The new dropdown height.
   */
  setDropdownHeight(height) {
    this.htEditor.updateSettings({
      height
    });
    _assertClassBrand(_AutocompleteEditor_brand, this, _fixDropdownWidth).call(this);
    this.htEditor.view._wt.wtTable.alignOverlaysWithTrimmingContainer();
  }
  /**
   * Creates new selection on specified row index, or deselects selected cells.
   *
   * @private
   * @param {number|undefined} index The visual row index.
   */
  highlightBestMatchingChoice(index) {
    if (typeof index === "number") {
      this.htEditor.selectCell(index, 0, void 0, void 0, void 0, false);
    } else {
      this.htEditor.deselectCell();
    }
  }
  /**
   * Calculates and return the internal Handsontable's height.
   *
   * @private
   * @returns {number}
   */
  getHeight() {
    const containerStyle = this.hot.rootWindow.getComputedStyle(this.htContainer.querySelector(".htCore"));
    const borderVerticalCompensation = parseInt(containerStyle.borderTopWidth, 10) + parseInt(containerStyle.borderBottomWidth, 10);
    const maxItems = Math.min(this.cellProperties.visibleRows, this.strippedChoices.length);
    const height = Array.from({
      length: maxItems
    }, (_, i) => i).reduce((totalHeight, index) => {
      const rowHeight = this.htEditor.getRowHeight(index) || this.htEditor.view.getDefaultRowHeight();
      return totalHeight + rowHeight;
    }, 0);
    return height + borderVerticalCompensation + 1;
  }
  /**
   * Calculates and return the internal Handsontable's width.
   *
   * @private
   * @returns {number}
   */
  getWidth() {
    const containerStyle = this.hot.rootWindow.getComputedStyle(this.htContainer.querySelector(".htCore"));
    const borderHorizontalCompensation = parseInt(containerStyle.borderInlineStartWidth, 10) + parseInt(containerStyle.borderInlineEndWidth, 10);
    return this.htEditor.getColWidth(0) + borderHorizontalCompensation;
  }
  /**
   * Sanitizes value from potential dangerous tags.
   *
   * @private
   * @param {string} value The value to sanitize.
   * @returns {string}
   */
  stripValueIfNeeded(value) {
    return this.stripValuesIfNeeded([value])[0];
  }
  /**
   * Sanitizes an array of the values from potential dangerous tags.
   *
   * @private
   * @param {string[]} values The value to sanitize.
   * @returns {string[]}
   */
  stripValuesIfNeeded(values) {
    const {
      allowHtml
    } = this.cellProperties;
    const stringifiedValues = arrayMap(values, (value) => stringify(value));
    const strippedValues = arrayMap(stringifiedValues, (value) => allowHtml ? value : stripTags(value));
    return strippedValues;
  }
  /**
   * Captures use of arrow down and up to control their behaviour.
   *
   * @private
   * @param {number} keyCode The keyboard keycode.
   * @returns {boolean}
   */
  allowKeyEventPropagation(keyCode) {
    const selectedRange = this.htEditor.getSelectedRangeLast();
    const selected = {
      row: selectedRange ? selectedRange.from.row : -1
    };
    let allowed = false;
    if (keyCode === KEY_CODES.ARROW_DOWN && selected.row > 0 && selected.row < this.htEditor.countRows() - 1) {
      allowed = true;
    }
    if (keyCode === KEY_CODES.ARROW_UP && selected.row > -1) {
      allowed = true;
    }
    return allowed;
  }
  /**
   * OnBeforeKeyDown callback.
   *
   * @private
   * @param {KeyboardEvent} event The keyboard event object.
   */
  onBeforeKeyDown(event) {
    if (isPrintableChar(event.keyCode) || event.keyCode === KEY_CODES.BACKSPACE || event.keyCode === KEY_CODES.DELETE || event.keyCode === KEY_CODES.INSERT) {
      let timeOffset = 10;
      if (event.keyCode === KEY_CODES.C && (event.ctrlKey || event.metaKey)) {
        return;
      }
      if (!this.isOpened()) {
        timeOffset += 10;
      }
      if (this.htEditor) {
        this.hot._registerTimeout(() => {
          this.queryChoices(this.TEXTAREA.value);
        }, timeOffset);
      }
    }
  }
};
function _fixDropdownWidth() {
  if (this.htEditor.view.hasVerticalScroll()) {
    this.htEditor.updateSettings({
      width: this.getWidth() + getScrollbarWidth(this.hot.rootDocument)
    });
  }
}

// node_modules/handsontable/editors/checkboxEditor/checkboxEditor.mjs
var EDITOR_TYPE3 = "checkbox";
var CheckboxEditor = class extends BaseEditor {
  static get EDITOR_TYPE() {
    return EDITOR_TYPE3;
  }
  beginEditing(initialValue, event) {
    if (event && event.type === "mouseup" && event.target.nodeName === "TD") {
      const checkbox = this.TD.querySelector('input[type="checkbox"]');
      if (!hasClass(checkbox, "htBadValue")) {
        checkbox.click();
      }
    }
  }
  finishEditing() {
  }
  init() {
  }
  open() {
  }
  close() {
  }
  getValue() {
  }
  setValue() {
  }
  focus() {
  }
};

// node_modules/@handsontable/pikaday/pikaday.mjs
var getWindow = () => window;
var getDocument = () => window.document;
var sto = (fn, delay) => window.setTimeout(fn, delay);
var addEvent = function(el, e, callback, capture) {
  el.addEventListener(e, callback, !!capture);
};
var removeEvent = function(el, e, callback, capture) {
  el.removeEventListener(e, callback, !!capture);
};
var trim = function(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
};
var hasClass2 = function(el, cn) {
  return (" " + el.className + " ").indexOf(" " + cn + " ") !== -1;
};
var addClass2 = function(el, cn) {
  if (!hasClass2(el, cn)) {
    el.className = el.className === "" ? cn : el.className + " " + cn;
  }
};
var removeClass2 = function(el, cn) {
  el.className = trim((" " + el.className + " ").replace(" " + cn + " ", " "));
};
var isArray = function(obj) {
  return /Array/.test(Object.prototype.toString.call(obj));
};
var isDate = function(obj) {
  return /Date/.test(Object.prototype.toString.call(obj)) && !isNaN(obj.getTime());
};
var isWeekend = function(date) {
  let day = date.getDay();
  return day === 0 || day === 6;
};
var isLeapYear = function(year) {
  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
};
var getDaysInMonth = function(year, month) {
  return [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
};
var setToStartOfDay = function(date) {
  if (isDate(date)) {
    date.setHours(0, 0, 0, 0);
  }
};
var compareDates = function(a, b) {
  return a.getTime() === b.getTime();
};
var extend2 = function(to, from, overwrite) {
  let prop, hasProp;
  for (prop in from) {
    hasProp = to[prop] !== void 0;
    if (hasProp && typeof from[prop] === "object" && from[prop] !== null && from[prop].nodeName === void 0) {
      if (isDate(from[prop])) {
        if (overwrite) {
          to[prop] = new Date(from[prop].getTime());
        }
      } else if (isArray(from[prop])) {
        if (overwrite) {
          to[prop] = from[prop].slice(0);
        }
      } else {
        to[prop] = extend2({}, from[prop], overwrite);
      }
    } else if (overwrite || !hasProp) {
      to[prop] = from[prop];
    }
  }
  return to;
};
var fireEvent = function(el, eventName, data) {
  let ev = getDocument().createEvent("HTMLEvents");
  ev.initEvent(eventName, true, false);
  ev = extend2(ev, data);
  el.dispatchEvent(ev);
};
var adjustCalendar = function(calendar) {
  if (calendar.month < 0) {
    calendar.year -= Math.ceil(Math.abs(calendar.month) / 12);
    calendar.month += 12;
  }
  if (calendar.month > 11) {
    calendar.year += Math.floor(Math.abs(calendar.month) / 12);
    calendar.month -= 12;
  }
  return calendar;
};
var defaults = {
  // bind the picker to a form field
  field: null,
  // automatically show/hide the picker on `field` focus (default `true` if `field` is set)
  bound: void 0,
  // data-attribute on the input field with an aria assistance text (only applied when `bound` is set)
  ariaLabel: "Use the arrow keys to pick a date",
  // position of the datepicker, relative to the field (default to bottom & left)
  // ('bottom' & 'left' keywords are not used, 'top' & 'right' are modifier on the bottom/left position)
  position: "bottom left",
  // automatically fit in the viewport even if it means repositioning from the position option
  reposition: true,
  // the default output format for `.toString()` and `field` value
  format: "YYYY-MM-DD",
  // the toString function which gets passed a current date object and format
  // and returns a string
  toString: null,
  // used to create date object from current input string
  parse: null,
  // the initial date to view when first opened
  defaultDate: null,
  // make the `defaultDate` the initial selected value
  setDefaultDate: false,
  // first day of week (0: Sunday, 1: Monday etc)
  firstDay: 0,
  // minimum number of days in the week that gets week number one
  // default ISO 8601, week 01 is the week with the first Thursday (4)
  firstWeekOfYearMinDays: 4,
  // the default flag for moment's strict date parsing
  formatStrict: false,
  // the minimum/earliest date that can be selected
  minDate: null,
  // the maximum/latest date that can be selected
  maxDate: null,
  // number of years either side, or array of upper/lower range
  yearRange: 10,
  // show week numbers at head of row
  showWeekNumber: false,
  // Week picker mode
  pickWholeWeek: false,
  // used internally (don't config outside)
  minYear: 0,
  maxYear: 9999,
  minMonth: void 0,
  maxMonth: void 0,
  startRange: null,
  endRange: null,
  isRTL: false,
  // Additional text to append to the year in the calendar title
  yearSuffix: "",
  // Render the month after year in the calendar title
  showMonthAfterYear: false,
  // Render days of the calendar grid that fall in the next or previous month
  showDaysInNextAndPreviousMonths: false,
  // Allows user to select days that fall in the next or previous month
  enableSelectionDaysInNextAndPreviousMonths: false,
  // how many months are visible
  numberOfMonths: 1,
  // when numberOfMonths is used, this will help you to choose where the main calendar will be (default `left`, can be set to `right`)
  // only used for the first display or when a selected date is not visible
  mainCalendar: "left",
  // Specify a DOM element to render the calendar in
  container: void 0,
  // Blur field when date is selected
  blurFieldOnSelect: true,
  // internationalization
  i18n: {
    previousMonth: "Previous Month",
    nextMonth: "Next Month",
    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    weekdays: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    weekdaysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
  },
  // Theme Classname
  theme: null,
  // events array
  events: [],
  // callback function
  onSelect: null,
  onOpen: null,
  onClose: null,
  onDraw: null,
  // Enable keyboard input
  keyboardInput: true
};
var renderDayName = function(opts, day, abbr) {
  day += opts.firstDay;
  while (day >= 7) {
    day -= 7;
  }
  return abbr ? opts.i18n.weekdaysShort[day] : opts.i18n.weekdays[day];
};
var renderDay = function(opts) {
  let arr = [];
  let ariaSelected = "false";
  if (opts.isEmpty) {
    if (opts.showDaysInNextAndPreviousMonths) {
      arr.push("is-outside-current-month");
      if (!opts.enableSelectionDaysInNextAndPreviousMonths) {
        arr.push("is-selection-disabled");
      }
    } else {
      return '<td class="is-empty"></td>';
    }
  }
  if (opts.isDisabled) {
    arr.push("is-disabled");
  }
  if (opts.isToday) {
    arr.push("is-today");
  }
  if (opts.isSelected) {
    arr.push("is-selected");
    ariaSelected = "true";
  }
  if (opts.hasEvent) {
    arr.push("has-event");
  }
  if (opts.isInRange) {
    arr.push("is-inrange");
  }
  if (opts.isStartRange) {
    arr.push("is-startrange");
  }
  if (opts.isEndRange) {
    arr.push("is-endrange");
  }
  return '<td data-day="' + opts.day + '" class="' + arr.join(" ") + '" aria-selected="' + ariaSelected + '"><button class="pika-button pika-day" type="button" data-pika-year="' + opts.year + '" data-pika-month="' + opts.month + '" data-pika-day="' + opts.day + '">' + opts.day + "</button></td>";
};
var isoWeek = function(date, firstWeekOfYearMinDays) {
  date.setHours(0, 0, 0, 0);
  let yearDay = date.getDate(), weekDay = date.getDay(), dayInFirstWeek = firstWeekOfYearMinDays, dayShift = dayInFirstWeek - 1, daysPerWeek = 7, prevWeekDay = function(day) {
    return (day + daysPerWeek - 1) % daysPerWeek;
  };
  date.setDate(yearDay + dayShift - prevWeekDay(weekDay));
  let jan4th = new Date(date.getFullYear(), 0, dayInFirstWeek), msPerDay = 24 * 60 * 60 * 1e3, daysBetween = (date.getTime() - jan4th.getTime()) / msPerDay, weekNum = 1 + Math.round((daysBetween - dayShift + prevWeekDay(jan4th.getDay())) / daysPerWeek);
  return weekNum;
};
var renderWeek = function(pikaday, d, m, y, firstWeekOfYearMinDays) {
  let date = new Date(y, m, d), week = pikaday.hasMoment ? pikaday.moment(date).isoWeek() : isoWeek(date, firstWeekOfYearMinDays);
  return '<td class="pika-week">' + week + "</td>";
};
var renderRow = function(days, isRTL, pickWholeWeek, isRowSelected) {
  return '<tr class="pika-row' + (pickWholeWeek ? " pick-whole-week" : "") + (isRowSelected ? " is-selected" : "") + '">' + (isRTL ? days.reverse() : days).join("") + "</tr>";
};
var renderBody = function(rows) {
  return "<tbody>" + rows.join("") + "</tbody>";
};
var renderHead = function(opts) {
  let i, arr = [];
  if (opts.showWeekNumber) {
    arr.push("<th></th>");
  }
  for (i = 0; i < 7; i++) {
    arr.push('<th scope="col"><abbr title="' + renderDayName(opts, i) + '">' + renderDayName(opts, i, true) + "</abbr></th>");
  }
  return "<thead><tr>" + (opts.isRTL ? arr.reverse() : arr).join("") + "</tr></thead>";
};
var renderTitle = function(instance, c, year, month, refYear, randId) {
  let i, j, arr, opts = instance._o, isMinYear = year === opts.minYear, isMaxYear = year === opts.maxYear, html = '<div id="' + randId + '" class="pika-title" role="heading" aria-live="polite">', monthHtml, yearHtml, prev = true, next = true;
  for (arr = [], i = 0; i < 12; i++) {
    arr.push('<option value="' + (year === refYear ? i - c : 12 + i - c) + '"' + (i === month ? ' selected="selected"' : "") + (isMinYear && i < opts.minMonth || isMaxYear && i > opts.maxMonth ? ' disabled="disabled"' : "") + ">" + opts.i18n.months[i] + "</option>");
  }
  monthHtml = '<div class="pika-label">' + opts.i18n.months[month] + '<select class="pika-select pika-select-month" tabindex="-1">' + arr.join("") + "</select></div>";
  if (isArray(opts.yearRange)) {
    i = opts.yearRange[0];
    j = opts.yearRange[1] + 1;
  } else {
    i = year - opts.yearRange;
    j = 1 + year + opts.yearRange;
  }
  for (arr = []; i < j && i <= opts.maxYear; i++) {
    if (i >= opts.minYear) {
      arr.push('<option value="' + i + '"' + (i === year ? ' selected="selected"' : "") + ">" + i + "</option>");
    }
  }
  yearHtml = '<div class="pika-label">' + year + opts.yearSuffix + '<select class="pika-select pika-select-year" tabindex="-1">' + arr.join("") + "</select></div>";
  if (opts.showMonthAfterYear) {
    html += yearHtml + monthHtml;
  } else {
    html += monthHtml + yearHtml;
  }
  if (isMinYear && (month === 0 || opts.minMonth >= month)) {
    prev = false;
  }
  if (isMaxYear && (month === 11 || opts.maxMonth <= month)) {
    next = false;
  }
  if (c === 0) {
    html += '<button class="pika-prev' + (prev ? "" : " is-disabled") + '" type="button">' + opts.i18n.previousMonth + "</button>";
  }
  if (c === instance._o.numberOfMonths - 1) {
    html += '<button class="pika-next' + (next ? "" : " is-disabled") + '" type="button">' + opts.i18n.nextMonth + "</button>";
  }
  return html += "</div>";
};
var renderTable = function(opts, data, randId) {
  return '<table cellpadding="0" cellspacing="0" class="pika-table" role="grid" aria-labelledby="' + randId + '">' + renderHead(opts) + renderBody(data) + "</table>";
};
function Pikaday(options) {
  let self2 = this, opts = self2.config(options);
  self2._onMouseDown = function(e) {
    if (!self2._v) {
      return;
    }
    e = e || getWindow().event;
    let target = e.target || e.srcElement;
    if (!target) {
      return;
    }
    if (!hasClass2(target, "is-disabled")) {
      if (hasClass2(target, "pika-button") && !hasClass2(target, "is-empty") && !hasClass2(target.parentNode, "is-disabled")) {
        self2.setDate(
          new Date(
            target.getAttribute("data-pika-year"),
            target.getAttribute("data-pika-month"),
            target.getAttribute("data-pika-day")
          )
        );
        if (opts.bound) {
          sto(function() {
            self2.hide();
            if (opts.blurFieldOnSelect && opts.field) {
              opts.field.blur();
            }
          }, 100);
        }
      } else if (hasClass2(target, "pika-prev")) {
        self2.prevMonth();
      } else if (hasClass2(target, "pika-next")) {
        self2.nextMonth();
      }
    }
    if (!hasClass2(target, "pika-select")) {
      if (e.preventDefault) {
        e.preventDefault();
      } else {
        e.returnValue = false;
        return false;
      }
    } else {
      self2._c = true;
    }
  };
  self2._onChange = function(e) {
    e = e || getWindow().event;
    let target = e.target || e.srcElement;
    if (!target) {
      return;
    }
    if (hasClass2(target, "pika-select-month")) {
      self2.gotoMonth(target.value);
    } else if (hasClass2(target, "pika-select-year")) {
      self2.gotoYear(target.value);
    }
  };
  self2._onKeyChange = function(e) {
    e = e || getWindow().event;
    if (self2.isVisible()) {
      switch (e.keyCode) {
        case 13:
        case 27:
          if (opts.field) {
            opts.field.blur();
          }
          break;
        case 37:
          self2.adjustDate("subtract", 1);
          break;
        case 38:
          self2.adjustDate("subtract", 7);
          break;
        case 39:
          self2.adjustDate("add", 1);
          break;
        case 40:
          self2.adjustDate("add", 7);
          break;
        case 8:
        case 46:
          self2.setDate(null);
          break;
      }
    }
  };
  self2._parseFieldValue = function() {
    if (opts.parse) {
      return opts.parse(opts.field.value, opts.format);
    } else if (this.hasMoment) {
      let date = this.moment(
        opts.field.value,
        opts.format,
        opts.formatStrict
      );
      return date && date.isValid() ? date.toDate() : null;
    } else {
      return new Date(Date.parse(opts.field.value));
    }
  };
  self2._onInputChange = function(e) {
    let date;
    if (e.firedBy === self2) {
      return;
    }
    date = self2._parseFieldValue();
    if (isDate(date)) {
      self2.setDate(date);
    }
    if (!self2._v) {
      self2.show();
    }
  };
  self2._onInputFocus = function() {
    self2.show();
  };
  self2._onInputClick = function() {
    self2.show();
  };
  self2._onInputBlur = function() {
    let pEl = getDocument().activeElement;
    do {
      if (hasClass2(pEl, "pika-single")) {
        return;
      }
    } while (pEl = pEl.parentNode);
    if (!self2._c) {
      self2._b = sto(function() {
        self2.hide();
      }, 50);
    }
    self2._c = false;
  };
  self2._onClick = function(e) {
    e = e || getWindow().event;
    let target = e.target || e.srcElement, pEl = target;
    if (!target) {
      return;
    }
    if (!hasEventListeners && hasClass2(target, "pika-select")) {
      if (!target.onchange) {
        target.setAttribute("onchange", "return;");
        addEvent(target, "change", self2._onChange);
      }
    }
    do {
      if (hasClass2(pEl, "pika-single") || pEl === opts.trigger) {
        return;
      }
    } while (pEl = pEl.parentNode);
    if (self2._v && target !== opts.trigger && pEl !== opts.trigger) {
      self2.hide();
    }
  };
  self2.el = getDocument().createElement("div");
  self2.el.className = "pika-single" + (opts.isRTL ? " is-rtl" : "") + (opts.theme ? " " + opts.theme : "");
  addEvent(self2.el, "mousedown", self2._onMouseDown, true);
  addEvent(self2.el, "touchend", self2._onMouseDown, true);
  addEvent(self2.el, "change", self2._onChange);
  if (opts.keyboardInput) {
    addEvent(getDocument(), "keydown", self2._onKeyChange);
  }
  if (opts.field) {
    if (opts.container) {
      opts.container.appendChild(self2.el);
    } else if (opts.bound) {
      getDocument().body.appendChild(self2.el);
    } else {
      opts.field.parentNode.insertBefore(
        self2.el,
        opts.field.nextSibling
      );
    }
    addEvent(opts.field, "change", self2._onInputChange);
    if (!opts.defaultDate) {
      opts.defaultDate = self2._parseFieldValue();
      opts.setDefaultDate = true;
    }
  }
  let defDate = opts.defaultDate;
  if (isDate(defDate)) {
    if (opts.setDefaultDate) {
      self2.setDate(defDate, true);
    } else {
      self2.gotoDate(defDate);
    }
  } else {
    self2.gotoDate(/* @__PURE__ */ new Date());
  }
  if (opts.bound) {
    this.hide();
    self2.el.className += " is-bound";
    addEvent(opts.trigger, "click", self2._onInputClick);
    addEvent(opts.trigger, "focus", self2._onInputFocus);
    addEvent(opts.trigger, "blur", self2._onInputBlur);
  } else {
    this.show();
  }
}
Pikaday.prototype = {
  /**
   * configure functionality
   */
  config: function(options) {
    if (!this._o) {
      this._o = extend2({}, defaults, true);
    }
    let opts = extend2(this._o, options, true);
    opts.isRTL = !!opts.isRTL;
    opts.field = opts.field && opts.field.nodeName ? opts.field : null;
    opts.theme = typeof opts.theme === "string" && opts.theme ? opts.theme : null;
    opts.bound = !!(opts.bound !== void 0 ? opts.field && opts.bound : opts.field);
    opts.trigger = opts.trigger && opts.trigger.nodeName ? opts.trigger : opts.field;
    opts.disableWeekends = !!opts.disableWeekends;
    opts.disableDayFn = typeof opts.disableDayFn === "function" ? opts.disableDayFn : null;
    let nom = parseInt(opts.numberOfMonths, 10) || 1;
    opts.numberOfMonths = nom > 4 ? 4 : nom;
    if (!isDate(opts.minDate)) {
      opts.minDate = false;
    }
    if (!isDate(opts.maxDate)) {
      opts.maxDate = false;
    }
    if (opts.minDate && opts.maxDate && opts.maxDate < opts.minDate) {
      opts.maxDate = opts.minDate = false;
    }
    if (opts.minDate) {
      this.setMinDate(opts.minDate);
    }
    if (opts.maxDate) {
      this.setMaxDate(opts.maxDate);
    }
    if (isArray(opts.yearRange)) {
      let fallback = (/* @__PURE__ */ new Date()).getFullYear() - 10;
      opts.yearRange[0] = parseInt(opts.yearRange[0], 10) || fallback;
      opts.yearRange[1] = parseInt(opts.yearRange[1], 10) || fallback;
    } else {
      opts.yearRange = Math.abs(parseInt(opts.yearRange, 10)) || defaults.yearRange;
      if (opts.yearRange > 100) {
        opts.yearRange = 100;
      }
    }
    return opts;
  },
  /**
   * return a formatted string of the current selection (using Moment.js if available)
   */
  toString: function(format2) {
    format2 = format2 || this._o.format;
    if (!isDate(this._d)) {
      return "";
    }
    if (this._o.toString) {
      return this._o.toString(this._d, format2);
    }
    if (this.hasMoment) {
      return this.moment(this._d).format(format2);
    }
    return this._d.toDateString();
  },
  /**
   * return a Moment.js object of the current selection (if available)
   */
  getMoment: function() {
    return this.hasMoment ? this.moment(this._d) : null;
  },
  /**
   * set the current selection from a Moment.js object (if available)
   */
  setMoment: function(date, preventOnSelect) {
    if (this.hasMoment && this.moment.isMoment(date)) {
      this.setDate(date.toDate(), preventOnSelect);
    }
  },
  /**
   * Sets the momentjs function as dependency to parse and format the dates
   */
  useMoment: function(momentFunction) {
    this.hasMoment = true;
    this.moment = momentFunction;
  },
  /**
   * return a Date object of the current selection
   */
  getDate: function() {
    return isDate(this._d) ? new Date(this._d.getTime()) : null;
  },
  /**
   * set the current selection
   */
  setDate: function(date, preventOnSelect) {
    if (!date) {
      this._d = null;
      if (this._o.field) {
        this._o.field.value = "";
        fireEvent(this._o.field, "change", { firedBy: this });
      }
      return this.draw();
    }
    if (typeof date === "string") {
      date = new Date(Date.parse(date));
    }
    if (!isDate(date)) {
      return;
    }
    let min = this._o.minDate, max = this._o.maxDate;
    if (isDate(min) && date < min) {
      date = min;
    } else if (isDate(max) && date > max) {
      date = max;
    }
    this._d = new Date(date.getTime());
    setToStartOfDay(this._d);
    this.gotoDate(this._d);
    if (this._o.field) {
      this._o.field.value = this.toString();
      fireEvent(this._o.field, "change", { firedBy: this });
    }
    if (!preventOnSelect && typeof this._o.onSelect === "function") {
      this._o.onSelect.call(this, this.getDate());
    }
  },
  /**
   * clear and reset the date
   */
  clear: function() {
    this.setDate(null);
  },
  /**
   * change view to a specific date
   */
  gotoDate: function(date) {
    let newCalendar = true;
    if (!isDate(date)) {
      return;
    }
    if (this.calendars) {
      let firstVisibleDate = new Date(this.calendars[0].year, this.calendars[0].month, 1), lastVisibleDate = new Date(this.calendars[this.calendars.length - 1].year, this.calendars[this.calendars.length - 1].month, 1), visibleDate = date.getTime();
      lastVisibleDate.setMonth(lastVisibleDate.getMonth() + 1);
      lastVisibleDate.setDate(lastVisibleDate.getDate() - 1);
      newCalendar = visibleDate < firstVisibleDate.getTime() || lastVisibleDate.getTime() < visibleDate;
    }
    if (newCalendar) {
      this.calendars = [{
        month: date.getMonth(),
        year: date.getFullYear()
      }];
      if (this._o.mainCalendar === "right") {
        this.calendars[0].month += 1 - this._o.numberOfMonths;
      }
    }
    this.adjustCalendars();
  },
  adjustDate: function(sign, days) {
    let day = this.getDate() || /* @__PURE__ */ new Date();
    let difference2 = parseInt(days) * 24 * 60 * 60 * 1e3;
    let newDay;
    if (sign === "add") {
      newDay = new Date(day.valueOf() + difference2);
    } else if (sign === "subtract") {
      newDay = new Date(day.valueOf() - difference2);
    }
    this.setDate(newDay);
  },
  adjustCalendars: function() {
    this.calendars[0] = adjustCalendar(this.calendars[0]);
    for (let c = 1; c < this._o.numberOfMonths; c++) {
      this.calendars[c] = adjustCalendar({
        month: this.calendars[0].month + c,
        year: this.calendars[0].year
      });
    }
    this.draw();
  },
  gotoToday: function() {
    this.gotoDate(/* @__PURE__ */ new Date());
  },
  /**
   * change view to a specific month (zero-index, e.g. 0: January)
   */
  gotoMonth: function(month) {
    if (!isNaN(month)) {
      this.calendars[0].month = parseInt(month, 10);
      this.adjustCalendars();
    }
  },
  nextMonth: function() {
    this.calendars[0].month++;
    this.adjustCalendars();
  },
  prevMonth: function() {
    this.calendars[0].month--;
    this.adjustCalendars();
  },
  /**
   * change view to a specific full year (e.g. "2012")
   */
  gotoYear: function(year) {
    if (!isNaN(year)) {
      this.calendars[0].year = parseInt(year, 10);
      this.adjustCalendars();
    }
  },
  /**
   * change the minDate
   */
  setMinDate: function(value) {
    if (value instanceof Date) {
      setToStartOfDay(value);
      this._o.minDate = value;
      this._o.minYear = value.getFullYear();
      this._o.minMonth = value.getMonth();
    } else {
      this._o.minDate = defaults.minDate;
      this._o.minYear = defaults.minYear;
      this._o.minMonth = defaults.minMonth;
      this._o.startRange = defaults.startRange;
    }
    this.draw();
  },
  /**
   * change the maxDate
   */
  setMaxDate: function(value) {
    if (value instanceof Date) {
      setToStartOfDay(value);
      this._o.maxDate = value;
      this._o.maxYear = value.getFullYear();
      this._o.maxMonth = value.getMonth();
    } else {
      this._o.maxDate = defaults.maxDate;
      this._o.maxYear = defaults.maxYear;
      this._o.maxMonth = defaults.maxMonth;
      this._o.endRange = defaults.endRange;
    }
    this.draw();
  },
  setStartRange: function(value) {
    this._o.startRange = value;
  },
  setEndRange: function(value) {
    this._o.endRange = value;
  },
  /**
   * refresh the HTML
   */
  draw: function(force) {
    if (!this._v && !force) {
      return;
    }
    let opts = this._o, minYear = opts.minYear, maxYear = opts.maxYear, minMonth = opts.minMonth, maxMonth = opts.maxMonth, html = "", randId;
    if (this._y <= minYear) {
      this._y = minYear;
      if (!isNaN(minMonth) && this._m < minMonth) {
        this._m = minMonth;
      }
    }
    if (this._y >= maxYear) {
      this._y = maxYear;
      if (!isNaN(maxMonth) && this._m > maxMonth) {
        this._m = maxMonth;
      }
    }
    for (let c = 0; c < opts.numberOfMonths; c++) {
      randId = "pika-title-" + Math.random().toString(36).replace(/[^a-z]+/g, "").substr(0, 2);
      html += '<div class="pika-lendar">' + renderTitle(this, c, this.calendars[c].year, this.calendars[c].month, this.calendars[0].year, randId) + this.render(this.calendars[c].year, this.calendars[c].month, randId) + "</div>";
    }
    this.el.innerHTML = html;
    if (opts.bound) {
      if (opts.field.type !== "hidden") {
        sto(function() {
          opts.trigger.focus();
        }, 1);
      }
    }
    if (typeof this._o.onDraw === "function") {
      this._o.onDraw(this);
    }
    if (opts.bound) {
      opts.field.setAttribute("aria-label", opts.ariaLabel);
    }
  },
  adjustPosition: function() {
    let field, width, height, viewportWidth, viewportHeight, scrollTop, left2, top2, clientRect, leftAligned, bottomAligned;
    if (this._o.container) {
      return;
    }
    this.el.style.position = "absolute";
    field = this._o.trigger;
    width = this.el.offsetWidth;
    height = this.el.offsetHeight;
    viewportWidth = getWindow().innerWidth || getDocument().documentElement.clientWidth;
    viewportHeight = getWindow().innerHeight || getDocument().documentElement.clientHeight;
    scrollTop = getDocument().body.scrollTop || getDocument().documentElement.scrollTop;
    leftAligned = true;
    bottomAligned = true;
    clientRect = field.getBoundingClientRect();
    left2 = clientRect.left + getWindow().pageXOffset;
    top2 = clientRect.bottom + getWindow().pageYOffset;
    if (this._o.reposition && left2 + width > viewportWidth || this._o.position.indexOf("right") > -1 && left2 - width + field.offsetWidth > 0) {
      left2 = left2 - width + field.offsetWidth;
      leftAligned = false;
    }
    if (this._o.reposition && top2 + height > viewportHeight + scrollTop || this._o.position.indexOf("top") > -1 && top2 - height - field.offsetHeight > 0) {
      top2 = top2 - height - field.offsetHeight;
      bottomAligned = false;
    }
    if (left2 < 0) {
      left2 = 0;
    }
    if (top2 < 0) {
      top2 = 0;
    }
    this.el.style.left = left2 + "px";
    this.el.style.top = top2 + "px";
    addClass2(this.el, leftAligned ? "left-aligned" : "right-aligned");
    addClass2(this.el, bottomAligned ? "bottom-aligned" : "top-aligned");
    removeClass2(this.el, !leftAligned ? "left-aligned" : "right-aligned");
    removeClass2(this.el, !bottomAligned ? "bottom-aligned" : "top-aligned");
  },
  /**
   * render HTML for a particular month
   */
  render: function(year, month, randId) {
    let opts = this._o, now = /* @__PURE__ */ new Date(), days = getDaysInMonth(year, month), before = new Date(year, month, 1).getDay(), data = [], row = [];
    setToStartOfDay(now);
    if (opts.firstDay > 0) {
      before -= opts.firstDay;
      if (before < 0) {
        before += 7;
      }
    }
    let previousMonth = month === 0 ? 11 : month - 1, nextMonth = month === 11 ? 0 : month + 1, yearOfPreviousMonth = month === 0 ? year - 1 : year, yearOfNextMonth = month === 11 ? year + 1 : year, daysInPreviousMonth = getDaysInMonth(yearOfPreviousMonth, previousMonth);
    let cells = days + before, after = cells;
    while (after > 7) {
      after -= 7;
    }
    cells += 7 - after;
    let isWeekSelected = false;
    for (let i = 0, r = 0; i < cells; i++) {
      let day = new Date(year, month, 1 + (i - before)), isSelected = isDate(this._d) ? compareDates(day, this._d) : false, isToday = compareDates(day, now), hasEvent = opts.events.indexOf(day.toDateString()) !== -1 ? true : false, isEmpty2 = i < before || i >= days + before, dayNumber = 1 + (i - before), monthNumber = month, yearNumber = year, isStartRange = opts.startRange && compareDates(opts.startRange, day), isEndRange = opts.endRange && compareDates(opts.endRange, day), isInRange = opts.startRange && opts.endRange && opts.startRange < day && day < opts.endRange, isDisabled2 = opts.minDate && day < opts.minDate || opts.maxDate && day > opts.maxDate || opts.disableWeekends && isWeekend(day) || opts.disableDayFn && opts.disableDayFn(day);
      if (isEmpty2) {
        if (i < before) {
          dayNumber = daysInPreviousMonth + dayNumber;
          monthNumber = previousMonth;
          yearNumber = yearOfPreviousMonth;
        } else {
          dayNumber = dayNumber - days;
          monthNumber = nextMonth;
          yearNumber = yearOfNextMonth;
        }
      }
      let dayConfig = {
        day: dayNumber,
        month: monthNumber,
        year: yearNumber,
        hasEvent,
        isSelected,
        isToday,
        isDisabled: isDisabled2,
        isEmpty: isEmpty2,
        isStartRange,
        isEndRange,
        isInRange,
        showDaysInNextAndPreviousMonths: opts.showDaysInNextAndPreviousMonths,
        enableSelectionDaysInNextAndPreviousMonths: opts.enableSelectionDaysInNextAndPreviousMonths
      };
      if (opts.pickWholeWeek && isSelected) {
        isWeekSelected = true;
      }
      row.push(renderDay(dayConfig));
      if (++r === 7) {
        if (opts.showWeekNumber) {
          row.unshift(renderWeek(this, i - before, month, year, opts.firstWeekOfYearMinDays));
        }
        data.push(renderRow(row, opts.isRTL, opts.pickWholeWeek, isWeekSelected));
        row = [];
        r = 0;
        isWeekSelected = false;
      }
    }
    return renderTable(opts, data, randId);
  },
  isVisible: function() {
    return this._v;
  },
  show: function() {
    if (!this.isVisible()) {
      this._v = true;
      this.draw();
      removeClass2(this.el, "is-hidden");
      if (this._o.bound) {
        addEvent(getDocument(), "click", this._onClick);
        this.adjustPosition();
      }
      if (typeof this._o.onOpen === "function") {
        this._o.onOpen.call(this);
      }
    }
  },
  hide: function() {
    let v = this._v;
    if (v !== false) {
      if (this._o.bound) {
        removeEvent(getDocument(), "click", this._onClick);
      }
      if (!this._o.container) {
        this.el.style.position = "static";
        this.el.style.left = "auto";
        this.el.style.top = "auto";
      }
      addClass2(this.el, "is-hidden");
      this._v = false;
      if (v !== void 0 && typeof this._o.onClose === "function") {
        this._o.onClose.call(this);
      }
    }
  },
  /**
   * GAME OVER
   */
  destroy: function() {
    let opts = this._o;
    this.hide();
    removeEvent(this.el, "mousedown", this._onMouseDown, true);
    removeEvent(this.el, "touchend", this._onMouseDown, true);
    removeEvent(this.el, "change", this._onChange);
    if (opts.keyboardInput) {
      removeEvent(getDocument(), "keydown", this._onKeyChange);
    }
    if (opts.field) {
      removeEvent(opts.field, "change", this._onInputChange);
      if (opts.bound) {
        removeEvent(opts.trigger, "click", this._onInputClick);
        removeEvent(opts.trigger, "focus", this._onInputFocus);
        removeEvent(opts.trigger, "blur", this._onInputBlur);
      }
    }
    if (this.el.parentNode) {
      this.el.parentNode.removeChild(this.el);
    }
  }
};

// node_modules/handsontable/editors/dateEditor/dateEditor.mjs
function _classPrivateMethodInitSpec2(e, a) {
  _checkPrivateRedeclaration2(e, a), a.add(e);
}
function _checkPrivateRedeclaration2(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty2(e, r, t) {
  return (r = _toPropertyKey2(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey2(t) {
  var i = _toPrimitive2(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive2(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _assertClassBrand2(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var EDITOR_TYPE4 = "date";
var SHORTCUTS_GROUP_EDITOR = "dateEditor";
var DEFAULT_DATE_FORMAT = "DD/MM/YYYY";
var _DateEditor_brand = /* @__PURE__ */ new WeakSet();
var DateEditor = class extends TextEditor {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec2(this, _DateEditor_brand);
    _defineProperty2(this, "parentDestroyed", false);
    _defineProperty2(this, "$datePicker", null);
  }
  static get EDITOR_TYPE() {
    return EDITOR_TYPE4;
  }
  init() {
    if (typeof moment_default !== "function") {
      throw new Error("You need to include moment.js to your project.");
    }
    if (typeof Pikaday !== "function") {
      throw new Error("You need to include Pikaday to your project.");
    }
    super.init();
    this.hot.addHook("afterDestroy", () => {
      this.parentDestroyed = true;
      this.destroyElements();
    });
    this.hot.addHook("afterSetTheme", (themeName, firstRun) => {
      if (!firstRun) {
        removeClass(this.datePicker, /ht-theme-.*/g);
        addClass(this.datePicker, themeName);
      }
    });
  }
  /**
   * Create data picker instance.
   */
  createElements() {
    super.createElements();
    this.datePicker = this.hot.rootDocument.createElement("DIV");
    this.datePickerStyle = this.datePicker.style;
    this.datePickerStyle.position = "absolute";
    this.datePickerStyle.top = 0;
    this.datePickerStyle.left = 0;
    this.datePickerStyle.zIndex = 9999;
    this.datePicker.setAttribute("dir", this.hot.isRtl() ? "rtl" : "ltr");
    addClass(this.datePicker, "htDatepickerHolder");
    const themeClassName = this.hot.getCurrentThemeName();
    removeClass(this.datePicker, /ht-theme-.*/g);
    addClass(this.datePicker, themeClassName);
    this.hot.rootDocument.body.appendChild(this.datePicker);
    this.eventManager.addEventListener(this.datePicker, "mousedown", (event) => {
      if (hasClass(event.target, "pika-day")) {
        this.hideDatepicker();
      }
      event.stopPropagation();
    });
  }
  /**
   * Destroy data picker instance.
   */
  destroyElements() {
    const datePickerParentElement = this.datePicker.parentNode;
    if (this.$datePicker) {
      this.$datePicker.destroy();
    }
    if (datePickerParentElement) {
      datePickerParentElement.removeChild(this.datePicker);
    }
  }
  /**
   * Prepare editor to appear.
   *
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).
   */
  prepare(row, col, prop, td, value, cellProperties) {
    super.prepare(row, col, prop, td, value, cellProperties);
  }
  /**
   * Open editor.
   *
   * @param {Event} [event=null] The event object.
   */
  open() {
    let event = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    const shortcutManager = this.hot.getShortcutManager();
    const editorContext = shortcutManager.getContext("editor");
    this.showDatepicker(event);
    super.open();
    editorContext.addShortcuts([{
      keys: [["ArrowLeft"]],
      callback: () => {
        this.$datePicker.adjustDate("subtract", 1);
      }
    }, {
      keys: [["ArrowRight"]],
      callback: () => {
        this.$datePicker.adjustDate("add", 1);
      }
    }, {
      keys: [["ArrowUp"]],
      callback: () => {
        this.$datePicker.adjustDate("subtract", 7);
      }
    }, {
      keys: [["ArrowDown"]],
      callback: () => {
        this.$datePicker.adjustDate("add", 7);
      }
    }], {
      group: SHORTCUTS_GROUP_EDITOR
    });
  }
  /**
   * Close editor.
   */
  close() {
    var _this$$datePicker;
    this._opened = false;
    if ((_this$$datePicker = this.$datePicker) !== null && _this$$datePicker !== void 0 && _this$$datePicker.destroy) {
      this.$datePicker.destroy();
    }
    this.hot._registerTimeout(() => {
      const editorManager = this.hot._getEditorManager();
      editorManager.closeEditor();
      this.hot.view.render();
      editorManager.prepareEditor();
    });
    const shortcutManager = this.hot.getShortcutManager();
    const editorContext = shortcutManager.getContext("editor");
    editorContext.removeShortcutsByGroup(SHORTCUTS_GROUP_EDITOR);
    super.close();
  }
  /**
   * Finishes editing and start saving or restoring process for editing cell or last selected range.
   *
   * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.
   * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.
   */
  finishEditing() {
    let restoreOriginalValue = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    let ctrlDown = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    super.finishEditing(restoreOriginalValue, ctrlDown);
  }
  /**
   * Show data picker.
   *
   * @param {Event} event The event object.
   */
  showDatepicker(event) {
    const dateFormat = _assertClassBrand2(_DateEditor_brand, this, _getDateFormat).call(this);
    const isMouseDown = this.hot.view.isMouseDown();
    const isMeta = event ? isFunctionKey(event.keyCode) : false;
    let dateStr;
    this.datePicker.style.display = "block";
    this.$datePicker = new Pikaday(this.getDatePickerConfig());
    if (typeof this.$datePicker.useMoment === "function") {
      this.$datePicker.useMoment(moment_default);
    }
    this.$datePicker._onInputFocus = function() {
    };
    if (this.originalValue) {
      dateStr = this.originalValue;
      if (moment_default(dateStr, dateFormat, true).isValid()) {
        this.$datePicker.setMoment(moment_default(dateStr, dateFormat), true);
      }
      if (this.getValue() !== this.originalValue) {
        this.setValue(this.originalValue);
      }
      if (!isMeta && !isMouseDown) {
        this.setValue("");
      }
    } else if (this.cellProperties.defaultDate) {
      dateStr = this.cellProperties.defaultDate;
      if (moment_default(dateStr, dateFormat, true).isValid()) {
        this.$datePicker.setMoment(moment_default(dateStr, dateFormat), true);
      }
      if (!isMeta && !isMouseDown) {
        this.setValue("");
      }
    } else {
      this.$datePicker.gotoToday();
    }
  }
  /**
   * Hide data picker.
   */
  hideDatepicker() {
    this.datePickerStyle.display = "none";
    this.$datePicker.hide();
  }
  /**
   * Get date picker options.
   *
   * @returns {object}
   */
  getDatePickerConfig() {
    var _options$format;
    const htInput = this.TEXTAREA;
    const options = {};
    if (this.cellProperties && this.cellProperties.datePickerConfig) {
      deepExtend(options, this.cellProperties.datePickerConfig);
    }
    const origOnSelect = options.onSelect;
    const origOnClose = options.onClose;
    options.field = htInput;
    options.trigger = htInput;
    options.container = this.datePicker;
    options.bound = false;
    options.keyboardInput = false;
    options.format = (_options$format = options.format) !== null && _options$format !== void 0 ? _options$format : _assertClassBrand2(_DateEditor_brand, this, _getDateFormat).call(this);
    options.reposition = options.reposition || false;
    options.isRTL = false;
    options.onSelect = (value) => {
      let dateStr = value;
      if (!isNaN(dateStr.getTime())) {
        dateStr = moment_default(dateStr).format(_assertClassBrand2(_DateEditor_brand, this, _getDateFormat).call(this));
      }
      this.setValue(dateStr);
      if (origOnSelect) {
        origOnSelect();
      }
      if (isMobileBrowser()) {
        this.hideDatepicker();
      }
    };
    options.onClose = () => {
      if (!this.parentDestroyed) {
        this.finishEditing(false);
      }
      if (origOnClose) {
        origOnClose();
      }
    };
    return options;
  }
  /**
   * Refreshes datepicker's size and position. The method is called internally by Handsontable.
   *
   * @private
   * @param {boolean} force Indicates if the refreshing editor dimensions should be triggered.
   */
  refreshDimensions(force) {
    var _wtOverlays$getParent;
    super.refreshDimensions(force);
    if (this.state !== EDITOR_STATE.EDITING) {
      return;
    }
    this.TD = this.getEditedCell();
    if (!this.TD) {
      this.hideDatepicker();
      return;
    }
    const {
      rowIndexMapper,
      columnIndexMapper
    } = this.hot;
    const {
      wtOverlays
    } = this.hot.view._wt;
    const {
      wtTable
    } = (_wtOverlays$getParent = wtOverlays.getParentOverlay(this.TD)) !== null && _wtOverlays$getParent !== void 0 ? _wtOverlays$getParent : this.hot.view._wt;
    const firstVisibleRow = rowIndexMapper.getVisualFromRenderableIndex(wtTable.getFirstPartiallyVisibleRow());
    const lastVisibleRow = rowIndexMapper.getVisualFromRenderableIndex(wtTable.getLastPartiallyVisibleRow());
    const firstVisibleColumn = columnIndexMapper.getVisualFromRenderableIndex(wtTable.getFirstPartiallyVisibleColumn());
    const lastVisibleColumn = columnIndexMapper.getVisualFromRenderableIndex(wtTable.getLastPartiallyVisibleColumn());
    if (this.row >= firstVisibleRow && this.row <= lastVisibleRow && this.col >= firstVisibleColumn && this.col <= lastVisibleColumn) {
      const offset2 = this.TD.getBoundingClientRect();
      this.datePickerStyle.top = `${this.hot.rootWindow.pageYOffset + offset2.top + outerHeight(this.TD)}px`;
      let pickerLeftPosition = this.hot.rootWindow.pageXOffset;
      if (this.hot.isRtl()) {
        pickerLeftPosition += offset2.right - outerWidth(this.datePicker);
      } else {
        pickerLeftPosition += offset2.left;
      }
      this.datePickerStyle.left = `${pickerLeftPosition}px`;
    } else {
      this.hideDatepicker();
    }
  }
};
function _getDateFormat() {
  var _this$cellProperties$;
  return (_this$cellProperties$ = this.cellProperties.dateFormat) !== null && _this$cellProperties$ !== void 0 ? _this$cellProperties$ : DEFAULT_DATE_FORMAT;
}

// node_modules/handsontable/editors/dropdownEditor/dropdownEditor.mjs
var EDITOR_TYPE5 = "dropdown";
var DropdownEditor = class extends AutocompleteEditor {
  static get EDITOR_TYPE() {
    return EDITOR_TYPE5;
  }
  /**
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).
   */
  prepare(row, col, prop, td, value, cellProperties) {
    cellProperties.filter = false;
    cellProperties.strict = true;
    super.prepare(row, col, prop, td, value, cellProperties);
  }
};

// node_modules/handsontable/editors/numericEditor/numericEditor.mjs
var EDITOR_TYPE6 = "numeric";
var NumericEditor = class extends TextEditor {
  static get EDITOR_TYPE() {
    return EDITOR_TYPE6;
  }
};

// node_modules/handsontable/editors/passwordEditor/passwordEditor.mjs
function _defineProperty3(e, r, t) {
  return (r = _toPropertyKey3(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey3(t) {
  var i = _toPrimitive3(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive3(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var EDITOR_TYPE7 = "password";
var PasswordEditor = class extends TextEditor {
  constructor() {
    super(...arguments);
    _defineProperty3(this, "autoResize", createInputElementResizer(this.hot.rootDocument, {
      textContent: (element) => "•".repeat(element.value.length)
    }));
  }
  static get EDITOR_TYPE() {
    return EDITOR_TYPE7;
  }
  createElements() {
    super.createElements();
    this.TEXTAREA = this.hot.rootDocument.createElement("input");
    this.TEXTAREA.setAttribute("type", "password");
    this.TEXTAREA.setAttribute("data-hot-input", "");
    this.TEXTAREA.className = "handsontableInput";
    this.textareaStyle = this.TEXTAREA.style;
    this.textareaStyle.width = 0;
    this.textareaStyle.height = 0;
    empty(this.TEXTAREA_PARENT);
    this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);
  }
};

// node_modules/handsontable/editors/selectEditor/selectEditor.mjs
var EDITOR_VISIBLE_CLASS_NAME = "ht_editor_visible";
var SHORTCUTS_GROUP2 = "selectEditor";
var EDITOR_TYPE8 = "select";
var SelectEditor = class extends BaseEditor {
  static get EDITOR_TYPE() {
    return EDITOR_TYPE8;
  }
  /**
   * Initializes editor instance, DOM Element and mount hooks.
   */
  init() {
    this.selectWrapper = this.hot.rootDocument.createElement("div");
    this.select = this.hot.rootDocument.createElement("select");
    this.select.setAttribute("data-hot-input", "true");
    this.selectWrapper.style.display = "none";
    const ARROW = this.hot.rootDocument.createElement("DIV");
    const isAriaEnabled = this.hot.getSettings().ariaTags;
    ARROW.className = "htAutocompleteArrow";
    if (isAriaEnabled) {
      ARROW.setAttribute(...A11Y_HIDDEN());
    }
    ARROW.appendChild(this.hot.rootDocument.createTextNode(String.fromCharCode(9660)));
    addClass(this.selectWrapper, "htSelectEditor");
    this.selectWrapper.appendChild(this.select);
    this.selectWrapper.insertBefore(ARROW, this.selectWrapper.firstChild);
    this.hot.rootElement.appendChild(this.selectWrapper);
    this.registerHooks();
  }
  /**
   * Returns select's value.
   *
   * @returns {*}
   */
  getValue() {
    return this.select.value;
  }
  /**
   * Sets value in the select element.
   *
   * @param {*} value A new select's value.
   */
  setValue(value) {
    this.select.value = value;
  }
  /**
   * Opens the editor and adjust its size.
   */
  open() {
    this._opened = true;
    this.refreshDimensions();
    this.selectWrapper.style.display = "";
    const shortcutManager = this.hot.getShortcutManager();
    shortcutManager.setActiveContextName("editor");
    this.registerShortcuts();
  }
  /**
   * Closes the editor.
   */
  close() {
    this._opened = false;
    this.selectWrapper.style.display = "none";
    if (hasClass(this.selectWrapper, EDITOR_VISIBLE_CLASS_NAME)) {
      removeClass(this.selectWrapper, EDITOR_VISIBLE_CLASS_NAME);
    }
    this.unregisterShortcuts();
    this.clearHooks();
  }
  /**
   * Sets focus state on the select element.
   */
  focus() {
    this.select.focus();
  }
  /**
   * Binds hooks to refresh editor's size after scrolling of the viewport or resizing of columns/rows.
   *
   * @private
   */
  registerHooks() {
    this.addHook("afterScrollHorizontally", () => this.refreshDimensions());
    this.addHook("afterScrollVertically", () => this.refreshDimensions());
    this.addHook("afterColumnResize", () => this.refreshDimensions());
    this.addHook("afterRowResize", () => this.refreshDimensions());
  }
  /**
   * Prepares editor's meta data and a list of available options.
   *
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).
   */
  prepare(row, col, prop, td, value, cellProperties) {
    super.prepare(row, col, prop, td, value, cellProperties);
    const selectOptions = this.cellProperties.selectOptions;
    let options;
    if (typeof selectOptions === "function") {
      options = this.prepareOptions(selectOptions(this.row, this.col, this.prop));
    } else {
      options = this.prepareOptions(selectOptions);
    }
    empty(this.select);
    objectEach(options, (optionValue, key) => {
      const optionElement = this.hot.rootDocument.createElement("OPTION");
      optionElement.value = key;
      fastInnerHTML(optionElement, optionValue);
      this.select.appendChild(optionElement);
    });
  }
  /**
   * Creates consistent list of available options.
   *
   * @private
   * @param {Array|object} optionsToPrepare The list of the values to render in the select eleemnt.
   * @returns {object}
   */
  prepareOptions(optionsToPrepare) {
    let preparedOptions = {};
    if (Array.isArray(optionsToPrepare)) {
      for (let i = 0, len = optionsToPrepare.length; i < len; i++) {
        preparedOptions[optionsToPrepare[i]] = optionsToPrepare[i];
      }
    } else if (typeof optionsToPrepare === "object") {
      preparedOptions = optionsToPrepare;
    }
    return preparedOptions;
  }
  /**
   * Refreshes editor's value using source data.
   *
   * @private
   */
  refreshValue() {
    const sourceData = this.hot.getSourceDataAtCell(this.row, this.prop);
    this.originalValue = sourceData;
    this.setValue(sourceData);
    this.refreshDimensions();
  }
  /**
   * Refreshes editor's size and position.
   *
   * @private
   */
  refreshDimensions() {
    if (this.state !== EDITOR_STATE.EDITING) {
      return;
    }
    this.TD = this.getEditedCell();
    if (!this.TD) {
      this.close();
      return;
    }
    const {
      top: top2,
      start,
      width,
      height
    } = this.getEditedCellRect();
    const selectStyle = this.selectWrapper.style;
    selectStyle.height = `${height}px`;
    selectStyle.width = `${width}px`;
    selectStyle.top = `${top2}px`;
    selectStyle[this.hot.isRtl() ? "right" : "left"] = `${start}px`;
    selectStyle.margin = "0px";
    addClass(this.selectWrapper, EDITOR_VISIBLE_CLASS_NAME);
  }
  /**
   * Register shortcuts responsible for handling editor.
   *
   * @private
   */
  registerShortcuts() {
    const shortcutManager = this.hot.getShortcutManager();
    const editorContext = shortcutManager.getContext("editor");
    const contextConfig = {
      group: SHORTCUTS_GROUP2
    };
    if (this.isInFullEditMode()) {
      editorContext.addShortcuts([{
        keys: [["ArrowUp"]],
        callback: () => {
          const previousOptionIndex = this.select.selectedIndex - 1;
          if (previousOptionIndex >= 0) {
            this.select[previousOptionIndex].selected = true;
          }
        }
      }, {
        keys: [["ArrowDown"]],
        callback: () => {
          const nextOptionIndex = this.select.selectedIndex + 1;
          if (nextOptionIndex <= this.select.length - 1) {
            this.select[nextOptionIndex].selected = true;
          }
        }
      }], contextConfig);
    }
  }
  /**
   * Unregister shortcuts responsible for handling editor.
   *
   * @private
   */
  unregisterShortcuts() {
    const shortcutManager = this.hot.getShortcutManager();
    const editorContext = shortcutManager.getContext("editor");
    editorContext.removeShortcutsByGroup(SHORTCUTS_GROUP2);
  }
};

// node_modules/handsontable/editors/timeEditor/timeEditor.mjs
var EDITOR_TYPE9 = "time";
var TimeEditor = class extends TextEditor {
  static get EDITOR_TYPE() {
    return EDITOR_TYPE9;
  }
  /**
   * Prepares editor's meta data.
   *
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).
   */
  prepare(row, col, prop, td, value, cellProperties) {
    super.prepare(row, col, prop, td, value, cellProperties);
    this.TEXTAREA.dir = "ltr";
  }
};

// node_modules/handsontable/editors/index.mjs
function registerAllEditors() {
  _register(BaseEditor);
  _register(AutocompleteEditor);
  _register(CheckboxEditor);
  _register(DateEditor);
  _register(DropdownEditor);
  _register(HandsontableEditor);
  _register(NumericEditor);
  _register(PasswordEditor);
  _register(SelectEditor);
  _register(TextEditor);
  _register(TimeEditor);
}

// node_modules/handsontable/renderers/htmlRenderer/htmlRenderer.mjs
var RENDERER_TYPE = "html";
function htmlRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {
  baseRenderer.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);
  fastInnerHTML(TD, value === null || value === void 0 ? "" : value, false);
}
htmlRenderer.RENDERER_TYPE = RENDERER_TYPE;

// node_modules/handsontable/renderers/autocompleteRenderer/autocompleteRenderer.mjs
var RENDERER_TYPE2 = "autocomplete";
function autocompleteRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {
  const {
    rootDocument
  } = hotInstance;
  const rendererFunc = cellProperties.allowHtml ? htmlRenderer : textRenderer;
  const ARROW = rootDocument.createElement("DIV");
  const isAriaEnabled = hotInstance.getSettings().ariaTags;
  ARROW.className = "htAutocompleteArrow";
  if (isAriaEnabled) {
    ARROW.setAttribute(...A11Y_HIDDEN());
  }
  ARROW.appendChild(rootDocument.createTextNode(String.fromCharCode(9660)));
  rendererFunc.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);
  if (!TD.firstChild) {
    TD.appendChild(rootDocument.createTextNode(String.fromCharCode(160)));
  }
  TD.insertBefore(ARROW, TD.firstChild);
  addClass(TD, "htAutocomplete");
  if (!hotInstance.acArrowListener) {
    const eventManager = new eventManager_default(hotInstance);
    hotInstance.acArrowListener = function(event) {
      if (hasClass(event.target, "htAutocompleteArrow")) {
        hotInstance.view._wt.getSetting("onCellDblClick", null, hotInstance._createCellCoords(row, col), TD);
      }
    };
    eventManager.addEventListener(hotInstance.rootElement, "mousedown", hotInstance.acArrowListener);
    hotInstance.addHookOnce("afterDestroy", () => {
      eventManager.destroy();
    });
  }
}
autocompleteRenderer.RENDERER_TYPE = RENDERER_TYPE2;

// node_modules/handsontable/renderers/dropdownRenderer/dropdownRenderer.mjs
var RENDERER_TYPE3 = "dropdown";
function dropdownRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {
  autocompleteRenderer.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);
}
dropdownRenderer.RENDERER_TYPE = RENDERER_TYPE3;

// node_modules/handsontable/renderers/checkboxRenderer/checkboxRenderer.mjs
var isListeningKeyDownEvent = /* @__PURE__ */ new WeakMap();
var isCheckboxListenerAdded = /* @__PURE__ */ new WeakMap();
var BAD_VALUE_CLASS = "htBadValue";
var ATTR_ROW = "data-row";
var ATTR_COLUMN = "data-col";
var SHORTCUTS_GROUP3 = "checkboxRenderer";
var RENDERER_TYPE4 = "checkbox";
Hooks.getSingleton().add("modifyAutoColumnSizeSeed", function(bundleSeed, cellMeta, cellValue) {
  const {
    label,
    type,
    row,
    column,
    prop
  } = cellMeta;
  if (type !== RENDERER_TYPE4) {
    return;
  }
  if (label) {
    const {
      value: labelValue,
      property: labelProperty
    } = label;
    let labelText = cellValue;
    if (labelValue) {
      labelText = typeof labelValue === "function" ? labelValue(row, column, prop, cellValue) : labelValue;
    } else if (labelProperty) {
      const labelData = this.getDataAtRowProp(row, labelProperty);
      labelText = labelData !== null ? labelData : cellValue;
    }
    bundleSeed = labelText;
  }
  return bundleSeed;
});
function checkboxRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {
  const {
    rootDocument
  } = hotInstance;
  const ariaEnabled = hotInstance.getSettings().ariaTags;
  baseRenderer.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);
  registerEvents(hotInstance);
  let input = createInput(rootDocument);
  const labelOptions = cellProperties.label;
  let badValue = false;
  if (typeof cellProperties.checkedTemplate === "undefined") {
    cellProperties.checkedTemplate = true;
  }
  if (typeof cellProperties.uncheckedTemplate === "undefined") {
    cellProperties.uncheckedTemplate = false;
  }
  empty(TD);
  if (value === cellProperties.checkedTemplate || stringify(value).toLocaleLowerCase(cellProperties.locale) === stringify(cellProperties.checkedTemplate).toLocaleLowerCase(cellProperties.locale)) {
    input.checked = true;
  } else if (value === cellProperties.uncheckedTemplate || stringify(value).toLocaleLowerCase(cellProperties.locale) === stringify(cellProperties.uncheckedTemplate).toLocaleLowerCase(cellProperties.locale)) {
    input.checked = false;
  } else if (isEmpty(value)) {
    addClass(input, "noValue");
  } else {
    input.style.display = "none";
    addClass(input, BAD_VALUE_CLASS);
    badValue = true;
  }
  setAttribute(input, [[ATTR_ROW, row], [ATTR_COLUMN, col]]);
  if (ariaEnabled) {
    setAttribute(input, [A11Y_LABEL(input.checked ? hotInstance.getTranslatedPhrase(CHECKBOX_CHECKED) : hotInstance.getTranslatedPhrase(CHECKBOX_UNCHECKED)), A11Y_CHECKED(input.checked), A11Y_CHECKBOX()]);
  }
  if (!badValue && labelOptions) {
    let labelText = "";
    if (labelOptions.value) {
      labelText = typeof labelOptions.value === "function" ? labelOptions.value.call(this, row, col, prop, value) : labelOptions.value;
    } else if (labelOptions.property) {
      const labelValue = hotInstance.getDataAtRowProp(row, labelOptions.property);
      labelText = labelValue !== null ? labelValue : "";
    }
    const label = createLabel(rootDocument, labelText, labelOptions.separated !== true);
    if (labelOptions.position === "before") {
      if (labelOptions.separated) {
        TD.appendChild(label);
        TD.appendChild(input);
      } else {
        label.appendChild(input);
        input = label;
      }
    } else if (!labelOptions.position || labelOptions.position === "after") {
      if (labelOptions.separated) {
        TD.appendChild(input);
        TD.appendChild(label);
      } else {
        label.insertBefore(input, label.firstChild);
        input = label;
      }
    }
  }
  if (!labelOptions || labelOptions && !labelOptions.separated) {
    TD.appendChild(input);
  }
  if (badValue) {
    TD.appendChild(rootDocument.createTextNode("#bad-value#"));
  }
  if (!isListeningKeyDownEvent.has(hotInstance)) {
    isListeningKeyDownEvent.set(hotInstance, true);
    registerShortcuts();
  }
  function registerShortcuts() {
    const shortcutManager = hotInstance.getShortcutManager();
    const gridContext = shortcutManager.getContext("grid");
    const config = {
      group: SHORTCUTS_GROUP3,
      relativeToGroup: EDITOR_EDIT_GROUP,
      position: "before"
    };
    gridContext.addShortcuts([{
      keys: [["space"]],
      callback: () => {
        changeSelectedCheckboxesState();
        return !areSelectedCheckboxCells();
      },
      runOnlyIf: () => {
        var _hotInstance$getSelec;
        return (_hotInstance$getSelec = hotInstance.getSelectedRangeLast()) === null || _hotInstance$getSelec === void 0 ? void 0 : _hotInstance$getSelec.highlight.isCell();
      }
    }, {
      keys: [["enter"]],
      callback: () => {
        changeSelectedCheckboxesState();
        return !areSelectedCheckboxCells();
      },
      runOnlyIf: () => {
        const range = hotInstance.getSelectedRangeLast();
        return hotInstance.getSettings().enterBeginsEditing && (range === null || range === void 0 ? void 0 : range.highlight.isCell()) && !hotInstance.selection.isMultiple();
      }
    }, {
      keys: [["delete"], ["backspace"]],
      callback: () => {
        changeSelectedCheckboxesState(true);
        return !areSelectedCheckboxCells();
      },
      runOnlyIf: () => {
        var _hotInstance$getSelec2;
        return (_hotInstance$getSelec2 = hotInstance.getSelectedRangeLast()) === null || _hotInstance$getSelec2 === void 0 ? void 0 : _hotInstance$getSelec2.highlight.isCell();
      }
    }], config);
  }
  function changeSelectedCheckboxesState() {
    let uncheckCheckbox = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    const selRange = hotInstance.getSelectedRange();
    const changesPerSubSelection = [];
    const nonCheckboxChanges = /* @__PURE__ */ new Map();
    let changes = [];
    let changeCounter = 0;
    if (!selRange) {
      return;
    }
    for (let key = 0; key < selRange.length; key++) {
      const {
        row: startRow,
        col: startColumn
      } = selRange[key].getTopStartCorner();
      const {
        row: endRow,
        col: endColumn
      } = selRange[key].getBottomEndCorner();
      for (let visualRow = startRow; visualRow <= endRow; visualRow += 1) {
        for (let visualColumn = startColumn; visualColumn <= endColumn; visualColumn += 1) {
          const cachedCellProperties = hotInstance.getCellMeta(visualRow, visualColumn);
          if (cachedCellProperties.hidden) {
            continue;
          }
          const templates = {
            checkedTemplate: cachedCellProperties.checkedTemplate,
            uncheckedTemplate: cachedCellProperties.uncheckedTemplate
          };
          if (cachedCellProperties.type !== "checkbox") {
            if (uncheckCheckbox === true && !cachedCellProperties.readOnly) {
              if (nonCheckboxChanges.has(changesPerSubSelection.length)) {
                nonCheckboxChanges.set(changesPerSubSelection.length, [...nonCheckboxChanges.get(changesPerSubSelection.length), [visualRow, visualColumn, null]]);
              } else {
                nonCheckboxChanges.set(changesPerSubSelection.length, [[visualRow, visualColumn, null]]);
              }
            }
            continue;
          }
          if (cachedCellProperties.readOnly === true) {
            continue;
          }
          if (typeof cachedCellProperties.checkedTemplate === "undefined") {
            cachedCellProperties.checkedTemplate = true;
          }
          if (typeof cachedCellProperties.uncheckedTemplate === "undefined") {
            cachedCellProperties.uncheckedTemplate = false;
          }
          const dataAtCell = hotInstance.getDataAtCell(visualRow, visualColumn);
          if (uncheckCheckbox === false) {
            if ([cachedCellProperties.checkedTemplate, cachedCellProperties.checkedTemplate.toString()].includes(dataAtCell)) {
              changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate, templates]);
            } else if ([cachedCellProperties.uncheckedTemplate, cachedCellProperties.uncheckedTemplate.toString(), null, void 0].includes(dataAtCell)) {
              changes.push([visualRow, visualColumn, cachedCellProperties.checkedTemplate, templates]);
            }
          } else {
            changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate, templates]);
          }
          changeCounter += 1;
        }
      }
      changesPerSubSelection.push(changeCounter);
      changeCounter = 0;
    }
    if (!changes.every((_ref) => {
      let [, , cellValue] = _ref;
      return cellValue === changes[0][2];
    })) {
      changes = changes.map((_ref2) => {
        let [visualRow, visualColumn, , templates] = _ref2;
        return [visualRow, visualColumn, templates.checkedTemplate];
      });
    } else {
      changes = changes.map((_ref3) => {
        let [visualRow, visualColumn, cellValue] = _ref3;
        return [visualRow, visualColumn, cellValue];
      });
    }
    if (changes.length > 0) {
      changesPerSubSelection.forEach((changesCount, sectionCount) => {
        let changesChunk = changes.splice(0, changesCount);
        if (nonCheckboxChanges.size && nonCheckboxChanges.has(sectionCount)) {
          changesChunk = [...changesChunk, ...nonCheckboxChanges.get(sectionCount)];
        }
        hotInstance.setDataAtCell(changesChunk);
      });
    }
  }
  function areSelectedCheckboxCells() {
    const selRange = hotInstance.getSelectedRange();
    if (!selRange) {
      return;
    }
    for (let key = 0; key < selRange.length; key++) {
      const topLeft = selRange[key].getTopStartCorner();
      const bottomRight = selRange[key].getBottomEndCorner();
      for (let visualRow = topLeft.row; visualRow <= bottomRight.row; visualRow++) {
        for (let visualColumn = topLeft.col; visualColumn <= bottomRight.col; visualColumn++) {
          const cellMeta = hotInstance.getCellMeta(visualRow, visualColumn);
          if (cellMeta.readOnly) {
            continue;
          }
          const cell = hotInstance.getCell(visualRow, visualColumn);
          if (isHTMLElement(cell)) {
            const checkboxes = cell.querySelectorAll("input[type=checkbox]");
            if (checkboxes.length > 0) {
              return true;
            }
          }
        }
      }
    }
    return false;
  }
}
checkboxRenderer.RENDERER_TYPE = RENDERER_TYPE4;
function registerEvents(instance) {
  let eventManager = isCheckboxListenerAdded.get(instance);
  if (!eventManager) {
    const {
      rootElement
    } = instance;
    eventManager = new eventManager_default(instance);
    eventManager.addEventListener(rootElement, "click", (event) => onClick(event, instance));
    eventManager.addEventListener(rootElement, "mouseup", (event) => onMouseUp(event, instance));
    eventManager.addEventListener(rootElement, "change", (event) => onChange(event, instance));
    isCheckboxListenerAdded.set(instance, eventManager);
  }
  return eventManager;
}
function createInput(rootDocument) {
  const input = rootDocument.createElement("input");
  input.className = "htCheckboxRendererInput";
  input.type = "checkbox";
  input.setAttribute("tabindex", "-1");
  return input.cloneNode(false);
}
function createLabel(rootDocument, text, fullWidth) {
  const label = rootDocument.createElement("label");
  label.className = `htCheckboxRendererLabel ${fullWidth ? "fullWidth" : ""}`;
  const textNode = rootDocument.createTextNode(text);
  if (fullWidth) {
    const span = rootDocument.createElement("span");
    span.appendChild(textNode);
    label.appendChild(span);
  } else {
    label.appendChild(textNode);
  }
  return label.cloneNode(true);
}
function onMouseUp(event, instance) {
  const {
    target
  } = event;
  if (!isCheckboxInput(target)) {
    return;
  }
  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {
    return;
  }
  setTimeout(instance.listen, 10);
}
function onClick(event, instance) {
  const {
    target
  } = event;
  if (!isCheckboxInput(target)) {
    return;
  }
  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {
    return;
  }
  const row = parseInt(target.getAttribute(ATTR_ROW), 10);
  const col = parseInt(target.getAttribute(ATTR_COLUMN), 10);
  const cellProperties = instance.getCellMeta(row, col);
  if (cellProperties.readOnly) {
    event.preventDefault();
  }
}
function onChange(event, instance) {
  const {
    target
  } = event;
  if (!isCheckboxInput(target)) {
    return;
  }
  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {
    return;
  }
  const row = parseInt(target.getAttribute(ATTR_ROW), 10);
  const col = parseInt(target.getAttribute(ATTR_COLUMN), 10);
  const cellProperties = instance.getCellMeta(row, col);
  if (!cellProperties.readOnly) {
    let newCheckboxValue = null;
    if (event.target.checked) {
      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? true : cellProperties.checkedTemplate;
    } else {
      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? false : cellProperties.uncheckedTemplate;
    }
    instance.setDataAtCell(row, col, newCheckboxValue);
  }
}
function isCheckboxInput(element) {
  return element.tagName === "INPUT" && element.getAttribute("type") === "checkbox";
}

// node_modules/handsontable/renderers/handsontableRenderer/handsontableRenderer.mjs
var RENDERER_TYPE5 = "handsontable";
function handsontableRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {
  autocompleteRenderer.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);
}
handsontableRenderer.RENDERER_TYPE = RENDERER_TYPE5;

// node_modules/numbro/dist/es/numbro.js
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
var enUS;
var hasRequiredEnUS;
function requireEnUS() {
  if (hasRequiredEnUS)
    return enUS;
  hasRequiredEnUS = 1;
  enUS = {
    languageTag: "en-US",
    delimiters: {
      thousands: ",",
      decimal: "."
    },
    abbreviations: {
      thousand: "k",
      million: "m",
      billion: "b",
      trillion: "t"
    },
    spaceSeparated: false,
    ordinal: function(number) {
      let b = number % 10;
      return ~~(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
    },
    bytes: {
      binarySuffixes: ["B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"],
      decimalSuffixes: ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"]
    },
    currency: {
      symbol: "$",
      position: "prefix",
      code: "USD"
    },
    currencyFormat: {
      thousandSeparated: true,
      totalLength: 4,
      spaceSeparated: true,
      spaceSeparatedCurrency: true
    },
    formats: {
      fourDigits: {
        totalLength: 4,
        spaceSeparated: true
      },
      fullWithTwoDecimals: {
        output: "currency",
        thousandSeparated: true,
        mantissa: 2
      },
      fullWithTwoDecimalsNoCurrency: {
        thousandSeparated: true,
        mantissa: 2
      },
      fullWithNoDecimals: {
        output: "currency",
        thousandSeparated: true,
        mantissa: 0
      }
    }
  };
  return enUS;
}
var unformatting;
var hasRequiredUnformatting;
function requireUnformatting() {
  if (hasRequiredUnformatting)
    return unformatting;
  hasRequiredUnformatting = 1;
  const allSuffixes = [
    { key: "ZiB", factor: Math.pow(1024, 7) },
    { key: "ZB", factor: Math.pow(1e3, 7) },
    { key: "YiB", factor: Math.pow(1024, 8) },
    { key: "YB", factor: Math.pow(1e3, 8) },
    { key: "TiB", factor: Math.pow(1024, 4) },
    { key: "TB", factor: Math.pow(1e3, 4) },
    { key: "PiB", factor: Math.pow(1024, 5) },
    { key: "PB", factor: Math.pow(1e3, 5) },
    { key: "MiB", factor: Math.pow(1024, 2) },
    { key: "MB", factor: Math.pow(1e3, 2) },
    { key: "KiB", factor: Math.pow(1024, 1) },
    { key: "KB", factor: Math.pow(1e3, 1) },
    { key: "GiB", factor: Math.pow(1024, 3) },
    { key: "GB", factor: Math.pow(1e3, 3) },
    { key: "EiB", factor: Math.pow(1024, 6) },
    { key: "EB", factor: Math.pow(1e3, 6) },
    { key: "B", factor: 1 }
  ];
  function escapeRegExp(s) {
    return s.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
  }
  function computeUnformattedValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format2) {
    if (!isNaN(+inputString)) {
      return +inputString;
    }
    let stripped = "";
    let newInput = inputString.replace(/(^[^(]*)\((.*)\)([^)]*$)/, "$1$2$3");
    if (newInput !== inputString) {
      return -1 * computeUnformattedValue(newInput, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations);
    }
    for (let i = 0; i < allSuffixes.length; i++) {
      let suffix = allSuffixes[i];
      stripped = inputString.replace(RegExp(`([0-9 ])(${suffix.key})$`), "$1");
      if (stripped !== inputString) {
        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations) * suffix.factor;
      }
    }
    stripped = inputString.replace("%", "");
    if (stripped !== inputString) {
      return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations) / 100;
    }
    let possibleOrdinalValue = parseFloat(inputString);
    if (isNaN(possibleOrdinalValue)) {
      return void 0;
    }
    let ordinalString = ordinal(possibleOrdinalValue);
    if (ordinalString && ordinalString !== ".") {
      stripped = inputString.replace(new RegExp(`${escapeRegExp(ordinalString)}$`), "");
      if (stripped !== inputString) {
        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations);
      }
    }
    let inversedAbbreviations = {};
    Object.keys(abbreviations).forEach((key) => {
      inversedAbbreviations[abbreviations[key]] = key;
    });
    let abbreviationValues = Object.keys(inversedAbbreviations).sort().reverse();
    let numberOfAbbreviations = abbreviationValues.length;
    for (let i = 0; i < numberOfAbbreviations; i++) {
      let value = abbreviationValues[i];
      let key = inversedAbbreviations[value];
      stripped = inputString.replace(value, "");
      if (stripped !== inputString) {
        let factor = void 0;
        switch (key) {
          case "thousand":
            factor = Math.pow(10, 3);
            break;
          case "million":
            factor = Math.pow(10, 6);
            break;
          case "billion":
            factor = Math.pow(10, 9);
            break;
          case "trillion":
            factor = Math.pow(10, 12);
            break;
        }
        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations) * factor;
      }
    }
    return void 0;
  }
  function removeFormattingSymbols(inputString, delimiters, currencySymbol) {
    let stripped = inputString.replace(currencySymbol, "");
    stripped = stripped.replace(new RegExp(`([0-9])${escapeRegExp(delimiters.thousands)}([0-9])`, "g"), "$1$2");
    stripped = stripped.replace(delimiters.decimal, ".");
    return stripped;
  }
  function unformatValue(inputString, delimiters, currencySymbol = "", ordinal, zeroFormat, abbreviations, format2) {
    if (inputString === "") {
      return void 0;
    }
    if (inputString === zeroFormat) {
      return 0;
    }
    let value = removeFormattingSymbols(inputString, delimiters, currencySymbol);
    return computeUnformattedValue(value, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations);
  }
  function matchesTime(inputString, delimiters) {
    let separators = inputString.indexOf(":") && delimiters.thousands !== ":";
    if (!separators) {
      return false;
    }
    let segments = inputString.split(":");
    if (segments.length !== 3) {
      return false;
    }
    let hours = +segments[0];
    let minutes = +segments[1];
    let seconds = +segments[2];
    return !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds);
  }
  function unformatTime(inputString) {
    let segments = inputString.split(":");
    let hours = +segments[0];
    let minutes = +segments[1];
    let seconds = +segments[2];
    return seconds + 60 * minutes + 3600 * hours;
  }
  function unformat(inputString, format2) {
    const globalState2 = requireGlobalState();
    let delimiters = globalState2.currentDelimiters();
    let currencySymbol = globalState2.currentCurrency().symbol;
    let ordinal = globalState2.currentOrdinal();
    let zeroFormat = globalState2.getZeroFormat();
    let abbreviations = globalState2.currentAbbreviations();
    let value = void 0;
    if (typeof inputString === "string") {
      if (matchesTime(inputString, delimiters)) {
        value = unformatTime(inputString);
      } else {
        value = unformatValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations);
      }
    } else if (typeof inputString === "number") {
      value = inputString;
    } else {
      return void 0;
    }
    if (value === void 0) {
      return void 0;
    }
    return value;
  }
  unformatting = {
    unformat
  };
  return unformatting;
}
var validating$1;
var hasRequiredValidating;
function requireValidating() {
  if (hasRequiredValidating)
    return validating$1;
  hasRequiredValidating = 1;
  let unformatter2 = requireUnformatting();
  const bcp47RegExp = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/;
  const validOutputValues = [
    "currency",
    "percent",
    "byte",
    "time",
    "ordinal",
    "number"
  ];
  const validForceAverageValues = [
    "trillion",
    "billion",
    "million",
    "thousand"
  ];
  const validCurrencyPosition = [
    "prefix",
    "infix",
    "postfix"
  ];
  const validNegativeValues = [
    "sign",
    "parenthesis"
  ];
  const validMandatoryAbbreviations = {
    type: "object",
    children: {
      thousand: {
        type: "string",
        mandatory: true
      },
      million: {
        type: "string",
        mandatory: true
      },
      billion: {
        type: "string",
        mandatory: true
      },
      trillion: {
        type: "string",
        mandatory: true
      }
    },
    mandatory: true
  };
  const validAbbreviations = {
    type: "object",
    children: {
      thousand: "string",
      million: "string",
      billion: "string",
      trillion: "string"
    }
  };
  const validBaseValues = [
    "decimal",
    "binary",
    "general"
  ];
  const validFormat = {
    output: {
      type: "string",
      validValues: validOutputValues
    },
    base: {
      type: "string",
      validValues: validBaseValues,
      restriction: (number, format2) => format2.output === "byte",
      message: "`base` must be provided only when the output is `byte`",
      mandatory: (format2) => format2.output === "byte"
    },
    characteristic: {
      type: "number",
      restriction: (number) => number >= 0,
      message: "value must be positive"
    },
    prefix: "string",
    postfix: "string",
    forceAverage: {
      type: "string",
      validValues: validForceAverageValues
    },
    average: "boolean",
    lowPrecision: {
      type: "boolean",
      restriction: (number, format2) => format2.average === true,
      message: "`lowPrecision` must be provided only when the option `average` is set"
    },
    currencyPosition: {
      type: "string",
      validValues: validCurrencyPosition
    },
    currencySymbol: "string",
    totalLength: {
      type: "number",
      restrictions: [
        {
          restriction: (number) => number >= 0,
          message: "value must be positive"
        },
        {
          restriction: (number, format2) => !format2.exponential,
          message: "`totalLength` is incompatible with `exponential`"
        }
      ]
    },
    mantissa: {
      type: "number",
      restriction: (number) => number >= 0,
      message: "value must be positive"
    },
    optionalMantissa: "boolean",
    trimMantissa: "boolean",
    roundingFunction: "function",
    optionalCharacteristic: "boolean",
    thousandSeparated: "boolean",
    spaceSeparated: "boolean",
    spaceSeparatedCurrency: "boolean",
    spaceSeparatedAbbreviation: "boolean",
    abbreviations: validAbbreviations,
    negative: {
      type: "string",
      validValues: validNegativeValues
    },
    forceSign: "boolean",
    exponential: {
      type: "boolean"
    },
    prefixSymbol: {
      type: "boolean",
      restriction: (number, format2) => format2.output === "percent",
      message: "`prefixSymbol` can be provided only when the output is `percent`"
    }
  };
  const validLanguage = {
    languageTag: {
      type: "string",
      mandatory: true,
      restriction: (tag) => {
        return tag.match(bcp47RegExp);
      },
      message: "the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)"
    },
    delimiters: {
      type: "object",
      children: {
        thousands: "string",
        decimal: "string",
        thousandsSize: "number"
      },
      mandatory: true
    },
    abbreviations: validMandatoryAbbreviations,
    spaceSeparated: "boolean",
    spaceSeparatedCurrency: "boolean",
    ordinal: {
      type: "function",
      mandatory: true
    },
    bytes: {
      type: "object",
      children: {
        binarySuffixes: "object",
        decimalSuffixes: "object"
      }
    },
    currency: {
      type: "object",
      children: {
        symbol: "string",
        position: "string",
        code: "string"
      },
      mandatory: true
    },
    defaults: "format",
    ordinalFormat: "format",
    byteFormat: "format",
    percentageFormat: "format",
    currencyFormat: "format",
    timeDefaults: "format",
    formats: {
      type: "object",
      children: {
        fourDigits: {
          type: "format",
          mandatory: true
        },
        fullWithTwoDecimals: {
          type: "format",
          mandatory: true
        },
        fullWithTwoDecimalsNoCurrency: {
          type: "format",
          mandatory: true
        },
        fullWithNoDecimals: {
          type: "format",
          mandatory: true
        }
      }
    }
  };
  function validate(input, format2) {
    let validInput = validateInput(input);
    let isFormatValid = validateFormat(format2);
    return validInput && isFormatValid;
  }
  function validateInput(input) {
    let value = unformatter2.unformat(input);
    return value !== void 0;
  }
  function validateSpec(toValidate, spec, prefix, skipMandatoryCheck = false) {
    let results = Object.keys(toValidate).map((key) => {
      if (!spec[key]) {
        console.error(`${prefix} Invalid key: ${key}`);
        return false;
      }
      let value = toValidate[key];
      let data = spec[key];
      if (typeof data === "string") {
        data = { type: data };
      }
      if (data.type === "format") {
        let valid = validateSpec(value, validFormat, `[Validate ${key}]`, true);
        if (!valid) {
          return false;
        }
      } else if (typeof value !== data.type) {
        console.error(`${prefix} ${key} type mismatched: "${data.type}" expected, "${typeof value}" provided`);
        return false;
      }
      if (data.restrictions && data.restrictions.length) {
        let length = data.restrictions.length;
        for (let i = 0; i < length; i++) {
          let { restriction, message } = data.restrictions[i];
          if (!restriction(value, toValidate)) {
            console.error(`${prefix} ${key} invalid value: ${message}`);
            return false;
          }
        }
      }
      if (data.restriction && !data.restriction(value, toValidate)) {
        console.error(`${prefix} ${key} invalid value: ${data.message}`);
        return false;
      }
      if (data.validValues && data.validValues.indexOf(value) === -1) {
        console.error(`${prefix} ${key} invalid value: must be among ${JSON.stringify(data.validValues)}, "${value}" provided`);
        return false;
      }
      if (data.children) {
        let valid = validateSpec(value, data.children, `[Validate ${key}]`);
        if (!valid) {
          return false;
        }
      }
      return true;
    });
    if (!skipMandatoryCheck) {
      results.push(...Object.keys(spec).map((key) => {
        let data = spec[key];
        if (typeof data === "string") {
          data = { type: data };
        }
        if (data.mandatory) {
          let mandatory = data.mandatory;
          if (typeof mandatory === "function") {
            mandatory = mandatory(toValidate);
          }
          if (mandatory && toValidate[key] === void 0) {
            console.error(`${prefix} Missing mandatory key "${key}"`);
            return false;
          }
        }
        return true;
      }));
    }
    return results.reduce((acc, current) => {
      return acc && current;
    }, true);
  }
  function validateFormat(format2) {
    return validateSpec(format2, validFormat, "[Validate format]");
  }
  function validateLanguage(language) {
    return validateSpec(language, validLanguage, "[Validate language]");
  }
  validating$1 = {
    validate,
    validateFormat,
    validateInput,
    validateLanguage
  };
  return validating$1;
}
function parsePrefix(string, result) {
  let match = string.match(/^{([^}]*)}/);
  if (match) {
    result.prefix = match[1];
    return string.slice(match[0].length);
  }
  return string;
}
function parsePostfix(string, result) {
  let match = string.match(/{([^}]*)}$/);
  if (match) {
    result.postfix = match[1];
    return string.slice(0, -match[0].length);
  }
  return string;
}
function parseOutput(string, result) {
  if (string.indexOf("$") !== -1) {
    result.output = "currency";
    return;
  }
  if (string.indexOf("%") !== -1) {
    result.output = "percent";
    return;
  }
  if (string.indexOf("bd") !== -1) {
    result.output = "byte";
    result.base = "general";
    return;
  }
  if (string.indexOf("b") !== -1) {
    result.output = "byte";
    result.base = "binary";
    return;
  }
  if (string.indexOf("d") !== -1) {
    result.output = "byte";
    result.base = "decimal";
    return;
  }
  if (string.indexOf(":") !== -1) {
    result.output = "time";
    return;
  }
  if (string.indexOf("o") !== -1) {
    result.output = "ordinal";
  }
}
function parseThousandSeparated(string, result) {
  if (string.indexOf(",") !== -1) {
    result.thousandSeparated = true;
  }
}
function parseSpaceSeparated(string, result) {
  if (string.indexOf(" ") !== -1) {
    result.spaceSeparated = true;
    result.spaceSeparatedCurrency = true;
    if (result.average || result.forceAverage) {
      result.spaceSeparatedAbbreviation = true;
    }
  }
}
function parseTotalLength(string, result) {
  let match = string.match(/[1-9]+[0-9]*/);
  if (match) {
    result.totalLength = +match[0];
  }
}
function parseCharacteristic(string, result) {
  let characteristic = string.split(".")[0];
  let match = characteristic.match(/0+/);
  if (match) {
    result.characteristic = match[0].length;
  }
}
function parseMantissa(string, result) {
  let mantissa = string.split(".")[1];
  if (mantissa) {
    let match = mantissa.match(/0+/);
    if (match) {
      result.mantissa = match[0].length;
    }
  }
}
function parseTrimMantissa(string, result) {
  const mantissa = string.split(".")[1];
  if (mantissa) {
    result.trimMantissa = mantissa.indexOf("[") !== -1;
  }
}
function parseAverage(string, result) {
  if (string.indexOf("a") !== -1) {
    result.average = true;
  }
}
function parseForceAverage(string, result) {
  if (string.indexOf("K") !== -1) {
    result.forceAverage = "thousand";
  } else if (string.indexOf("M") !== -1) {
    result.forceAverage = "million";
  } else if (string.indexOf("B") !== -1) {
    result.forceAverage = "billion";
  } else if (string.indexOf("T") !== -1) {
    result.forceAverage = "trillion";
  }
}
function parseOptionalMantissa(string, result) {
  if (string.match(/\[\.]/)) {
    result.optionalMantissa = true;
  } else if (string.match(/\./)) {
    result.optionalMantissa = false;
  }
}
function parseOptionalCharacteristic(string, result) {
  if (string.indexOf(".") !== -1) {
    let characteristic = string.split(".")[0];
    result.optionalCharacteristic = characteristic.indexOf("0") === -1;
  }
}
function parseNegative(string, result) {
  if (string.match(/^\+?\([^)]*\)$/)) {
    result.negative = "parenthesis";
  }
  if (string.match(/^\+?-/)) {
    result.negative = "sign";
  }
}
function parseForceSign(string, result) {
  if (string.match(/^\+/)) {
    result.forceSign = true;
  }
}
function parseFormat(string, result = {}) {
  if (typeof string !== "string") {
    return string;
  }
  string = parsePrefix(string, result);
  string = parsePostfix(string, result);
  parseOutput(string, result);
  parseTotalLength(string, result);
  parseCharacteristic(string, result);
  parseOptionalCharacteristic(string, result);
  parseAverage(string, result);
  parseForceAverage(string, result);
  parseMantissa(string, result);
  parseOptionalMantissa(string, result);
  parseTrimMantissa(string, result);
  parseThousandSeparated(string, result);
  parseSpaceSeparated(string, result);
  parseNegative(string, result);
  parseForceSign(string, result);
  return result;
}
var parsing$2 = {
  parseFormat
};
var globalState$2;
var hasRequiredGlobalState;
function requireGlobalState() {
  if (hasRequiredGlobalState)
    return globalState$2;
  hasRequiredGlobalState = 1;
  const enUS2 = requireEnUS();
  const validating2 = requireValidating();
  const parsing2 = parsing$2;
  let state = {};
  let currentLanguageTag = void 0;
  let languages = {};
  let zeroFormat = null;
  let globalDefaults = {};
  function chooseLanguage(tag) {
    currentLanguageTag = tag;
  }
  function currentLanguageData() {
    return languages[currentLanguageTag];
  }
  state.languages = () => Object.assign({}, languages);
  state.currentLanguage = () => currentLanguageTag;
  state.currentBytes = () => currentLanguageData().bytes || {};
  state.currentCurrency = () => currentLanguageData().currency;
  state.currentAbbreviations = () => currentLanguageData().abbreviations;
  state.currentDelimiters = () => currentLanguageData().delimiters;
  state.currentOrdinal = () => currentLanguageData().ordinal;
  state.currentDefaults = () => Object.assign({}, currentLanguageData().defaults, globalDefaults);
  state.currentOrdinalDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().ordinalFormat);
  state.currentByteDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().byteFormat);
  state.currentPercentageDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().percentageFormat);
  state.currentCurrencyDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().currencyFormat);
  state.currentTimeDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().timeFormat);
  state.setDefaults = (format2) => {
    format2 = parsing2.parseFormat(format2);
    if (validating2.validateFormat(format2)) {
      globalDefaults = format2;
    }
  };
  state.getZeroFormat = () => zeroFormat;
  state.setZeroFormat = (string) => zeroFormat = typeof string === "string" ? string : null;
  state.hasZeroFormat = () => zeroFormat !== null;
  state.languageData = (tag) => {
    if (tag) {
      if (languages[tag]) {
        return languages[tag];
      }
      throw new Error(`Unknown tag "${tag}"`);
    }
    return currentLanguageData();
  };
  state.registerLanguage = (data, useLanguage = false) => {
    if (!validating2.validateLanguage(data)) {
      throw new Error("Invalid language data");
    }
    languages[data.languageTag] = data;
    if (useLanguage) {
      chooseLanguage(data.languageTag);
    }
  };
  state.setLanguage = (tag, fallbackTag = enUS2.languageTag) => {
    if (!languages[tag]) {
      let suffix = tag.split("-")[0];
      let matchingLanguageTag = Object.keys(languages).find((each) => {
        return each.split("-")[0] === suffix;
      });
      if (!languages[matchingLanguageTag]) {
        chooseLanguage(fallbackTag);
        return;
      }
      chooseLanguage(matchingLanguageTag);
      return;
    }
    chooseLanguage(tag);
  };
  state.registerLanguage(enUS2);
  currentLanguageTag = enUS2.languageTag;
  globalState$2 = state;
  return globalState$2;
}
function commonjsRequire(path) {
  throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
function loadLanguagesInNode(tags, numbro2) {
  tags.forEach((tag) => {
    let data = void 0;
    try {
      data = commonjsRequire(`../languages/${tag}`);
    } catch (e) {
      console.error(`Unable to load "${tag}". No matching language file found.`);
    }
    if (data) {
      numbro2.registerLanguage(data);
    }
  });
}
var loading = (numbro2) => ({
  loadLanguagesInNode: (tags) => loadLanguagesInNode(tags, numbro2)
});
var bignumber = { exports: {} };
(function(module) {
  (function(globalObject) {
    var BigNumber2, isNumeric2 = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER = 9007199254740991, POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], SQRT_BASE = 1e7, MAX = 1e9;
    function clone2(configObject) {
      var div, convertBase, parseNumeric, P = BigNumber3.prototype = { constructor: BigNumber3, toString: null, valueOf: null }, ONE = new BigNumber3(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
        prefix: "",
        groupSize: 3,
        secondaryGroupSize: 0,
        groupSeparator: ",",
        decimalSeparator: ".",
        fractionGroupSize: 0,
        fractionGroupSeparator: " ",
        // non-breaking space
        suffix: ""
      }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
      function BigNumber3(v, b) {
        var alphabet, c, caseChanged, e, i, isNum, len, str, x = this;
        if (!(x instanceof BigNumber3))
          return new BigNumber3(v, b);
        if (b == null) {
          if (v && v._isBigNumber === true) {
            x.s = v.s;
            if (!v.c || v.e > MAX_EXP) {
              x.c = x.e = null;
            } else if (v.e < MIN_EXP) {
              x.c = [x.e = 0];
            } else {
              x.e = v.e;
              x.c = v.c.slice();
            }
            return;
          }
          if ((isNum = typeof v == "number") && v * 0 == 0) {
            x.s = 1 / v < 0 ? (v = -v, -1) : 1;
            if (v === ~~v) {
              for (e = 0, i = v; i >= 10; i /= 10, e++)
                ;
              if (e > MAX_EXP) {
                x.c = x.e = null;
              } else {
                x.e = e;
                x.c = [v];
              }
              return;
            }
            str = String(v);
          } else {
            if (!isNumeric2.test(str = String(v)))
              return parseNumeric(x, str, isNum);
            x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
          }
          if ((e = str.indexOf(".")) > -1)
            str = str.replace(".", "");
          if ((i = str.search(/e/i)) > 0) {
            if (e < 0)
              e = i;
            e += +str.slice(i + 1);
            str = str.substring(0, i);
          } else if (e < 0) {
            e = str.length;
          }
        } else {
          intCheck(b, 2, ALPHABET.length, "Base");
          if (b == 10 && alphabetHasNormalDecimalDigits) {
            x = new BigNumber3(v);
            return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
          }
          str = String(v);
          if (isNum = typeof v == "number") {
            if (v * 0 != 0)
              return parseNumeric(x, str, isNum, b);
            x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
            if (BigNumber3.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
              throw Error(tooManyDigits + v);
            }
          } else {
            x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
          }
          alphabet = ALPHABET.slice(0, b);
          e = i = 0;
          for (len = str.length; i < len; i++) {
            if (alphabet.indexOf(c = str.charAt(i)) < 0) {
              if (c == ".") {
                if (i > e) {
                  e = len;
                  continue;
                }
              } else if (!caseChanged) {
                if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                  caseChanged = true;
                  i = -1;
                  e = 0;
                  continue;
                }
              }
              return parseNumeric(x, String(v), isNum, b);
            }
          }
          isNum = false;
          str = convertBase(str, b, 10, x.s);
          if ((e = str.indexOf(".")) > -1)
            str = str.replace(".", "");
          else
            e = str.length;
        }
        for (i = 0; str.charCodeAt(i) === 48; i++)
          ;
        for (len = str.length; str.charCodeAt(--len) === 48; )
          ;
        if (str = str.slice(i, ++len)) {
          len -= i;
          if (isNum && BigNumber3.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
            throw Error(tooManyDigits + x.s * v);
          }
          if ((e = e - i - 1) > MAX_EXP) {
            x.c = x.e = null;
          } else if (e < MIN_EXP) {
            x.c = [x.e = 0];
          } else {
            x.e = e;
            x.c = [];
            i = (e + 1) % LOG_BASE;
            if (e < 0)
              i += LOG_BASE;
            if (i < len) {
              if (i)
                x.c.push(+str.slice(0, i));
              for (len -= LOG_BASE; i < len; ) {
                x.c.push(+str.slice(i, i += LOG_BASE));
              }
              i = LOG_BASE - (str = str.slice(i)).length;
            } else {
              i -= len;
            }
            for (; i--; str += "0")
              ;
            x.c.push(+str);
          }
        } else {
          x.c = [x.e = 0];
        }
      }
      BigNumber3.clone = clone2;
      BigNumber3.ROUND_UP = 0;
      BigNumber3.ROUND_DOWN = 1;
      BigNumber3.ROUND_CEIL = 2;
      BigNumber3.ROUND_FLOOR = 3;
      BigNumber3.ROUND_HALF_UP = 4;
      BigNumber3.ROUND_HALF_DOWN = 5;
      BigNumber3.ROUND_HALF_EVEN = 6;
      BigNumber3.ROUND_HALF_CEIL = 7;
      BigNumber3.ROUND_HALF_FLOOR = 8;
      BigNumber3.EUCLID = 9;
      BigNumber3.config = BigNumber3.set = function(obj) {
        var p, v;
        if (obj != null) {
          if (typeof obj == "object") {
            if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
              v = obj[p];
              intCheck(v, 0, MAX, p);
              DECIMAL_PLACES = v;
            }
            if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
              v = obj[p];
              intCheck(v, 0, 8, p);
              ROUNDING_MODE = v;
            }
            if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
              v = obj[p];
              if (v && v.pop) {
                intCheck(v[0], -MAX, 0, p);
                intCheck(v[1], 0, MAX, p);
                TO_EXP_NEG = v[0];
                TO_EXP_POS = v[1];
              } else {
                intCheck(v, -MAX, MAX, p);
                TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
              }
            }
            if (obj.hasOwnProperty(p = "RANGE")) {
              v = obj[p];
              if (v && v.pop) {
                intCheck(v[0], -MAX, -1, p);
                intCheck(v[1], 1, MAX, p);
                MIN_EXP = v[0];
                MAX_EXP = v[1];
              } else {
                intCheck(v, -MAX, MAX, p);
                if (v) {
                  MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                } else {
                  throw Error(bignumberError + p + " cannot be zero: " + v);
                }
              }
            }
            if (obj.hasOwnProperty(p = "CRYPTO")) {
              v = obj[p];
              if (v === !!v) {
                if (v) {
                  if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                    CRYPTO = v;
                  } else {
                    CRYPTO = !v;
                    throw Error(bignumberError + "crypto unavailable");
                  }
                } else {
                  CRYPTO = v;
                }
              } else {
                throw Error(bignumberError + p + " not true or false: " + v);
              }
            }
            if (obj.hasOwnProperty(p = "MODULO_MODE")) {
              v = obj[p];
              intCheck(v, 0, 9, p);
              MODULO_MODE = v;
            }
            if (obj.hasOwnProperty(p = "POW_PRECISION")) {
              v = obj[p];
              intCheck(v, 0, MAX, p);
              POW_PRECISION = v;
            }
            if (obj.hasOwnProperty(p = "FORMAT")) {
              v = obj[p];
              if (typeof v == "object")
                FORMAT = v;
              else
                throw Error(bignumberError + p + " not an object: " + v);
            }
            if (obj.hasOwnProperty(p = "ALPHABET")) {
              v = obj[p];
              if (typeof v == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
                alphabetHasNormalDecimalDigits = v.slice(0, 10) == "0123456789";
                ALPHABET = v;
              } else {
                throw Error(bignumberError + p + " invalid: " + v);
              }
            }
          } else {
            throw Error(bignumberError + "Object expected: " + obj);
          }
        }
        return {
          DECIMAL_PLACES,
          ROUNDING_MODE,
          EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
          RANGE: [MIN_EXP, MAX_EXP],
          CRYPTO,
          MODULO_MODE,
          POW_PRECISION,
          FORMAT,
          ALPHABET
        };
      };
      BigNumber3.isBigNumber = function(v) {
        if (!v || v._isBigNumber !== true)
          return false;
        if (!BigNumber3.DEBUG)
          return true;
        var i, n, c = v.c, e = v.e, s = v.s;
        out:
          if ({}.toString.call(c) == "[object Array]") {
            if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
              if (c[0] === 0) {
                if (e === 0 && c.length === 1)
                  return true;
                break out;
              }
              i = (e + 1) % LOG_BASE;
              if (i < 1)
                i += LOG_BASE;
              if (String(c[0]).length == i) {
                for (i = 0; i < c.length; i++) {
                  n = c[i];
                  if (n < 0 || n >= BASE || n !== mathfloor(n))
                    break out;
                }
                if (n !== 0)
                  return true;
              }
            }
          } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
            return true;
          }
        throw Error(bignumberError + "Invalid BigNumber: " + v);
      };
      BigNumber3.maximum = BigNumber3.max = function() {
        return maxOrMin(arguments, -1);
      };
      BigNumber3.minimum = BigNumber3.min = function() {
        return maxOrMin(arguments, 1);
      };
      BigNumber3.random = function() {
        var pow2_53 = 9007199254740992;
        var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
          return mathfloor(Math.random() * pow2_53);
        } : function() {
          return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
        };
        return function(dp) {
          var a, b, e, k, v, i = 0, c = [], rand = new BigNumber3(ONE);
          if (dp == null)
            dp = DECIMAL_PLACES;
          else
            intCheck(dp, 0, MAX);
          k = mathceil(dp / LOG_BASE);
          if (CRYPTO) {
            if (crypto.getRandomValues) {
              a = crypto.getRandomValues(new Uint32Array(k *= 2));
              for (; i < k; ) {
                v = a[i] * 131072 + (a[i + 1] >>> 11);
                if (v >= 9e15) {
                  b = crypto.getRandomValues(new Uint32Array(2));
                  a[i] = b[0];
                  a[i + 1] = b[1];
                } else {
                  c.push(v % 1e14);
                  i += 2;
                }
              }
              i = k / 2;
            } else if (crypto.randomBytes) {
              a = crypto.randomBytes(k *= 7);
              for (; i < k; ) {
                v = (a[i] & 31) * 281474976710656 + a[i + 1] * 1099511627776 + a[i + 2] * 4294967296 + a[i + 3] * 16777216 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
                if (v >= 9e15) {
                  crypto.randomBytes(7).copy(a, i);
                } else {
                  c.push(v % 1e14);
                  i += 7;
                }
              }
              i = k / 7;
            } else {
              CRYPTO = false;
              throw Error(bignumberError + "crypto unavailable");
            }
          }
          if (!CRYPTO) {
            for (; i < k; ) {
              v = random53bitInt();
              if (v < 9e15)
                c[i++] = v % 1e14;
            }
          }
          k = c[--i];
          dp %= LOG_BASE;
          if (k && dp) {
            v = POWS_TEN[LOG_BASE - dp];
            c[i] = mathfloor(k / v) * v;
          }
          for (; c[i] === 0; c.pop(), i--)
            ;
          if (i < 0) {
            c = [e = 0];
          } else {
            for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE)
              ;
            for (i = 1, v = c[0]; v >= 10; v /= 10, i++)
              ;
            if (i < LOG_BASE)
              e -= LOG_BASE - i;
          }
          rand.e = e;
          rand.c = c;
          return rand;
        };
      }();
      BigNumber3.sum = function() {
        var i = 1, args = arguments, sum = new BigNumber3(args[0]);
        for (; i < args.length; )
          sum = sum.plus(args[i++]);
        return sum;
      };
      convertBase = function() {
        var decimal = "0123456789";
        function toBaseOut(str, baseIn, baseOut, alphabet) {
          var j, arr = [0], arrL, i = 0, len = str.length;
          for (; i < len; ) {
            for (arrL = arr.length; arrL--; arr[arrL] *= baseIn)
              ;
            arr[0] += alphabet.indexOf(str.charAt(i++));
            for (j = 0; j < arr.length; j++) {
              if (arr[j] > baseOut - 1) {
                if (arr[j + 1] == null)
                  arr[j + 1] = 0;
                arr[j + 1] += arr[j] / baseOut | 0;
                arr[j] %= baseOut;
              }
            }
          }
          return arr.reverse();
        }
        return function(str, baseIn, baseOut, sign, callerIsToString) {
          var alphabet, d, e, k, r, x, xc, y, i = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
          if (i >= 0) {
            k = POW_PRECISION;
            POW_PRECISION = 0;
            str = str.replace(".", "");
            y = new BigNumber3(baseIn);
            x = y.pow(str.length - i);
            POW_PRECISION = k;
            y.c = toBaseOut(
              toFixedPoint(coeffToString(x.c), x.e, "0"),
              10,
              baseOut,
              decimal
            );
            y.e = y.c.length;
          }
          xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
          e = k = xc.length;
          for (; xc[--k] == 0; xc.pop())
            ;
          if (!xc[0])
            return alphabet.charAt(0);
          if (i < 0) {
            --e;
          } else {
            x.c = xc;
            x.e = e;
            x.s = sign;
            x = div(x, y, dp, rm, baseOut);
            xc = x.c;
            r = x.r;
            e = x.e;
          }
          d = e + dp + 1;
          i = xc[d];
          k = baseOut / 2;
          r = r || d < 0 || xc[d + 1] != null;
          r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
          if (d < 1 || !xc[0]) {
            str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
          } else {
            xc.length = d;
            if (r) {
              for (--baseOut; ++xc[--d] > baseOut; ) {
                xc[d] = 0;
                if (!d) {
                  ++e;
                  xc = [1].concat(xc);
                }
              }
            }
            for (k = xc.length; !xc[--k]; )
              ;
            for (i = 0, str = ""; i <= k; str += alphabet.charAt(xc[i++]))
              ;
            str = toFixedPoint(str, e, alphabet.charAt(0));
          }
          return str;
        };
      }();
      div = function() {
        function multiply2(x, k, base) {
          var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
          for (x = x.slice(); i--; ) {
            xlo = x[i] % SQRT_BASE;
            xhi = x[i] / SQRT_BASE | 0;
            m = khi * xlo + xhi * klo;
            temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
            carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
            x[i] = temp % base;
          }
          if (carry)
            x = [carry].concat(x);
          return x;
        }
        function compare2(a, b, aL, bL) {
          var i, cmp;
          if (aL != bL) {
            cmp = aL > bL ? 1 : -1;
          } else {
            for (i = cmp = 0; i < aL; i++) {
              if (a[i] != b[i]) {
                cmp = a[i] > b[i] ? 1 : -1;
                break;
              }
            }
          }
          return cmp;
        }
        function subtract2(a, b, aL, base) {
          var i = 0;
          for (; aL--; ) {
            a[aL] -= i;
            i = a[aL] < b[aL] ? 1 : 0;
            a[aL] = i * base + a[aL] - b[aL];
          }
          for (; !a[0] && a.length > 1; a.splice(0, 1))
            ;
        }
        return function(x, y, dp, rm, base) {
          var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
          if (!xc || !xc[0] || !yc || !yc[0]) {
            return new BigNumber3(
              // Return NaN if either NaN, or both Infinity or 0.
              !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : (
                // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                xc && xc[0] == 0 || !yc ? s * 0 : s / 0
              )
            );
          }
          q = new BigNumber3(s);
          qc = q.c = [];
          e = x.e - y.e;
          s = dp + e + 1;
          if (!base) {
            base = BASE;
            e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
            s = s / LOG_BASE | 0;
          }
          for (i = 0; yc[i] == (xc[i] || 0); i++)
            ;
          if (yc[i] > (xc[i] || 0))
            e--;
          if (s < 0) {
            qc.push(1);
            more = true;
          } else {
            xL = xc.length;
            yL = yc.length;
            i = 0;
            s += 2;
            n = mathfloor(base / (yc[0] + 1));
            if (n > 1) {
              yc = multiply2(yc, n, base);
              xc = multiply2(xc, n, base);
              yL = yc.length;
              xL = xc.length;
            }
            xi = yL;
            rem = xc.slice(0, yL);
            remL = rem.length;
            for (; remL < yL; rem[remL++] = 0)
              ;
            yz = yc.slice();
            yz = [0].concat(yz);
            yc0 = yc[0];
            if (yc[1] >= base / 2)
              yc0++;
            do {
              n = 0;
              cmp = compare2(yc, rem, yL, remL);
              if (cmp < 0) {
                rem0 = rem[0];
                if (yL != remL)
                  rem0 = rem0 * base + (rem[1] || 0);
                n = mathfloor(rem0 / yc0);
                if (n > 1) {
                  if (n >= base)
                    n = base - 1;
                  prod = multiply2(yc, n, base);
                  prodL = prod.length;
                  remL = rem.length;
                  while (compare2(prod, rem, prodL, remL) == 1) {
                    n--;
                    subtract2(prod, yL < prodL ? yz : yc, prodL, base);
                    prodL = prod.length;
                    cmp = 1;
                  }
                } else {
                  if (n == 0) {
                    cmp = n = 1;
                  }
                  prod = yc.slice();
                  prodL = prod.length;
                }
                if (prodL < remL)
                  prod = [0].concat(prod);
                subtract2(rem, prod, remL, base);
                remL = rem.length;
                if (cmp == -1) {
                  while (compare2(yc, rem, yL, remL) < 1) {
                    n++;
                    subtract2(rem, yL < remL ? yz : yc, remL, base);
                    remL = rem.length;
                  }
                }
              } else if (cmp === 0) {
                n++;
                rem = [0];
              }
              qc[i++] = n;
              if (rem[0]) {
                rem[remL++] = xc[xi] || 0;
              } else {
                rem = [xc[xi]];
                remL = 1;
              }
            } while ((xi++ < xL || rem[0] != null) && s--);
            more = rem[0] != null;
            if (!qc[0])
              qc.splice(0, 1);
          }
          if (base == BASE) {
            for (i = 1, s = qc[0]; s >= 10; s /= 10, i++)
              ;
            round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
          } else {
            q.e = e;
            q.r = +more;
          }
          return q;
        };
      }();
      function format2(n, i, rm, id) {
        var c0, e, ne, len, str;
        if (rm == null)
          rm = ROUNDING_MODE;
        else
          intCheck(rm, 0, 8);
        if (!n.c)
          return n.toString();
        c0 = n.c[0];
        ne = n.e;
        if (i == null) {
          str = coeffToString(n.c);
          str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
        } else {
          n = round(new BigNumber3(n), i, rm);
          e = n.e;
          str = coeffToString(n.c);
          len = str.length;
          if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
            for (; len < i; str += "0", len++)
              ;
            str = toExponential(str, e);
          } else {
            i -= ne;
            str = toFixedPoint(str, e, "0");
            if (e + 1 > len) {
              if (--i > 0)
                for (str += "."; i--; str += "0")
                  ;
            } else {
              i += e - len;
              if (i > 0) {
                if (e + 1 == len)
                  str += ".";
                for (; i--; str += "0")
                  ;
              }
            }
          }
        }
        return n.s < 0 && c0 ? "-" + str : str;
      }
      function maxOrMin(args, n) {
        var k, y, i = 1, x = new BigNumber3(args[0]);
        for (; i < args.length; i++) {
          y = new BigNumber3(args[i]);
          if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {
            x = y;
          }
        }
        return x;
      }
      function normalise(n, c, e) {
        var i = 1, j = c.length;
        for (; !c[--j]; c.pop())
          ;
        for (j = c[0]; j >= 10; j /= 10, i++)
          ;
        if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
          n.c = n.e = null;
        } else if (e < MIN_EXP) {
          n.c = [n.e = 0];
        } else {
          n.e = e;
          n.c = c;
        }
        return n;
      }
      parseNumeric = function() {
        var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
        return function(x, str, isNum, b) {
          var base, s = isNum ? str : str.replace(whitespaceOrPlus, "");
          if (isInfinityOrNaN.test(s)) {
            x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
          } else {
            if (!isNum) {
              s = s.replace(basePrefix, function(m, p1, p2) {
                base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
                return !b || b == base ? p1 : m;
              });
              if (b) {
                base = b;
                s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
              }
              if (str != s)
                return new BigNumber3(s, base);
            }
            if (BigNumber3.DEBUG) {
              throw Error(bignumberError + "Not a" + (b ? " base " + b : "") + " number: " + str);
            }
            x.s = null;
          }
          x.c = x.e = null;
        };
      }();
      function round(x, sd, rm, r) {
        var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
        if (xc) {
          out: {
            for (d = 1, k = xc[0]; k >= 10; k /= 10, d++)
              ;
            i = sd - d;
            if (i < 0) {
              i += LOG_BASE;
              j = sd;
              n = xc[ni = 0];
              rd = mathfloor(n / pows10[d - j - 1] % 10);
            } else {
              ni = mathceil((i + 1) / LOG_BASE);
              if (ni >= xc.length) {
                if (r) {
                  for (; xc.length <= ni; xc.push(0))
                    ;
                  n = rd = 0;
                  d = 1;
                  i %= LOG_BASE;
                  j = i - LOG_BASE + 1;
                } else {
                  break out;
                }
              } else {
                n = k = xc[ni];
                for (d = 1; k >= 10; k /= 10, d++)
                  ;
                i %= LOG_BASE;
                j = i - LOG_BASE + d;
                rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
              }
            }
            r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
            // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
            // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
            xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
            r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
            (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
            if (sd < 1 || !xc[0]) {
              xc.length = 0;
              if (r) {
                sd -= x.e + 1;
                xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                x.e = -sd || 0;
              } else {
                xc[0] = x.e = 0;
              }
              return x;
            }
            if (i == 0) {
              xc.length = ni;
              k = 1;
              ni--;
            } else {
              xc.length = ni + 1;
              k = pows10[LOG_BASE - i];
              xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
            }
            if (r) {
              for (; ; ) {
                if (ni == 0) {
                  for (i = 1, j = xc[0]; j >= 10; j /= 10, i++)
                    ;
                  j = xc[0] += k;
                  for (k = 1; j >= 10; j /= 10, k++)
                    ;
                  if (i != k) {
                    x.e++;
                    if (xc[0] == BASE)
                      xc[0] = 1;
                  }
                  break;
                } else {
                  xc[ni] += k;
                  if (xc[ni] != BASE)
                    break;
                  xc[ni--] = 0;
                  k = 1;
                }
              }
            }
            for (i = xc.length; xc[--i] === 0; xc.pop())
              ;
          }
          if (x.e > MAX_EXP) {
            x.c = x.e = null;
          } else if (x.e < MIN_EXP) {
            x.c = [x.e = 0];
          }
        }
        return x;
      }
      function valueOf(n) {
        var str, e = n.e;
        if (e === null)
          return n.toString();
        str = coeffToString(n.c);
        str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
        return n.s < 0 ? "-" + str : str;
      }
      P.absoluteValue = P.abs = function() {
        var x = new BigNumber3(this);
        if (x.s < 0)
          x.s = 1;
        return x;
      };
      P.comparedTo = function(y, b) {
        return compare(this, new BigNumber3(y, b));
      };
      P.decimalPlaces = P.dp = function(dp, rm) {
        var c, n, v, x = this;
        if (dp != null) {
          intCheck(dp, 0, MAX);
          if (rm == null)
            rm = ROUNDING_MODE;
          else
            intCheck(rm, 0, 8);
          return round(new BigNumber3(x), dp + x.e + 1, rm);
        }
        if (!(c = x.c))
          return null;
        n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
        if (v = c[v])
          for (; v % 10 == 0; v /= 10, n--)
            ;
        if (n < 0)
          n = 0;
        return n;
      };
      P.dividedBy = P.div = function(y, b) {
        return div(this, new BigNumber3(y, b), DECIMAL_PLACES, ROUNDING_MODE);
      };
      P.dividedToIntegerBy = P.idiv = function(y, b) {
        return div(this, new BigNumber3(y, b), 0, 1);
      };
      P.exponentiatedBy = P.pow = function(n, m) {
        var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
        n = new BigNumber3(n);
        if (n.c && !n.isInteger()) {
          throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
        }
        if (m != null)
          m = new BigNumber3(m);
        nIsBig = n.e > 14;
        if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
          y = new BigNumber3(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
          return m ? y.mod(m) : y;
        }
        nIsNeg = n.s < 0;
        if (m) {
          if (m.c ? !m.c[0] : !m.s)
            return new BigNumber3(NaN);
          isModExp = !nIsNeg && x.isInteger() && m.isInteger();
          if (isModExp)
            x = x.mod(m);
        } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
          k = x.s < 0 && isOdd(n) ? -0 : 0;
          if (x.e > -1)
            k = 1 / k;
          return new BigNumber3(nIsNeg ? 1 / k : k);
        } else if (POW_PRECISION) {
          k = mathceil(POW_PRECISION / LOG_BASE + 2);
        }
        if (nIsBig) {
          half = new BigNumber3(0.5);
          if (nIsNeg)
            n.s = 1;
          nIsOdd = isOdd(n);
        } else {
          i = Math.abs(+valueOf(n));
          nIsOdd = i % 2;
        }
        y = new BigNumber3(ONE);
        for (; ; ) {
          if (nIsOdd) {
            y = y.times(x);
            if (!y.c)
              break;
            if (k) {
              if (y.c.length > k)
                y.c.length = k;
            } else if (isModExp) {
              y = y.mod(m);
            }
          }
          if (i) {
            i = mathfloor(i / 2);
            if (i === 0)
              break;
            nIsOdd = i % 2;
          } else {
            n = n.times(half);
            round(n, n.e + 1, 1);
            if (n.e > 14) {
              nIsOdd = isOdd(n);
            } else {
              i = +valueOf(n);
              if (i === 0)
                break;
              nIsOdd = i % 2;
            }
          }
          x = x.times(x);
          if (k) {
            if (x.c && x.c.length > k)
              x.c.length = k;
          } else if (isModExp) {
            x = x.mod(m);
          }
        }
        if (isModExp)
          return y;
        if (nIsNeg)
          y = ONE.div(y);
        return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
      };
      P.integerValue = function(rm) {
        var n = new BigNumber3(this);
        if (rm == null)
          rm = ROUNDING_MODE;
        else
          intCheck(rm, 0, 8);
        return round(n, n.e + 1, rm);
      };
      P.isEqualTo = P.eq = function(y, b) {
        return compare(this, new BigNumber3(y, b)) === 0;
      };
      P.isFinite = function() {
        return !!this.c;
      };
      P.isGreaterThan = P.gt = function(y, b) {
        return compare(this, new BigNumber3(y, b)) > 0;
      };
      P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
        return (b = compare(this, new BigNumber3(y, b))) === 1 || b === 0;
      };
      P.isInteger = function() {
        return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
      };
      P.isLessThan = P.lt = function(y, b) {
        return compare(this, new BigNumber3(y, b)) < 0;
      };
      P.isLessThanOrEqualTo = P.lte = function(y, b) {
        return (b = compare(this, new BigNumber3(y, b))) === -1 || b === 0;
      };
      P.isNaN = function() {
        return !this.s;
      };
      P.isNegative = function() {
        return this.s < 0;
      };
      P.isPositive = function() {
        return this.s > 0;
      };
      P.isZero = function() {
        return !!this.c && this.c[0] == 0;
      };
      P.minus = function(y, b) {
        var i, j, t, xLTy, x = this, a = x.s;
        y = new BigNumber3(y, b);
        b = y.s;
        if (!a || !b)
          return new BigNumber3(NaN);
        if (a != b) {
          y.s = -b;
          return x.plus(y);
        }
        var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
        if (!xe || !ye) {
          if (!xc || !yc)
            return xc ? (y.s = -b, y) : new BigNumber3(yc ? x : NaN);
          if (!xc[0] || !yc[0]) {
            return yc[0] ? (y.s = -b, y) : new BigNumber3(xc[0] ? x : (
              // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
              ROUNDING_MODE == 3 ? -0 : 0
            ));
          }
        }
        xe = bitFloor(xe);
        ye = bitFloor(ye);
        xc = xc.slice();
        if (a = xe - ye) {
          if (xLTy = a < 0) {
            a = -a;
            t = xc;
          } else {
            ye = xe;
            t = yc;
          }
          t.reverse();
          for (b = a; b--; t.push(0))
            ;
          t.reverse();
        } else {
          j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
          for (a = b = 0; b < j; b++) {
            if (xc[b] != yc[b]) {
              xLTy = xc[b] < yc[b];
              break;
            }
          }
        }
        if (xLTy) {
          t = xc;
          xc = yc;
          yc = t;
          y.s = -y.s;
        }
        b = (j = yc.length) - (i = xc.length);
        if (b > 0)
          for (; b--; xc[i++] = 0)
            ;
        b = BASE - 1;
        for (; j > a; ) {
          if (xc[--j] < yc[j]) {
            for (i = j; i && !xc[--i]; xc[i] = b)
              ;
            --xc[i];
            xc[j] += BASE;
          }
          xc[j] -= yc[j];
        }
        for (; xc[0] == 0; xc.splice(0, 1), --ye)
          ;
        if (!xc[0]) {
          y.s = ROUNDING_MODE == 3 ? -1 : 1;
          y.c = [y.e = 0];
          return y;
        }
        return normalise(y, xc, ye);
      };
      P.modulo = P.mod = function(y, b) {
        var q, s, x = this;
        y = new BigNumber3(y, b);
        if (!x.c || !y.s || y.c && !y.c[0]) {
          return new BigNumber3(NaN);
        } else if (!y.c || x.c && !x.c[0]) {
          return new BigNumber3(x);
        }
        if (MODULO_MODE == 9) {
          s = y.s;
          y.s = 1;
          q = div(x, y, 0, 3);
          y.s = s;
          q.s *= s;
        } else {
          q = div(x, y, 0, MODULO_MODE);
        }
        y = x.minus(q.times(y));
        if (!y.c[0] && MODULO_MODE == 1)
          y.s = x.s;
        return y;
      };
      P.multipliedBy = P.times = function(y, b) {
        var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber3(y, b)).c;
        if (!xc || !yc || !xc[0] || !yc[0]) {
          if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
            y.c = y.e = y.s = null;
          } else {
            y.s *= x.s;
            if (!xc || !yc) {
              y.c = y.e = null;
            } else {
              y.c = [0];
              y.e = 0;
            }
          }
          return y;
        }
        e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
        y.s *= x.s;
        xcL = xc.length;
        ycL = yc.length;
        if (xcL < ycL) {
          zc = xc;
          xc = yc;
          yc = zc;
          i = xcL;
          xcL = ycL;
          ycL = i;
        }
        for (i = xcL + ycL, zc = []; i--; zc.push(0))
          ;
        base = BASE;
        sqrtBase = SQRT_BASE;
        for (i = ycL; --i >= 0; ) {
          c = 0;
          ylo = yc[i] % sqrtBase;
          yhi = yc[i] / sqrtBase | 0;
          for (k = xcL, j = i + k; j > i; ) {
            xlo = xc[--k] % sqrtBase;
            xhi = xc[k] / sqrtBase | 0;
            m = yhi * xlo + xhi * ylo;
            xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
            c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
            zc[j--] = xlo % base;
          }
          zc[j] = c;
        }
        if (c) {
          ++e;
        } else {
          zc.splice(0, 1);
        }
        return normalise(y, zc, e);
      };
      P.negated = function() {
        var x = new BigNumber3(this);
        x.s = -x.s || null;
        return x;
      };
      P.plus = function(y, b) {
        var t, x = this, a = x.s;
        y = new BigNumber3(y, b);
        b = y.s;
        if (!a || !b)
          return new BigNumber3(NaN);
        if (a != b) {
          y.s = -b;
          return x.minus(y);
        }
        var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
        if (!xe || !ye) {
          if (!xc || !yc)
            return new BigNumber3(a / 0);
          if (!xc[0] || !yc[0])
            return yc[0] ? y : new BigNumber3(xc[0] ? x : a * 0);
        }
        xe = bitFloor(xe);
        ye = bitFloor(ye);
        xc = xc.slice();
        if (a = xe - ye) {
          if (a > 0) {
            ye = xe;
            t = yc;
          } else {
            a = -a;
            t = xc;
          }
          t.reverse();
          for (; a--; t.push(0))
            ;
          t.reverse();
        }
        a = xc.length;
        b = yc.length;
        if (a - b < 0) {
          t = yc;
          yc = xc;
          xc = t;
          b = a;
        }
        for (a = 0; b; ) {
          a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
          xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
        }
        if (a) {
          xc = [a].concat(xc);
          ++ye;
        }
        return normalise(y, xc, ye);
      };
      P.precision = P.sd = function(sd, rm) {
        var c, n, v, x = this;
        if (sd != null && sd !== !!sd) {
          intCheck(sd, 1, MAX);
          if (rm == null)
            rm = ROUNDING_MODE;
          else
            intCheck(rm, 0, 8);
          return round(new BigNumber3(x), sd, rm);
        }
        if (!(c = x.c))
          return null;
        v = c.length - 1;
        n = v * LOG_BASE + 1;
        if (v = c[v]) {
          for (; v % 10 == 0; v /= 10, n--)
            ;
          for (v = c[0]; v >= 10; v /= 10, n++)
            ;
        }
        if (sd && x.e + 1 > n)
          n = x.e + 1;
        return n;
      };
      P.shiftedBy = function(k) {
        intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
        return this.times("1e" + k);
      };
      P.squareRoot = P.sqrt = function() {
        var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber3("0.5");
        if (s !== 1 || !c || !c[0]) {
          return new BigNumber3(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
        }
        s = Math.sqrt(+valueOf(x));
        if (s == 0 || s == 1 / 0) {
          n = coeffToString(c);
          if ((n.length + e) % 2 == 0)
            n += "0";
          s = Math.sqrt(+n);
          e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
          if (s == 1 / 0) {
            n = "5e" + e;
          } else {
            n = s.toExponential();
            n = n.slice(0, n.indexOf("e") + 1) + e;
          }
          r = new BigNumber3(n);
        } else {
          r = new BigNumber3(s + "");
        }
        if (r.c[0]) {
          e = r.e;
          s = e + dp;
          if (s < 3)
            s = 0;
          for (; ; ) {
            t = r;
            r = half.times(t.plus(div(x, t, dp, 1)));
            if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
              if (r.e < e)
                --s;
              n = n.slice(s - 3, s + 1);
              if (n == "9999" || !rep && n == "4999") {
                if (!rep) {
                  round(t, t.e + DECIMAL_PLACES + 2, 0);
                  if (t.times(t).eq(x)) {
                    r = t;
                    break;
                  }
                }
                dp += 4;
                s += 4;
                rep = 1;
              } else {
                if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                  round(r, r.e + DECIMAL_PLACES + 2, 1);
                  m = !r.times(r).eq(x);
                }
                break;
              }
            }
          }
        }
        return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
      };
      P.toExponential = function(dp, rm) {
        if (dp != null) {
          intCheck(dp, 0, MAX);
          dp++;
        }
        return format2(this, dp, rm, 1);
      };
      P.toFixed = function(dp, rm) {
        if (dp != null) {
          intCheck(dp, 0, MAX);
          dp = dp + this.e + 1;
        }
        return format2(this, dp, rm);
      };
      P.toFormat = function(dp, rm, format3) {
        var str, x = this;
        if (format3 == null) {
          if (dp != null && rm && typeof rm == "object") {
            format3 = rm;
            rm = null;
          } else if (dp && typeof dp == "object") {
            format3 = dp;
            dp = rm = null;
          } else {
            format3 = FORMAT;
          }
        } else if (typeof format3 != "object") {
          throw Error(bignumberError + "Argument not an object: " + format3);
        }
        str = x.toFixed(dp, rm);
        if (x.c) {
          var i, arr = str.split("."), g1 = +format3.groupSize, g2 = +format3.secondaryGroupSize, groupSeparator = format3.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
          if (g2) {
            i = g1;
            g1 = g2;
            g2 = i;
            len -= i;
          }
          if (g1 > 0 && len > 0) {
            i = len % g1 || g1;
            intPart = intDigits.substr(0, i);
            for (; i < len; i += g1)
              intPart += groupSeparator + intDigits.substr(i, g1);
            if (g2 > 0)
              intPart += groupSeparator + intDigits.slice(i);
            if (isNeg)
              intPart = "-" + intPart;
          }
          str = fractionPart ? intPart + (format3.decimalSeparator || "") + ((g2 = +format3.fractionGroupSize) ? fractionPart.replace(
            new RegExp("\\d{" + g2 + "}\\B", "g"),
            "$&" + (format3.fractionGroupSeparator || "")
          ) : fractionPart) : intPart;
        }
        return (format3.prefix || "") + str + (format3.suffix || "");
      };
      P.toFraction = function(md) {
        var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s, x = this, xc = x.c;
        if (md != null) {
          n = new BigNumber3(md);
          if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
            throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
          }
        }
        if (!xc)
          return new BigNumber3(x);
        d = new BigNumber3(ONE);
        n1 = d0 = new BigNumber3(ONE);
        d1 = n0 = new BigNumber3(ONE);
        s = coeffToString(xc);
        e = d.e = s.length - x.e - 1;
        d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
        md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
        exp = MAX_EXP;
        MAX_EXP = 1 / 0;
        n = new BigNumber3(s);
        n0.c[0] = 0;
        for (; ; ) {
          q = div(n, d, 0, 1);
          d2 = d0.plus(q.times(d1));
          if (d2.comparedTo(md) == 1)
            break;
          d0 = d1;
          d1 = d2;
          n1 = n0.plus(q.times(d2 = n1));
          n0 = d2;
          d = n.minus(q.times(d2 = d));
          n = d2;
        }
        d2 = div(md.minus(d0), d1, 0, 1);
        n0 = n0.plus(d2.times(n1));
        d0 = d0.plus(d2.times(d1));
        n0.s = n1.s = x.s;
        e = e * 2;
        r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()
        ) < 1 ? [n1, d1] : [n0, d0];
        MAX_EXP = exp;
        return r;
      };
      P.toNumber = function() {
        return +valueOf(this);
      };
      P.toPrecision = function(sd, rm) {
        if (sd != null)
          intCheck(sd, 1, MAX);
        return format2(this, sd, rm, 2);
      };
      P.toString = function(b) {
        var str, n = this, s = n.s, e = n.e;
        if (e === null) {
          if (s) {
            str = "Infinity";
            if (s < 0)
              str = "-" + str;
          } else {
            str = "NaN";
          }
        } else {
          if (b == null) {
            str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
          } else if (b === 10 && alphabetHasNormalDecimalDigits) {
            n = round(new BigNumber3(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
            str = toFixedPoint(coeffToString(n.c), n.e, "0");
          } else {
            intCheck(b, 2, ALPHABET.length, "Base");
            str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b, s, true);
          }
          if (s < 0 && n.c[0])
            str = "-" + str;
        }
        return str;
      };
      P.valueOf = P.toJSON = function() {
        return valueOf(this);
      };
      P._isBigNumber = true;
      if (configObject != null)
        BigNumber3.set(configObject);
      return BigNumber3;
    }
    function bitFloor(n) {
      var i = n | 0;
      return n > 0 || n === i ? i : i - 1;
    }
    function coeffToString(a) {
      var s, z, i = 1, j = a.length, r = a[0] + "";
      for (; i < j; ) {
        s = a[i++] + "";
        z = LOG_BASE - s.length;
        for (; z--; s = "0" + s)
          ;
        r += s;
      }
      for (j = r.length; r.charCodeAt(--j) === 48; )
        ;
      return r.slice(0, j + 1 || 1);
    }
    function compare(x, y) {
      var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
      if (!i || !j)
        return null;
      a = xc && !xc[0];
      b = yc && !yc[0];
      if (a || b)
        return a ? b ? 0 : -j : i;
      if (i != j)
        return i;
      a = i < 0;
      b = k == l;
      if (!xc || !yc)
        return b ? 0 : !xc ^ a ? 1 : -1;
      if (!b)
        return k > l ^ a ? 1 : -1;
      j = (k = xc.length) < (l = yc.length) ? k : l;
      for (i = 0; i < j; i++)
        if (xc[i] != yc[i])
          return xc[i] > yc[i] ^ a ? 1 : -1;
      return k == l ? 0 : k > l ^ a ? 1 : -1;
    }
    function intCheck(n, min, max, name) {
      if (n < min || n > max || n !== mathfloor(n)) {
        throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min || n > max ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
      }
    }
    function isOdd(n) {
      var k = n.c.length - 1;
      return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
    }
    function toExponential(str, e) {
      return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
    }
    function toFixedPoint(str, e, z) {
      var len, zs;
      if (e < 0) {
        for (zs = z + "."; ++e; zs += z)
          ;
        str = zs + str;
      } else {
        len = str.length;
        if (++e > len) {
          for (zs = z, e -= len; --e; zs += z)
            ;
          str += zs;
        } else if (e < len) {
          str = str.slice(0, e) + "." + str.slice(e);
        }
      }
      return str;
    }
    BigNumber2 = clone2();
    BigNumber2["default"] = BigNumber2.BigNumber = BigNumber2;
    if (module.exports) {
      module.exports = BigNumber2;
    } else {
      if (!globalObject) {
        globalObject = typeof self != "undefined" && self ? self : window;
      }
      globalObject.BigNumber = BigNumber2;
    }
  })(commonjsGlobal);
})(bignumber);
var bignumberExports = bignumber.exports;
var globalState$1 = requireGlobalState();
var validating = requireValidating();
var parsing$1 = parsing$2;
var BigNumber$1 = bignumberExports;
var powers = {
  trillion: Math.pow(10, 12),
  billion: Math.pow(10, 9),
  million: Math.pow(10, 6),
  thousand: Math.pow(10, 3)
};
var defaultOptions = {
  totalLength: 0,
  characteristic: 0,
  forceAverage: false,
  average: false,
  mantissa: -1,
  optionalMantissa: true,
  thousandSeparated: false,
  spaceSeparated: false,
  negative: "sign",
  forceSign: false,
  roundingFunction: Math.round,
  spaceSeparatedAbbreviation: false
};
var { binarySuffixes, decimalSuffixes } = globalState$1.currentBytes();
var bytes = {
  general: { scale: 1024, suffixes: decimalSuffixes, marker: "bd" },
  binary: { scale: 1024, suffixes: binarySuffixes, marker: "b" },
  decimal: { scale: 1e3, suffixes: decimalSuffixes, marker: "d" }
};
function format(instance, providedFormat = {}, numbro2) {
  if (typeof providedFormat === "string") {
    providedFormat = parsing$1.parseFormat(providedFormat);
  }
  let valid = validating.validateFormat(providedFormat);
  if (!valid) {
    return "ERROR: invalid format";
  }
  let prefix = providedFormat.prefix || "";
  let postfix = providedFormat.postfix || "";
  let output = formatNumbro(instance, providedFormat, numbro2);
  output = insertPrefix(output, prefix);
  output = insertPostfix(output, postfix);
  return output;
}
function formatNumbro(instance, providedFormat, numbro2) {
  switch (providedFormat.output) {
    case "currency": {
      providedFormat = formatOrDefault(providedFormat, globalState$1.currentCurrencyDefaultFormat());
      return formatCurrency(instance, providedFormat, globalState$1);
    }
    case "percent": {
      providedFormat = formatOrDefault(providedFormat, globalState$1.currentPercentageDefaultFormat());
      return formatPercentage(instance, providedFormat, globalState$1, numbro2);
    }
    case "byte":
      providedFormat = formatOrDefault(providedFormat, globalState$1.currentByteDefaultFormat());
      return formatByte(instance, providedFormat, globalState$1, numbro2);
    case "time":
      providedFormat = formatOrDefault(providedFormat, globalState$1.currentTimeDefaultFormat());
      return formatTime(instance);
    case "ordinal":
      providedFormat = formatOrDefault(providedFormat, globalState$1.currentOrdinalDefaultFormat());
      return formatOrdinal(instance, providedFormat, globalState$1);
    case "number":
    default:
      return formatNumber({
        instance,
        providedFormat,
        numbro: numbro2
      });
  }
}
function getDecimalByteUnit(instance) {
  let data = bytes.decimal;
  return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;
}
function getBinaryByteUnit(instance) {
  let data = bytes.binary;
  return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;
}
function getByteUnit(instance) {
  let data = bytes.general;
  return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;
}
function getFormatByteUnits(value, suffixes, scale) {
  let suffix = suffixes[0];
  let abs = Math.abs(value);
  if (abs >= scale) {
    for (let power = 1; power < suffixes.length; ++power) {
      let min = Math.pow(scale, power);
      let max = Math.pow(scale, power + 1);
      if (abs >= min && abs < max) {
        suffix = suffixes[power];
        value = value / min;
        break;
      }
    }
    if (suffix === suffixes[0]) {
      value = value / Math.pow(scale, suffixes.length - 1);
      suffix = suffixes[suffixes.length - 1];
    }
  }
  return { value, suffix };
}
function formatByte(instance, providedFormat, state, numbro2) {
  let base = providedFormat.base || "binary";
  let options = Object.assign({}, defaultOptions, providedFormat);
  const { binarySuffixes: localBinarySuffixes, decimalSuffixes: localDecimalSuffixes } = state.currentBytes();
  const localBytes = {
    general: { scale: 1024, suffixes: localDecimalSuffixes || decimalSuffixes, marker: "bd" },
    binary: { scale: 1024, suffixes: localBinarySuffixes || binarySuffixes, marker: "b" },
    decimal: { scale: 1e3, suffixes: localDecimalSuffixes || decimalSuffixes, marker: "d" }
  };
  let baseInfo = localBytes[base];
  let { value, suffix } = getFormatByteUnits(instance._value, baseInfo.suffixes, baseInfo.scale);
  let output = formatNumber({
    instance: numbro2(value),
    providedFormat,
    state,
    defaults: state.currentByteDefaultFormat()
  });
  return `${output}${options.spaceSeparated ? " " : ""}${suffix}`;
}
function formatOrdinal(instance, providedFormat, state) {
  let ordinalFn = state.currentOrdinal();
  let options = Object.assign({}, defaultOptions, providedFormat);
  let output = formatNumber({
    instance,
    providedFormat,
    state
  });
  let ordinal = ordinalFn(instance._value);
  return `${output}${options.spaceSeparated ? " " : ""}${ordinal}`;
}
function formatTime(instance) {
  let hours = Math.floor(instance._value / 60 / 60);
  let minutes = Math.floor((instance._value - hours * 60 * 60) / 60);
  let seconds = Math.round(instance._value - hours * 60 * 60 - minutes * 60);
  return `${hours}:${minutes < 10 ? "0" : ""}${minutes}:${seconds < 10 ? "0" : ""}${seconds}`;
}
function formatPercentage(instance, providedFormat, state, numbro2) {
  let prefixSymbol = providedFormat.prefixSymbol;
  let output = formatNumber({
    instance: numbro2(instance._value * 100),
    providedFormat,
    state
  });
  let options = Object.assign({}, defaultOptions, providedFormat);
  if (prefixSymbol) {
    return `%${options.spaceSeparated ? " " : ""}${output}`;
  }
  return `${output}${options.spaceSeparated ? " " : ""}%`;
}
function formatCurrency(instance, providedFormat, state) {
  const currentCurrency = state.currentCurrency();
  let clonedFormat = Object.assign({}, providedFormat);
  let options = Object.assign({}, defaultOptions, clonedFormat);
  let decimalSeparator = void 0;
  let space = "";
  let average = !!options.totalLength || !!options.forceAverage || options.average;
  let position = clonedFormat.currencyPosition || currentCurrency.position;
  let symbol = clonedFormat.currencySymbol || currentCurrency.symbol;
  const spaceSeparatedCurrency = options.spaceSeparatedCurrency !== void 0 ? options.spaceSeparatedCurrency : options.spaceSeparated;
  if (clonedFormat.lowPrecision === void 0) {
    clonedFormat.lowPrecision = false;
  }
  if (spaceSeparatedCurrency) {
    space = " ";
  }
  if (position === "infix") {
    decimalSeparator = space + symbol + space;
  }
  let output = formatNumber({
    instance,
    providedFormat: clonedFormat,
    state,
    decimalSeparator
  });
  if (position === "prefix") {
    if (instance._value < 0 && options.negative === "sign") {
      output = `-${space}${symbol}${output.slice(1)}`;
    } else if (instance._value > 0 && options.forceSign) {
      output = `+${space}${symbol}${output.slice(1)}`;
    } else {
      output = symbol + space + output;
    }
  }
  if (!position || position === "postfix") {
    space = !options.spaceSeparatedAbbreviation && average ? "" : space;
    output = output + space + symbol;
  }
  return output;
}
function computeAverage({ value, forceAverage, lowPrecision = true, abbreviations, spaceSeparated = false, totalLength = 0, roundingFunction = Math.round }) {
  let abbreviation = "";
  let abs = Math.abs(value);
  let mantissaPrecision = -1;
  if (forceAverage && abbreviations[forceAverage] && powers[forceAverage]) {
    abbreviation = abbreviations[forceAverage];
    value = value / powers[forceAverage];
  } else {
    if (abs >= powers.trillion || lowPrecision && roundingFunction(abs / powers.trillion) === 1) {
      abbreviation = abbreviations.trillion;
      value = value / powers.trillion;
    } else if (abs < powers.trillion && abs >= powers.billion || lowPrecision && roundingFunction(abs / powers.billion) === 1) {
      abbreviation = abbreviations.billion;
      value = value / powers.billion;
    } else if (abs < powers.billion && abs >= powers.million || lowPrecision && roundingFunction(abs / powers.million) === 1) {
      abbreviation = abbreviations.million;
      value = value / powers.million;
    } else if (abs < powers.million && abs >= powers.thousand || lowPrecision && roundingFunction(abs / powers.thousand) === 1) {
      abbreviation = abbreviations.thousand;
      value = value / powers.thousand;
    }
  }
  let optionalSpace = spaceSeparated ? " " : "";
  if (abbreviation) {
    abbreviation = optionalSpace + abbreviation;
  }
  if (totalLength) {
    let isNegative = value < 0;
    let characteristic = value.toString().split(".")[0];
    let characteristicLength = isNegative ? characteristic.length - 1 : characteristic.length;
    mantissaPrecision = Math.max(totalLength - characteristicLength, 0);
  }
  return { value, abbreviation, mantissaPrecision };
}
function computeExponential({ value, characteristicPrecision }) {
  let [numberString, exponential] = value.toExponential().split("e");
  let number = +numberString;
  if (!characteristicPrecision) {
    return {
      value: number,
      abbreviation: `e${exponential}`
    };
  }
  let characteristicLength = 1;
  if (characteristicLength < characteristicPrecision) {
    number = number * Math.pow(10, characteristicPrecision - characteristicLength);
    exponential = +exponential - (characteristicPrecision - characteristicLength);
    exponential = exponential >= 0 ? `+${exponential}` : exponential;
  }
  return {
    value: number,
    abbreviation: `e${exponential}`
  };
}
function zeroes(number) {
  let result = "";
  for (let i = 0; i < number; i++) {
    result += "0";
  }
  return result;
}
function toFixedLarge(value, precision) {
  let result = value.toString();
  let [base, exp] = result.split("e");
  let [characteristic, mantissa = ""] = base.split(".");
  if (+exp > 0) {
    result = characteristic + mantissa + zeroes(exp - mantissa.length);
  } else {
    let prefix = ".";
    if (+characteristic < 0) {
      prefix = `-0${prefix}`;
    } else {
      prefix = `0${prefix}`;
    }
    let suffix = (zeroes(-exp - 1) + Math.abs(characteristic) + mantissa).substr(0, precision);
    if (suffix.length < precision) {
      suffix += zeroes(precision - suffix.length);
    }
    result = prefix + suffix;
  }
  if (+exp > 0 && precision > 0) {
    result += `.${zeroes(precision)}`;
  }
  return result;
}
function toFixed(value, precision, roundingFunction = Math.round) {
  if (value.toString().indexOf("e") !== -1) {
    return toFixedLarge(value, precision);
  }
  const n = new BigNumber$1(roundingFunction(+`${value}e+${precision}`) / Math.pow(10, precision));
  return n.toFixed(precision);
}
function setMantissaPrecision(output, value, optionalMantissa, precision, trim2, roundingFunction) {
  if (precision === -1) {
    return output;
  }
  let result = toFixed(value, precision, roundingFunction);
  let [currentCharacteristic, currentMantissa = ""] = result.toString().split(".");
  if (currentMantissa.match(/^0+$/) && (optionalMantissa || trim2)) {
    return currentCharacteristic;
  }
  let hasTrailingZeroes = currentMantissa.match(/0+$/);
  if (trim2 && hasTrailingZeroes) {
    return `${currentCharacteristic}.${currentMantissa.toString().slice(0, hasTrailingZeroes.index)}`;
  }
  return result.toString();
}
function setCharacteristicPrecision(output, value, optionalCharacteristic, precision) {
  let result = output;
  let [currentCharacteristic, currentMantissa] = result.toString().split(".");
  if (currentCharacteristic.match(/^-?0$/) && optionalCharacteristic) {
    if (!currentMantissa) {
      return currentCharacteristic.replace("0", "");
    }
    return `${currentCharacteristic.replace("0", "")}.${currentMantissa}`;
  }
  const hasNegativeSign = value < 0 && currentCharacteristic.indexOf("-") === 0;
  if (hasNegativeSign) {
    currentCharacteristic = currentCharacteristic.slice(1);
    result = result.slice(1);
  }
  if (currentCharacteristic.length < precision) {
    let missingZeros = precision - currentCharacteristic.length;
    for (let i = 0; i < missingZeros; i++) {
      result = `0${result}`;
    }
  }
  if (hasNegativeSign) {
    result = `-${result}`;
  }
  return result.toString();
}
function indexesOfGroupSpaces(totalLength, groupSize) {
  let result = [];
  let counter = 0;
  for (let i = totalLength; i > 0; i--) {
    if (counter === groupSize) {
      result.unshift(i);
      counter = 0;
    }
    counter++;
  }
  return result;
}
function replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator) {
  let delimiters = state.currentDelimiters();
  let thousandSeparator = delimiters.thousands;
  decimalSeparator = decimalSeparator || delimiters.decimal;
  let thousandsSize = delimiters.thousandsSize || 3;
  let result = output.toString();
  let characteristic = result.split(".")[0];
  let mantissa = result.split(".")[1];
  const hasNegativeSign = value < 0 && characteristic.indexOf("-") === 0;
  if (thousandSeparated) {
    if (hasNegativeSign) {
      characteristic = characteristic.slice(1);
    }
    let indexesToInsertThousandDelimiters = indexesOfGroupSpaces(characteristic.length, thousandsSize);
    indexesToInsertThousandDelimiters.forEach((position, index) => {
      characteristic = characteristic.slice(0, position + index) + thousandSeparator + characteristic.slice(position + index);
    });
    if (hasNegativeSign) {
      characteristic = `-${characteristic}`;
    }
  }
  if (!mantissa) {
    result = characteristic;
  } else {
    result = characteristic + decimalSeparator + mantissa;
  }
  return result;
}
function insertAbbreviation(output, abbreviation) {
  return output + abbreviation;
}
function insertSign(output, value, negative) {
  if (value === 0) {
    return output;
  }
  if (+output === 0) {
    return output.replace("-", "");
  }
  if (value > 0) {
    return `+${output}`;
  }
  if (negative === "sign") {
    return output;
  }
  return `(${output.replace("-", "")})`;
}
function insertPrefix(output, prefix) {
  return prefix + output;
}
function insertPostfix(output, postfix) {
  return output + postfix;
}
function formatNumber({ instance, providedFormat, state = globalState$1, decimalSeparator, defaults: defaults2 = state.currentDefaults() }) {
  let value = instance._value;
  if (value === 0 && state.hasZeroFormat()) {
    return state.getZeroFormat();
  }
  if (!isFinite(value)) {
    return value.toString();
  }
  let options = Object.assign({}, defaultOptions, defaults2, providedFormat);
  let totalLength = options.totalLength;
  let characteristicPrecision = totalLength ? 0 : options.characteristic;
  let optionalCharacteristic = options.optionalCharacteristic;
  let forceAverage = options.forceAverage;
  let lowPrecision = options.lowPrecision;
  let average = !!totalLength || !!forceAverage || options.average;
  let mantissaPrecision = totalLength ? -1 : average && providedFormat.mantissa === void 0 ? 0 : options.mantissa;
  let optionalMantissa = totalLength ? false : providedFormat.optionalMantissa === void 0 ? mantissaPrecision === -1 : options.optionalMantissa;
  let trimMantissa = options.trimMantissa;
  let thousandSeparated = options.thousandSeparated;
  let spaceSeparated = options.spaceSeparated;
  let negative = options.negative;
  let forceSign = options.forceSign;
  let exponential = options.exponential;
  let roundingFunction = options.roundingFunction;
  let abbreviation = "";
  if (average) {
    let data = computeAverage({
      value,
      forceAverage,
      lowPrecision,
      abbreviations: state.currentAbbreviations(),
      spaceSeparated,
      roundingFunction,
      totalLength
    });
    value = data.value;
    abbreviation += data.abbreviation;
    if (totalLength) {
      mantissaPrecision = data.mantissaPrecision;
    }
  }
  if (exponential) {
    let data = computeExponential({
      value,
      characteristicPrecision
    });
    value = data.value;
    abbreviation = data.abbreviation + abbreviation;
  }
  let output = setMantissaPrecision(value.toString(), value, optionalMantissa, mantissaPrecision, trimMantissa, roundingFunction);
  output = setCharacteristicPrecision(output, value, optionalCharacteristic, characteristicPrecision);
  output = replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator);
  if (average || exponential) {
    output = insertAbbreviation(output, abbreviation);
  }
  if (forceSign || value < 0) {
    output = insertSign(output, value, negative);
  }
  return output;
}
function formatOrDefault(providedFormat, defaultFormat) {
  if (!providedFormat) {
    return defaultFormat;
  }
  let keys = Object.keys(providedFormat);
  if (keys.length === 1 && keys[0] === "output") {
    return defaultFormat;
  }
  return providedFormat;
}
var formatting = (numbro2) => ({
  format: (...args) => format(...args, numbro2),
  getByteUnit: (...args) => getByteUnit(...args, numbro2),
  getBinaryByteUnit: (...args) => getBinaryByteUnit(...args, numbro2),
  getDecimalByteUnit: (...args) => getDecimalByteUnit(...args, numbro2),
  formatOrDefault
});
var BigNumber = bignumberExports;
function add(n, other, numbro2) {
  let value = new BigNumber(n._value);
  let otherValue = other;
  if (numbro2.isNumbro(other)) {
    otherValue = other._value;
  }
  otherValue = new BigNumber(otherValue);
  n._value = value.plus(otherValue).toNumber();
  return n;
}
function subtract(n, other, numbro2) {
  let value = new BigNumber(n._value);
  let otherValue = other;
  if (numbro2.isNumbro(other)) {
    otherValue = other._value;
  }
  otherValue = new BigNumber(otherValue);
  n._value = value.minus(otherValue).toNumber();
  return n;
}
function multiply(n, other, numbro2) {
  let value = new BigNumber(n._value);
  let otherValue = other;
  if (numbro2.isNumbro(other)) {
    otherValue = other._value;
  }
  otherValue = new BigNumber(otherValue);
  n._value = value.times(otherValue).toNumber();
  return n;
}
function divide(n, other, numbro2) {
  let value = new BigNumber(n._value);
  let otherValue = other;
  if (numbro2.isNumbro(other)) {
    otherValue = other._value;
  }
  otherValue = new BigNumber(otherValue);
  n._value = value.dividedBy(otherValue).toNumber();
  return n;
}
function set(n, other, numbro2) {
  let value = other;
  if (numbro2.isNumbro(other)) {
    value = other._value;
  }
  n._value = value;
  return n;
}
function difference(n, other, numbro2) {
  let clone2 = numbro2(n._value);
  subtract(clone2, other, numbro2);
  return Math.abs(clone2._value);
}
var manipulating = (numbro2) => ({
  add: (n, other) => add(n, other, numbro2),
  subtract: (n, other) => subtract(n, other, numbro2),
  multiply: (n, other) => multiply(n, other, numbro2),
  divide: (n, other) => divide(n, other, numbro2),
  set: (n, other) => set(n, other, numbro2),
  difference: (n, other) => difference(n, other, numbro2),
  BigNumber
});
var VERSION = "2.5.0";
var globalState = requireGlobalState();
var validator = requireValidating();
var loader = loading(numbro);
var unformatter = requireUnformatting();
var formatter = formatting(numbro);
var manipulate = manipulating(numbro);
var parsing = parsing$2;
var Numbro = class {
  constructor(number) {
    this._value = number;
  }
  clone() {
    return numbro(this._value);
  }
  format(format2 = {}) {
    return formatter.format(this, format2);
  }
  formatCurrency(format2) {
    if (typeof format2 === "string") {
      format2 = parsing.parseFormat(format2);
    }
    format2 = formatter.formatOrDefault(format2, globalState.currentCurrencyDefaultFormat());
    format2.output = "currency";
    return formatter.format(this, format2);
  }
  formatTime(format2 = {}) {
    format2.output = "time";
    return formatter.format(this, format2);
  }
  binaryByteUnits() {
    return formatter.getBinaryByteUnit(this);
  }
  decimalByteUnits() {
    return formatter.getDecimalByteUnit(this);
  }
  byteUnits() {
    return formatter.getByteUnit(this);
  }
  difference(other) {
    return manipulate.difference(this, other);
  }
  add(other) {
    return manipulate.add(this, other);
  }
  subtract(other) {
    return manipulate.subtract(this, other);
  }
  multiply(other) {
    return manipulate.multiply(this, other);
  }
  divide(other) {
    return manipulate.divide(this, other);
  }
  set(input) {
    return manipulate.set(this, normalizeInput(input));
  }
  value() {
    return this._value;
  }
  valueOf() {
    return this._value;
  }
};
function normalizeInput(input) {
  let result = input;
  if (numbro.isNumbro(input)) {
    result = input._value;
  } else if (typeof input === "string") {
    result = numbro.unformat(input);
  } else if (isNaN(input)) {
    result = NaN;
  }
  return result;
}
function numbro(input) {
  return new Numbro(normalizeInput(input));
}
numbro.version = VERSION;
numbro.isNumbro = function(object) {
  return object instanceof Numbro;
};
numbro.language = globalState.currentLanguage;
numbro.registerLanguage = globalState.registerLanguage;
numbro.setLanguage = globalState.setLanguage;
numbro.languages = globalState.languages;
numbro.languageData = globalState.languageData;
numbro.zeroFormat = globalState.setZeroFormat;
numbro.defaultFormat = globalState.currentDefaults;
numbro.setDefaults = globalState.setDefaults;
numbro.defaultCurrencyFormat = globalState.currentCurrencyDefaultFormat;
numbro.validate = validator.validate;
numbro.loadLanguagesInNode = loader.loadLanguagesInNode;
numbro.unformat = unformatter.unformat;
numbro.BigNumber = manipulate.BigNumber;
var numbro_1 = numbro;
var numbro$1 = getDefaultExportFromCjs(numbro_1);

// node_modules/handsontable/renderers/numericRenderer/numericRenderer.mjs
var RENDERER_TYPE6 = "numeric";
function getRenderedValue(value, cellProperties) {
  if (isNumeric(value)) {
    const numericFormat = cellProperties.numericFormat;
    const cellCulture = numericFormat && numericFormat.culture || "-";
    const cellFormatPattern = numericFormat && numericFormat.pattern;
    if (typeof cellCulture !== "undefined" && !numbro$1.languages()[cellCulture]) {
      const shortTag = cellCulture.replace("-", "");
      const langData = numbro$1.allLanguages ? numbro$1.allLanguages[cellCulture] : numbro$1[shortTag];
      if (langData) {
        numbro$1.registerLanguage(langData);
      }
    }
    numbro$1.setLanguage(cellCulture);
    value = numbro$1(value).format(cellFormatPattern || "0");
  }
  return value;
}
function numericRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {
  let newValue = value;
  if (isNumeric(newValue)) {
    let classArr = [];
    if (Array.isArray(cellProperties.className)) {
      classArr = cellProperties.className;
    } else {
      var _cellProperties$class;
      const className = (_cellProperties$class = cellProperties.className) !== null && _cellProperties$class !== void 0 ? _cellProperties$class : "";
      if (className.length) {
        classArr = className.split(" ");
      }
    }
    newValue = getRenderedValue(newValue, cellProperties);
    if (classArr.indexOf("htLeft") < 0 && classArr.indexOf("htCenter") < 0 && classArr.indexOf("htRight") < 0 && classArr.indexOf("htJustify") < 0) {
      classArr.push("htRight");
    }
    if (classArr.indexOf("htNumeric") < 0) {
      classArr.push("htNumeric");
    }
    cellProperties.className = classArr.join(" ");
    TD.dir = "ltr";
  }
  textRenderer(hotInstance, TD, row, col, prop, newValue, cellProperties);
}
numericRenderer.RENDERER_TYPE = RENDERER_TYPE6;

// node_modules/handsontable/renderers/passwordRenderer/passwordRenderer.mjs
var RENDERER_TYPE7 = "password";
function passwordRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {
  textRenderer.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);
  const hashLength = cellProperties.hashLength || TD.innerHTML.length;
  const hashSymbol = cellProperties.hashSymbol || "*";
  let hash = "";
  rangeEach(hashLength - 1, () => {
    hash += hashSymbol;
  });
  fastInnerHTML(TD, hash);
}
passwordRenderer.RENDERER_TYPE = RENDERER_TYPE7;

// node_modules/handsontable/renderers/selectRenderer/selectRenderer.mjs
var RENDERER_TYPE8 = "select";
function selectRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {
  textRenderer.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);
}
selectRenderer.RENDERER_TYPE = RENDERER_TYPE8;

// node_modules/handsontable/renderers/timeRenderer/timeRenderer.mjs
var RENDERER_TYPE9 = "time";
function timeRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {
  textRenderer.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);
  TD.dir = "ltr";
}
timeRenderer.RENDERER_TYPE = RENDERER_TYPE9;

// node_modules/handsontable/renderers/index.mjs
function registerAllRenderers() {
  _register2(autocompleteRenderer);
  _register2(baseRenderer);
  _register2(checkboxRenderer);
  _register2(dropdownRenderer);
  _register2(handsontableRenderer);
  _register2(htmlRenderer);
  _register2(numericRenderer);
  _register2(passwordRenderer);
  _register2(selectRenderer);
  _register2(textRenderer);
  _register2(timeRenderer);
}

// node_modules/handsontable/validators/autocompleteValidator/autocompleteValidator.mjs
var VALIDATOR_TYPE = "autocomplete";
function autocompleteValidator(value, callback) {
  let valueToValidate = value;
  if (valueToValidate === null || valueToValidate === void 0) {
    valueToValidate = "";
  }
  if (this.allowEmpty && valueToValidate === "") {
    callback(true);
    return;
  }
  if (this.strict && this.source) {
    if (typeof this.source === "function") {
      this.source(valueToValidate, process(valueToValidate, callback));
    } else {
      process(valueToValidate, callback)(this.source);
    }
  } else {
    callback(true);
  }
}
autocompleteValidator.VALIDATOR_TYPE = VALIDATOR_TYPE;
function process(value, callback) {
  const originalVal = value;
  return function(source) {
    let found = false;
    for (let s = 0, slen = source.length; s < slen; s++) {
      if (originalVal === source[s]) {
        found = true;
        break;
      }
    }
    callback(found);
  };
}

// node_modules/handsontable/helpers/date.mjs
var date_exports = {};
__export(date_exports, {
  getNormalizedDate: () => getNormalizedDate
});
function getNormalizedDate(dateString) {
  const nativeDate = new Date(dateString);
  if (!isNaN((/* @__PURE__ */ new Date(`${dateString}T00:00`)).getDate())) {
    return new Date(nativeDate.getTime() + nativeDate.getTimezoneOffset() * 6e4);
  }
  return nativeDate;
}

// node_modules/handsontable/validators/dateValidator/dateValidator.mjs
var VALIDATOR_TYPE2 = "date";
function dateValidator(value, callback) {
  const dateEditor = _getEditorInstance(EDITOR_TYPE4, this.instance);
  let valueToValidate = value;
  let valid = true;
  if (valueToValidate === null || valueToValidate === void 0) {
    valueToValidate = "";
  }
  let isValidFormat = moment_default(valueToValidate, this.dateFormat || dateEditor.defaultDateFormat, true).isValid();
  let isValidDate = moment_default(new Date(valueToValidate)).isValid() || isValidFormat;
  if (this.allowEmpty && valueToValidate === "") {
    isValidDate = true;
    isValidFormat = true;
  }
  if (!isValidDate) {
    valid = false;
  }
  if (!isValidDate && isValidFormat) {
    valid = true;
  }
  if (isValidDate && !isValidFormat) {
    if (this.correctFormat === true) {
      const correctedValue = correctFormat(valueToValidate, this.dateFormat);
      this.instance.setDataAtCell(this.visualRow, this.visualCol, correctedValue, "dateValidator");
      valid = true;
    } else {
      valid = false;
    }
  }
  callback(valid);
}
dateValidator.VALIDATOR_TYPE = VALIDATOR_TYPE2;
function correctFormat(value, dateFormat) {
  const dateFromDate = moment_default(getNormalizedDate(value));
  const dateFromMoment = moment_default(value, dateFormat);
  const isAlphanumeric = value.search(/[A-Za-z]/g) > -1;
  let date;
  if (dateFromDate.isValid() && dateFromDate.format("x") === dateFromMoment.format("x") || !dateFromMoment.isValid() || isAlphanumeric) {
    date = dateFromDate;
  } else {
    date = dateFromMoment;
  }
  return date.format(dateFormat);
}

// node_modules/handsontable/validators/dropdownValidator/dropdownValidator.mjs
var VALIDATOR_TYPE3 = "dropdown";
function dropdownValidator(value, callback) {
  autocompleteValidator.apply(this, [value, callback]);
}
dropdownValidator.VALIDATOR_TYPE = VALIDATOR_TYPE3;

// node_modules/handsontable/validators/numericValidator/numericValidator.mjs
var VALIDATOR_TYPE4 = "numeric";
function numericValidator(value, callback) {
  let valueToValidate = value;
  if (valueToValidate === null || valueToValidate === void 0) {
    valueToValidate = "";
  }
  if (this.allowEmpty && valueToValidate === "") {
    callback(true);
  } else if (valueToValidate === "") {
    callback(false);
  } else {
    callback(isNumeric(value));
  }
}
numericValidator.VALIDATOR_TYPE = VALIDATOR_TYPE4;

// node_modules/handsontable/validators/timeValidator/timeValidator.mjs
var STRICT_FORMATS = [
  "YYYY-MM-DDTHH:mm:ss.SSSZ",
  "X",
  // Unix timestamp
  "x"
  // Unix ms timestamp
];
var VALIDATOR_TYPE5 = "time";
function timeValidator(value, callback) {
  const timeFormat = this.timeFormat || "h:mm:ss a";
  let valid = true;
  let valueToValidate = value;
  if (valueToValidate === null) {
    valueToValidate = "";
  }
  valueToValidate = /^\d{3,}$/.test(valueToValidate) ? parseInt(valueToValidate, 10) : valueToValidate;
  const twoDigitValue = /^\d{1,2}$/.test(valueToValidate);
  if (twoDigitValue) {
    valueToValidate += ":00";
  }
  const date = moment_default(valueToValidate, STRICT_FORMATS, true).isValid() ? moment_default(valueToValidate) : moment_default(valueToValidate, timeFormat);
  let isValidTime = date.isValid();
  let isValidFormat = moment_default(valueToValidate, timeFormat, true).isValid() && !twoDigitValue;
  if (this.allowEmpty && valueToValidate === "") {
    isValidTime = true;
    isValidFormat = true;
  }
  if (!isValidTime) {
    valid = false;
  }
  if (!isValidTime && isValidFormat) {
    valid = true;
  }
  if (isValidTime && !isValidFormat) {
    if (this.correctFormat === true) {
      const correctedValue = date.format(timeFormat);
      this.instance.setDataAtCell(this.visualRow, this.visualCol, correctedValue, "timeValidator");
      valid = true;
    } else {
      valid = false;
    }
  }
  callback(valid);
}
timeValidator.VALIDATOR_TYPE = VALIDATOR_TYPE5;

// node_modules/handsontable/validators/index.mjs
function registerAllValidators() {
  _register3(autocompleteValidator);
  _register3(dropdownValidator);
  _register3(dateValidator);
  _register3(numericValidator);
  _register3(timeValidator);
}

// node_modules/handsontable/cellTypes/autocompleteType/autocompleteType.mjs
var CELL_TYPE = "autocomplete";
var AutocompleteCellType = {
  CELL_TYPE,
  editor: AutocompleteEditor,
  renderer: autocompleteRenderer,
  validator: autocompleteValidator
};

// node_modules/handsontable/cellTypes/checkboxType/checkboxType.mjs
var CELL_TYPE2 = "checkbox";
var CheckboxCellType = {
  CELL_TYPE: CELL_TYPE2,
  editor: CheckboxEditor,
  renderer: checkboxRenderer
};

// node_modules/handsontable/renderers/dateRenderer/dateRenderer.mjs
var RENDERER_TYPE12 = "date";
function dateRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {
  autocompleteRenderer.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);
}
dateRenderer.RENDERER_TYPE = RENDERER_TYPE12;

// node_modules/handsontable/cellTypes/dateType/dateType.mjs
var CELL_TYPE3 = "date";
var DateCellType = {
  CELL_TYPE: CELL_TYPE3,
  editor: DateEditor,
  // displays small gray arrow on right side of the cell
  renderer: dateRenderer,
  validator: dateValidator
};

// node_modules/handsontable/cellTypes/dropdownType/dropdownType.mjs
var CELL_TYPE4 = "dropdown";
var DropdownCellType = {
  CELL_TYPE: CELL_TYPE4,
  editor: DropdownEditor,
  renderer: dropdownRenderer,
  // displays small gray arrow on right side of the cell
  validator: dropdownValidator,
  filter: false,
  strict: true
};

// node_modules/handsontable/cellTypes/handsontableType/handsontableType.mjs
var CELL_TYPE5 = "handsontable";
var HandsontableCellType = {
  CELL_TYPE: CELL_TYPE5,
  editor: HandsontableEditor,
  // displays small gray arrow on right side of the cell
  renderer: handsontableRenderer
};

// node_modules/handsontable/cellTypes/numericType/numericType.mjs
var CELL_TYPE6 = "numeric";
var NumericCellType = {
  CELL_TYPE: CELL_TYPE6,
  editor: NumericEditor,
  renderer: numericRenderer,
  validator: numericValidator,
  dataType: "number"
};

// node_modules/handsontable/cellTypes/passwordType/passwordType.mjs
var CELL_TYPE7 = "password";
var PasswordCellType = {
  CELL_TYPE: CELL_TYPE7,
  editor: PasswordEditor,
  renderer: passwordRenderer,
  copyable: false
};

// node_modules/handsontable/cellTypes/selectType/selectType.mjs
var CELL_TYPE8 = "select";
var SelectCellType = {
  CELL_TYPE: CELL_TYPE8,
  editor: SelectEditor,
  renderer: selectRenderer
};

// node_modules/handsontable/cellTypes/timeType/timeType.mjs
var CELL_TYPE9 = "time";
var TimeCellType = {
  CELL_TYPE: CELL_TYPE9,
  editor: TimeEditor,
  renderer: timeRenderer,
  validator: timeValidator
};

// node_modules/handsontable/cellTypes/index.mjs
function registerAllCellTypes() {
  _register4(AutocompleteCellType);
  _register4(CheckboxCellType);
  _register4(DateCellType);
  _register4(DropdownCellType);
  _register4(HandsontableCellType);
  _register4(NumericCellType);
  _register4(PasswordCellType);
  _register4(SelectCellType);
  _register4(TextCellType);
  _register4(TimeCellType);
}

// node_modules/handsontable/plugins/base/base.mjs
function _classPrivateMethodInitSpec3(e, a) {
  _checkPrivateRedeclaration3(e, a), a.add(e);
}
function _classPrivateFieldInitSpec2(e, t, a) {
  _checkPrivateRedeclaration3(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration3(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty4(e, r, t) {
  return (r = _toPropertyKey4(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey4(t) {
  var i = _toPrimitive4(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive4(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _classPrivateFieldGet2(s, a) {
  return s.get(_assertClassBrand3(s, a));
}
function _assertClassBrand3(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var DEPS_TYPE_CHECKERS = /* @__PURE__ */ new Map([["plugin", hasPlugin], ["cell-type", hasItem4], ["editor", hasItem], ["renderer", hasItem2], ["validator", hasItem3]]);
var defaultMainSettingSymbol = Symbol("mainSetting");
var PLUGIN_KEY = "base";
var missingDepsMsgs = [];
var initializedPlugins = null;
var _hooks = /* @__PURE__ */ new WeakMap();
var _BasePlugin_brand = /* @__PURE__ */ new WeakSet();
var BasePlugin = class {
  static get PLUGIN_KEY() {
    return PLUGIN_KEY;
  }
  /**
   * The `SETTING_KEYS` getter defines the keys that, when present in the config object, trigger the plugin update
   * after the `updateSettings` calls.
   * - When it returns `true`, the plugin updates after all `updateSettings` calls, regardless of the contents of the
   * config object.
   * - When it returns `false`, the plugin never updates on `updateSettings` calls.
   *
   * @returns {string[] | boolean}
   */
  static get SETTING_KEYS() {
    return [this.PLUGIN_KEY];
  }
  /**
   * The `DEFAULT_SETTINGS` getter defines the plugin default settings.
   *
   * @returns {object}
   */
  static get DEFAULT_SETTINGS() {
    return {};
  }
  /**
   * The instance of the {@link EventManager} class.
   *
   * @type {EventManager}
   */
  /**
   * @param {object} hotInstance Handsontable instance.
   */
  constructor(hotInstance) {
    _classPrivateMethodInitSpec3(this, _BasePlugin_brand);
    _defineProperty4(this, "eventManager", new eventManager_default(this));
    _defineProperty4(this, "pluginName", null);
    _defineProperty4(this, "pluginsInitializedCallbacks", []);
    _defineProperty4(this, "isPluginsReady", false);
    _defineProperty4(this, "enabled", false);
    _defineProperty4(this, "initialized", false);
    _classPrivateFieldInitSpec2(this, _hooks, {});
    defineGetter(this, "hot", hotInstance, {
      writable: false
    });
    initializedPlugins = null;
    this.hot.addHook("afterPluginsInitialized", () => this.onAfterPluginsInitialized());
    this.hot.addHook("afterUpdateSettings", (newSettings) => this.onUpdateSettings(newSettings));
    this.hot.addHook("beforeInit", () => this.init());
  }
  init() {
    this.pluginName = this.hot.getPluginName(this);
    const pluginDeps = this.constructor.PLUGIN_DEPS;
    const deps = Array.isArray(pluginDeps) ? pluginDeps : [];
    if (deps.length > 0) {
      const missingDependencies = [];
      deps.forEach((dependency) => {
        const [type, moduleName] = dependency.split(":");
        if (!DEPS_TYPE_CHECKERS.has(type)) {
          throw new Error(`Unknown plugin dependency type "${type}" was found.`);
        }
        if (!DEPS_TYPE_CHECKERS.get(type)(moduleName)) {
          missingDependencies.push(` - ${moduleName} (${type})`);
        }
      });
      if (missingDependencies.length > 0) {
        const errorMsg = [`The ${this.pluginName} plugin requires the following modules:
`, `${missingDependencies.join("\n")}
`].join("");
        missingDepsMsgs.push(errorMsg);
      }
    }
    if (!initializedPlugins) {
      initializedPlugins = getPluginsNames();
    }
    if (initializedPlugins.indexOf(this.pluginName) >= 0) {
      initializedPlugins.splice(initializedPlugins.indexOf(this.pluginName), 1);
    }
    this.hot.addHookOnce("afterPluginsInitialized", () => {
      if (this.isEnabled && this.isEnabled()) {
        this.enablePlugin();
      }
    });
    const isAllPluginsAreInitialized = initializedPlugins.length === 0;
    if (isAllPluginsAreInitialized) {
      if (missingDepsMsgs.length > 0) {
        const errorMsg = [`${missingDepsMsgs.join("\n")}
`, "You have to import and register them manually."].join("");
        missingDepsMsgs.length = 0;
        throw new Error(errorMsg);
      }
      this.hot.runHooks("afterPluginsInitialized");
    }
    this.initialized = true;
  }
  /**
   * Enable plugin for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled = true;
  }
  /**
   * Disable plugin for this Handsontable instance.
   */
  disablePlugin() {
    var _this$eventManager;
    (_this$eventManager = this.eventManager) === null || _this$eventManager === void 0 || _this$eventManager.clear();
    this.clearHooks();
    this.enabled = false;
  }
  /**
   * Gets the plugin settings. If there is no setting under the provided key, it returns the default setting
   * provided by the DEFAULT_SETTINGS static property of the class.
   *
   * @param {string} [settingName] The setting name. If the setting name is not provided, it returns
   * the whole plugin's settings object.
   * @returns {*}
   */
  getSetting(settingName) {
    const pluginSettings = this.hot.getSettings()[this.constructor.PLUGIN_KEY];
    if (settingName === void 0) {
      return pluginSettings;
    }
    const defaultSettings = this.constructor.DEFAULT_SETTINGS;
    if ((Array.isArray(pluginSettings) || isObject(pluginSettings)) && defaultSettings[defaultMainSettingSymbol] === settingName) {
      var _pluginSettings$setti;
      if (Array.isArray(pluginSettings)) {
        return pluginSettings;
      }
      return (_pluginSettings$setti = pluginSettings[settingName]) !== null && _pluginSettings$setti !== void 0 ? _pluginSettings$setti : defaultSettings[settingName];
    }
    if (isObject(pluginSettings)) {
      var _pluginSettings$setti2;
      return (_pluginSettings$setti2 = pluginSettings[settingName]) !== null && _pluginSettings$setti2 !== void 0 ? _pluginSettings$setti2 : defaultSettings[settingName];
    }
    return defaultSettings[settingName];
  }
  /**
   * Add listener to plugin hooks system.
   *
   * @param {string} name The hook name.
   * @param {Function} callback The listener function to add.
   * @param {number} [orderIndex] Order index of the callback.
   *                              If > 0, the callback will be added after the others, for example, with an index of 1, the callback will be added before the ones with an index of 2, 3, etc., but after the ones with an index of 0 and lower.
   *                              If < 0, the callback will be added before the others, for example, with an index of -1, the callback will be added after the ones with an index of -2, -3, etc., but before the ones with an index of 0 and higher.
   *                              If 0 or no order index is provided, the callback will be added between the "negative" and "positive" indexes.
   */
  addHook(name, callback, orderIndex) {
    _classPrivateFieldGet2(_hooks, this)[name] = _classPrivateFieldGet2(_hooks, this)[name] || [];
    const hooks = _classPrivateFieldGet2(_hooks, this)[name];
    this.hot.addHook(name, callback, orderIndex);
    hooks.push(callback);
    _classPrivateFieldGet2(_hooks, this)[name] = hooks;
  }
  /**
   * Remove all hooks listeners by hook name.
   *
   * @param {string} name The hook name.
   */
  removeHooks(name) {
    arrayEach(_classPrivateFieldGet2(_hooks, this)[name] || [], (callback) => {
      this.hot.removeHook(name, callback);
    });
  }
  /**
   * Clear all hooks.
   */
  clearHooks() {
    const hooks = _classPrivateFieldGet2(_hooks, this);
    objectEach(hooks, (callbacks, name) => this.removeHooks(name));
    hooks.length = 0;
  }
  /**
   * Register function which will be immediately called after all plugins initialized.
   *
   * @param {Function} callback The listener function to call.
   */
  callOnPluginsReady(callback) {
    if (this.isPluginsReady) {
      callback();
    } else {
      this.pluginsInitializedCallbacks.push(callback);
    }
  }
  /**
   * On after plugins initialized listener.
   *
   * @private
   */
  onAfterPluginsInitialized() {
    arrayEach(this.pluginsInitializedCallbacks, (callback) => callback());
    this.pluginsInitializedCallbacks.length = 0;
    this.isPluginsReady = true;
  }
  /**
   * On update settings listener.
   *
   * @private
   * @param {object} newSettings New set of settings passed to the `updateSettings` method.
   */
  onUpdateSettings(newSettings) {
    const relevantToSettings = _assertClassBrand3(_BasePlugin_brand, this, _isRelevantToSettings).call(this, newSettings);
    if (this.isEnabled) {
      if (this.enabled && !this.isEnabled()) {
        this.disablePlugin();
      }
      if (!this.enabled && this.isEnabled()) {
        this.enablePlugin();
      }
      if (this.enabled && this.isEnabled() && relevantToSettings) {
        this.updatePlugin(newSettings);
      }
    }
  }
  /**
   * Updates the plugin to use the latest options you have specified.
   *
   * @private
   */
  updatePlugin() {
  }
  /**
   * Destroy plugin.
   */
  destroy() {
    var _this$eventManager2;
    (_this$eventManager2 = this.eventManager) === null || _this$eventManager2 === void 0 || _this$eventManager2.destroy();
    this.clearHooks();
    objectEach(this, (value, property) => {
      if (property !== "hot") {
        this[property] = null;
      }
    });
    delete this.t;
    delete this.hot;
  }
};
function _isRelevantToSettings(settings) {
  if (!settings) {
    return false;
  }
  const settingKeys = this.constructor.SETTING_KEYS;
  if (typeof settingKeys === "boolean") {
    return settingKeys;
  }
  for (let i = 0; i < settingKeys.length; i++) {
    if (settings[settingKeys[i]] !== void 0) {
      return true;
    }
  }
  return false;
}

// node_modules/handsontable/utils/ghostTable.mjs
function _defineProperty5(e, r, t) {
  return (r = _toPropertyKey5(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey5(t) {
  var i = _toPrimitive5(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive5(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var GhostTable = class {
  constructor(hotInstance) {
    _defineProperty5(this, "hot", null);
    _defineProperty5(this, "container", null);
    _defineProperty5(this, "injected", false);
    _defineProperty5(this, "rows", []);
    _defineProperty5(this, "columns", []);
    _defineProperty5(this, "samples", null);
    _defineProperty5(this, "settings", {
      useHeaders: true
    });
    this.hot = hotInstance;
  }
  /**
   * Add row.
   *
   * @param {number} row Visual row index.
   * @param {Map} samples Samples Map object.
   */
  addRow(row, samples) {
    if (this.columns.length) {
      throw new Error("Doesn't support multi-dimensional table");
    }
    if (!this.rows.length) {
      this.container = this.createContainer(this.hot.rootElement.className);
    }
    const rowObject = {
      row
    };
    this.rows.push(rowObject);
    this.samples = samples;
    this.table = this.createTable(this.hot.table.className);
    this.table.colGroup.appendChild(this.createColGroupsCol(row));
    this.table.tr.appendChild(this.createRow(row));
    if (row === 0) {
      addClass(this.table.table, "htGhostTableFirstRow");
    }
    this.container.container.appendChild(this.table.fragment);
    rowObject.table = this.table.table;
  }
  /**
   * Add a row consisting of the column headers.
   *
   * @param {Map} samples A map with sampled table values.
   */
  addColumnHeadersRow(samples) {
    const colHeader = this.hot.getColHeader(0);
    if (colHeader !== null && colHeader !== void 0) {
      const rowObject = {
        row: -1
      };
      this.rows.push(rowObject);
      this.container = this.createContainer(this.hot.rootElement.className);
      this.samples = samples;
      this.table = this.createTable(this.hot.table.className);
      this.table.colGroup.appendChild(this.createColGroupsCol());
      this.appendColumnHeadersRow();
      this.container.container.appendChild(this.table.fragment);
      rowObject.table = this.table.table;
    }
  }
  /**
   * Add column.
   *
   * @param {number} column Visual column index.
   * @param {Map} samples A map with sampled table values.
   */
  addColumn(column, samples) {
    if (this.rows.length) {
      throw new Error("Doesn't support multi-dimensional table");
    }
    if (!this.columns.length) {
      this.container = this.createContainer(this.hot.rootElement.className);
    }
    const columnObject = {
      col: column
    };
    this.columns.push(columnObject);
    this.samples = samples;
    this.table = this.createTable(this.hot.table.className);
    if (this.getSetting("useHeaders") && this.hot.getColHeader(column) !== null) {
      this.hot.view.appendColHeader(column, this.table.th, void 0, -1);
    }
    this.table.tBody.appendChild(this.createCol(column));
    this.container.container.appendChild(this.table.fragment);
    columnObject.table = this.table.table;
  }
  /**
   * Get calculated heights.
   *
   * @param {Function} callback Callback which will be fired for each calculated row.
   */
  getHeights(callback) {
    if (!this.injected) {
      this.injectTable();
    }
    arrayEach(this.rows, (row) => {
      const {
        height
      } = row.table.getBoundingClientRect();
      callback(row.row, Math.ceil(height));
    });
  }
  /**
   * Get calculated widths.
   *
   * @param {Function} callback Callback which will be fired for each calculated column.
   */
  getWidths(callback) {
    if (!this.injected) {
      this.injectTable();
    }
    arrayEach(this.columns, (column) => {
      const {
        width
      } = column.table.getBoundingClientRect();
      callback(column.col, Math.ceil(width));
    });
  }
  /**
   * Set the Ghost Table settings to the provided object.
   *
   * @param {object} settings New Ghost Table Settings.
   */
  setSettings(settings) {
    this.settings = settings;
  }
  /**
   * Set a single setting of the Ghost Table.
   *
   * @param {string} name Setting name.
   * @param {*} value Setting value.
   */
  setSetting(name, value) {
    if (!this.settings) {
      this.settings = {};
    }
    this.settings[name] = value;
  }
  /**
   * Get the Ghost Table settings.
   *
   * @returns {object|null}
   */
  getSettings() {
    return this.settings;
  }
  /**
   * Get a single Ghost Table setting.
   *
   * @param {string} name The setting name to get.
   * @returns {boolean|null}
   */
  getSetting(name) {
    if (this.settings) {
      return this.settings[name];
    }
    return null;
  }
  /**
   * Create colgroup col elements.
   *
   * @param {number} row Visual row index.
   * @returns {DocumentFragment}
   */
  createColGroupsCol(row) {
    const fragment = this.hot.rootDocument.createDocumentFragment();
    if (this.hot.hasRowHeaders()) {
      fragment.appendChild(this.createColElement(-1, -1));
    }
    this.samples.forEach((sample) => {
      arrayEach(sample.strings, (string) => {
        fragment.appendChild(this.createColElement(string.col, row));
      });
    });
    return fragment;
  }
  /**
   * Create table row element.
   *
   * @param {number} row Visual row index.
   * @returns {DocumentFragment} Returns created table row elements.
   */
  createRow(row) {
    const {
      rootDocument
    } = this.hot;
    const fragment = rootDocument.createDocumentFragment();
    const th = rootDocument.createElement("th");
    if (this.hot.hasRowHeaders()) {
      this.hot.view.appendRowHeader(row, th);
      fragment.appendChild(th);
    }
    this.samples.forEach((sample) => {
      arrayEach(sample.strings, (string) => {
        const column = string.col;
        const cellProperties = this.hot.getCellMeta(row, column);
        const renderer = this.hot.getCellRenderer(cellProperties);
        const td = rootDocument.createElement("td");
        td.setAttribute("ghost-table", 1);
        renderer(this.hot, td, row, column, this.hot.colToProp(column), string.value, cellProperties);
        fragment.appendChild(td);
      });
    });
    return fragment;
  }
  /**
   * Creates DOM elements for headers and appends them to the THEAD element of the table.
   */
  appendColumnHeadersRow() {
    const {
      rootDocument
    } = this.hot;
    const domFragment = rootDocument.createDocumentFragment();
    const columnHeaders = [];
    if (this.hot.hasRowHeaders()) {
      const th = rootDocument.createElement("th");
      columnHeaders.push([-1, th]);
      domFragment.appendChild(th);
    }
    this.samples.forEach((sample) => {
      arrayEach(sample.strings, (string) => {
        const column = string.col;
        const th = rootDocument.createElement("th");
        columnHeaders.push([column, th]);
        domFragment.appendChild(th);
      });
    });
    this.table.tHead.appendChild(domFragment);
    arrayEach(columnHeaders, (columnHeader) => {
      const [column, th] = columnHeader;
      this.hot.view.appendColHeader(column, th);
    });
  }
  /**
   * Create table column elements.
   *
   * @param {number} column Visual column index.
   * @returns {DocumentFragment} Returns created column table column elements.
   */
  createCol(column) {
    const {
      rootDocument
    } = this.hot;
    const fragment = rootDocument.createDocumentFragment();
    this.samples.forEach((sample) => {
      arrayEach(sample.strings, (string) => {
        const row = string.row;
        const cellProperties = this.hot.getCellMeta(row, column);
        const renderer = this.hot.getCellRenderer(cellProperties);
        const td = rootDocument.createElement("td");
        const tr = rootDocument.createElement("tr");
        td.setAttribute("ghost-table", 1);
        renderer(this.hot, td, row, column, this.hot.colToProp(column), string.value, cellProperties);
        tr.appendChild(td);
        fragment.appendChild(tr);
      });
    });
    return fragment;
  }
  /**
   * Remove table from document and reset internal state.
   */
  clean() {
    this.rows.length = 0;
    this.rows[-1] = void 0;
    this.columns.length = 0;
    if (this.samples) {
      this.samples.clear();
    }
    this.samples = null;
    this.removeTable();
  }
  /**
   * Inject generated table into document.
   *
   * @param {HTMLElement} [parent=null] The element to which the ghost table is injected.
   */
  injectTable() {
    let parent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    if (!this.injected) {
      (parent || this.hot.rootElement).appendChild(this.container.fragment);
      this.injected = true;
    }
  }
  /**
   * Remove table from document.
   */
  removeTable() {
    if (this.injected && this.container.container.parentNode) {
      this.container.container.parentNode.removeChild(this.container.container);
      this.container = null;
      this.injected = false;
    }
  }
  /**
   * Create col element.
   *
   * @param {number} column Visual column index.
   * @param {number} row Visual row index.
   * @returns {HTMLElement}
   */
  createColElement(column, row) {
    const col = this.hot.rootDocument.createElement("col");
    let colspan = 0;
    if (row >= 0 && column >= 0) {
      colspan = this.hot.getCellMeta(row, column).colspan;
    }
    let width = this.hot.getColWidth(column);
    if (colspan > 1) {
      for (let nextColumn = column + 1; nextColumn < column + colspan; nextColumn++) {
        width += this.hot.getColWidth(nextColumn);
      }
    }
    col.style.width = `${width}px`;
    return col;
  }
  /**
   * Create table element.
   *
   * @param {string} className The CSS classes to add.
   * @returns {object}
   */
  createTable() {
    let className = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    const {
      rootDocument
    } = this.hot;
    const fragment = rootDocument.createDocumentFragment();
    const table = rootDocument.createElement("table");
    const tHead = rootDocument.createElement("thead");
    const tBody = rootDocument.createElement("tbody");
    const colGroup = rootDocument.createElement("colgroup");
    const tr = rootDocument.createElement("tr");
    const th = rootDocument.createElement("th");
    if (this.isVertical()) {
      table.appendChild(colGroup);
    }
    if (this.isHorizontal()) {
      tr.appendChild(th);
      tHead.appendChild(tr);
      table.style.tableLayout = "auto";
      table.style.width = "auto";
    }
    table.appendChild(tHead);
    if (this.isVertical()) {
      tBody.appendChild(tr);
    }
    table.appendChild(tBody);
    addClass(table, className);
    fragment.appendChild(table);
    return {
      fragment,
      table,
      tHead,
      tBody,
      colGroup,
      tr,
      th
    };
  }
  /**
   * Create container for tables.
   *
   * @param {string} className The CSS classes to add.
   * @returns {object}
   */
  createContainer() {
    let className = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    const {
      rootDocument
    } = this.hot;
    const fragment = rootDocument.createDocumentFragment();
    const container = rootDocument.createElement("div");
    const containerClassName = `htGhostTable htAutoSize ${className.trim()}`;
    addClass(container, containerClassName);
    fragment.appendChild(container);
    return {
      fragment,
      container
    };
  }
  /**
   * Checks if table is raised vertically (checking rows).
   *
   * @returns {boolean}
   */
  isVertical() {
    return !!(this.rows.length && !this.columns.length);
  }
  /**
   * Checks if table is raised horizontally (checking columns).
   *
   * @returns {boolean}
   */
  isHorizontal() {
    return !!(this.columns.length && !this.rows.length);
  }
};
var ghostTable_default = GhostTable;

// node_modules/handsontable/utils/samplesGenerator.mjs
function _defineProperty6(e, r, t) {
  return (r = _toPropertyKey6(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey6(t) {
  var i = _toPrimitive6(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive6(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var SamplesGenerator = class _SamplesGenerator {
  /**
   * Number of samples to take of each value length.
   *
   * @type {number}
   */
  static get SAMPLE_COUNT() {
    return 3;
  }
  /**
   * Samples prepared for calculations.
   *
   * @type {Map}
   * @default {null}
   */
  constructor(dataFactory) {
    _defineProperty6(this, "samples", null);
    _defineProperty6(this, "dataFactory", null);
    _defineProperty6(this, "customSampleCount", null);
    _defineProperty6(this, "allowDuplicates", false);
    this.dataFactory = dataFactory;
  }
  /**
   * Get the sample count for this instance.
   *
   * @returns {number}
   */
  getSampleCount() {
    if (this.customSampleCount) {
      return this.customSampleCount;
    }
    return _SamplesGenerator.SAMPLE_COUNT;
  }
  /**
   * Set the sample count.
   *
   * @param {number} sampleCount Number of samples to be collected.
   */
  setSampleCount(sampleCount) {
    this.customSampleCount = sampleCount;
  }
  /**
   * Set if the generator should accept duplicate values.
   *
   * @param {boolean} allowDuplicates `true` to allow duplicate values.
   */
  setAllowDuplicates(allowDuplicates) {
    this.allowDuplicates = allowDuplicates;
  }
  /**
   * Generate samples for row. You can control which area should be sampled by passing `rowRange` object and `colRange` object.
   *
   * @param {object|number} rowRange The rows range to generate the samples.
   * @param {object} colRange The column range to generate the samples.
   * @returns {object}
   */
  generateRowSamples(rowRange, colRange) {
    return this.generateSamples("row", colRange, rowRange);
  }
  /**
   * Generate samples for column. You can control which area should be sampled by passing `colRange` object and `rowRange` object.
   *
   * @param {object} colRange Column index.
   * @param {object} rowRange Column index.
   * @returns {object}
   */
  generateColumnSamples(colRange, rowRange) {
    return this.generateSamples("col", rowRange, colRange);
  }
  /**
   * Generate collection of samples.
   *
   * @param {string} type Type to generate. Can be `col` or `row`.
   * @param {object} range The range to generate the samples.
   * @param {object|number} specifierRange The range to generate the samples.
   * @returns {Map}
   */
  generateSamples(type, range, specifierRange) {
    const samples = /* @__PURE__ */ new Map();
    const {
      from,
      to
    } = typeof specifierRange === "number" ? {
      from: specifierRange,
      to: specifierRange
    } : specifierRange;
    rangeEach(from, to, (index) => {
      const sample = this.generateSample(type, range, index);
      samples.set(index, sample);
    });
    return samples;
  }
  /**
   * Generate sample for specified type (`row` or `col`).
   *
   * @param {string} type Samples type `row` or `col`.
   * @param {object} range The range to generate the samples.
   * @param {number} specifierValue The range to generate the samples.
   * @returns {Map}
   */
  generateSample(type, range, specifierValue) {
    if (type !== "row" && type !== "col") {
      throw new Error("Unsupported sample type");
    }
    const samples = /* @__PURE__ */ new Map();
    const computedKey = type === "row" ? "col" : "row";
    const sampledValues = [];
    rangeEach(range.from, range.to, (index) => {
      const data = type === "row" ? this.dataFactory(specifierValue, index) : this.dataFactory(index, specifierValue);
      if (data === false) {
        return;
      }
      const {
        value,
        bundleSeed
      } = data;
      const hasCustomBundleSeed = typeof bundleSeed === "string" && bundleSeed.length > 0;
      let seed;
      if (hasCustomBundleSeed) {
        seed = bundleSeed;
      } else if (isObject(value)) {
        seed = `${Object.keys(value).length}`;
      } else if (Array.isArray(value)) {
        seed = `${value.length}`;
      } else {
        seed = `${stringify(value).length}`;
      }
      if (!samples.has(seed)) {
        samples.set(seed, {
          needed: this.getSampleCount(),
          strings: []
        });
      }
      const sample = samples.get(seed);
      if (sample.needed) {
        const duplicate = sampledValues.indexOf(value) > -1;
        if (!duplicate || this.allowDuplicates || hasCustomBundleSeed) {
          sample.strings.push({
            value,
            [computedKey]: index
          });
          sampledValues.push(value);
          sample.needed -= 1;
        }
      }
    });
    return samples;
  }
};
var samplesGenerator_default = SamplesGenerator;

// node_modules/handsontable/plugins/autoColumnSize/autoColumnSize.mjs
function _classPrivateMethodInitSpec4(e, a) {
  _checkPrivateRedeclaration4(e, a), a.add(e);
}
function _classPrivateFieldInitSpec3(e, t, a) {
  _checkPrivateRedeclaration4(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration4(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty7(e, r, t) {
  return (r = _toPropertyKey7(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey7(t) {
  var i = _toPrimitive7(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive7(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _classPrivateFieldGet3(s, a) {
  return s.get(_assertClassBrand4(s, a));
}
function _classPrivateFieldSet(s, a, r) {
  return s.set(_assertClassBrand4(s, a), r), r;
}
function _assertClassBrand4(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
Hooks.getSingleton().register("modifyAutoColumnSizeSeed");
var PLUGIN_KEY2 = "autoColumnSize";
var PLUGIN_PRIORITY = 10;
var COLUMN_SIZE_MAP_NAME = "autoColumnSize";
var _isInitialized = /* @__PURE__ */ new WeakMap();
var _cachedColumnHeaders = /* @__PURE__ */ new WeakMap();
var _visualColumnsToRefresh = /* @__PURE__ */ new WeakMap();
var _AutoColumnSize_brand = /* @__PURE__ */ new WeakSet();
var AutoColumnSize = class _AutoColumnSize extends BasePlugin {
  static get PLUGIN_KEY() {
    return PLUGIN_KEY2;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY;
  }
  static get SETTING_KEYS() {
    return true;
  }
  static get DEFAULT_SETTINGS() {
    return {
      useHeaders: true,
      samplingRatio: null,
      allowSampleDuplicates: false
    };
  }
  static get CALCULATION_STEP() {
    return 50;
  }
  static get SYNC_CALCULATION_LIMIT() {
    return 50;
  }
  /**
   * Instance of {@link GhostTable} for rows and columns size calculations.
   *
   * @private
   * @type {GhostTable}
   */
  constructor(hotInstance) {
    super(hotInstance);
    _classPrivateMethodInitSpec4(this, _AutoColumnSize_brand);
    _defineProperty7(this, "ghostTable", new ghostTable_default(this.hot));
    _defineProperty7(this, "samplesGenerator", new samplesGenerator_default((row, column) => {
      const physicalRow = this.hot.toPhysicalRow(row);
      const physicalColumn = this.hot.toPhysicalColumn(column);
      if (this.hot.rowIndexMapper.isHidden(physicalRow) || this.hot.columnIndexMapper.isHidden(physicalColumn)) {
        return false;
      }
      const cellMeta = this.hot.getCellMeta(row, column);
      let cellValue = "";
      if (!cellMeta.spanned) {
        cellValue = this.hot.getDataAtCell(row, column);
      }
      let bundleSeed = "";
      if (this.hot.hasHook("modifyAutoColumnSizeSeed")) {
        bundleSeed = this.hot.runHooks("modifyAutoColumnSizeSeed", bundleSeed, cellMeta, cellValue);
      }
      return {
        value: cellValue,
        bundleSeed
      };
    }));
    _defineProperty7(this, "inProgress", false);
    _defineProperty7(this, "measuredColumns", 0);
    _defineProperty7(this, "columnWidthsMap", new PhysicalIndexToValueMap());
    _classPrivateFieldInitSpec3(this, _isInitialized, false);
    _classPrivateFieldInitSpec3(this, _cachedColumnHeaders, []);
    _classPrivateFieldInitSpec3(this, _visualColumnsToRefresh, []);
    this.hot.columnIndexMapper.registerMap(COLUMN_SIZE_MAP_NAME, this.columnWidthsMap);
    this.addHook("beforeColumnResize", (size, column, isDblClick) => _assertClassBrand4(_AutoColumnSize_brand, this, _onBeforeColumnResize).call(this, size, column, isDblClick));
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link #enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return this.hot.getSettings()[PLUGIN_KEY2] !== false && !this.hot.getSettings().colWidths;
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _this = this;
    if (this.enabled) {
      return;
    }
    this.ghostTable.setSetting("useHeaders", this.getSetting("useHeaders"));
    this.samplesGenerator.setAllowDuplicates(this.getSetting("allowSampleDuplicates"));
    const samplingRatio = this.getSetting("samplingRatio");
    if (samplingRatio && !isNaN(samplingRatio)) {
      this.samplesGenerator.setSampleCount(parseInt(samplingRatio, 10));
    }
    this.addHook("afterLoadData", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _assertClassBrand4(_AutoColumnSize_brand, _this, _onAfterLoadData).call(_this, ...args);
    });
    this.addHook("beforeChangeRender", function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _assertClassBrand4(_AutoColumnSize_brand, _this, _onBeforeChange).call(_this, ...args);
    });
    this.addHook("afterFormulasValuesUpdate", function() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return _assertClassBrand4(_AutoColumnSize_brand, _this, _onAfterFormulasValuesUpdate).call(_this, ...args);
    });
    this.addHook("beforeRender", () => _assertClassBrand4(_AutoColumnSize_brand, this, _onBeforeRender).call(this));
    this.addHook("modifyColWidth", (width, col) => this.getColumnWidth(col, width));
    this.addHook("init", () => _assertClassBrand4(_AutoColumnSize_brand, this, _onInit).call(this));
    super.enablePlugin();
  }
  /**
   * Updates the plugin's state. This method is executed when {@link Core#updateSettings} is invoked.
   */
  updatePlugin() {
    _classPrivateFieldSet(_visualColumnsToRefresh, this, this.findColumnsWhereHeaderWasChanged());
    super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    super.disablePlugin();
    this.addHook("beforeColumnResize", (size, column, isDblClick) => _assertClassBrand4(_AutoColumnSize_brand, this, _onBeforeColumnResize).call(this, size, column, isDblClick));
  }
  /**
   * Calculates widths for visible columns in the viewport only.
   */
  calculateVisibleColumnsWidth() {
    if (!this.hot.countRows()) {
      return;
    }
    const firstVisibleColumn = this.getFirstVisibleColumn();
    const lastVisibleColumn = this.getLastVisibleColumn();
    if (firstVisibleColumn === -1 || lastVisibleColumn === -1) {
      return;
    }
    const overwriteCache = this.hot.forceFullRender;
    this.calculateColumnsWidth({
      from: firstVisibleColumn,
      to: lastVisibleColumn
    }, void 0, overwriteCache);
  }
  /**
   * Calculates a columns width.
   *
   * @param {number|object} colRange Visual column index or an object with `from` and `to` visual indexes as a range.
   * @param {number|object} rowRange Visual row index or an object with `from` and `to` visual indexes as a range.
   * @param {boolean} [overwriteCache=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.
   */
  calculateColumnsWidth() {
    let colRange = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
      from: 0,
      to: this.hot.countCols() - 1
    };
    let rowRange = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      from: 0,
      to: this.hot.countRows() - 1
    };
    let overwriteCache = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    const columnsRange = typeof colRange === "number" ? {
      from: colRange,
      to: colRange
    } : colRange;
    const rowsRange = typeof rowRange === "number" ? {
      from: rowRange,
      to: rowRange
    } : rowRange;
    rangeEach(columnsRange.from, columnsRange.to, (visualColumn) => {
      let physicalColumn = this.hot.toPhysicalColumn(visualColumn);
      if (physicalColumn === null) {
        physicalColumn = visualColumn;
      }
      if (overwriteCache || this.columnWidthsMap.getValueAtIndex(physicalColumn) === null && !this.hot._getColWidthFromSettings(physicalColumn)) {
        _assertClassBrand4(_AutoColumnSize_brand, this, _fillGhostTableWithSamples).call(this, visualColumn, rowsRange);
      }
    });
    if (this.ghostTable.columns.length) {
      _assertClassBrand4(_AutoColumnSize_brand, this, _updateColumnWidthsMapBasedOnGhostTable).call(this);
      this.measuredColumns = columnsRange.to + 1;
      this.ghostTable.clean();
    }
  }
  /**
   * Calculates all columns width. The calculated column will be cached in the {@link AutoColumnSize#widths} property.
   * To retrieve width for specified column use {@link AutoColumnSize#getColumnWidth} method.
   *
   * @param {object|number} rowRange Row index or an object with `from` and `to` properties which define row range.
   * @param {boolean} [overwriteCache] If `true` the calculation will be processed regardless of whether the width exists in the cache.
   */
  calculateAllColumnsWidth() {
    let rowRange = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
      from: 0,
      to: this.hot.countRows() - 1
    };
    let overwriteCache = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    let current = 0;
    const length = this.hot.countCols() - 1;
    let timer = null;
    this.inProgress = true;
    const loop = () => {
      if (!this.hot) {
        cancelAnimationFrame(timer);
        this.inProgress = false;
        return;
      }
      this.calculateColumnsWidth({
        from: current,
        to: Math.min(current + _AutoColumnSize.CALCULATION_STEP, length)
      }, rowRange, overwriteCache);
      current = current + _AutoColumnSize.CALCULATION_STEP + 1;
      if (current < length) {
        timer = requestAnimationFrame2(loop);
      } else {
        cancelAnimationFrame(timer);
        this.inProgress = false;
        this.hot.view.adjustElementsSize();
      }
    };
    const syncLimit = this.getSyncCalculationLimit();
    if (syncLimit >= 0) {
      this.calculateColumnsWidth({
        from: 0,
        to: syncLimit
      }, rowRange, overwriteCache);
      current = syncLimit + 1;
    }
    if (current < length) {
      loop();
    } else {
      this.inProgress = false;
    }
  }
  /**
   * Recalculates all columns width (overwrite cache values).
   */
  recalculateAllColumnsWidth() {
    if (this.hot.view.isVisible()) {
      this.calculateAllColumnsWidth({
        from: 0,
        to: this.hot.countRows() - 1
      }, true);
    }
  }
  /**
   * Gets value which tells how many columns should be calculated synchronously (rest of the columns will be calculated
   * asynchronously). The limit is calculated based on `syncLimit` set to `autoColumnSize` option (see {@link Options#autoColumnSize}).
   *
   * @returns {number}
   */
  getSyncCalculationLimit() {
    const settings = this.hot.getSettings()[PLUGIN_KEY2];
    let limit = _AutoColumnSize.SYNC_CALCULATION_LIMIT;
    const colsLimit = this.hot.countCols() - 1;
    if (isObject(settings)) {
      limit = settings.syncLimit;
      if (isPercentValue(limit)) {
        limit = valueAccordingPercent(colsLimit, limit);
      } else {
        limit >>= 0;
      }
    }
    return Math.min(limit, colsLimit);
  }
  /**
   * Gets the calculated column width.
   *
   * @param {number} column Visual column index.
   * @param {number} [defaultWidth] Default column width. It will be picked up if no calculated width found.
   * @param {boolean} [keepMinimum=true] If `true` then returned value won't be smaller then 50 (default column width).
   * @returns {number}
   */
  getColumnWidth(column, defaultWidth) {
    let keepMinimum = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    let width = defaultWidth;
    if (width === void 0) {
      width = this.columnWidthsMap.getValueAtIndex(this.hot.toPhysicalColumn(column));
      if (keepMinimum && typeof width === "number") {
        width = Math.max(width, DEFAULT_WIDTH);
      }
    }
    return width;
  }
  /**
   * Gets the first visible column.
   *
   * @returns {number} Returns visual column index, -1 if table is not rendered or if there are no columns to base the the calculations on.
   */
  getFirstVisibleColumn() {
    var _this$hot$getFirstRen;
    return (_this$hot$getFirstRen = this.hot.getFirstRenderedVisibleColumn()) !== null && _this$hot$getFirstRen !== void 0 ? _this$hot$getFirstRen : -1;
  }
  /**
   * Gets the last visible column.
   *
   * @returns {number} Returns visual column index or -1 if table is not rendered.
   */
  getLastVisibleColumn() {
    var _this$hot$getLastRend;
    return (_this$hot$getLastRend = this.hot.getLastRenderedVisibleColumn()) !== null && _this$hot$getLastRend !== void 0 ? _this$hot$getLastRend : -1;
  }
  /**
   * Collects all columns which titles has been changed in comparison to the previous state.
   *
   * @private
   * @returns {Array} It returns an array of visual column indexes.
   */
  findColumnsWhereHeaderWasChanged() {
    const columnHeaders = this.hot.getColHeader();
    const changedColumns = columnHeaders.reduce((acc, columnTitle, physicalColumn) => {
      const cachedColumnsLength = _classPrivateFieldGet3(_cachedColumnHeaders, this).length;
      if (cachedColumnsLength - 1 < physicalColumn || _classPrivateFieldGet3(_cachedColumnHeaders, this)[physicalColumn] !== columnTitle) {
        acc.push(this.hot.toVisualColumn(physicalColumn));
      }
      if (cachedColumnsLength - 1 < physicalColumn) {
        _classPrivateFieldGet3(_cachedColumnHeaders, this).push(columnTitle);
      } else {
        _classPrivateFieldGet3(_cachedColumnHeaders, this)[physicalColumn] = columnTitle;
      }
      return acc;
    }, []);
    return changedColumns;
  }
  /**
   * Clears cache of calculated column widths. If you want to clear only selected columns pass an array with their indexes.
   * Otherwise whole cache will be cleared.
   *
   * @param {number[]} [physicalColumns] List of physical column indexes to clear.
   */
  clearCache(physicalColumns) {
    if (Array.isArray(physicalColumns)) {
      this.hot.batchExecution(() => {
        physicalColumns.forEach((physicalIndex) => {
          this.columnWidthsMap.setValueAtIndex(physicalIndex, null);
        });
      }, true);
    } else {
      this.columnWidthsMap.clear();
    }
  }
  /**
   * Checks if all widths were calculated. If not then return `true` (need recalculate).
   *
   * @returns {boolean}
   */
  isNeedRecalculate() {
    return !!this.columnWidthsMap.getValues().slice(0, this.measuredColumns).filter((item) => item === null).length;
  }
  /**
   * On before view render listener.
   */
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    this.ghostTable.clean();
    super.destroy();
  }
};
function _calculateSpecificColumnsWidth(visualColumns) {
  const rowsRange = {
    from: 0,
    to: this.hot.countRows() - 1
  };
  visualColumns.forEach((visualColumn) => {
    const physicalColumn = this.hot.toPhysicalColumn(visualColumn);
    if (physicalColumn === null) {
      return;
    }
    if (!this.hot._getColWidthFromSettings(physicalColumn)) {
      _assertClassBrand4(_AutoColumnSize_brand, this, _fillGhostTableWithSamples).call(this, visualColumn, rowsRange);
    }
  });
  if (this.ghostTable.columns.length) {
    _assertClassBrand4(_AutoColumnSize_brand, this, _updateColumnWidthsMapBasedOnGhostTable).call(this);
    this.ghostTable.clean();
  }
}
function _fillGhostTableWithSamples(visualColumn, rowsRange) {
  const samples = this.samplesGenerator.generateColumnSamples(visualColumn, rowsRange);
  samples.forEach((sample, column) => this.ghostTable.addColumn(column, sample));
}
function _updateColumnWidthsMapBasedOnGhostTable() {
  this.hot.batchExecution(() => {
    this.ghostTable.getWidths((visualColumn, width) => {
      const physicalColumn = this.hot.toPhysicalColumn(visualColumn);
      this.columnWidthsMap.setValueAtIndex(physicalColumn, width);
    });
  }, true);
}
function _onBeforeRender() {
  this.calculateVisibleColumnsWidth();
  if (!this.inProgress) {
    _assertClassBrand4(_AutoColumnSize_brand, this, _calculateSpecificColumnsWidth).call(this, _classPrivateFieldGet3(_visualColumnsToRefresh, this));
    _classPrivateFieldSet(_visualColumnsToRefresh, this, []);
  }
}
function _onAfterLoadData(sourceData, isFirstLoad) {
  if (!isFirstLoad) {
    this.recalculateAllColumnsWidth();
  }
}
function _onBeforeChange(changes) {
  const changedColumns = changes.reduce((acc, _ref) => {
    let [, columnProperty] = _ref;
    const visualColumn = this.hot.propToCol(columnProperty);
    if (Number.isInteger(visualColumn) && acc.indexOf(visualColumn) === -1) {
      acc.push(visualColumn);
    }
    return acc;
  }, []);
  _classPrivateFieldGet3(_visualColumnsToRefresh, this).push(...changedColumns);
}
function _onBeforeColumnResize(size, column, isDblClick) {
  let newSize = size;
  if (isDblClick) {
    this.calculateColumnsWidth(column, void 0, true);
    newSize = this.getColumnWidth(column, void 0, false);
  }
  return newSize;
}
function _onInit() {
  _classPrivateFieldSet(_cachedColumnHeaders, this, this.hot.getColHeader());
  this.recalculateAllColumnsWidth();
  _classPrivateFieldSet(_isInitialized, this, true);
}
function _onAfterFormulasValuesUpdate(changes) {
  if (!_classPrivateFieldGet3(_isInitialized, this)) {
    return;
  }
  const changedColumns = changes.reduce((acc, change) => {
    var _change$address;
    const physicalColumn = (_change$address = change.address) === null || _change$address === void 0 ? void 0 : _change$address.col;
    if (Number.isInteger(physicalColumn)) {
      const visualColumn = this.hot.toVisualColumn(physicalColumn);
      if (acc.indexOf(visualColumn) === -1) {
        acc.push(visualColumn);
      }
    }
    return acc;
  }, []);
  _classPrivateFieldGet3(_visualColumnsToRefresh, this).push(...changedColumns);
}

// node_modules/handsontable/plugins/autofill/utils.mjs
var DIRECTIONS = {
  horizontal: "horizontal",
  vertical: "vertical"
};
function getDragDirectionAndRange(startSelection, endSelection, cellCoordsFactory) {
  let startOfDragCoords;
  let endOfDragCoords;
  let directionOfDrag;
  if (endSelection[0] === startSelection[0] && endSelection[1] < startSelection[1]) {
    directionOfDrag = "left";
    startOfDragCoords = cellCoordsFactory(endSelection[0], endSelection[1]);
    endOfDragCoords = cellCoordsFactory(endSelection[2], startSelection[1] - 1);
  } else if (endSelection[2] === startSelection[2] && endSelection[0] === startSelection[0] && endSelection[3] > startSelection[3]) {
    directionOfDrag = "right";
    startOfDragCoords = cellCoordsFactory(endSelection[0], startSelection[3] + 1);
    endOfDragCoords = cellCoordsFactory(endSelection[2], endSelection[3]);
  } else if (endSelection[0] < startSelection[0] && endSelection[1] === startSelection[1]) {
    directionOfDrag = "up";
    startOfDragCoords = cellCoordsFactory(endSelection[0], endSelection[1]);
    endOfDragCoords = cellCoordsFactory(startSelection[0] - 1, endSelection[3]);
  } else if (endSelection[2] > startSelection[2] && endSelection[1] === startSelection[1]) {
    directionOfDrag = "down";
    startOfDragCoords = cellCoordsFactory(startSelection[2] + 1, endSelection[1]);
    endOfDragCoords = cellCoordsFactory(endSelection[2], endSelection[3]);
  }
  if (startOfDragCoords) {
    startOfDragCoords.normalize();
  }
  if (endOfDragCoords) {
    endOfDragCoords.normalize();
  }
  return {
    directionOfDrag,
    startOfDragCoords,
    endOfDragCoords
  };
}
function getMappedFillHandleSetting(fillHandle) {
  const mappedSettings = {};
  if (fillHandle === true) {
    mappedSettings.directions = Object.keys(DIRECTIONS);
    mappedSettings.autoInsertRow = true;
  } else if (isObject(fillHandle)) {
    if (isDefined(fillHandle.autoInsertRow)) {
      if (fillHandle.direction === DIRECTIONS.horizontal) {
        mappedSettings.autoInsertRow = false;
      } else {
        mappedSettings.autoInsertRow = fillHandle.autoInsertRow;
      }
    } else {
      mappedSettings.autoInsertRow = false;
    }
    if (isDefined(fillHandle.direction)) {
      mappedSettings.directions = [fillHandle.direction];
    } else {
      mappedSettings.directions = Object.keys(DIRECTIONS);
    }
  } else if (typeof fillHandle === "string") {
    mappedSettings.directions = [fillHandle];
    mappedSettings.autoInsertRow = true;
  } else {
    mappedSettings.directions = [];
    mappedSettings.autoInsertRow = false;
  }
  return mappedSettings;
}

// node_modules/handsontable/plugins/autofill/autofill.mjs
function _classPrivateMethodInitSpec5(e, a) {
  _checkPrivateRedeclaration5(e, a), a.add(e);
}
function _checkPrivateRedeclaration5(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty8(e, r, t) {
  return (r = _toPropertyKey8(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey8(t) {
  var i = _toPrimitive8(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive8(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _assertClassBrand5(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
Hooks.getSingleton().register("modifyAutofillRange");
Hooks.getSingleton().register("beforeAutofill");
Hooks.getSingleton().register("afterAutofill");
var PLUGIN_KEY3 = "autofill";
var PLUGIN_PRIORITY2 = 20;
var SETTING_KEYS = ["fillHandle"];
var INSERT_ROW_ALTER_ACTION_NAME = "insert_row_below";
var INTERVAL_FOR_ADDING_ROW = 200;
var _Autofill_brand = /* @__PURE__ */ new WeakSet();
var Autofill = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec5(this, _Autofill_brand);
    _defineProperty8(this, "addingStarted", false);
    _defineProperty8(this, "mouseDownOnCellCorner", false);
    _defineProperty8(this, "mouseDragOutside", false);
    _defineProperty8(this, "handleDraggedCells", 0);
    _defineProperty8(this, "directions", []);
    _defineProperty8(this, "autoInsertRow", false);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY3;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY2;
  }
  static get SETTING_KEYS() {
    return [PLUGIN_KEY3, ...SETTING_KEYS];
  }
  /**
   * Checks if the plugin is enabled in the Handsontable settings.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return this.hot.getSettings().fillHandle;
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    if (this.enabled) {
      return;
    }
    this.mapSettings();
    this.registerEvents();
    this.addHook("afterOnCellCornerMouseDown", (event) => _assertClassBrand5(_Autofill_brand, this, _onAfterCellCornerMouseDown).call(this, event));
    this.addHook("afterOnCellCornerDblClick", (event) => _assertClassBrand5(_Autofill_brand, this, _onCellCornerDblClick).call(this, event));
    this.addHook("beforeOnCellMouseOver", (_, coords) => _assertClassBrand5(_Autofill_brand, this, _onBeforeCellMouseOver).call(this, coords));
    super.enablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - `autofill`
   *  - [`fillHandle`](@/api/options.md#fillhandle)
   */
  updatePlugin() {
    this.disablePlugin();
    this.enablePlugin();
    super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.clearMappedSettings();
    super.disablePlugin();
  }
  /**
   * Gets selection data.
   *
   * @private
   * @returns {object[]} Ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.
   */
  getSelectionData() {
    const selection = this.hot.getSelectedRangeLast();
    const {
      row: startRow,
      col: startCol
    } = selection.getTopStartCorner();
    const {
      row: endRow,
      col: endCol
    } = selection.getBottomEndCorner();
    const copyableRanges = this.hot.runHooks("modifyCopyableRange", [{
      startRow,
      startCol,
      endRow,
      endCol
    }]);
    const copyableRows = [];
    const copyableColumns = [];
    const data = [];
    arrayEach(copyableRanges, (range) => {
      for (let visualRow = range.startRow; visualRow <= range.endRow; visualRow += 1) {
        if (copyableRows.indexOf(visualRow) === -1) {
          copyableRows.push(visualRow);
        }
      }
      for (let visualColumn = range.startCol; visualColumn <= range.endCol; visualColumn += 1) {
        if (copyableColumns.indexOf(visualColumn) === -1) {
          copyableColumns.push(visualColumn);
        }
      }
    });
    arrayEach(copyableRows, (row) => {
      const rowSet = [];
      arrayEach(copyableColumns, (column) => {
        rowSet.push(this.hot.getCopyableData(row, column));
      });
      data.push(rowSet);
    });
    return data;
  }
  /**
   * Try to apply fill values to the area in fill border, omitting the selection border.
   *
   * @private
   * @returns {boolean} Reports if fill was applied.
   *
   * @fires Hooks#modifyAutofillRange
   * @fires Hooks#beforeAutofill
   * @fires Hooks#afterAutofill
   */
  fillIn() {
    if (this.hot.selection.highlight.getFill().isEmpty()) {
      return false;
    }
    const [fillStartRow, fillStartColumn, fillEndRow, fillEndColumn] = this.hot.selection.highlight.getFill().getVisualCorners();
    const selectionRangeLast = this.hot.getSelectedRangeLast();
    const topStartCorner = selectionRangeLast.getTopStartCorner();
    const bottomEndCorner = selectionRangeLast.getBottomEndCorner();
    this.resetSelectionOfDraggedArea();
    const cornersOfSelectedCells = [topStartCorner.row, topStartCorner.col, bottomEndCorner.row, bottomEndCorner.col];
    const cornersOfSelectionAndDragAreas = this.hot.runHooks("modifyAutofillRange", [Math.min(topStartCorner.row, fillStartRow), Math.min(topStartCorner.col, fillStartColumn), Math.max(bottomEndCorner.row, fillEndRow), Math.max(bottomEndCorner.col, fillEndColumn)], cornersOfSelectedCells);
    const {
      directionOfDrag,
      startOfDragCoords,
      endOfDragCoords
    } = getDragDirectionAndRange(cornersOfSelectedCells, cornersOfSelectionAndDragAreas, (row, column) => this.hot._createCellCoords(row, column));
    if (startOfDragCoords && startOfDragCoords.row > -1 && startOfDragCoords.col > -1) {
      const selectionData = this.getSelectionData();
      const sourceRange = selectionRangeLast.clone();
      const targetRange = this.hot._createCellRange(startOfDragCoords, startOfDragCoords, endOfDragCoords);
      const beforeAutofillHookResult = this.hot.runHooks("beforeAutofill", selectionData, sourceRange, targetRange, directionOfDrag);
      if (beforeAutofillHookResult === false) {
        this.hot.selection.highlight.getFill().clear();
        this.hot.render();
        return false;
      }
      let fillData = beforeAutofillHookResult;
      const res = beforeAutofillHookResult;
      if (["up", "left"].indexOf(directionOfDrag) > -1 && !(res.length === 1 && res[0].length === 0)) {
        fillData = [];
        if (directionOfDrag === "up") {
          const dragLength = endOfDragCoords.row - startOfDragCoords.row + 1;
          const fillOffset = dragLength % res.length;
          for (let i = 0; i < dragLength; i++) {
            fillData.push(res[(i + (res.length - fillOffset)) % res.length]);
          }
        } else {
          const dragLength = endOfDragCoords.col - startOfDragCoords.col + 1;
          const fillOffset = dragLength % res[0].length;
          for (let i = 0; i < res.length; i++) {
            fillData.push([]);
            for (let j = 0; j < dragLength; j++) {
              fillData[i].push(res[i][(j + (res[i].length - fillOffset)) % res[i].length]);
            }
          }
        }
      }
      this.hot.populateFromArray(startOfDragCoords.row, startOfDragCoords.col, fillData, endOfDragCoords.row, endOfDragCoords.col, `${this.pluginName}.fill`, null);
      this.setSelection(cornersOfSelectionAndDragAreas);
      this.hot.runHooks("afterAutofill", fillData, sourceRange, targetRange, directionOfDrag);
      this.hot.render();
    } else {
      this.hot.view.render();
    }
    return true;
  }
  /**
   * Reduces the selection area if the handle was dragged outside of the table or on headers.
   *
   * @private
   * @param {CellCoords} coords Indexes of selection corners.
   * @returns {CellCoords}
   */
  reduceSelectionAreaIfNeeded(coords) {
    if (coords.row < 0) {
      coords.row = 0;
    }
    if (coords.col < 0) {
      coords.col = 0;
    }
    return coords;
  }
  /**
   * Gets the coordinates of the drag & drop borders.
   *
   * @private
   * @param {CellCoords} coordsOfSelection `CellCoords` coord object.
   * @returns {CellCoords}
   */
  getCoordsOfDragAndDropBorders(coordsOfSelection) {
    const currentSelection = this.hot.getSelectedRangeLast();
    const bottomRightCorner = currentSelection.getBottomEndCorner();
    let coords = coordsOfSelection;
    if (this.directions.includes(DIRECTIONS.vertical) && this.directions.includes(DIRECTIONS.horizontal)) {
      const topStartCorner = currentSelection.getTopStartCorner();
      if (bottomRightCorner.col <= coordsOfSelection.col || topStartCorner.col >= coordsOfSelection.col) {
        coords = this.hot._createCellCoords(bottomRightCorner.row, coordsOfSelection.col);
      }
      if (bottomRightCorner.row < coordsOfSelection.row || topStartCorner.row > coordsOfSelection.row) {
        coords = this.hot._createCellCoords(coordsOfSelection.row, bottomRightCorner.col);
      }
    } else if (this.directions.includes(DIRECTIONS.vertical)) {
      coords = this.hot._createCellCoords(coordsOfSelection.row, bottomRightCorner.col);
    } else if (this.directions.includes(DIRECTIONS.horizontal)) {
      coords = this.hot._createCellCoords(bottomRightCorner.row, coordsOfSelection.col);
    } else {
      return;
    }
    return this.reduceSelectionAreaIfNeeded(coords);
  }
  /**
   * Show the fill border.
   *
   * @private
   * @param {CellCoords} coordsOfSelection `CellCoords` coord object.
   */
  showBorder(coordsOfSelection) {
    const coordsOfDragAndDropBorders = this.getCoordsOfDragAndDropBorders(coordsOfSelection);
    if (coordsOfDragAndDropBorders) {
      this.redrawBorders(coordsOfDragAndDropBorders);
    }
  }
  /**
   * Add new row.
   *
   * @private
   */
  addRow() {
    this.hot._registerTimeout(() => {
      this.hot.alter(INSERT_ROW_ALTER_ACTION_NAME, void 0, 1, `${this.pluginName}.fill`);
      this.addingStarted = false;
    }, INTERVAL_FOR_ADDING_ROW);
  }
  /**
   * Add new rows if they are needed to continue auto-filling values.
   *
   * @private
   */
  addNewRowIfNeeded() {
    if (!this.hot.selection.highlight.getFill().isEmpty() && this.addingStarted === false && this.autoInsertRow) {
      const cornersOfSelectedCells = this.hot.getSelectedLast();
      const cornersOfSelectedDragArea = this.hot.selection.highlight.getFill().getVisualCorners();
      const nrOfTableRows = this.hot.countRows();
      if (cornersOfSelectedCells[2] < nrOfTableRows - 1 && cornersOfSelectedDragArea[2] === nrOfTableRows - 1) {
        this.addingStarted = true;
        this.addRow();
      }
    }
  }
  /**
   * Get index of last adjacent filled in row.
   *
   * @private
   * @param {Array} cornersOfSelectedCells Indexes of selection corners.
   * @returns {number} Gives number greater than or equal to zero when selection adjacent can be applied.
   *                   Or -1 when selection adjacent can't be applied.
   */
  getIndexOfLastAdjacentFilledInRow(cornersOfSelectedCells) {
    const data = this.hot.getData();
    const nrOfTableRows = this.hot.countRows();
    let lastFilledInRowIndex;
    for (let rowIndex = cornersOfSelectedCells[2] + 1; rowIndex < nrOfTableRows; rowIndex++) {
      for (let columnIndex = cornersOfSelectedCells[1]; columnIndex <= cornersOfSelectedCells[3]; columnIndex++) {
        const dataInCell = data[rowIndex][columnIndex];
        if (!isEmpty(dataInCell)) {
          return -1;
        }
      }
      const dataInNextLeftCell = data[rowIndex][cornersOfSelectedCells[1] - 1];
      const dataInNextRightCell = data[rowIndex][cornersOfSelectedCells[3] + 1];
      if (!isEmpty(dataInNextLeftCell) || !isEmpty(dataInNextRightCell)) {
        lastFilledInRowIndex = rowIndex;
      }
    }
    return lastFilledInRowIndex;
  }
  /**
   * Adds a selection from the start area to the specific row index.
   *
   * @private
   * @param {Array} selectStartArea Selection area from which we start to create more comprehensive selection.
   * @param {number} rowIndex The row index into the selection will be added.
   */
  addSelectionFromStartAreaToSpecificRowIndex(selectStartArea, rowIndex) {
    this.hot.selection.highlight.getFill().clear().add(this.hot._createCellCoords(selectStartArea[0], selectStartArea[1])).add(this.hot._createCellCoords(rowIndex, selectStartArea[3])).commit();
  }
  /**
   * Sets selection based on passed corners.
   *
   * @private
   * @param {Array} cornersOfArea An array witch defines selection.
   */
  setSelection(cornersOfArea) {
    this.hot.selectCell(...arrayMap(cornersOfArea, (index) => Math.max(index, 0)), false, false);
  }
  /**
   * Try to select cells down to the last row in the left column and then returns if selection was applied.
   *
   * @private
   * @returns {boolean}
   */
  selectAdjacent() {
    const cornersOfSelectedCells = this.hot.getSelectedLast();
    const lastFilledInRowIndex = this.getIndexOfLastAdjacentFilledInRow(cornersOfSelectedCells);
    if (lastFilledInRowIndex === -1 || lastFilledInRowIndex === void 0) {
      return false;
    }
    this.addSelectionFromStartAreaToSpecificRowIndex(cornersOfSelectedCells, lastFilledInRowIndex);
    return true;
  }
  /**
   * Resets selection of dragged area.
   *
   * @private
   */
  resetSelectionOfDraggedArea() {
    this.handleDraggedCells = 0;
    this.hot.selection.highlight.getFill().clear();
  }
  /**
   * Redraws borders.
   *
   * @private
   * @param {CellCoords} coords `CellCoords` coord object.
   */
  redrawBorders(coords) {
    this.hot.selection.highlight.getFill().clear().add(this.hot.getSelectedRangeLast().from).add(this.hot.getSelectedRangeLast().to).add(coords).commit();
    this.hot.view.render();
  }
  /**
   * Get if mouse was dragged outside.
   *
   * @private
   * @param {MouseEvent} event `mousemove` event properties.
   * @returns {boolean}
   */
  getIfMouseWasDraggedOutside(event) {
    const {
      documentElement
    } = this.hot.rootDocument;
    const tableBottom = offset(this.hot.table).top - (this.hot.rootWindow.pageYOffset || documentElement.scrollTop) + outerHeight(this.hot.table);
    const tableRight = offset(this.hot.table).left - (this.hot.rootWindow.pageXOffset || documentElement.scrollLeft) + outerWidth(this.hot.table);
    return event.clientY > tableBottom && event.clientX <= tableRight;
  }
  /**
   * Bind the events used by the plugin.
   *
   * @private
   */
  registerEvents() {
    const {
      documentElement
    } = this.hot.rootDocument;
    this.eventManager.addEventListener(documentElement, "mouseup", () => _assertClassBrand5(_Autofill_brand, this, _onMouseUp).call(this));
    this.eventManager.addEventListener(documentElement, "mousemove", (event) => _assertClassBrand5(_Autofill_brand, this, _onMouseMove).call(this, event));
  }
  /**
   * Clears mapped settings.
   *
   * @private
   */
  clearMappedSettings() {
    this.directions.length = 0;
    this.autoInsertRow = false;
  }
  /**
   * Map settings.
   *
   * @private
   */
  mapSettings() {
    const mappedSettings = getMappedFillHandleSetting(this.hot.getSettings().fillHandle);
    this.directions = mappedSettings.directions;
    this.autoInsertRow = mappedSettings.autoInsertRow;
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
};
function _onCellCornerDblClick() {
  const selectionApplied = this.selectAdjacent();
  if (selectionApplied) {
    this.fillIn();
  }
}
function _onAfterCellCornerMouseDown() {
  this.handleDraggedCells = 1;
  this.mouseDownOnCellCorner = true;
}
function _onBeforeCellMouseOver(coords) {
  if (this.mouseDownOnCellCorner && !this.hot.view.isMouseDown() && this.handleDraggedCells) {
    this.handleDraggedCells += 1;
    this.showBorder(coords);
    this.addNewRowIfNeeded();
  }
}
function _onMouseUp() {
  if (this.handleDraggedCells) {
    if (this.handleDraggedCells > 1) {
      this.fillIn();
    }
    this.handleDraggedCells = 0;
    this.mouseDownOnCellCorner = false;
  }
}
function _onMouseMove(event) {
  const mouseWasDraggedOutside = this.getIfMouseWasDraggedOutside(event);
  if (this.addingStarted === false && this.handleDraggedCells > 0 && mouseWasDraggedOutside) {
    this.mouseDragOutside = true;
    this.addingStarted = true;
  } else {
    this.mouseDragOutside = false;
  }
  if (this.mouseDragOutside && this.autoInsertRow) {
    this.addRow();
  }
}

// node_modules/handsontable/plugins/autoRowSize/autoRowSize.mjs
function _classPrivateMethodInitSpec6(e, a) {
  _checkPrivateRedeclaration6(e, a), a.add(e);
}
function _classPrivateFieldInitSpec4(e, t, a) {
  _checkPrivateRedeclaration6(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration6(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty9(e, r, t) {
  return (r = _toPropertyKey9(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey9(t) {
  var i = _toPrimitive9(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive9(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _classPrivateFieldSet2(s, a, r) {
  return s.set(_assertClassBrand6(s, a), r), r;
}
function _classPrivateFieldGet4(s, a) {
  return s.get(_assertClassBrand6(s, a));
}
function _assertClassBrand6(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var PLUGIN_KEY4 = "autoRowSize";
var PLUGIN_PRIORITY3 = 40;
var ROW_WIDTHS_MAP_NAME = "autoRowSize";
var _visualRowsToRefresh = /* @__PURE__ */ new WeakMap();
var _isInitialized2 = /* @__PURE__ */ new WeakMap();
var _AutoRowSize_brand = /* @__PURE__ */ new WeakSet();
var AutoRowSize = class _AutoRowSize extends BasePlugin {
  static get PLUGIN_KEY() {
    return PLUGIN_KEY4;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY3;
  }
  static get SETTING_KEYS() {
    return true;
  }
  static get DEFAULT_SETTINGS() {
    return {
      useHeaders: true,
      samplingRatio: null,
      allowSampleDuplicates: false
    };
  }
  static get CALCULATION_STEP() {
    return 50;
  }
  static get SYNC_CALCULATION_LIMIT() {
    return 500;
  }
  /**
   * Columns header's height cache.
   *
   * @private
   * @type {number}
   */
  constructor(hotInstance) {
    super(hotInstance);
    _classPrivateMethodInitSpec6(this, _AutoRowSize_brand);
    _defineProperty9(this, "headerHeight", null);
    _defineProperty9(this, "ghostTable", new ghostTable_default(this.hot));
    _defineProperty9(this, "samplesGenerator", new samplesGenerator_default((row, column) => {
      const physicalRow = this.hot.toPhysicalRow(row);
      const physicalColumn = this.hot.toPhysicalColumn(column);
      if (this.hot.rowIndexMapper.isHidden(physicalRow) || this.hot.columnIndexMapper.isHidden(physicalColumn)) {
        return false;
      }
      if (row >= 0 && column >= 0) {
        const cellMeta = this.hot.getCellMeta(row, column);
        if (cellMeta.hidden) {
          return false;
        }
      }
      let cellValue;
      if (row >= 0) {
        cellValue = this.hot.getDataAtCell(row, column);
      } else if (row === -1) {
        cellValue = this.hot.getColHeader(column);
      }
      return {
        value: cellValue
      };
    }));
    _defineProperty9(this, "inProgress", false);
    _defineProperty9(this, "measuredRows", 0);
    _defineProperty9(this, "rowHeightsMap", new PhysicalIndexToValueMap());
    _classPrivateFieldInitSpec4(this, _visualRowsToRefresh, []);
    _classPrivateFieldInitSpec4(this, _isInitialized2, false);
    this.hot.rowIndexMapper.registerMap(ROW_WIDTHS_MAP_NAME, this.rowHeightsMap);
    this.addHook("beforeRowResize", (size, row, isDblClick) => _assertClassBrand6(_AutoRowSize_brand, this, _onBeforeRowResize).call(this, size, row, isDblClick));
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link AutoRowSize#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    const settings = this.hot.getSettings()[PLUGIN_KEY4];
    return settings === true || isObject(settings);
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _this = this;
    if (this.enabled) {
      return;
    }
    this.samplesGenerator.setAllowDuplicates(this.getSetting("allowSampleDuplicates"));
    const samplingRatio = this.getSetting("samplingRatio");
    if (samplingRatio && !isNaN(samplingRatio)) {
      this.samplesGenerator.setSampleCount(parseInt(samplingRatio, 10));
    }
    this.addHook("afterLoadData", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _assertClassBrand6(_AutoRowSize_brand, _this, _onAfterLoadData2).call(_this, ...args);
    });
    this.addHook("beforeChangeRender", function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _assertClassBrand6(_AutoRowSize_brand, _this, _onBeforeChange2).call(_this, ...args);
    });
    this.addHook("beforeColumnResize", () => this.recalculateAllRowsHeight());
    this.addHook("afterFormulasValuesUpdate", function() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return _assertClassBrand6(_AutoRowSize_brand, _this, _onAfterFormulasValuesUpdate2).call(_this, ...args);
    });
    this.addHook("beforeRender", () => _assertClassBrand6(_AutoRowSize_brand, this, _onBeforeRender2).call(this));
    this.addHook("modifyRowHeight", (height, row) => this.getRowHeight(row, height));
    this.addHook("init", () => _assertClassBrand6(_AutoRowSize_brand, this, _onInit2).call(this));
    this.addHook("modifyColumnHeaderHeight", () => this.getColumnHeaderHeight());
    super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.headerHeight = null;
    super.disablePlugin();
    this.addHook("beforeRowResize", (size, row, isDblClick) => _assertClassBrand6(_AutoRowSize_brand, this, _onBeforeRowResize).call(this, size, row, isDblClick));
  }
  /**
   * Calculates heights for visible rows in the viewport only.
   */
  calculateVisibleRowsHeight() {
    if (!this.hot.countCols()) {
      return;
    }
    const firstVisibleRow = this.getFirstVisibleRow();
    const lastVisibleRow = this.getLastVisibleRow();
    if (firstVisibleRow === -1 || lastVisibleRow === -1) {
      return;
    }
    const overwriteCache = this.hot.forceFullRender;
    this.calculateRowsHeight({
      from: firstVisibleRow,
      to: lastVisibleRow
    }, void 0, overwriteCache);
  }
  /**
   * Calculate a given rows height.
   *
   * @param {number|object} rowRange Row index or an object with `from` and `to` indexes as a range.
   * @param {number|object} colRange Column index or an object with `from` and `to` indexes as a range.
   * @param {boolean} [overwriteCache=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.
   */
  calculateRowsHeight() {
    let rowRange = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
      from: 0,
      to: this.hot.countRows() - 1
    };
    let colRange = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      from: 0,
      to: this.hot.countCols() - 1
    };
    let overwriteCache = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    const rowsRange = typeof rowRange === "number" ? {
      from: rowRange,
      to: rowRange
    } : rowRange;
    const columnsRange = typeof colRange === "number" ? {
      from: colRange,
      to: colRange
    } : colRange;
    if (this.hot.getColHeader(0) !== null) {
      const samples = this.samplesGenerator.generateRowSamples(-1, columnsRange);
      this.ghostTable.addColumnHeadersRow(samples.get(-1));
    }
    rangeEach(rowsRange.from, rowsRange.to, (visualRow) => {
      let physicalRow = this.hot.toPhysicalRow(visualRow);
      if (physicalRow === null) {
        physicalRow = visualRow;
      }
      if (overwriteCache || this.rowHeightsMap.getValueAtIndex(physicalRow) === null) {
        const samples = this.samplesGenerator.generateRowSamples(visualRow, columnsRange);
        samples.forEach((sample, row) => this.ghostTable.addRow(row, sample));
      }
    });
    if (this.ghostTable.rows.length) {
      this.hot.batchExecution(() => {
        this.ghostTable.getHeights((row, height) => {
          if (row < 0) {
            this.headerHeight = height;
          } else {
            this.rowHeightsMap.setValueAtIndex(this.hot.toPhysicalRow(row), height);
          }
        });
      }, true);
      this.measuredRows = rowsRange.to + 1;
      this.ghostTable.clean();
    }
  }
  /**
   * Calculate all rows heights. The calculated row will be cached in the {@link AutoRowSize#heights} property.
   * To retrieve height for specified row use {@link AutoRowSize#getRowHeight} method.
   *
   * @param {object|number} colRange Row index or an object with `from` and `to` properties which define row range.
   * @param {boolean} [overwriteCache] If `true` the calculation will be processed regardless of whether the width exists in the cache.
   */
  calculateAllRowsHeight() {
    let colRange = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
      from: 0,
      to: this.hot.countCols() - 1
    };
    let overwriteCache = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    let current = 0;
    const length = this.hot.countRows() - 1;
    let timer = null;
    this.inProgress = true;
    const loop = () => {
      if (!this.hot) {
        cancelAnimationFrame(timer);
        this.inProgress = false;
        return;
      }
      this.calculateRowsHeight({
        from: current,
        to: Math.min(current + _AutoRowSize.CALCULATION_STEP, length)
      }, colRange, overwriteCache);
      current = current + _AutoRowSize.CALCULATION_STEP + 1;
      if (current < length) {
        timer = requestAnimationFrame2(loop);
      } else {
        cancelAnimationFrame(timer);
        this.inProgress = false;
        this.hot.view.adjustElementsSize();
      }
    };
    const syncLimit = this.getSyncCalculationLimit();
    if (syncLimit >= 0) {
      this.calculateRowsHeight({
        from: 0,
        to: syncLimit
      }, colRange, overwriteCache);
      current = syncLimit + 1;
    }
    if (current < length) {
      loop();
    } else {
      this.inProgress = false;
      this.hot.view.adjustElementsSize();
    }
  }
  /**
   * Recalculates all rows height (overwrite cache values).
   */
  recalculateAllRowsHeight() {
    if (this.hot.view.isVisible()) {
      this.calculateAllRowsHeight({
        from: 0,
        to: this.hot.countCols() - 1
      }, true);
    }
  }
  /**
   * Gets value which tells how many rows should be calculated synchronously (rest of the rows will be calculated
   * asynchronously). The limit is calculated based on `syncLimit` set to autoRowSize option (see {@link Options#autoRowSize}).
   *
   * @returns {number}
   */
  getSyncCalculationLimit() {
    const settings = this.hot.getSettings()[PLUGIN_KEY4];
    let limit = _AutoRowSize.SYNC_CALCULATION_LIMIT;
    const rowsLimit = this.hot.countRows() - 1;
    if (isObject(settings)) {
      limit = settings.syncLimit;
      if (isPercentValue(limit)) {
        limit = valueAccordingPercent(rowsLimit, limit);
      } else {
        limit >>= 0;
      }
    }
    return Math.min(limit, rowsLimit);
  }
  /**
   * Get a row's height, as measured in the DOM.
   *
   * The height returned includes 1 px of the row's bottom border.
   *
   * Mind that this method is different from the
   * [`getRowHeight()`](@/api/core.md#getrowheight) method
   * of Handsontable's [Core](@/api/core.md).
   *
   * @param {number} row A visual row index.
   * @param {number} [defaultHeight] If no height is found, `defaultHeight` is returned instead.
   * @returns {number} The height of the specified row, in pixels.
   */
  getRowHeight(row, defaultHeight) {
    const cachedHeight = row < 0 ? this.headerHeight : this.rowHeightsMap.getValueAtIndex(this.hot.toPhysicalRow(row));
    let height = defaultHeight;
    if (cachedHeight !== null && cachedHeight > (defaultHeight || 0)) {
      height = cachedHeight;
    }
    return height;
  }
  /**
   * Get the calculated column header height.
   *
   * @returns {number|undefined}
   */
  getColumnHeaderHeight() {
    return this.headerHeight;
  }
  /**
   * Get the first visible row.
   *
   * @returns {number} Returns row index, -1 if table is not rendered or if there are no rows to base the the calculations on.
   */
  getFirstVisibleRow() {
    var _this$hot$getFirstRen;
    return (_this$hot$getFirstRen = this.hot.getFirstRenderedVisibleRow()) !== null && _this$hot$getFirstRen !== void 0 ? _this$hot$getFirstRen : -1;
  }
  /**
   * Gets the last visible row.
   *
   * @returns {number} Returns row index or -1 if table is not rendered.
   */
  getLastVisibleRow() {
    var _this$hot$getLastRend;
    return (_this$hot$getLastRend = this.hot.getLastRenderedVisibleRow()) !== null && _this$hot$getLastRend !== void 0 ? _this$hot$getLastRend : -1;
  }
  /**
   * Clears cache of calculated row heights. If you want to clear only selected rows pass an array with their indexes.
   * Otherwise whole cache will be cleared.
   *
   * @param {number[]} [physicalRows] List of physical row indexes to clear.
   */
  clearCache(physicalRows) {
    this.headerHeight = null;
    if (Array.isArray(physicalRows)) {
      this.hot.batchExecution(() => {
        physicalRows.forEach((physicalIndex) => {
          this.rowHeightsMap.setValueAtIndex(physicalIndex, null);
        });
      }, true);
    } else {
      this.rowHeightsMap.clear();
    }
  }
  /**
   * Clears cache by range.
   *
   * @param {object|number} range Row index or an object with `from` and `to` properties which define row range.
   */
  clearCacheByRange(range) {
    const {
      from,
      to
    } = typeof range === "number" ? {
      from: range,
      to: range
    } : range;
    this.hot.batchExecution(() => {
      rangeEach(Math.min(from, to), Math.max(from, to), (row) => {
        this.rowHeightsMap.setValueAtIndex(row, null);
      });
    }, true);
  }
  /**
   * Checks if all heights were calculated. If not then return `true` (need recalculate).
   *
   * @returns {boolean}
   */
  isNeedRecalculate() {
    return !!this.rowHeightsMap.getValues().slice(0, this.measuredRows).filter((item) => item === null).length;
  }
  /**
   * On before view render listener.
   */
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    this.ghostTable.clean();
    super.destroy();
  }
};
function _calculateSpecificRowsHeight(visualRows) {
  const columnsRange = {
    from: 0,
    to: this.hot.countCols() - 1
  };
  visualRows.forEach((visualRow) => {
    const samples = this.samplesGenerator.generateRowSamples(visualRow, columnsRange);
    samples.forEach((sample, row) => this.ghostTable.addRow(row, sample));
  });
  if (this.ghostTable.rows.length) {
    this.hot.batchExecution(() => {
      this.ghostTable.getHeights((visualRow, height) => {
        const physicalRow = this.hot.toPhysicalRow(visualRow);
        this.rowHeightsMap.setValueAtIndex(physicalRow, height);
      });
    }, true);
    this.ghostTable.clean();
  }
}
function _onBeforeRender2() {
  this.calculateVisibleRowsHeight();
  if (!this.inProgress) {
    _assertClassBrand6(_AutoRowSize_brand, this, _calculateSpecificRowsHeight).call(this, _classPrivateFieldGet4(_visualRowsToRefresh, this));
    _classPrivateFieldSet2(_visualRowsToRefresh, this, []);
  }
}
function _onBeforeRowResize(size, row, isDblClick) {
  let newSize = size;
  if (isDblClick) {
    this.calculateRowsHeight(row, void 0, true);
    newSize = this.getRowHeight(row);
  }
  return newSize;
}
function _onAfterLoadData2(sourceData, isFirstLoad) {
  if (!isFirstLoad) {
    this.recalculateAllRowsHeight();
  }
}
function _onBeforeChange2(changes) {
  const changedRows = changes.reduce((acc, _ref) => {
    let [row] = _ref;
    if (acc.indexOf(row) === -1) {
      acc.push(row);
    }
    return acc;
  }, []);
  _classPrivateFieldGet4(_visualRowsToRefresh, this).push(...changedRows);
}
function _onInit2() {
  this.recalculateAllRowsHeight();
  _classPrivateFieldSet2(_isInitialized2, this, true);
}
function _onAfterFormulasValuesUpdate2(changes) {
  if (!_classPrivateFieldGet4(_isInitialized2, this)) {
    return;
  }
  const changedRows = changes.reduce((acc, change) => {
    var _change$address;
    const physicalRow = (_change$address = change.address) === null || _change$address === void 0 ? void 0 : _change$address.row;
    if (Number.isInteger(physicalRow)) {
      const visualRow = this.hot.toVisualRow(physicalRow);
      if (acc.indexOf(visualRow) === -1) {
        acc.push(visualRow);
      }
    }
    return acc;
  }, []);
  _classPrivateFieldGet4(_visualRowsToRefresh, this).push(...changedRows);
}

// node_modules/handsontable/plugins/bindRowsWithHeaders/maps/looseBindsMap.mjs
var {
  getListWithInsertedItems,
  getListWithRemovedItems
} = alterUtilsFactory("physicallyIndexed");
var LooseBindsMap = class extends IndexMap {
  constructor() {
    super((index) => index);
  }
  /**
   * Add values to list and reorganize.
   *
   * @private
   * @param {number} insertionIndex Position inside the list.
   * @param {Array} insertedIndexes List of inserted indexes.
   */
  insert(insertionIndex, insertedIndexes) {
    const listAfterUpdate = getIncreasedIndexes(this.indexedValues, insertedIndexes);
    this.indexedValues = getListWithInsertedItems(listAfterUpdate, insertionIndex, insertedIndexes, this.initValueOrFn);
    super.insert(insertionIndex, insertedIndexes);
  }
  /**
   * Remove values from the list and reorganize.
   *
   * @private
   * @param {Array} removedIndexes List of removed indexes.
   */
  remove(removedIndexes) {
    const listAfterUpdate = getListWithRemovedItems(this.indexedValues, removedIndexes);
    this.indexedValues = getDecreasedIndexes(listAfterUpdate, removedIndexes);
    super.remove(removedIndexes);
  }
};
var looseBindsMap_default = LooseBindsMap;

// node_modules/handsontable/plugins/bindRowsWithHeaders/maps/strictBindsMap.mjs
var {
  getListWithInsertedItems: getListWithInsertedItems2,
  getListWithRemovedItems: getListWithRemovedItems2
} = alterUtilsFactory("physicallyIndexed");
var StrictBindsMap = class extends IndexMap {
  constructor() {
    super((index) => index);
  }
  /**
   * Add values to list and reorganize.
   *
   * @private
   * @param {number} insertionIndex Position inside the list.
   * @param {Array} insertedIndexes List of inserted indexes.
   */
  insert(insertionIndex, insertedIndexes) {
    this.indexedValues = getListWithInsertedItems2(this.indexedValues, insertionIndex, insertedIndexes, (_, ordinalNumber) => this.getNextValue(ordinalNumber));
    super.insert(insertionIndex, insertedIndexes);
  }
  /**
   * Remove values from the list and reorganize.
   *
   * @private
   * @param {Array} removedIndexes List of removed indexes.
   */
  remove(removedIndexes) {
    this.indexedValues = getListWithRemovedItems2(this.indexedValues, removedIndexes);
    super.remove(removedIndexes);
  }
  /**
   * Get next values, which should be greater than actual maximum value in the list.
   *
   * @param {number} ordinalNumber Position in the list.
   * @returns {number}
   */
  getNextValue(ordinalNumber) {
    return Math.max(...this.getValues()) + 1 + ordinalNumber;
  }
};
var strictBindsMap_default = StrictBindsMap;

// node_modules/handsontable/plugins/bindRowsWithHeaders/bindRowsWithHeaders.mjs
function _classPrivateMethodInitSpec7(e, a) {
  _checkPrivateRedeclaration7(e, a), a.add(e);
}
function _checkPrivateRedeclaration7(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty10(e, r, t) {
  return (r = _toPropertyKey10(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey10(t) {
  var i = _toPrimitive10(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive10(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _assertClassBrand7(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var PLUGIN_KEY5 = "bindRowsWithHeaders";
var PLUGIN_PRIORITY4 = 210;
var DEFAULT_BIND = "loose";
var bindTypeToMapStrategy = /* @__PURE__ */ new Map([["loose", looseBindsMap_default], ["strict", strictBindsMap_default]]);
var _BindRowsWithHeaders_brand = /* @__PURE__ */ new WeakSet();
var BindRowsWithHeaders = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec7(this, _BindRowsWithHeaders_brand);
    _defineProperty10(this, "headerIndexes", null);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY5;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY4;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link BindRowsWithHeaders#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[PLUGIN_KEY5];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _bindTypeToMapStrateg;
    if (this.enabled) {
      return;
    }
    const MapStrategy = (_bindTypeToMapStrateg = bindTypeToMapStrategy.get(this.getSetting())) !== null && _bindTypeToMapStrateg !== void 0 ? _bindTypeToMapStrateg : bindTypeToMapStrategy.get(DEFAULT_BIND);
    this.headerIndexes = this.hot.rowIndexMapper.registerMap("bindRowsWithHeaders", new MapStrategy());
    this.addHook("modifyRowHeader", (row) => _assertClassBrand7(_BindRowsWithHeaders_brand, this, _onModifyRowHeader).call(this, row));
    super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.hot.rowIndexMapper.unregisterMap("bindRowsWithHeaders");
    super.disablePlugin();
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
};
function _onModifyRowHeader(row) {
  return this.headerIndexes.getValueAtIndex(this.hot.toPhysicalRow(row));
}

// node_modules/handsontable/plugins/collapsibleColumns/collapsibleColumns.mjs
function _classPrivateMethodInitSpec8(e, a) {
  _checkPrivateRedeclaration8(e, a), a.add(e);
}
function _classPrivateFieldInitSpec5(e, t, a) {
  _checkPrivateRedeclaration8(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration8(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty11(e, r, t) {
  return (r = _toPropertyKey11(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey11(t) {
  var i = _toPrimitive11(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive11(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _classPrivateFieldGet5(s, a) {
  return s.get(_assertClassBrand8(s, a));
}
function _classPrivateFieldSet3(s, a, r) {
  return s.set(_assertClassBrand8(s, a), r), r;
}
function _assertClassBrand8(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var PLUGIN_KEY6 = "collapsibleColumns";
var PLUGIN_PRIORITY5 = 290;
var SETTING_KEYS2 = ["nestedHeaders"];
var COLLAPSIBLE_ELEMENT_CLASS = "collapsibleIndicator";
var SHORTCUTS_GROUP4 = PLUGIN_KEY6;
var actionDictionary = /* @__PURE__ */ new Map([["collapse", {
  hideColumn: true,
  beforeHook: "beforeColumnCollapse",
  afterHook: "afterColumnCollapse"
}], ["expand", {
  hideColumn: false,
  beforeHook: "beforeColumnExpand",
  afterHook: "afterColumnExpand"
}]]);
var _collapsedColumnsMap = /* @__PURE__ */ new WeakMap();
var _CollapsibleColumns_brand = /* @__PURE__ */ new WeakSet();
var CollapsibleColumns = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec8(this, _CollapsibleColumns_brand);
    _defineProperty11(this, "nestedHeadersPlugin", null);
    _defineProperty11(this, "headerStateManager", null);
    _classPrivateFieldInitSpec5(this, _collapsedColumnsMap, null);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY6;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY5;
  }
  static get PLUGIN_DEPS() {
    return ["plugin:NestedHeaders"];
  }
  static get SETTING_KEYS() {
    return [PLUGIN_KEY6, ...SETTING_KEYS2];
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link CollapsibleColumns#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[PLUGIN_KEY6];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _this = this;
    if (this.enabled) {
      return;
    }
    const {
      nestedHeaders
    } = this.hot.getSettings();
    if (!nestedHeaders) {
      warn("You need to configure the Nested Headers plugin in order to use collapsible headers.");
    }
    _classPrivateFieldSet3(_collapsedColumnsMap, this, this.hot.columnIndexMapper.createAndRegisterIndexMap(this.pluginName, "hiding"));
    this.nestedHeadersPlugin = this.hot.getPlugin("nestedHeaders");
    this.headerStateManager = this.nestedHeadersPlugin.getStateManager();
    this.addHook("init", () => _assertClassBrand8(_CollapsibleColumns_brand, this, _onInit3).call(this));
    this.addHook("afterLoadData", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _assertClassBrand8(_CollapsibleColumns_brand, _this, _onAfterLoadData3).call(_this, ...args);
    });
    this.addHook("afterGetColHeader", function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _assertClassBrand8(_CollapsibleColumns_brand, _this, _onAfterGetColHeader).call(_this, ...args);
    });
    this.addHook("beforeOnCellMouseDown", (event, coords, TD) => _assertClassBrand8(_CollapsibleColumns_brand, this, _onBeforeOnCellMouseDown).call(this, event, coords, TD));
    this.registerShortcuts();
    super.enablePlugin();
    this.updatePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *   - [`collapsibleColumns`](@/api/options.md#collapsiblecolumns)
   *   - [`nestedHeaders`](@/api/options.md#nestedheaders)
   */
  updatePlugin() {
    if (!this.hot.view) {
      return;
    }
    if (!this.nestedHeadersPlugin.detectedOverlappedHeaders) {
      const {
        collapsibleColumns
      } = this.hot.getSettings();
      if (typeof collapsibleColumns === "boolean") {
        this.headerStateManager.mapState((headerSettings) => {
          return {
            collapsible: headerSettings.origColspan > 1
          };
        });
      } else if (Array.isArray(collapsibleColumns)) {
        this.headerStateManager.mapState(() => {
          return {
            collapsible: false
          };
        });
        this.headerStateManager.mergeStateWith(collapsibleColumns);
      }
    }
    super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.hot.columnIndexMapper.unregisterMap(this.pluginName);
    _classPrivateFieldSet3(_collapsedColumnsMap, this, null);
    this.nestedHeadersPlugin = null;
    this.unregisterShortcuts();
    this.clearButtons();
    super.disablePlugin();
  }
  /**
   * Register shortcuts responsible for toggling collapsible columns.
   *
   * @private
   */
  registerShortcuts() {
    this.hot.getShortcutManager().getContext("grid").addShortcut({
      keys: [["Enter"]],
      callback: () => {
        var _this$headerStateMana;
        const {
          row,
          col
        } = this.hot.getSelectedRangeLast().highlight;
        const {
          collapsible,
          isCollapsed,
          columnIndex
        } = (_this$headerStateMana = this.headerStateManager.getHeaderTreeNodeData(row, col)) !== null && _this$headerStateMana !== void 0 ? _this$headerStateMana : {};
        if (!collapsible) {
          return;
        }
        if (isCollapsed) {
          this.expandSection({
            row,
            col: columnIndex
          });
        } else {
          this.collapseSection({
            row,
            col: columnIndex
          });
        }
        return false;
      },
      runOnlyIf: () => {
        var _this$hot$getSelected, _this$hot$getSelected2;
        return ((_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.isSingle()) && ((_this$hot$getSelected2 = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected2 === void 0 ? void 0 : _this$hot$getSelected2.highlight.isHeader());
      },
      group: SHORTCUTS_GROUP4,
      relativeToGroup: EDITOR_EDIT_GROUP,
      position: "before"
    });
  }
  /**
   * Unregister shortcuts responsible for toggling collapsible columns.
   *
   * @private
   */
  unregisterShortcuts() {
    this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(SHORTCUTS_GROUP4);
  }
  /**
   * Clears the expand/collapse buttons.
   *
   * @private
   */
  clearButtons() {
    if (!this.hot.view) {
      return;
    }
    const headerLevels = this.hot.view._wt.getSetting("columnHeaders").length;
    const mainHeaders = this.hot.view._wt.wtTable.THEAD;
    const topHeaders = this.hot.view._wt.wtOverlays.topOverlay.clone.wtTable.THEAD;
    const topLeftCornerHeaders = this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay ? this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.THEAD : null;
    const removeButton = function(button) {
      if (button) {
        button.parentNode.removeChild(button);
      }
    };
    rangeEach(0, headerLevels - 1, (i) => {
      const masterLevel = mainHeaders.childNodes[i];
      const topLevel = topHeaders.childNodes[i];
      const topLeftCornerLevel = topLeftCornerHeaders ? topLeftCornerHeaders.childNodes[i] : null;
      rangeEach(0, masterLevel.childNodes.length - 1, (j) => {
        let button = masterLevel.childNodes[j].querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);
        removeButton(button);
        if (topLevel && topLevel.childNodes[j]) {
          button = topLevel.childNodes[j].querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);
          removeButton(button);
        }
        if (topLeftCornerHeaders && topLeftCornerLevel && topLeftCornerLevel.childNodes[j]) {
          button = topLeftCornerLevel.childNodes[j].querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);
          removeButton(button);
        }
      });
    }, true);
  }
  /**
   * Expands section at the provided coords.
   *
   * @param {object} coords Contains coordinates information. (`coords.row`, `coords.col`).
   */
  expandSection(coords) {
    this.toggleCollapsibleSection([coords], "expand");
  }
  /**
   * Collapses section at the provided coords.
   *
   * @param {object} coords Contains coordinates information. (`coords.row`, `coords.col`).
   */
  collapseSection(coords) {
    this.toggleCollapsibleSection([coords], "collapse");
  }
  /**
   * Collapses or expand all collapsible sections, depending on the action parameter.
   *
   * @param {string} action 'collapse' or 'expand'.
   */
  toggleAllCollapsibleSections(action) {
    const coords = this.headerStateManager.mapNodes((headerSettings) => {
      const {
        collapsible,
        origColspan,
        headerLevel,
        columnIndex,
        isCollapsed
      } = headerSettings;
      if (collapsible === true && origColspan > 1 && (isCollapsed && action === "expand" || !isCollapsed && action === "collapse")) {
        return {
          row: this.headerStateManager.levelToRowCoords(headerLevel),
          col: columnIndex
        };
      }
    });
    this.toggleCollapsibleSection(coords, action);
  }
  /**
   * Collapses all collapsible sections.
   */
  collapseAll() {
    this.toggleAllCollapsibleSections("collapse");
  }
  /**
   * Expands all collapsible sections.
   */
  expandAll() {
    this.toggleAllCollapsibleSections("expand");
  }
  /**
   * Collapses/Expands a section.
   *
   * @param {Array} coords Array of coords - section coordinates.
   * @param {string} [action] Action definition ('collapse' or 'expand').
   * @fires Hooks#beforeColumnCollapse
   * @fires Hooks#beforeColumnExpand
   * @fires Hooks#afterColumnCollapse
   * @fires Hooks#afterColumnExpand
   */
  toggleCollapsibleSection(coords, action) {
    if (!actionDictionary.has(action)) {
      throw new Error(`Unsupported action is passed (${action}).`);
    }
    if (!Array.isArray(coords)) {
      return;
    }
    const filteredCoords = arrayFilter(coords, (_ref) => {
      let {
        row
      } = _ref;
      return row < 0;
    });
    let isActionPossible = filteredCoords.length > 0;
    arrayEach(filteredCoords, (_ref2) => {
      var _this$headerStateMana2;
      let {
        row,
        col: column
      } = _ref2;
      const {
        collapsible,
        isCollapsed
      } = (_this$headerStateMana2 = this.headerStateManager.getHeaderSettings(row, column)) !== null && _this$headerStateMana2 !== void 0 ? _this$headerStateMana2 : {};
      if (!collapsible || isCollapsed && action === "collapse" || !isCollapsed && action === "expand") {
        isActionPossible = false;
        return false;
      }
    });
    const nodeModRollbacks = [];
    const affectedColumnsIndexes = [];
    if (isActionPossible) {
      arrayEach(filteredCoords, (_ref3) => {
        let {
          row,
          col: column
        } = _ref3;
        const {
          colspanCompensation,
          affectedColumns,
          rollbackModification
        } = this.headerStateManager.triggerNodeModification(action, row, column);
        if (colspanCompensation > 0) {
          affectedColumnsIndexes.push(...affectedColumns);
          nodeModRollbacks.push(rollbackModification);
        }
      });
    }
    const currentCollapsedColumns = this.getCollapsedColumns();
    let destinationCollapsedColumns = [];
    if (action === "collapse") {
      destinationCollapsedColumns = arrayUnique([...currentCollapsedColumns, ...affectedColumnsIndexes]);
    } else if (action === "expand") {
      destinationCollapsedColumns = arrayFilter(currentCollapsedColumns, (index) => !affectedColumnsIndexes.includes(index));
    }
    const actionTranslator = actionDictionary.get(action);
    const isActionAllowed = this.hot.runHooks(actionTranslator.beforeHook, currentCollapsedColumns, destinationCollapsedColumns, isActionPossible);
    if (isActionAllowed === false) {
      arrayEach(nodeModRollbacks, (nodeModRollback) => {
        nodeModRollback();
      });
      return;
    }
    this.hot.batchExecution(() => {
      arrayEach(affectedColumnsIndexes, (visualColumn) => {
        _classPrivateFieldGet5(_collapsedColumnsMap, this).setValueAtIndex(this.hot.toPhysicalColumn(visualColumn), actionTranslator.hideColumn);
      });
    }, true);
    const isActionPerformed = this.getCollapsedColumns().length !== currentCollapsedColumns.length;
    const selectionRange = this.hot.getSelectedRangeLast();
    if (action === "collapse" && isActionPerformed && selectionRange) {
      const {
        row,
        col
      } = selectionRange.highlight;
      const isHidden = this.hot.rowIndexMapper.isHidden(row) || this.hot.columnIndexMapper.isHidden(col);
      if (isHidden && affectedColumnsIndexes.includes(col)) {
        const nextRow = row >= 0 ? this.hot.rowIndexMapper.getNearestNotHiddenIndex(row, 1, true) : row;
        const nextColumn = col >= 0 ? this.hot.columnIndexMapper.getNearestNotHiddenIndex(col, 1, true) : col;
        if (nextRow !== null && nextColumn !== null) {
          this.hot.selectCell(nextRow, nextColumn);
        }
      }
    }
    this.hot.runHooks(actionTranslator.afterHook, currentCollapsedColumns, destinationCollapsedColumns, isActionPossible, isActionPerformed);
    this.hot.render();
    this.hot.view.adjustElementsSize();
  }
  /**
   * Gets an array of physical indexes of collapsed columns.
   *
   * @private
   * @returns {number[]}
   */
  getCollapsedColumns() {
    return _classPrivateFieldGet5(_collapsedColumnsMap, this).getHiddenIndexes();
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    _classPrivateFieldSet3(_collapsedColumnsMap, this, null);
    super.destroy();
  }
};
function _onAfterGetColHeader(column, TH, headerLevel) {
  var _this$headerStateMana3;
  const {
    collapsible,
    origColspan,
    isCollapsed
  } = (_this$headerStateMana3 = this.headerStateManager.getHeaderSettings(headerLevel, column)) !== null && _this$headerStateMana3 !== void 0 ? _this$headerStateMana3 : {};
  const isNodeCollapsible = collapsible && origColspan > 1 && column >= this.hot.getSettings().fixedColumnsStart;
  const isAriaTagsEnabled = this.hot.getSettings().ariaTags;
  let collapsibleElement = TH.querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);
  removeAttribute(TH, [A11Y_EXPANDED("")[0]]);
  if (isNodeCollapsible) {
    if (!collapsibleElement) {
      collapsibleElement = this.hot.rootDocument.createElement("div");
      addClass(collapsibleElement, COLLAPSIBLE_ELEMENT_CLASS);
      TH.querySelector("div:first-child").appendChild(collapsibleElement);
    }
    removeClass(collapsibleElement, ["collapsed", "expanded"]);
    if (isCollapsed) {
      addClass(collapsibleElement, "collapsed");
      fastInnerText(collapsibleElement, "+");
      if (isAriaTagsEnabled) {
        setAttribute(TH, ...A11Y_EXPANDED(false));
      }
    } else {
      addClass(collapsibleElement, "expanded");
      fastInnerText(collapsibleElement, "-");
      if (isAriaTagsEnabled) {
        setAttribute(TH, ...A11Y_EXPANDED(true));
      }
    }
    if (isAriaTagsEnabled) {
      setAttribute(collapsibleElement, ...A11Y_HIDDEN());
    }
  } else {
    var _collapsibleElement;
    (_collapsibleElement = collapsibleElement) === null || _collapsibleElement === void 0 || _collapsibleElement.remove();
  }
}
function _onBeforeOnCellMouseDown(event, coords) {
  if (hasClass(event.target, COLLAPSIBLE_ELEMENT_CLASS)) {
    if (hasClass(event.target, "expanded")) {
      this.eventManager.fireEvent(event.target, "mouseup");
      this.toggleCollapsibleSection([coords], "collapse");
    } else if (hasClass(event.target, "collapsed")) {
      this.eventManager.fireEvent(event.target, "mouseup");
      this.toggleCollapsibleSection([coords], "expand");
    }
    stopImmediatePropagation(event);
  }
}
function _onInit3() {
  this.updatePlugin();
}
function _onAfterLoadData3(sourceData, initialLoad) {
  if (!initialLoad) {
    this.updatePlugin();
  }
}

// node_modules/handsontable/plugins/columnSorting/columnStatesManager.mjs
function _defineProperty12(e, r, t) {
  return (r = _toPropertyKey12(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey12(t) {
  var i = _toPrimitive12(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive12(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var inheritedColumnProperties = ["sortEmptyCells", "indicator", "headerAction", "compareFunctionFactory"];
var SORT_EMPTY_CELLS_DEFAULT = false;
var SHOW_SORT_INDICATOR_DEFAULT = true;
var HEADER_ACTION_DEFAULT = true;
var ColumnStatesManager = class {
  constructor(hot, mapName) {
    _defineProperty12(this, "hot", void 0);
    _defineProperty12(this, "sortingStates", new LinkedPhysicalIndexToValueMap());
    _defineProperty12(this, "sortEmptyCells", SORT_EMPTY_CELLS_DEFAULT);
    _defineProperty12(this, "indicator", SHOW_SORT_INDICATOR_DEFAULT);
    _defineProperty12(this, "headerAction", HEADER_ACTION_DEFAULT);
    _defineProperty12(this, "compareFunctionFactory", void 0);
    _defineProperty12(this, "mapName", void 0);
    this.hot = hot;
    this.mapName = mapName;
    this.hot.columnIndexMapper.registerMap(mapName, this.sortingStates);
  }
  /**
   * Update column properties which affect the sorting result.
   *
   * **Note**: All column properties can be overwritten by {@link Options#columns} option.
   *
   * @param {object} allSortSettings Column sorting plugin's configuration object.
   */
  updateAllColumnsProperties(allSortSettings) {
    if (!isObject(allSortSettings)) {
      return;
    }
    objectEach(allSortSettings, (newValue, propertyName) => {
      if (inheritedColumnProperties.includes(propertyName)) {
        this[propertyName] = newValue;
      }
    });
  }
  /**
   * Get all column properties which affect the sorting result.
   *
   * @returns {object}
   */
  getAllColumnsProperties() {
    const columnProperties = {
      sortEmptyCells: this.sortEmptyCells,
      indicator: this.indicator,
      headerAction: this.headerAction
    };
    if (typeof this.compareFunctionFactory === "function") {
      columnProperties.compareFunctionFactory = this.compareFunctionFactory;
    }
    return columnProperties;
  }
  /**
   * Get sort order of column.
   *
   * @param {number} searchedColumn Visual column index.
   * @returns {string|undefined} Sort order (`asc` for ascending, `desc` for descending and undefined for not sorted).
   */
  getSortOrderOfColumn(searchedColumn) {
    var _this$sortingStates$g;
    return (_this$sortingStates$g = this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(searchedColumn))) === null || _this$sortingStates$g === void 0 ? void 0 : _this$sortingStates$g.sortOrder;
  }
  /**
   * Get order of particular column in the states queue.
   *
   * @param {number} column Visual column index.
   * @returns {number}
   */
  getIndexOfColumnInSortQueue(column) {
    column = this.hot.toPhysicalColumn(column);
    return this.sortingStates.getEntries().findIndex((_ref) => {
      let [physicalColumn] = _ref;
      return physicalColumn === column;
    });
  }
  /**
   * Get number of sorted columns.
   *
   * @returns {number}
   */
  getNumberOfSortedColumns() {
    return this.sortingStates.getLength();
  }
  /**
   * Get if list of sorted columns is empty.
   *
   * @returns {boolean}
   */
  isListOfSortedColumnsEmpty() {
    return this.getNumberOfSortedColumns() === 0;
  }
  /**
   * Get if particular column is sorted.
   *
   * @param {number} column Visual column index.
   * @returns {boolean}
   */
  isColumnSorted(column) {
    return isObject(this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(column)));
  }
  /**
   * Queue of sort states containing sorted columns and their orders (Array of objects containing `column` and `sortOrder` properties).
   *
   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.
   *
   * @returns {Array<object>}
   */
  getSortStates() {
    if (this.sortingStates === null) {
      return [];
    }
    const sortingStatesQueue = this.sortingStates.getEntries();
    return sortingStatesQueue.map((_ref2) => {
      let [physicalColumn, value] = _ref2;
      return {
        column: this.hot.toVisualColumn(physicalColumn),
        ...value
      };
    });
  }
  /**
   * Get sort state for particular column. Object contains `column` and `sortOrder` properties.
   *
   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.
   *
   * @param {number} column Visual column index.
   * @returns {object|undefined}
   */
  getColumnSortState(column) {
    const sortOrder = this.getSortOrderOfColumn(column);
    if (isDefined(sortOrder)) {
      return {
        column,
        sortOrder
      };
    }
  }
  /**
   * Set all column states.
   *
   * @param {Array} sortStates Sort states.
   */
  setSortStates(sortStates) {
    this.sortingStates.clear();
    for (let i = 0; i < sortStates.length; i += 1) {
      this.sortingStates.setValueAtIndex(this.hot.toPhysicalColumn(sortStates[i].column), {
        sortOrder: sortStates[i].sortOrder
      });
    }
  }
  /**
   * Destroy the state manager.
   */
  destroy() {
    this.hot.columnIndexMapper.unregisterMap(this.mapName);
    this.sortingStates = null;
  }
};

// node_modules/handsontable/plugins/columnSorting/sortFunction/default.mjs
function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {
  const locale = columnMeta.locale;
  return function(value, nextValue) {
    const {
      sortEmptyCells
    } = columnPluginSettings;
    if (typeof value === "string") {
      value = value.toLocaleLowerCase(locale);
    }
    if (typeof nextValue === "string") {
      nextValue = nextValue.toLocaleLowerCase(locale);
    }
    if (value === nextValue) {
      return DO_NOT_SWAP;
    }
    if (isEmpty(value)) {
      if (isEmpty(nextValue)) {
        return DO_NOT_SWAP;
      }
      if (sortEmptyCells) {
        return sortOrder === "asc" ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;
      }
      return FIRST_AFTER_SECOND;
    }
    if (isEmpty(nextValue)) {
      if (sortEmptyCells) {
        return sortOrder === "asc" ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;
      }
      return FIRST_BEFORE_SECOND;
    }
    if (isNaN(value) && !isNaN(nextValue)) {
      return sortOrder === "asc" ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;
    } else if (!isNaN(value) && isNaN(nextValue)) {
      return sortOrder === "asc" ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;
    } else if (!(isNaN(value) || isNaN(nextValue))) {
      value = parseFloat(value);
      nextValue = parseFloat(nextValue);
    }
    if (value < nextValue) {
      return sortOrder === "asc" ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;
    }
    if (value > nextValue) {
      return sortOrder === "asc" ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;
    }
    return DO_NOT_SWAP;
  };
}
var COLUMN_DATA_TYPE = "default";

// node_modules/handsontable/plugins/columnSorting/sortFunction/numeric.mjs
function compareFunctionFactory2(sortOrder, columnMeta, columnPluginSettings) {
  return function(value, nextValue) {
    const parsedFirstValue = parseFloat(value);
    const parsedSecondValue = parseFloat(nextValue);
    const {
      sortEmptyCells
    } = columnPluginSettings;
    if (parsedFirstValue === parsedSecondValue || isNaN(parsedFirstValue) && isNaN(parsedSecondValue)) {
      return DO_NOT_SWAP;
    }
    if (sortEmptyCells) {
      if (isEmpty(value)) {
        return sortOrder === "asc" ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;
      }
      if (isEmpty(nextValue)) {
        return sortOrder === "asc" ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;
      }
    }
    if (isNaN(parsedFirstValue)) {
      return FIRST_AFTER_SECOND;
    }
    if (isNaN(parsedSecondValue)) {
      return FIRST_BEFORE_SECOND;
    }
    if (parsedFirstValue < parsedSecondValue) {
      return sortOrder === "asc" ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;
    } else if (parsedFirstValue > parsedSecondValue) {
      return sortOrder === "asc" ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;
    }
    return DO_NOT_SWAP;
  };
}
var COLUMN_DATA_TYPE2 = "numeric";

// node_modules/handsontable/plugins/columnSorting/sortFunction/checkbox.mjs
function compareFunctionFactory3(sortOrder, columnMeta, columnPluginSettings) {
  const checkedTemplate = columnMeta.checkedTemplate;
  const uncheckedTemplate = columnMeta.uncheckedTemplate;
  const {
    sortEmptyCells
  } = columnPluginSettings;
  return function(value, nextValue) {
    const isEmptyValue = isEmpty(value);
    const isEmptyNextValue = isEmpty(nextValue);
    const unifiedValue = isEmptyValue ? uncheckedTemplate : value;
    const unifiedNextValue = isEmptyNextValue ? uncheckedTemplate : nextValue;
    const isValueFromTemplate = unifiedValue === uncheckedTemplate || unifiedValue === checkedTemplate;
    const isNextValueFromTemplate = unifiedNextValue === uncheckedTemplate || unifiedNextValue === checkedTemplate;
    if (sortEmptyCells === false) {
      if (isEmptyValue && isEmptyNextValue === false) {
        return FIRST_AFTER_SECOND;
      }
      if (isEmptyValue === false && isEmptyNextValue) {
        return FIRST_BEFORE_SECOND;
      }
    }
    if (isValueFromTemplate === false && isNextValueFromTemplate) {
      return sortOrder === "asc" ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;
    }
    if (isValueFromTemplate && isNextValueFromTemplate === false) {
      return sortOrder === "asc" ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;
    }
    if (isValueFromTemplate === false && isNextValueFromTemplate === false) {
      return compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings)(value, nextValue);
    }
    if (unifiedValue === uncheckedTemplate && unifiedNextValue === checkedTemplate) {
      return sortOrder === "asc" ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;
    }
    if (unifiedValue === checkedTemplate && unifiedNextValue === uncheckedTemplate) {
      return sortOrder === "asc" ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;
    }
    return DO_NOT_SWAP;
  };
}
var COLUMN_DATA_TYPE3 = "checkbox";

// node_modules/handsontable/plugins/columnSorting/sortFunction/date.mjs
function compareFunctionFactory4(sortOrder, columnMeta, columnPluginSettings) {
  return createDateTimeCompareFunction(sortOrder, columnMeta.dateFormat, columnPluginSettings);
}
var COLUMN_DATA_TYPE4 = "date";

// node_modules/handsontable/plugins/columnSorting/sortFunction/time.mjs
function compareFunctionFactory5(sortOrder, columnMeta, columnPluginSettings) {
  return createDateTimeCompareFunction(sortOrder, columnMeta.timeFormat, columnPluginSettings);
}
var COLUMN_DATA_TYPE5 = "time";

// node_modules/handsontable/plugins/columnSorting/sortService/registry.mjs
var {
  register: registerCompareFunctionFactory,
  getItem: getGloballyCompareFunctionFactory,
  hasItem: hasGloballyCompareFunctionFactory
} = staticRegister("sorting.compareFunctionFactory");
var {
  register: registerRootComparator,
  getItem: getRootComparator
} = staticRegister("sorting.mainSortComparator");
function getCompareFunctionFactory(type) {
  if (hasGloballyCompareFunctionFactory(type)) {
    return getGloballyCompareFunctionFactory(type);
  }
  return getGloballyCompareFunctionFactory(COLUMN_DATA_TYPE);
}
registerCompareFunctionFactory(COLUMN_DATA_TYPE3, compareFunctionFactory3);
registerCompareFunctionFactory(COLUMN_DATA_TYPE4, compareFunctionFactory4);
registerCompareFunctionFactory(COLUMN_DATA_TYPE, compareFunctionFactory);
registerCompareFunctionFactory(COLUMN_DATA_TYPE2, compareFunctionFactory2);
registerCompareFunctionFactory(COLUMN_DATA_TYPE5, compareFunctionFactory5);

// node_modules/handsontable/plugins/columnSorting/sortService/engine.mjs
var DO_NOT_SWAP = 0;
var FIRST_BEFORE_SECOND = -1;
var FIRST_AFTER_SECOND = 1;
function sort(indexesWithData, rootComparatorId) {
  const rootComparator3 = getRootComparator(rootComparatorId);
  for (var _len = arguments.length, argsForRootComparator = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    argsForRootComparator[_key - 2] = arguments[_key];
  }
  indexesWithData.sort(rootComparator3(...argsForRootComparator));
}

// node_modules/handsontable/plugins/columnSorting/utils.mjs
var ASC_SORT_STATE = "asc";
var DESC_SORT_STATE = "desc";
var HEADER_SPAN_CLASS = "colHeader";
function isValidColumnState(columnState) {
  if (isObject(columnState) === false) {
    return false;
  }
  const {
    column,
    sortOrder
  } = columnState;
  return Number.isInteger(column) && [ASC_SORT_STATE, DESC_SORT_STATE].includes(sortOrder);
}
function areValidSortStates(sortStates) {
  if (sortStates.some((columnState) => isValidColumnState(columnState) === false)) {
    return false;
  }
  const sortedColumns = sortStates.map((_ref) => {
    let {
      column
    } = _ref;
    return column;
  });
  return new Set(sortedColumns).size === sortedColumns.length;
}
function getNextSortOrder(sortOrder) {
  if (sortOrder === DESC_SORT_STATE) {
    return;
  } else if (sortOrder === ASC_SORT_STATE) {
    return DESC_SORT_STATE;
  }
  return ASC_SORT_STATE;
}
function getHeaderSpanElement(TH) {
  const headerSpanElement = TH.querySelector(`.${HEADER_SPAN_CLASS}`);
  return headerSpanElement;
}
function isFirstLevelColumnHeader(column, TH) {
  if (column < 0 || !TH.parentNode) {
    return false;
  }
  const TRs = TH.parentNode.parentNode.childNodes;
  const headerLevel = Array.from(TRs).indexOf(TH.parentNode) - TRs.length;
  if (headerLevel !== -1) {
    return false;
  }
  return true;
}
function wasHeaderClickedProperly(row, column, clickEvent) {
  return row === -1 && column >= 0 && isRightClick(clickEvent) === false;
}
function createDateTimeCompareFunction(sortOrder, format2, columnPluginSettings) {
  return function(value, nextValue) {
    const {
      sortEmptyCells
    } = columnPluginSettings;
    if (value === nextValue) {
      return DO_NOT_SWAP;
    }
    if (isEmpty(value)) {
      if (isEmpty(nextValue)) {
        return DO_NOT_SWAP;
      }
      if (sortEmptyCells) {
        return sortOrder === "asc" ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;
      }
      return FIRST_AFTER_SECOND;
    }
    if (isEmpty(nextValue)) {
      if (sortEmptyCells) {
        return sortOrder === "asc" ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;
      }
      return FIRST_BEFORE_SECOND;
    }
    const firstDate = moment_default(value, format2);
    const nextDate = moment_default(nextValue, format2);
    if (!firstDate.isValid()) {
      return FIRST_AFTER_SECOND;
    }
    if (!nextDate.isValid()) {
      return FIRST_BEFORE_SECOND;
    }
    if (nextDate.isAfter(firstDate)) {
      return sortOrder === "asc" ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;
    }
    if (nextDate.isBefore(firstDate)) {
      return sortOrder === "asc" ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;
    }
    return DO_NOT_SWAP;
  };
}
function warnAboutPluginsConflict(workingPlugin, disabledPlugin) {
  warn(toSingleLine`Plugins \`columnSorting\` and \`multiColumnSorting\` should not be enabled simultaneously.\x20
    Only \`${workingPlugin}\` will work. The \`${disabledPlugin}\` plugin will remain disabled.`);
}

// node_modules/handsontable/plugins/columnSorting/domHelpers.mjs
var HEADER_CLASS_ASC_SORT = "ascending";
var HEADER_CLASS_DESC_SORT = "descending";
var HEADER_CLASS_INDICATOR_DISABLED = "indicatorDisabled";
var HEADER_SORT_CLASS = "columnSorting";
var HEADER_ACTION_CLASS = "sortAction";
var orderToCssClass = /* @__PURE__ */ new Map([[ASC_SORT_STATE, HEADER_CLASS_ASC_SORT], [DESC_SORT_STATE, HEADER_CLASS_DESC_SORT]]);
function getClassesToAdd(columnStatesManager, column, showSortIndicator, headerAction) {
  const cssClasses = [HEADER_SORT_CLASS];
  if (headerAction) {
    cssClasses.push(HEADER_ACTION_CLASS);
  }
  if (showSortIndicator === false) {
    cssClasses.push(HEADER_CLASS_INDICATOR_DISABLED);
    return cssClasses;
  }
  const columnOrder = columnStatesManager.getSortOrderOfColumn(column);
  if (isDefined(columnOrder)) {
    cssClasses.push(orderToCssClass.get(columnOrder));
  }
  return cssClasses;
}
function getClassesToRemove() {
  return Array.from(orderToCssClass.values()).concat(HEADER_ACTION_CLASS, HEADER_CLASS_INDICATOR_DISABLED, HEADER_SORT_CLASS);
}

// node_modules/handsontable/plugins/columnSorting/rootComparator.mjs
function rootComparator(sortingOrders, columnMetas) {
  return function(rowIndexWithValues, nextRowIndexWithValues) {
    const [, ...values] = rowIndexWithValues;
    const [, ...nextValues] = nextRowIndexWithValues;
    return function getCompareResult(column) {
      const sortingOrder = sortingOrders[column];
      const columnMeta = columnMetas[column];
      const value = values[column];
      const nextValue = nextValues[column];
      const pluginSettings = columnMeta.columnSorting;
      const compareFunctionFactory6 = pluginSettings.compareFunctionFactory ? pluginSettings.compareFunctionFactory : getCompareFunctionFactory(columnMeta.type);
      const compareResult = compareFunctionFactory6(sortingOrder, columnMeta, pluginSettings)(value, nextValue);
      return compareResult;
    }(0);
  };
}

// node_modules/handsontable/plugins/columnSorting/columnSorting.mjs
function _classPrivateMethodInitSpec9(e, a) {
  _checkPrivateRedeclaration9(e, a), a.add(e);
}
function _checkPrivateRedeclaration9(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty13(e, r, t) {
  return (r = _toPropertyKey13(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey13(t) {
  var i = _toPrimitive13(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive13(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _assertClassBrand9(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var PLUGIN_KEY7 = "columnSorting";
var PLUGIN_PRIORITY6 = 50;
var APPEND_COLUMN_CONFIG_STRATEGY = "append";
var REPLACE_COLUMN_CONFIG_STRATEGY = "replace";
var SHORTCUTS_GROUP5 = PLUGIN_KEY7;
registerRootComparator(PLUGIN_KEY7, rootComparator);
Hooks.getSingleton().register("beforeColumnSort");
Hooks.getSingleton().register("afterColumnSort");
var pluginConflictsState = /* @__PURE__ */ new WeakMap();
var _ColumnSorting_brand = /* @__PURE__ */ new WeakSet();
var ColumnSorting = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec9(this, _ColumnSorting_brand);
    _defineProperty13(this, "columnStatesManager", null);
    _defineProperty13(this, "columnMetaCache", null);
    _defineProperty13(this, "pluginKey", PLUGIN_KEY7);
    _defineProperty13(this, "indexesSequenceCache", null);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY7;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY6;
  }
  /**
   * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ColumnSorting#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[this.pluginKey];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _this = this;
    if (pluginConflictsState.has(this.hot) && pluginConflictsState.get(this.hot) !== this.pluginKey) {
      this.hot.updateSettings({
        [this.pluginKey]: false
      });
      warnAboutPluginsConflict(pluginConflictsState.get(this.hot), this.pluginKey);
      return;
    }
    if (this.enabled) {
      return;
    }
    pluginConflictsState.set(this.hot, this.pluginKey);
    this.columnStatesManager = new ColumnStatesManager(this.hot, `${this.pluginKey}.sortingStates`);
    this.columnMetaCache = new PhysicalIndexToValueMap((physicalIndex) => {
      let visualIndex = this.hot.toVisualColumn(physicalIndex);
      if (visualIndex === null) {
        visualIndex = physicalIndex;
      }
      return this.getMergedPluginSettings(visualIndex);
    });
    this.hot.columnIndexMapper.registerMap(`${this.pluginKey}.columnMeta`, this.columnMetaCache);
    this.addHook("afterGetColHeader", (column, TH) => _assertClassBrand9(_ColumnSorting_brand, this, _onAfterGetColHeader2).call(this, column, TH));
    this.addHook("beforeOnCellMouseDown", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _assertClassBrand9(_ColumnSorting_brand, _this, _onBeforeOnCellMouseDown2).call(_this, ...args);
    });
    this.addHook("afterOnCellMouseDown", (event, target) => this.onAfterOnCellMouseDown(event, target));
    this.addHook("afterInit", () => _assertClassBrand9(_ColumnSorting_brand, this, _loadOrSortBySettings).call(this));
    this.addHook("afterLoadData", function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _assertClassBrand9(_ColumnSorting_brand, _this, _onAfterLoadData4).call(_this, ...args);
    });
    if (this.hot.view) {
      _assertClassBrand9(_ColumnSorting_brand, this, _loadOrSortBySettings).call(this);
    }
    this.registerShortcuts();
    super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    const clearColHeader = (column, TH) => {
      const headerSpanElement = getHeaderSpanElement(TH);
      if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {
        return;
      }
      this.updateHeaderClasses(headerSpanElement);
    };
    pluginConflictsState.delete(this.hot);
    this.hot.addHook("afterGetColHeader", clearColHeader);
    this.hot.addHookOnce("afterViewRender", () => {
      this.hot.removeHook("afterGetColHeader", clearColHeader);
    });
    this.hot.batchExecution(() => {
      if (this.indexesSequenceCache !== null) {
        this.hot.rowIndexMapper.setIndexesSequence(this.indexesSequenceCache.getValues());
        this.hot.rowIndexMapper.unregisterMap(this.pluginKey);
        this.indexesSequenceCache = null;
      }
    }, true);
    this.hot.columnIndexMapper.unregisterMap(`${this.pluginKey}.columnMeta`);
    this.columnStatesManager.destroy();
    this.columnMetaCache = null;
    this.columnStatesManager = null;
    this.unregisterShortcuts();
    super.disablePlugin();
  }
  /**
   * Register shortcuts responsible for toggling column sorting functionality.
   *
   * @private
   */
  registerShortcuts() {
    this.hot.getShortcutManager().getContext("grid").addShortcut({
      keys: [["Enter"]],
      callback: () => {
        const {
          highlight
        } = this.hot.getSelectedRangeLast();
        this.sort(this.getColumnNextConfig(highlight.col));
        return false;
      },
      runOnlyIf: () => {
        var _this$hot$getSelected, _this$hot$getSelected2;
        const highlight = (_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight;
        return highlight && ((_this$hot$getSelected2 = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected2 === void 0 ? void 0 : _this$hot$getSelected2.isSingle()) && this.hot.selection.isCellVisible(highlight) && highlight.row === -1 && highlight.col >= 0;
      },
      relativeToGroup: EDITOR_EDIT_GROUP,
      position: "before",
      group: SHORTCUTS_GROUP5
    });
  }
  /**
   * Unregister shortcuts responsible for toggling column sorting functionality.
   *
   * @private
   */
  unregisterShortcuts() {
    this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(SHORTCUTS_GROUP5);
  }
  // DIFF - MultiColumnSorting & ColumnSorting: changed function documentation.
  /**
   * Sorts the table by chosen columns and orders.
   *
   * @param {undefined|object} sortConfig Single column sort configuration. The configuration object contains `column` and `sortOrder` properties.
   * First of them contains visual column index, the second one contains sort order (`asc` for ascending, `desc` for descending).
   *
   * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.
   *
   * @example
   * ```js
   * // sort ascending first visual column
   * hot.getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });
   * ```
   *
   * @fires Hooks#beforeColumnSort
   * @fires Hooks#afterColumnSort
   */
  sort(sortConfig) {
    const currentSortConfig = this.getSortConfig();
    const destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);
    const sortPossible = this.areValidSortConfigs(destinationSortConfigs);
    const allowSort = this.hot.runHooks("beforeColumnSort", currentSortConfig, destinationSortConfigs, sortPossible);
    if (allowSort === false) {
      return;
    }
    if (currentSortConfig.length === 0 && this.indexesSequenceCache === null) {
      this.indexesSequenceCache = this.hot.rowIndexMapper.registerMap(this.pluginKey, new IndexesSequence());
      this.indexesSequenceCache.setValues(this.hot.rowIndexMapper.getIndexesSequence());
    }
    if (sortPossible) {
      this.columnStatesManager.setSortStates(destinationSortConfigs);
      this.sortByPresetSortStates(destinationSortConfigs);
      this.saveAllSortSettings(destinationSortConfigs);
    }
    this.hot.runHooks("afterColumnSort", currentSortConfig, sortPossible ? destinationSortConfigs : currentSortConfig, sortPossible);
    if (sortPossible) {
      this.hot.render();
    }
  }
  /**
   * Clear the sort performed on the table.
   */
  clearSort() {
    this.sort([]);
  }
  /**
   * Checks if the table is sorted (any column have to be sorted).
   *
   * @returns {boolean}
   */
  isSorted() {
    return this.enabled && !this.columnStatesManager.isListOfSortedColumnsEmpty();
  }
  /**
   * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.
   *
   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.
   *
   * @param {number} [column] Visual column index.
   * @returns {undefined|object|Array}
   */
  getSortConfig(column) {
    if (isDefined(column)) {
      return this.columnStatesManager.getColumnSortState(column);
    }
    return this.columnStatesManager.getSortStates();
  }
  /**
   * @description
   * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.
   * Note: Please keep in mind that this method doesn't re-render the table.
   *
   * @example
   * ```js
   * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {
   *   const columnSortPlugin = this.getPlugin('columnSorting');
   *
   *   columnSortPlugin.setSortConfig(destinationSortConfigs);
   *
   *   // const newData = ... // Calculated data set, ie. from an AJAX call.
   *
   *   this.loadData(newData); // Load new data set and re-render the table.
   *
   *   return false; // The blockade for the default sort action.
   * }
   * ```
   *
   * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).
   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
   * sort order (`asc` for ascending, `desc` for descending).
   */
  setSortConfig(sortConfig) {
    const destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);
    if (this.areValidSortConfigs(destinationSortConfigs)) {
      this.columnStatesManager.setSortStates(destinationSortConfigs);
    }
  }
  /**
   * Get normalized sort configs.
   *
   * @private
   * @param {object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).
   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
   * sort order (`asc` for ascending, `desc` for descending).
   * @returns {Array}
   */
  getNormalizedSortConfigs() {
    let sortConfig = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    if (Array.isArray(sortConfig)) {
      return sortConfig.slice(0, 1);
    }
    return [sortConfig];
  }
  /**
   * Get if sort configs are valid.
   *
   * @private
   * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.
   * @returns {boolean}
   */
  areValidSortConfigs(sortConfigs) {
    const numberOfColumns = this.hot.countCols();
    return areValidSortStates(sortConfigs) && sortConfigs.every((_ref) => {
      let {
        column
      } = _ref;
      return column <= numberOfColumns && column >= 0;
    });
  }
  /**
   * Saves all sorting settings. Saving works only when {@link Options#persistentState} option is enabled.
   *
   * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.
   *
   * @private
   * @fires Hooks#persistentStateSave
   */
  saveAllSortSettings(sortConfigs) {
    const allSortSettings = this.columnStatesManager.getAllColumnsProperties();
    const translateColumnToPhysical = (_ref2) => {
      let {
        column: visualColumn,
        ...restOfProperties
      } = _ref2;
      return {
        column: this.hot.toPhysicalColumn(visualColumn),
        ...restOfProperties
      };
    };
    allSortSettings.initialConfig = arrayMap(sortConfigs, translateColumnToPhysical);
    this.hot.runHooks("persistentStateSave", "columnSorting", allSortSettings);
  }
  /**
   * Get all saved sorting settings. Loading works only when {@link Options#persistentState} option is enabled.
   *
   * @private
   * @returns {object} Previously saved sort settings.
   *
   * @fires Hooks#persistentStateLoad
   */
  getAllSavedSortSettings() {
    const storedAllSortSettings = {};
    this.hot.runHooks("persistentStateLoad", "columnSorting", storedAllSortSettings);
    const allSortSettings = storedAllSortSettings.value;
    const translateColumnToVisual = (_ref3) => {
      let {
        column: physicalColumn,
        ...restOfProperties
      } = _ref3;
      return {
        column: this.hot.toVisualColumn(physicalColumn),
        ...restOfProperties
      };
    };
    if (isDefined(allSortSettings) && Array.isArray(allSortSettings.initialConfig)) {
      allSortSettings.initialConfig = arrayMap(allSortSettings.initialConfig, translateColumnToVisual);
    }
    return allSortSettings;
  }
  /**
   * Get next sort configuration for particular column. Object contain `column` and `sortOrder` properties.
   *
   * **Note**: Please keep in mind that returned object expose **visual** column index under the `column` key.
   *
   * @private
   * @param {number} column Visual column index.
   * @returns {undefined|object}
   */
  getColumnNextConfig(column) {
    const sortOrder = this.columnStatesManager.getSortOrderOfColumn(column);
    if (isDefined(sortOrder)) {
      const nextSortOrder = getNextSortOrder(sortOrder);
      if (isDefined(nextSortOrder)) {
        return {
          column,
          sortOrder: nextSortOrder
        };
      }
      return;
    }
    const nrOfColumns = this.hot.countCols();
    if (Number.isInteger(column) && column >= 0 && column < nrOfColumns) {
      return {
        column,
        sortOrder: getNextSortOrder()
      };
    }
  }
  /**
   * Get sort configuration with "next order" for particular column.
   *
   * @private
   * @param {number} columnToChange Visual column index of column which order will be changed.
   * @param {string} strategyId ID of strategy. Possible values: 'append' and 'replace'. The first one
   * change order of particular column and change it's position in the sort queue to the last one. The second one
   * just change order of particular column.
   *
   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.
   *
   * @returns {Array}
   */
  getNextSortConfig(columnToChange) {
    let strategyId = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : APPEND_COLUMN_CONFIG_STRATEGY;
    const indexOfColumnToChange = this.columnStatesManager.getIndexOfColumnInSortQueue(columnToChange);
    const isColumnSorted = indexOfColumnToChange !== -1;
    const currentSortConfig = this.getSortConfig();
    const nextColumnConfig = this.getColumnNextConfig(columnToChange);
    if (isColumnSorted) {
      if (isUndefined(nextColumnConfig)) {
        return [...currentSortConfig.slice(0, indexOfColumnToChange), ...currentSortConfig.slice(indexOfColumnToChange + 1)];
      }
      if (strategyId === APPEND_COLUMN_CONFIG_STRATEGY) {
        return [...currentSortConfig.slice(0, indexOfColumnToChange), ...currentSortConfig.slice(indexOfColumnToChange + 1), nextColumnConfig];
      } else if (strategyId === REPLACE_COLUMN_CONFIG_STRATEGY) {
        return [...currentSortConfig.slice(0, indexOfColumnToChange), nextColumnConfig, ...currentSortConfig.slice(indexOfColumnToChange + 1)];
      }
    }
    if (isDefined(nextColumnConfig)) {
      return currentSortConfig.concat(nextColumnConfig);
    }
    return currentSortConfig;
  }
  /**
   * Get plugin's column config for the specified column index.
   *
   * @private
   * @param {object} columnConfig Configuration inside `columns` property for the specified column index.
   * @returns {object}
   */
  getPluginColumnConfig(columnConfig) {
    if (isObject(columnConfig)) {
      const pluginColumnConfig = columnConfig[this.pluginKey];
      if (isObject(pluginColumnConfig)) {
        return pluginColumnConfig;
      }
    }
    return {};
  }
  /**
   * Get plugin settings related properties, properly merged from cascade settings.
   *
   * @private
   * @param {number} column Visual column index.
   * @returns {object}
   */
  getMergedPluginSettings(column) {
    const pluginMainSettings = this.hot.getSettings()[this.pluginKey];
    const storedColumnProperties = this.columnStatesManager.getAllColumnsProperties();
    const cellMeta = this.hot.getCellMeta(0, column);
    const columnMeta = Object.getPrototypeOf(cellMeta);
    if (Array.isArray(columnMeta.columns)) {
      return Object.assign(storedColumnProperties, pluginMainSettings, this.getPluginColumnConfig(columnMeta.columns[column]));
    } else if (isFunction(columnMeta.columns)) {
      return Object.assign(storedColumnProperties, pluginMainSettings, this.getPluginColumnConfig(columnMeta.columns(column)));
    }
    return Object.assign(storedColumnProperties, pluginMainSettings);
  }
  /**
   * Get copy of settings for first cell in the column.
   *
   * @private
   * @param {number} column Visual column index.
   * @returns {object}
   */
  // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. Instead of getting properties from column meta we call this function.
  // TODO: Remove test named: "should not break the dataset when inserted new row" (#5431).
  getFirstCellSettings(column) {
    const cellMeta = this.hot.getCellMeta(0, column);
    const cellMetaCopy = Object.create(cellMeta);
    cellMetaCopy[this.pluginKey] = this.columnMetaCache.getValueAtIndex(this.hot.toPhysicalColumn(column));
    return cellMetaCopy;
  }
  /**
   * Get number of rows which should be sorted.
   *
   * @private
   * @param {number} numberOfRows Total number of displayed rows.
   * @returns {number}
   */
  getNumberOfRowsToSort(numberOfRows) {
    const settings = this.hot.getSettings();
    if (settings.maxRows <= numberOfRows) {
      return settings.maxRows;
    }
    return numberOfRows - settings.minSpareRows;
  }
  /**
   * Performs the sorting using a stable sort function basing on internal state of sorting.
   *
   * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.
   * @private
   */
  sortByPresetSortStates(sortConfigs) {
    this.hot.rowIndexMapper.setIndexesSequence(this.indexesSequenceCache.getValues());
    if (sortConfigs.length === 0) {
      return;
    }
    const indexesWithData = [];
    const numberOfRows = this.hot.countRows();
    const getDataForSortedColumns = (visualRowIndex) => arrayMap(sortConfigs, (sortConfig) => this.hot.getDataAtCell(visualRowIndex, sortConfig.column));
    for (let visualRowIndex = 0; visualRowIndex < this.getNumberOfRowsToSort(numberOfRows); visualRowIndex += 1) {
      indexesWithData.push([this.hot.toPhysicalRow(visualRowIndex)].concat(getDataForSortedColumns(visualRowIndex)));
    }
    const indexesBefore = arrayMap(indexesWithData, (indexWithData) => indexWithData[0]);
    sort(indexesWithData, this.pluginKey, arrayMap(sortConfigs, (sortConfig) => sortConfig.sortOrder), arrayMap(sortConfigs, (sortConfig) => this.getFirstCellSettings(sortConfig.column)));
    for (let visualRowIndex = indexesWithData.length; visualRowIndex < numberOfRows; visualRowIndex += 1) {
      indexesWithData.push([visualRowIndex].concat(getDataForSortedColumns(visualRowIndex)));
    }
    const indexesAfter = arrayMap(indexesWithData, (indexWithData) => indexWithData[0]);
    const indexMapping = new Map(arrayMap(indexesBefore, (indexBefore, indexInsideArray) => [indexBefore, indexesAfter[indexInsideArray]]));
    const newIndexesSequence = arrayMap(this.hot.rowIndexMapper.getIndexesSequence(), (physicalIndex) => {
      if (indexMapping.has(physicalIndex)) {
        return indexMapping.get(physicalIndex);
      }
      return physicalIndex;
    });
    this.hot.rowIndexMapper.setIndexesSequence(newIndexesSequence);
  }
  /**
   * Sort the table by provided configuration.
   *
   * @private
   * @param {object} allSortSettings All sort config settings. Object may contain `initialConfig`, `indicator`,
   * `sortEmptyCells`, `headerAction` and `compareFunctionFactory` properties.
   */
  sortBySettings(allSortSettings) {
    if (isObject(allSortSettings)) {
      this.columnStatesManager.updateAllColumnsProperties(allSortSettings);
      const initialConfig = allSortSettings.initialConfig;
      if (Array.isArray(initialConfig) || isObject(initialConfig)) {
        this.sort(initialConfig);
      }
    } else {
      this.hot.render();
    }
  }
  /**
   * Callback for the `onAfterGetColHeader` hook. Adds column sorting CSS classes.
   *
   * @param {number} column Visual column index.
   * @param {Element} TH TH HTML element.
   */
  /**
   * Update header classes.
   *
   * @private
   * @param {HTMLElement} headerSpanElement Header span element.
   * @param {...*} args Extra arguments for helpers.
   */
  updateHeaderClasses(headerSpanElement) {
    removeClass(headerSpanElement, getClassesToRemove(headerSpanElement));
    if (this.enabled !== false) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }
      addClass(headerSpanElement, getClassesToAdd(...args));
    }
  }
  /**
   * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called
   * for `updateSettings` in specific situations.
   *
   * @private
   * @param {object} newSettings New settings object.
   */
  onUpdateSettings(newSettings) {
    super.onUpdateSettings(newSettings);
    if (this.columnMetaCache !== null) {
      this.columnMetaCache.init(this.hot.columnIndexMapper.getNumberOfIndexes());
    }
    if (isDefined(newSettings[this.pluginKey])) {
      this.sortBySettings(newSettings[this.pluginKey]);
    }
  }
  /**
   * Callback for the `afterLoadData` hook.
   *
   * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.
   */
  /**
   * Indicates if clickable header was clicked.
   *
   * @private
   * @param {MouseEvent} event The `mousedown` event.
   * @param {number} column Visual column index.
   * @returns {boolean}
   */
  wasClickableHeaderClicked(event, column) {
    const pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];
    const headerActionEnabled = pluginSettingsForColumn.headerAction;
    return headerActionEnabled && hasClass(event.target, HEADER_SPAN_CLASS);
  }
  /**
   * Changes the behavior of selection / dragging.
   *
   * @param {MouseEvent} event The `mousedown` event.
   * @param {CellCoords} coords Visual coordinates.
   * @param {HTMLElement} TD The cell element.
   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
   *                            a boolean value that allows or disallows changing the selection for that particular area.
   */
  /**
   * Callback for the `onAfterOnCellMouseDown` hook.
   *
   * @private
   * @param {Event} event Event which are provided by hook.
   * @param {CellCoords} coords Visual coords of the selected cell.
   */
  onAfterOnCellMouseDown(event, coords) {
    if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {
      return;
    }
    if (this.wasClickableHeaderClicked(event, coords.col)) {
      if (this.hot.getShortcutManager().isCtrlPressed()) {
        this.hot.deselectCell();
        this.hot.selectColumns(coords.col);
      }
      const activeEditor = this.hot.getActiveEditor();
      const nextConfig = this.getColumnNextConfig(coords.col);
      if (activeEditor !== null && activeEditor !== void 0 && activeEditor.isOpened() && this.hot.getCellValidator(activeEditor.row, activeEditor.col)) {
        this.hot.addHookOnce("postAfterValidate", () => {
          this.sort(nextConfig);
        });
      } else {
        this.sort(nextConfig);
      }
    }
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    var _this$columnStatesMan;
    (_this$columnStatesMan = this.columnStatesManager) === null || _this$columnStatesMan === void 0 || _this$columnStatesMan.destroy();
    super.destroy();
  }
};
function _loadOrSortBySettings() {
  const storedAllSortSettings = this.getAllSavedSortSettings();
  if (isObject(storedAllSortSettings)) {
    this.sortBySettings(storedAllSortSettings);
  } else {
    const allSortSettings = this.hot.getSettings()[this.pluginKey];
    this.sortBySettings(allSortSettings);
  }
}
function _onAfterGetColHeader2(column, TH) {
  const headerSpanElement = getHeaderSpanElement(TH);
  if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {
    return;
  }
  const pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];
  const showSortIndicator = pluginSettingsForColumn.indicator;
  const headerActionEnabled = pluginSettingsForColumn.headerAction;
  this.updateHeaderClasses(headerSpanElement, this.columnStatesManager, column, showSortIndicator, headerActionEnabled);
  if (this.hot.getSettings().ariaTags) {
    const currentSortState = this.columnStatesManager.getSortOrderOfColumn(column);
    setAttribute(TH, ...A11Y_SORT(currentSortState ? `${currentSortState}ending` : "none"));
  }
}
function _onAfterLoadData4(initialLoad) {
  if (initialLoad === true) {
    if (this.hot.view) {
      _assertClassBrand9(_ColumnSorting_brand, this, _loadOrSortBySettings).call(this);
    }
  }
}
function _onBeforeOnCellMouseDown2(event, coords, TD, controller) {
  if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {
    return;
  }
  if (this.wasClickableHeaderClicked(event, coords.col) && this.hot.getShortcutManager().isCtrlPressed()) {
    controller.column = true;
  }
}

// node_modules/handsontable/plugins/columnSummary/endpoints.mjs
function _defineProperty14(e, r, t) {
  return (r = _toPropertyKey14(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey14(t) {
  var i = _toPrimitive14(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive14(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var Endpoints = class {
  constructor(plugin, settings) {
    _defineProperty14(this, "plugin", void 0);
    _defineProperty14(this, "hot", void 0);
    _defineProperty14(this, "endpoints", []);
    _defineProperty14(this, "settings", void 0);
    _defineProperty14(this, "settingsType", "array");
    _defineProperty14(this, "currentEndpoint", null);
    _defineProperty14(this, "cellsToSetCache", []);
    this.plugin = plugin;
    this.hot = this.plugin.hot;
    this.settings = settings;
  }
  /**
   * Initialize the endpoints provided in the settings.
   */
  initEndpoints() {
    this.endpoints = this.parseSettings();
    this.refreshAllEndpoints();
  }
  /**
   * Get a single endpoint object.
   *
   * @param {number} index Index of the endpoint.
   * @returns {object}
   */
  getEndpoint(index) {
    if (this.settingsType === "function") {
      return this.fillMissingEndpointData(this.settings)[index];
    }
    return this.endpoints[index];
  }
  /**
   * Get an array with all the endpoints.
   *
   * @returns {Array}
   */
  getAllEndpoints() {
    if (this.settingsType === "function") {
      return this.fillMissingEndpointData(this.settings);
    }
    return this.endpoints;
  }
  /**
   * Used to fill the blanks in the endpoint data provided by a settings function.
   *
   * @private
   * @param {Function} func Function provided in the HOT settings.
   * @returns {Array} An array of endpoints.
   */
  fillMissingEndpointData(func) {
    return this.parseSettings(func.call(this));
  }
  /**
   * Parse plugin's settings.
   *
   * @param {Array} settings The settings array.
   * @returns {object[]}
   */
  parseSettings(settings) {
    const endpointsArray = [];
    let settingsArray = settings;
    if (!settingsArray && typeof this.settings === "function") {
      this.settingsType = "function";
      return;
    }
    if (!settingsArray) {
      settingsArray = this.settings;
    }
    arrayEach(settingsArray, (val) => {
      const newEndpoint = {};
      this.assignSetting(val, newEndpoint, "ranges", [[0, this.hot.countRows() - 1]]);
      this.assignSetting(val, newEndpoint, "reversedRowCoords", false);
      this.assignSetting(val, newEndpoint, "destinationRow", new Error(`
        You must provide a destination row for the Column Summary plugin in order to work properly!
      `));
      this.assignSetting(val, newEndpoint, "destinationColumn", new Error(`
        You must provide a destination column for the Column Summary plugin in order to work properly!
      `));
      this.assignSetting(val, newEndpoint, "sourceColumn", val.destinationColumn);
      this.assignSetting(val, newEndpoint, "type", "sum");
      this.assignSetting(val, newEndpoint, "forceNumeric", false);
      this.assignSetting(val, newEndpoint, "suppressDataTypeErrors", true);
      this.assignSetting(val, newEndpoint, "customFunction", null);
      this.assignSetting(val, newEndpoint, "readOnly", true);
      this.assignSetting(val, newEndpoint, "roundFloat", false);
      endpointsArray.push(newEndpoint);
    });
    return endpointsArray;
  }
  /**
   * Setter for the internal setting objects.
   *
   * @param {object} settings Object with the settings.
   * @param {object} endpoint Contains information about the endpoint for the the calculation.
   * @param {string} name Settings name.
   * @param {object} defaultValue Default value for the settings.
   */
  assignSetting(settings, endpoint, name, defaultValue) {
    if (name === "ranges" && settings[name] === void 0) {
      endpoint[name] = defaultValue;
      return;
    } else if (name === "ranges" && settings[name].length === 0) {
      return;
    }
    if (settings[name] === void 0) {
      if (defaultValue instanceof Error) {
        throw defaultValue;
      }
      endpoint[name] = defaultValue;
    } else {
      if (name === "destinationRow" && endpoint.reversedRowCoords) {
        endpoint[name] = this.hot.countRows() - settings[name] - 1;
      } else {
        endpoint[name] = settings[name];
      }
    }
  }
  /**
   * Resets the endpoint setup before the structure alteration (like inserting or removing rows/columns). Used for settings provided as a function.
   *
   * @private
   * @param {string} action Type of the action performed.
   * @param {number} index Row/column index.
   * @param {number} number Number of rows/columns added/removed.
   */
  resetSetupBeforeStructureAlteration(action, index, number) {
    if (this.settingsType !== "function") {
      return;
    }
    const type = action.indexOf("row") > -1 ? "row" : "col";
    const endpoints = this.getAllEndpoints();
    arrayEach(endpoints, (val) => {
      if (type === "row" && val.destinationRow >= index) {
        if (action === "insert_row") {
          val.alterRowOffset = number;
        } else if (action === "remove_row") {
          val.alterRowOffset = -1 * number;
        }
      }
      if (type === "col" && val.destinationColumn >= index) {
        if (action === "insert_col") {
          val.alterColumnOffset = number;
        } else if (action === "remove_col") {
          val.alterColumnOffset = -1 * number;
        }
      }
    });
    this.resetAllEndpoints(endpoints, false);
  }
  /**
   * AfterCreateRow/afterCreateRow/afterRemoveRow/afterRemoveCol hook callback. Reset and reenables the summary functionality
   * after changing the table structure.
   *
   * @private
   * @param {string} action Type of the action performed.
   * @param {number} index Row/column index.
   * @param {number} number Number of rows/columns added/removed.
   * @param {Array} [logicRows] Array of the logical indexes.
   * @param {string} [source] Source of change.
   * @param {boolean} [forceRefresh] `true` of the endpoints should refresh after completing the function.
   */
  resetSetupAfterStructureAlteration(action, index, number, logicRows, source) {
    let forceRefresh = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
    if (this.settingsType === "function") {
      const beforeViewRenderCallback = () => {
        this.hot.removeHook("beforeViewRender", beforeViewRenderCallback);
        return this.refreshAllEndpoints();
      };
      this.hot.addHookOnce("beforeViewRender", beforeViewRenderCallback);
      return;
    }
    const type = action.indexOf("row") > -1 ? "row" : "col";
    const multiplier = action.indexOf("remove") > -1 ? -1 : 1;
    const endpoints = this.getAllEndpoints();
    const rowMoving = action.indexOf("move_row") === 0;
    const placeOfAlteration = index;
    arrayEach(endpoints, (val) => {
      if (type === "row" && val.destinationRow >= placeOfAlteration) {
        val.alterRowOffset = multiplier * number;
      }
      if (type === "col" && val.destinationColumn >= placeOfAlteration) {
        val.alterColumnOffset = multiplier * number;
      }
    });
    this.resetAllEndpoints(endpoints, !rowMoving);
    if (rowMoving) {
      arrayEach(endpoints, (endpoint) => {
        this.extendEndpointRanges(endpoint, placeOfAlteration, logicRows[0], logicRows.length);
        this.recreatePhysicalRanges(endpoint);
        this.clearOffsetInformation(endpoint);
      });
    } else {
      arrayEach(endpoints, (endpoint) => {
        this.shiftEndpointCoordinates(endpoint, placeOfAlteration);
      });
    }
    if (forceRefresh) {
      this.refreshAllEndpoints();
    }
  }
  /**
   * Clear the offset information from the endpoint object.
   *
   * @private
   * @param {object} endpoint And endpoint object.
   */
  clearOffsetInformation(endpoint) {
    endpoint.alterRowOffset = void 0;
    endpoint.alterColumnOffset = void 0;
  }
  /**
   * Extend the row ranges for the provided endpoint.
   *
   * @private
   * @param {object} endpoint The endpoint object.
   * @param {number} placeOfAlteration Index of the row where the alteration takes place.
   * @param {number} previousPosition Previous endpoint result position.
   * @param {number} offset Offset generated by the alteration.
   */
  extendEndpointRanges(endpoint, placeOfAlteration, previousPosition, offset2) {
    arrayEach(endpoint.ranges, (range) => {
      if (range[1]) {
        if (placeOfAlteration >= range[0] && placeOfAlteration <= range[1]) {
          if (previousPosition > range[1]) {
            range[1] += offset2;
          } else if (previousPosition < range[0]) {
            range[0] -= offset2;
          }
        } else if (previousPosition >= range[0] && previousPosition <= range[1]) {
          range[1] -= offset2;
          if (placeOfAlteration <= range[0]) {
            range[0] += 1;
            range[1] += 1;
          }
        }
      }
    });
  }
  /**
   * Recreate the physical ranges for the provided endpoint. Used (for example) when a row gets moved and extends an existing range.
   *
   * @private
   * @param {object} endpoint An endpoint object.
   */
  recreatePhysicalRanges(endpoint) {
    const ranges = endpoint.ranges;
    const newRanges = [];
    const allIndexes = [];
    arrayEach(ranges, (range) => {
      const newRange = [];
      if (range[1]) {
        for (let i = range[0]; i <= range[1]; i++) {
          newRange.push(this.hot.toPhysicalRow(i));
        }
      } else {
        newRange.push(this.hot.toPhysicalRow(range[0]));
      }
      allIndexes.push(newRange);
    });
    arrayEach(allIndexes, (range) => {
      let newRange = [];
      arrayEach(range, (coord, index) => {
        if (index === 0) {
          newRange.push(coord);
        } else if (range[index] !== range[index - 1] + 1) {
          newRange.push(range[index - 1]);
          newRanges.push(newRange);
          newRange = [];
          newRange.push(coord);
        }
        if (index === range.length - 1) {
          newRange.push(coord);
          newRanges.push(newRange);
        }
      });
    });
    endpoint.ranges = newRanges;
  }
  /**
   * Shifts the endpoint coordinates by the defined offset.
   *
   * @private
   * @param {object} endpoint Endpoint object.
   * @param {number} offsetStartIndex Index of the performed change (if the change is located after the endpoint, nothing about the endpoint has to be changed.
   */
  shiftEndpointCoordinates(endpoint, offsetStartIndex) {
    if (endpoint.alterRowOffset && endpoint.alterRowOffset !== 0) {
      endpoint.destinationRow += endpoint.alterRowOffset || 0;
      arrayEach(endpoint.ranges, (element) => {
        arrayEach(element, (subElement, j) => {
          if (subElement >= offsetStartIndex) {
            element[j] += endpoint.alterRowOffset || 0;
          }
        });
      });
    } else if (endpoint.alterColumnOffset && endpoint.alterColumnOffset !== 0) {
      endpoint.destinationColumn += endpoint.alterColumnOffset || 0;
      endpoint.sourceColumn += endpoint.alterColumnOffset || 0;
    }
  }
  /**
   * Resets (removes) the endpoints from the table.
   *
   * @param {Array} [endpoints] Array containing the endpoints.
   * @param {boolean} [useOffset=true] Use the cell offset value.
   */
  resetAllEndpoints() {
    let endpoints = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getAllEndpoints();
    let useOffset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    const anyEndpointOutOfRange = endpoints.some((endpoint) => {
      const alterRowOffset = endpoint.alterRowOffset || 0;
      const alterColOffset = endpoint.alterColumnOffset || 0;
      if (endpoint.destinationRow + alterRowOffset >= this.hot.countRows() || endpoint.destinationColumn + alterColOffset >= this.hot.countCols()) {
        return true;
      }
      return false;
    });
    if (anyEndpointOutOfRange) {
      return;
    }
    this.cellsToSetCache = [];
    arrayEach(endpoints, (endpoint) => {
      this.resetEndpointValue(endpoint, useOffset);
    });
    this.hot.setDataAtCell(this.cellsToSetCache, "ColumnSummary.reset");
    this.cellsToSetCache = [];
  }
  /**
   * Calculate and refresh all defined endpoints.
   */
  refreshAllEndpoints() {
    this.cellsToSetCache = [];
    arrayEach(this.getAllEndpoints(), (value) => {
      this.currentEndpoint = value;
      this.plugin.calculate(value);
      this.setEndpointValue(value, "init");
    });
    this.currentEndpoint = null;
    this.hot.setDataAtCell(this.cellsToSetCache, "ColumnSummary.reset");
    this.cellsToSetCache = [];
  }
  /**
   * Calculate and refresh endpoints only in the changed columns.
   *
   * @param {Array} changes Array of changes from the `afterChange` hook.
   */
  refreshChangedEndpoints(changes) {
    const needToRefresh = [];
    this.cellsToSetCache = [];
    arrayEach(changes, (value, key, changesObj) => {
      if (`${value[2] || ""}` === `${value[3]}`) {
        return;
      }
      arrayEach(this.getAllEndpoints(), (endpoint, j) => {
        if (this.hot.propToCol(changesObj[key][1]) === endpoint.sourceColumn && needToRefresh.indexOf(j) === -1) {
          needToRefresh.push(j);
        }
      });
    });
    arrayEach(needToRefresh, (value) => {
      this.refreshEndpoint(this.getEndpoint(value));
    });
    this.hot.setDataAtCell(this.cellsToSetCache, "ColumnSummary.reset");
    this.cellsToSetCache = [];
  }
  /**
   * Refreshes the cell meta information for the all endpoints after the `updateSettings` method call which in some
   * cases (call with `columns` option) can reset the cell metas to the initial state.
   */
  refreshCellMetas() {
    this.endpoints.forEach((endpoint) => {
      const destinationVisualRow = this.hot.toVisualRow(endpoint.destinationRow);
      if (destinationVisualRow !== null) {
        const cellMeta = this.hot.getCellMeta(destinationVisualRow, endpoint.destinationColumn);
        cellMeta.readOnly = endpoint.readOnly;
        cellMeta.className = "columnSummaryResult";
      }
    });
  }
  /**
   * Calculate and refresh a single endpoint.
   *
   * @param {object} endpoint Contains the endpoint information.
   */
  refreshEndpoint(endpoint) {
    this.currentEndpoint = endpoint;
    this.plugin.calculate(endpoint);
    this.setEndpointValue(endpoint);
    this.currentEndpoint = null;
  }
  /**
   * Reset the endpoint value.
   *
   * @param {object} endpoint Contains the endpoint information.
   * @param {boolean} [useOffset=true] Use the cell offset value.
   */
  resetEndpointValue(endpoint) {
    let useOffset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    const alterRowOffset = endpoint.alterRowOffset || 0;
    const alterColOffset = endpoint.alterColumnOffset || 0;
    this.cellsToSetCache.push([this.hot.toVisualRow(endpoint.destinationRow + (useOffset ? alterRowOffset : 0)), this.hot.toVisualColumn(endpoint.destinationColumn + (useOffset ? alterColOffset : 0)), ""]);
  }
  /**
   * Set the endpoint value.
   *
   * @param {object} endpoint Contains the endpoint information.
   * @param {string} [source] Source of the call information.
   * @param {boolean} [render=false] `true` if it needs to render the table afterwards.
   */
  setEndpointValue(endpoint, source) {
    let render = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    const visualEndpointRowIndex = this.hot.toVisualRow(endpoint.destinationRow);
    if (endpoint.destinationRow >= this.hot.countRows() || endpoint.destinationColumn >= this.hot.countCols()) {
      this.throwOutOfBoundsWarning();
      return;
    }
    const destinationVisualRow = this.hot.toVisualRow(endpoint.destinationRow);
    if (destinationVisualRow !== null) {
      const cellMeta = this.hot.getCellMeta(destinationVisualRow, endpoint.destinationColumn);
      if (source === "init" || cellMeta.readOnly !== endpoint.readOnly) {
        cellMeta.readOnly = endpoint.readOnly;
        cellMeta.className = "columnSummaryResult";
      }
    }
    if ((endpoint.roundFloat === true || Number.isInteger(endpoint.roundFloat)) && !isNaN(endpoint.result)) {
      const roundFloatValue = endpoint.roundFloat;
      let decimalPlacesCount = 0;
      if (Number.isInteger(roundFloatValue)) {
        decimalPlacesCount = Math.min(Math.max(0, roundFloatValue), 100);
      }
      endpoint.result = endpoint.result.toFixed(decimalPlacesCount);
    }
    if (render) {
      this.hot.setDataAtCell(visualEndpointRowIndex, endpoint.destinationColumn, endpoint.result, "ColumnSummary.set");
    } else {
      this.cellsToSetCache.push([visualEndpointRowIndex, endpoint.destinationColumn, endpoint.result]);
    }
    endpoint.alterRowOffset = void 0;
    endpoint.alterColumnOffset = void 0;
  }
  /**
   * Throw an error for the calculation range being out of boundaries.
   *
   * @private
   */
  throwOutOfBoundsWarning() {
    warn("One of the Column Summary plugins' destination points you provided is beyond the table boundaries!");
  }
};
var endpoints_default = Endpoints;

// node_modules/handsontable/plugins/columnSummary/utils.mjs
function isNullishOrNaN(value) {
  return value === null || value === void 0 || isNaN(value);
}

// node_modules/handsontable/plugins/columnSummary/columnSummary.mjs
function _classPrivateMethodInitSpec10(e, a) {
  _checkPrivateRedeclaration10(e, a), a.add(e);
}
function _checkPrivateRedeclaration10(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty15(e, r, t) {
  return (r = _toPropertyKey15(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey15(t) {
  var i = _toPrimitive15(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive15(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _assertClassBrand10(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var PLUGIN_KEY8 = "columnSummary";
var PLUGIN_PRIORITY7 = 220;
var _ColumnSummary_brand = /* @__PURE__ */ new WeakSet();
var ColumnSummary = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec10(this, _ColumnSummary_brand);
    _defineProperty15(this, "endpoints", null);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY8;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY7;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ColumnSummary#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[PLUGIN_KEY8];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _this = this;
    if (this.enabled) {
      return;
    }
    this.settings = this.hot.getSettings()[PLUGIN_KEY8];
    this.endpoints = new endpoints_default(this, this.settings);
    this.addHook("afterInit", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _assertClassBrand10(_ColumnSummary_brand, _this, _onAfterInit).call(_this, ...args);
    });
    this.addHook("afterChange", function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _assertClassBrand10(_ColumnSummary_brand, _this, _onAfterChange).call(_this, ...args);
    });
    this.addHook("afterUpdateSettings", function() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return _assertClassBrand10(_ColumnSummary_brand, _this, _onAfterUpdateSettings).call(_this, ...args);
    });
    this.addHook("beforeCreateRow", (index, amount, source) => this.endpoints.resetSetupBeforeStructureAlteration("insert_row", index, amount, null, source));
    this.addHook("beforeCreateCol", (index, amount, source) => this.endpoints.resetSetupBeforeStructureAlteration("insert_col", index, amount, null, source));
    this.addHook("beforeRemoveRow", function() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return _this.endpoints.resetSetupBeforeStructureAlteration("remove_row", ...args);
    });
    this.addHook("beforeRemoveCol", function() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }
      return _this.endpoints.resetSetupBeforeStructureAlteration("remove_col", ...args);
    });
    this.addHook("afterCreateRow", (index, amount, source) => this.endpoints.resetSetupAfterStructureAlteration("insert_row", index, amount, null, source));
    this.addHook("afterCreateCol", (index, amount, source) => this.endpoints.resetSetupAfterStructureAlteration("insert_col", index, amount, null, source));
    this.addHook("afterRemoveRow", function() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      return _this.endpoints.resetSetupAfterStructureAlteration("remove_row", ...args);
    });
    this.addHook("afterRemoveCol", function() {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }
      return _this.endpoints.resetSetupAfterStructureAlteration("remove_col", ...args);
    });
    this.addHook("afterRowMove", function() {
      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }
      return _assertClassBrand10(_ColumnSummary_brand, _this, _onAfterRowMove).call(_this, ...args);
    });
    super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.endpoints = null;
    this.settings = null;
    this.currentEndpoint = null;
    super.disablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`columnSummary`](@/api/options.md#columnsummary)
   */
  updatePlugin() {
    this.disablePlugin();
    this.enablePlugin();
    this.endpoints.initEndpoints();
    super.updatePlugin();
  }
  /**
   * Calculates math for a single endpoint.
   *
   * @private
   * @param {object} endpoint Contains information about the endpoint.
   */
  calculate(endpoint) {
    switch (endpoint.type.toLowerCase()) {
      case "sum":
        endpoint.result = this.calculateSum(endpoint);
        break;
      case "min":
        endpoint.result = this.calculateMinMax(endpoint, endpoint.type);
        break;
      case "max":
        endpoint.result = this.calculateMinMax(endpoint, endpoint.type);
        break;
      case "count":
        endpoint.result = this.countEntries(endpoint);
        break;
      case "average":
        endpoint.result = this.calculateAverage(endpoint);
        break;
      case "custom":
        endpoint.result = endpoint.customFunction.call(this, endpoint);
        break;
      default:
        break;
    }
  }
  /**
   * Calculates sum of the values contained in ranges provided in the plugin config.
   *
   * @private
   * @param {object} endpoint Contains the endpoint information.
   * @returns {number} Sum for the selected range.
   */
  calculateSum(endpoint) {
    let sum = 0;
    objectEach(endpoint.ranges, (range) => {
      sum += this.getPartialSum(range, endpoint.sourceColumn);
    });
    return sum;
  }
  /**
   * Returns partial sum of values from a single row range.
   *
   * @private
   * @param {Array} rowRange Range for the sum.
   * @param {number} col Column index.
   * @returns {number} The partial sum.
   */
  getPartialSum(rowRange, col) {
    let sum = 0;
    let i = rowRange[1] || rowRange[0];
    let cellValue = null;
    let biggestDecimalPlacesCount = 0;
    do {
      cellValue = this.getCellValue(i, col);
      cellValue = isNullishOrNaN(cellValue) ? null : cellValue;
      if (cellValue !== null) {
        const decimalPlaces = (`${cellValue}`.split(".")[1] || []).length || 1;
        if (decimalPlaces > biggestDecimalPlacesCount) {
          biggestDecimalPlacesCount = decimalPlaces;
        }
      }
      sum += cellValue || 0;
      i -= 1;
    } while (i >= rowRange[0]);
    return Math.round(sum * 10 ** biggestDecimalPlacesCount) / 10 ** biggestDecimalPlacesCount;
  }
  /**
   * Calculates the minimal value for the selected ranges.
   *
   * @private
   * @param {object} endpoint Contains the endpoint information.
   * @param {string} type `'min'` or `'max'`.
   * @returns {number} Min or Max value.
   */
  calculateMinMax(endpoint, type) {
    let result = null;
    objectEach(endpoint.ranges, (range) => {
      const partialResult = this.getPartialMinMax(range, endpoint.sourceColumn, type);
      if (result === null && partialResult !== null) {
        result = partialResult;
      }
      if (partialResult !== null) {
        switch (type) {
          case "min":
            result = Math.min(result, partialResult);
            break;
          case "max":
            result = Math.max(result, partialResult);
            break;
          default:
            break;
        }
      }
    });
    return result === null ? "Not enough data" : result;
  }
  /**
   * Returns a local minimum of the provided sub-range.
   *
   * @private
   * @param {Array} rowRange Range for the calculation.
   * @param {number} col Column index.
   * @param {string} type `'min'` or `'max'`.
   * @returns {number|null} Min or max value.
   */
  getPartialMinMax(rowRange, col, type) {
    let result = null;
    let i = rowRange[1] || rowRange[0];
    let cellValue;
    do {
      cellValue = this.getCellValue(i, col);
      cellValue = isNullishOrNaN(cellValue) ? null : cellValue;
      if (result === null) {
        result = cellValue;
      } else if (cellValue !== null) {
        switch (type) {
          case "min":
            result = Math.min(result, cellValue);
            break;
          case "max":
            result = Math.max(result, cellValue);
            break;
          default:
            break;
        }
      }
      i -= 1;
    } while (i >= rowRange[0]);
    return result;
  }
  /**
   * Counts empty cells in the provided row range.
   *
   * @private
   * @param {Array} rowRange Row range for the calculation.
   * @param {number} col Column index.
   * @returns {number} Empty cells count.
   */
  countEmpty(rowRange, col) {
    let cellValue;
    let counter = 0;
    let i = rowRange[1] || rowRange[0];
    do {
      cellValue = this.getCellValue(i, col);
      cellValue = isNullishOrNaN(cellValue) ? null : cellValue;
      if (cellValue === null) {
        counter += 1;
      }
      i -= 1;
    } while (i >= rowRange[0]);
    return counter;
  }
  /**
   * Counts non-empty cells in the provided row range.
   *
   * @private
   * @param {object} endpoint Contains the endpoint information.
   * @returns {number} Entry count.
   */
  countEntries(endpoint) {
    let result = 0;
    const ranges = endpoint.ranges;
    objectEach(ranges, (range) => {
      const partial2 = range[1] === void 0 ? 1 : range[1] - range[0] + 1;
      const emptyCount = this.countEmpty(range, endpoint.sourceColumn);
      result += partial2;
      result -= emptyCount;
    });
    return result;
  }
  /**
   * Calculates the average value from the cells in the range.
   *
   * @private
   * @param {object} endpoint Contains the endpoint information.
   * @returns {number} Avarage value.
   */
  calculateAverage(endpoint) {
    const sum = this.calculateSum(endpoint);
    const entriesCount = this.countEntries(endpoint);
    return sum / entriesCount;
  }
  /**
   * Returns a cell value, taking into consideration a basic validation.
   *
   * @private
   * @param {number} row Row index.
   * @param {number} col Column index.
   * @returns {string} The cell value.
   */
  getCellValue(row, col) {
    const visualRowIndex = this.hot.toVisualRow(row);
    const visualColumnIndex = this.hot.toVisualColumn(col);
    let cellValue = this.hot.getSourceDataAtCell(row, col);
    let cellClassName = "";
    if (visualRowIndex !== null && visualColumnIndex !== null) {
      cellClassName = this.hot.getCellMeta(visualRowIndex, visualColumnIndex).className || "";
    }
    if (cellClassName.indexOf("columnSummaryResult") > -1) {
      return null;
    }
    if (this.endpoints.currentEndpoint.forceNumeric) {
      if (typeof cellValue === "string") {
        cellValue = cellValue.replace(/,/, ".");
      }
      cellValue = parseFloat(cellValue);
    }
    if (isNaN(cellValue)) {
      if (!this.endpoints.currentEndpoint.suppressDataTypeErrors) {
        throw new Error(toSingleLine`ColumnSummary plugin: cell at (${row}, ${col}) is not in a\x20
          numeric format. Cannot do the calculation.`);
      }
    }
    return cellValue;
  }
};
function _onAfterInit() {
  this.endpoints.initEndpoints();
}
function _onAfterUpdateSettings(settings) {
  if (settings.columns !== void 0) {
    this.endpoints.refreshCellMetas();
  }
}
function _onAfterChange(changes, source) {
  if (changes && source !== "ColumnSummary.reset" && source !== "ColumnSummary.set" && source !== "loadData") {
    this.endpoints.refreshChangedEndpoints(changes);
  }
}
function _onAfterRowMove(rows, finalIndex) {
  this.endpoints.resetSetupBeforeStructureAlteration("move_row", rows[0], rows.length, rows, this.pluginName);
  this.endpoints.resetSetupAfterStructureAlteration("move_row", finalIndex, rows.length, rows, this.pluginName);
}

// node_modules/handsontable/plugins/comments/editorResizeObserver.mjs
function _classPrivateMethodInitSpec11(e, a) {
  _checkPrivateRedeclaration11(e, a), a.add(e);
}
function _classPrivateFieldInitSpec6(e, t, a) {
  _checkPrivateRedeclaration11(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration11(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldGet6(s, a) {
  return s.get(_assertClassBrand11(s, a));
}
function _classPrivateFieldSet4(s, a, r) {
  return s.set(_assertClassBrand11(s, a), r), r;
}
function _assertClassBrand11(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _ignoreInitialCall = /* @__PURE__ */ new WeakMap();
var _observedElement = /* @__PURE__ */ new WeakMap();
var _observer = /* @__PURE__ */ new WeakMap();
var _EditorResizeObserver_brand = /* @__PURE__ */ new WeakSet();
var EditorResizeObserver = class {
  constructor() {
    _classPrivateMethodInitSpec11(this, _EditorResizeObserver_brand);
    _classPrivateFieldInitSpec6(this, _ignoreInitialCall, true);
    _classPrivateFieldInitSpec6(this, _observedElement, null);
    _classPrivateFieldInitSpec6(this, _observer, new ResizeObserver((entries) => _assertClassBrand11(_EditorResizeObserver_brand, this, _onResize).call(this, entries)));
  }
  /**
   * Sets the observed element.
   *
   * @param {HTMLElement} element The element to observe.
   */
  setObservedElement(element) {
    _classPrivateFieldSet4(_observedElement, this, element);
  }
  /**
   * Stops observing the element.
   */
  unobserve() {
    _classPrivateFieldGet6(_observer, this).unobserve(_classPrivateFieldGet6(_observedElement, this));
  }
  /**
   * Starts observing the element.
   */
  observe() {
    _classPrivateFieldSet4(_ignoreInitialCall, this, true);
    _classPrivateFieldGet6(_observer, this).observe(_classPrivateFieldGet6(_observedElement, this));
  }
  /**
   * Destroys the observer.
   */
  destroy() {
    _classPrivateFieldGet6(_observer, this).disconnect();
  }
};
function _onResize(entries) {
  if (_classPrivateFieldGet6(_ignoreInitialCall, this) || !Array.isArray(entries) || !entries.length) {
    _classPrivateFieldSet4(_ignoreInitialCall, this, false);
    return;
  }
  entries.forEach((_ref) => {
    let {
      borderBoxSize
    } = _ref;
    const {
      inlineSize,
      blockSize
    } = borderBoxSize[0];
    this.runLocalHooks("resize", inlineSize, blockSize);
  });
}
mixin(EditorResizeObserver, localHooks_default);

// node_modules/handsontable/plugins/comments/commentEditor.mjs
function _classPrivateFieldInitSpec7(e, t, a) {
  _checkPrivateRedeclaration12(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration12(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldGet7(s, a) {
  return s.get(_assertClassBrand12(s, a));
}
function _classPrivateFieldSet5(s, a, r) {
  return s.set(_assertClassBrand12(s, a), r), r;
}
function _assertClassBrand12(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _rootDocument = /* @__PURE__ */ new WeakMap();
var _isRtl = /* @__PURE__ */ new WeakMap();
var _container = /* @__PURE__ */ new WeakMap();
var _editor = /* @__PURE__ */ new WeakMap();
var _editorStyle = /* @__PURE__ */ new WeakMap();
var _hidden = /* @__PURE__ */ new WeakMap();
var _resizeObserver = /* @__PURE__ */ new WeakMap();
var CommentEditor = class _CommentEditor {
  static get CLASS_EDITOR_CONTAINER() {
    return "htCommentsContainer";
  }
  static get CLASS_EDITOR() {
    return "htComments";
  }
  static get CLASS_INPUT() {
    return "htCommentTextArea";
  }
  static get CLASS_CELL() {
    return "htCommentCell";
  }
  /**
   * @type {Document}
   */
  constructor(rootDocument, isRtl) {
    var _this = this;
    _classPrivateFieldInitSpec7(this, _rootDocument, void 0);
    _classPrivateFieldInitSpec7(this, _isRtl, false);
    _classPrivateFieldInitSpec7(this, _container, null);
    _classPrivateFieldInitSpec7(this, _editor, void 0);
    _classPrivateFieldInitSpec7(this, _editorStyle, void 0);
    _classPrivateFieldInitSpec7(this, _hidden, true);
    _classPrivateFieldInitSpec7(this, _resizeObserver, new EditorResizeObserver());
    _classPrivateFieldSet5(_rootDocument, this, rootDocument);
    _classPrivateFieldSet5(_isRtl, this, isRtl);
    _classPrivateFieldSet5(_editor, this, this.createEditor());
    _classPrivateFieldSet5(_editorStyle, this, _classPrivateFieldGet7(_editor, this).style);
    _classPrivateFieldGet7(_resizeObserver, this).setObservedElement(this.getInputElement());
    _classPrivateFieldGet7(_resizeObserver, this).addLocalHook("resize", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _this.runLocalHooks("resize", ...args);
    });
    this.hide();
  }
  /**
   * Set position of the comments editor according to the  provided x and y coordinates.
   *
   * @param {number} x X position (in pixels).
   * @param {number} y Y position (in pixels).
   */
  setPosition(x, y) {
    _classPrivateFieldGet7(_editorStyle, this).left = `${x}px`;
    _classPrivateFieldGet7(_editorStyle, this).top = `${y}px`;
  }
  /**
   * Set the editor size according to the provided arguments.
   *
   * @param {number} width Width in pixels.
   * @param {number} height Height in pixels.
   */
  setSize(width, height) {
    if (width && height) {
      const input = this.getInputElement();
      input.style.width = `${width}px`;
      input.style.height = `${height}px`;
    }
  }
  /**
   * Returns the size of the comments editor.
   *
   * @returns {{ width: number, height: number }}
   */
  getSize() {
    return {
      width: outerWidth(this.getInputElement()),
      height: outerHeight(this.getInputElement())
    };
  }
  /**
   * Starts observing the editor size.
   */
  observeSize() {
    _classPrivateFieldGet7(_resizeObserver, this).observe();
  }
  /**
   * Reset the editor size to its initial state.
   */
  resetSize() {
    const input = this.getInputElement();
    input.style.width = "";
    input.style.height = "";
  }
  /**
   * Set the read-only state for the comments editor.
   *
   * @param {boolean} state The new read only state.
   */
  setReadOnlyState(state) {
    const input = this.getInputElement();
    input.readOnly = state;
  }
  /**
   * Show the comments editor.
   */
  show() {
    _classPrivateFieldGet7(_editorStyle, this).display = "block";
    _classPrivateFieldSet5(_hidden, this, false);
  }
  /**
   * Hide the comments editor.
   */
  hide() {
    _classPrivateFieldGet7(_resizeObserver, this).unobserve();
    if (!_classPrivateFieldGet7(_hidden, this)) {
      _classPrivateFieldGet7(_editorStyle, this).display = "none";
    }
    _classPrivateFieldSet5(_hidden, this, true);
  }
  /**
   * Checks if the editor is visible.
   *
   * @returns {boolean}
   */
  isVisible() {
    return _classPrivateFieldGet7(_editorStyle, this).display === "block";
  }
  /**
   * Set the comment value.
   *
   * @param {string} [value] The value to use.
   */
  setValue() {
    let value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    const comment = value || "";
    this.getInputElement().value = comment;
  }
  /**
   * Get the comment value.
   *
   * @returns {string}
   */
  getValue() {
    return this.getInputElement().value;
  }
  /**
   * Checks if the comment input element is focused.
   *
   * @returns {boolean}
   */
  isFocused() {
    return _classPrivateFieldGet7(_rootDocument, this).activeElement === this.getInputElement();
  }
  /**
   * Focus the comments input element.
   */
  focus() {
    this.getInputElement().focus();
  }
  /**
   * Create the `textarea` to be used as a comments editor.
   *
   * @returns {HTMLElement}
   */
  createEditor() {
    const editor = _classPrivateFieldGet7(_rootDocument, this).createElement("div");
    const textarea = _classPrivateFieldGet7(_rootDocument, this).createElement("textarea");
    editor.style.display = "none";
    _classPrivateFieldSet5(_container, this, _classPrivateFieldGet7(_rootDocument, this).createElement("div"));
    _classPrivateFieldGet7(_container, this).setAttribute("dir", _classPrivateFieldGet7(_isRtl, this) ? "rtl" : "ltr");
    addClass(_classPrivateFieldGet7(_container, this), _CommentEditor.CLASS_EDITOR_CONTAINER);
    _classPrivateFieldGet7(_rootDocument, this).body.appendChild(_classPrivateFieldGet7(_container, this));
    addClass(editor, _CommentEditor.CLASS_EDITOR);
    addClass(textarea, _CommentEditor.CLASS_INPUT);
    textarea.setAttribute("data-hot-input", true);
    editor.appendChild(textarea);
    _classPrivateFieldGet7(_container, this).appendChild(editor);
    return editor;
  }
  /**
   * Get the input element.
   *
   * @returns {HTMLElement}
   */
  getInputElement() {
    return _classPrivateFieldGet7(_editor, this).querySelector(`.${_CommentEditor.CLASS_INPUT}`);
  }
  /**
   * Get the editor element.
   *
   * @returns {HTMLElement} The editor element.
   */
  getEditorElement() {
    return _classPrivateFieldGet7(_editor, this);
  }
  /**
   * Destroy the comments editor.
   */
  destroy() {
    const containerParentElement = _classPrivateFieldGet7(_container, this) ? _classPrivateFieldGet7(_container, this).parentNode : null;
    _classPrivateFieldGet7(_editor, this).parentNode.removeChild(_classPrivateFieldGet7(_editor, this));
    _classPrivateFieldSet5(_editor, this, null);
    _classPrivateFieldSet5(_editorStyle, this, null);
    _classPrivateFieldGet7(_resizeObserver, this).destroy();
    if (containerParentElement) {
      containerParentElement.removeChild(_classPrivateFieldGet7(_container, this));
    }
  }
};
mixin(CommentEditor, localHooks_default);
var commentEditor_default = CommentEditor;

// node_modules/handsontable/plugins/comments/displaySwitch.mjs
function _defineProperty16(e, r, t) {
  return (r = _toPropertyKey16(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey16(t) {
  var i = _toPrimitive16(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive16(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var DEFAULT_DISPLAY_DELAY = 250;
var DEFAULT_HIDE_DELAY = 250;
var DisplaySwitch = class {
  constructor(displayDelay) {
    _defineProperty16(this, "wasLastActionShow", true);
    _defineProperty16(this, "showDebounced", null);
    _defineProperty16(this, "hidingTimer", null);
    this.updateDelay(displayDelay);
  }
  /**
   * Responsible for hiding comment after proper delay.
   */
  hide() {
    this.wasLastActionShow = false;
    this.hidingTimer = setTimeout(() => {
      if (this.wasLastActionShow === false) {
        this.runLocalHooks("hide");
      }
    }, DEFAULT_HIDE_DELAY);
  }
  /**
   * Responsible for showing comment after proper delay.
   *
   * @param {object} range Coordinates of selected cell.
   */
  show(range) {
    this.wasLastActionShow = true;
    this.showDebounced(range);
  }
  /**
   * Cancel hiding comment.
   */
  cancelHiding() {
    this.wasLastActionShow = true;
    clearTimeout(this.hidingTimer);
    this.hidingTimer = null;
  }
  /**
   * Update the switch settings.
   *
   * @param {number} displayDelay Delay of showing the comments (in milliseconds).
   */
  updateDelay() {
    let displayDelay = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : DEFAULT_DISPLAY_DELAY;
    this.showDebounced = debounce((range) => {
      if (this.wasLastActionShow) {
        this.runLocalHooks("show", range.from.row, range.from.col);
      }
    }, displayDelay);
  }
  /**
   * Destroy the switcher.
   */
  destroy() {
    this.clearLocalHooks();
  }
};
mixin(DisplaySwitch, localHooks_default);
var displaySwitch_default = DisplaySwitch;

// node_modules/handsontable/plugins/contextMenu/utils.mjs
function prepareVerticalAlignClass(className, alignment) {
  if (className.indexOf(alignment) !== -1) {
    return className;
  }
  const replacedClassName = className.replace("htTop", "").replace("htMiddle", "").replace("htBottom", "").replace("  ", "");
  return `${replacedClassName} ${alignment}`;
}
function prepareHorizontalAlignClass(className, alignment) {
  if (className.indexOf(alignment) !== -1) {
    return className;
  }
  const replacedClassName = className.replace("htLeft", "").replace("htCenter", "").replace("htRight", "").replace("htJustify", "").replace("  ", "");
  return `${replacedClassName} ${alignment}`;
}
function getAlignmentClasses(ranges, callback) {
  const classes = {};
  arrayEach(ranges, (range) => {
    range.forAll((row, col) => {
      if (row >= 0 && col >= 0) {
        if (!classes[row]) {
          classes[row] = [];
        }
        classes[row][col] = callback(row, col);
      }
    });
  });
  return classes;
}
function align(ranges, type, alignment, cellDescriptor, propertySetter) {
  arrayEach(ranges, (range) => {
    range.forAll((row, col) => {
      if (row >= 0 && col >= 0) {
        applyAlignClassName(row, col, type, alignment, cellDescriptor, propertySetter);
      }
    });
  });
}
function applyAlignClassName(row, col, type, alignment, cellDescriptor, propertySetter) {
  const cellMeta = cellDescriptor(row, col);
  let className = alignment;
  if (cellMeta.className) {
    if (type === "vertical") {
      className = prepareVerticalAlignClass(cellMeta.className, alignment);
    } else {
      className = prepareHorizontalAlignClass(cellMeta.className, alignment);
    }
  }
  propertySetter(row, col, "className", className);
}
function markLabelAsSelected(label) {
  return `<span class="selected">${String.fromCharCode(10003)}</span>${label}`;
}
function checkSelectionConsistency(ranges, comparator) {
  let result = false;
  if (Array.isArray(ranges)) {
    arrayEach(ranges, (range) => {
      range.forAll((row, col) => {
        if (row >= 0 && col >= 0 && comparator(row, col)) {
          result = true;
          return false;
        }
      });
      return result;
    });
  }
  return result;
}
function getDocumentOffsetByElement(elementToCheck, baseDocument) {
  const offset2 = {
    top: 0,
    left: 0
  };
  if (baseDocument !== elementToCheck.ownerDocument) {
    const {
      frameElement
    } = baseDocument.defaultView;
    const {
      top: top2,
      left: left2
    } = frameElement.getBoundingClientRect();
    offset2.top = top2;
    offset2.left = left2;
  }
  return offset2;
}

// node_modules/handsontable/plugins/contextMenu/predefinedItems/separator.mjs
var KEY = "---------";
function separatorItem() {
  return {
    name: KEY
  };
}

// node_modules/handsontable/plugins/contextMenu/predefinedItems/alignment.mjs
var KEY2 = "alignment";
function alignmentItem() {
  return {
    key: KEY2,
    name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ALIGNMENT);
    },
    disabled() {
      if (this.countRows() === 0 || this.countCols() === 0) {
        return true;
      }
      const range = this.getSelectedRangeLast();
      if (!range) {
        return true;
      }
      if (range.isSingleHeader()) {
        return true;
      }
      return !(this.getSelectedRange() && !this.selection.isSelectedByCorner());
    },
    submenu: {
      items: [{
        key: `${KEY2}:left`,
        name() {
          return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ALIGNMENT_LEFT);
        },
        callback() {
          const selectedRange = this.getSelectedRange();
          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);
          const type = "horizontal";
          const alignment = "htLeft";
          this.runHooks("beforeCellAlignment", stateBefore, selectedRange, type, alignment);
          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));
          this.render();
        },
        disabled: false
      }, {
        key: `${KEY2}:center`,
        name() {
          return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ALIGNMENT_CENTER);
        },
        callback() {
          const selectedRange = this.getSelectedRange();
          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);
          const type = "horizontal";
          const alignment = "htCenter";
          this.runHooks("beforeCellAlignment", stateBefore, selectedRange, type, alignment);
          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));
          this.render();
        },
        disabled: false
      }, {
        key: `${KEY2}:right`,
        name() {
          return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT);
        },
        callback() {
          const selectedRange = this.getSelectedRange();
          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);
          const type = "horizontal";
          const alignment = "htRight";
          this.runHooks("beforeCellAlignment", stateBefore, selectedRange, type, alignment);
          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));
          this.render();
        },
        disabled: false
      }, {
        key: `${KEY2}:justify`,
        name() {
          return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY);
        },
        callback() {
          const selectedRange = this.getSelectedRange();
          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);
          const type = "horizontal";
          const alignment = "htJustify";
          this.runHooks("beforeCellAlignment", stateBefore, selectedRange, type, alignment);
          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));
          this.render();
        },
        disabled: false
      }, {
        name: KEY
      }, {
        key: `${KEY2}:top`,
        name() {
          return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ALIGNMENT_TOP);
        },
        callback() {
          const selectedRange = this.getSelectedRange();
          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);
          const type = "vertical";
          const alignment = "htTop";
          this.runHooks("beforeCellAlignment", stateBefore, selectedRange, type, alignment);
          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));
          this.render();
        },
        disabled: false
      }, {
        key: `${KEY2}:middle`,
        name() {
          return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE);
        },
        callback() {
          const selectedRange = this.getSelectedRange();
          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);
          const type = "vertical";
          const alignment = "htMiddle";
          this.runHooks("beforeCellAlignment", stateBefore, selectedRange, type, alignment);
          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));
          this.render();
        },
        disabled: false
      }, {
        key: `${KEY2}:bottom`,
        name() {
          return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM);
        },
        callback() {
          const selectedRange = this.getSelectedRange();
          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);
          const type = "vertical";
          const alignment = "htBottom";
          this.runHooks("beforeCellAlignment", stateBefore, selectedRange, type, alignment);
          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));
          this.render();
        },
        disabled: false
      }]
    }
  };
}

// node_modules/handsontable/plugins/contextMenu/predefinedItems/clearColumn.mjs
var KEY3 = "clear_column";
function clearColumnItem() {
  return {
    key: KEY3,
    name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_CLEAR_COLUMN);
    },
    callback(key, selection) {
      const startColumn = selection[0].start.col;
      const endColumn = selection[0].end.col;
      if (this.countRows()) {
        this.populateFromArray(0, startColumn, [[null]], Math.max(selection[0].start.row, selection[0].end.row), endColumn, "ContextMenu.clearColumn");
      }
    },
    disabled() {
      const range = this.getSelectedRangeLast();
      if (!range || range.isSingleHeader() && range.highlight.col < 0 || !this.selection.isSelectedByColumnHeader()) {
        return true;
      }
      let atLeastOneNonReadOnly = false;
      range.forAll((row, col) => {
        if (row < 0 || col < 0) {
          return true;
        }
        const {
          readOnly
        } = this.getCellMeta(row, col);
        if (!readOnly) {
          atLeastOneNonReadOnly = true;
          return false;
        }
        return true;
      });
      return !atLeastOneNonReadOnly;
    }
  };
}

// node_modules/handsontable/plugins/contextMenu/predefinedItems/columnLeft.mjs
var KEY4 = "col_left";
function columnLeftItem() {
  return {
    key: KEY4,
    name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_INSERT_LEFT);
    },
    callback() {
      const latestSelection = this.getSelectedRangeLast().getTopLeftCorner();
      const alterAction = this.isRtl() ? "insert_col_end" : "insert_col_start";
      this.alter(alterAction, latestSelection.col, 1, "ContextMenu.columnLeft");
    },
    disabled() {
      if (!this.isColumnModificationAllowed()) {
        return true;
      }
      const range = this.getSelectedRangeLast();
      if (!range || this.selection.isSelectedByRowHeader() || range.isSingleHeader() && range.highlight.col < 0 || this.countSourceCols() >= this.getSettings().maxCols) {
        return true;
      }
      if (this.selection.isSelectedByCorner()) {
        return this.countCols() === 0;
      }
      return false;
    },
    hidden() {
      return !this.getSettings().allowInsertColumn;
    }
  };
}

// node_modules/handsontable/plugins/contextMenu/predefinedItems/columnRight.mjs
var KEY5 = "col_right";
function columnRightItem() {
  return {
    key: KEY5,
    name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_INSERT_RIGHT);
    },
    callback() {
      const latestSelection = this.getSelectedRangeLast().getTopRightCorner();
      const alterAction = this.isRtl() ? "insert_col_start" : "insert_col_end";
      this.alter(alterAction, latestSelection.col, 1, "ContextMenu.columnRight");
    },
    disabled() {
      if (!this.isColumnModificationAllowed()) {
        return true;
      }
      const range = this.getSelectedRangeLast();
      if (!range || this.selection.isSelectedByRowHeader() || range.isSingleHeader() && range.highlight.col < 0 || this.countSourceCols() >= this.getSettings().maxCols) {
        return true;
      }
      return false;
    },
    hidden() {
      return !this.getSettings().allowInsertColumn;
    }
  };
}

// node_modules/handsontable/plugins/contextMenu/predefinedItems/readOnly.mjs
var KEY6 = "make_read_only";
function readOnlyItem() {
  return {
    key: KEY6,
    checkable: true,
    ariaChecked() {
      const atLeastOneReadOnly = checkSelectionConsistency(this.getSelectedRange(), (row, col) => this.getCellMeta(row, col).readOnly);
      return atLeastOneReadOnly;
    },
    ariaLabel() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_READ_ONLY);
    },
    name() {
      let label = this.getTranslatedPhrase(CONTEXTMENU_ITEMS_READ_ONLY);
      const atLeastOneReadOnly = checkSelectionConsistency(this.getSelectedRange(), (row, col) => this.getCellMeta(row, col).readOnly);
      if (atLeastOneReadOnly) {
        label = markLabelAsSelected(label);
      }
      return label;
    },
    callback() {
      const ranges = this.getSelectedRange();
      const atLeastOneReadOnly = checkSelectionConsistency(ranges, (row, col) => this.getCellMeta(row, col).readOnly);
      arrayEach(ranges, (range) => {
        range.forAll((row, col) => {
          if (row >= 0 && col >= 0) {
            this.setCellMeta(row, col, "readOnly", !atLeastOneReadOnly);
          }
        });
      });
      this.render();
    },
    disabled() {
      const range = this.getSelectedRangeLast();
      if (!range) {
        return true;
      }
      if (range.isSingleHeader()) {
        return true;
      }
      if (this.selection.isSelectedByCorner()) {
        return true;
      }
      if (this.countRows() === 0 || this.countCols() === 0) {
        return true;
      }
      if (!this.getSelectedRange() || this.getSelectedRange().length === 0) {
        return true;
      }
      return false;
    }
  };
}

// node_modules/handsontable/plugins/contextMenu/predefinedItems/redo.mjs
var KEY7 = "redo";
function redoItem() {
  return {
    key: KEY7,
    name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_REDO);
    },
    callback() {
      this.getPlugin("undoRedo").redo();
    },
    hidden() {
      const undoRedoPlugin = this.getPlugin("undoRedo");
      return !undoRedoPlugin || !undoRedoPlugin.isEnabled();
    },
    disabled() {
      return !this.getPlugin("undoRedo").isRedoAvailable();
    }
  };
}

// node_modules/handsontable/plugins/contextMenu/predefinedItems/removeColumn.mjs
var KEY8 = "remove_col";
function removeColumnItem() {
  return {
    key: KEY8,
    name() {
      const selection = this.getSelected();
      let pluralForm = 0;
      if (selection) {
        if (selection.length > 1) {
          pluralForm = 1;
        } else {
          const [, fromColumn, , toColumn] = selection[0];
          if (fromColumn - toColumn !== 0) {
            pluralForm = 1;
          }
        }
      }
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_REMOVE_COLUMN, pluralForm);
    },
    callback() {
      this.alter("remove_col", transformSelectionToColumnDistance(this), null, "ContextMenu.removeColumn");
    },
    disabled() {
      if (!this.isColumnModificationAllowed()) {
        return true;
      }
      const range = this.getSelectedRangeLast();
      if (!range) {
        return true;
      }
      if (range.isSingleHeader() && range.highlight.col < 0) {
        return true;
      }
      const totalColumns = this.countCols();
      if (this.selection.isSelectedByCorner()) {
        return totalColumns === 0;
      }
      return this.selection.isSelectedByRowHeader() || totalColumns === 0;
    },
    hidden() {
      return !this.getSettings().allowRemoveColumn;
    }
  };
}

// node_modules/handsontable/plugins/contextMenu/predefinedItems/removeRow.mjs
var KEY9 = "remove_row";
function removeRowItem() {
  return {
    key: KEY9,
    name() {
      const selection = this.getSelected();
      let pluralForm = 0;
      if (selection) {
        if (selection.length > 1) {
          pluralForm = 1;
        } else {
          const [fromRow, , toRow] = selection[0];
          if (fromRow - toRow !== 0) {
            pluralForm = 1;
          }
        }
      }
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_REMOVE_ROW, pluralForm);
    },
    callback() {
      this.alter("remove_row", transformSelectionToRowDistance(this), 1, "ContextMenu.removeRow");
    },
    disabled() {
      const range = this.getSelectedRangeLast();
      if (!range) {
        return true;
      }
      if (range.isSingleHeader() && range.highlight.row < 0) {
        return true;
      }
      const totalRows = this.countRows();
      if (this.selection.isSelectedByCorner()) {
        return totalRows === 0;
      }
      return this.selection.isSelectedByColumnHeader() || totalRows === 0;
    },
    hidden() {
      return !this.getSettings().allowRemoveRow;
    }
  };
}

// node_modules/handsontable/plugins/contextMenu/predefinedItems/rowAbove.mjs
var KEY10 = "row_above";
function rowAboveItem() {
  return {
    key: KEY10,
    name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ROW_ABOVE);
    },
    callback() {
      const latestSelection = this.getSelectedRangeLast().getTopLeftCorner();
      this.alter("insert_row_above", latestSelection.row, 1, "ContextMenu.rowAbove");
    },
    disabled() {
      const range = this.getSelectedRangeLast();
      if (!range || this.selection.isSelectedByColumnHeader() || range.isSingleHeader() && range.highlight.row < 0 || this.countSourceRows() >= this.getSettings().maxRows) {
        return true;
      }
      if (this.selection.isSelectedByCorner()) {
        return this.countRows() === 0;
      }
      return false;
    },
    hidden() {
      return !this.getSettings().allowInsertRow;
    }
  };
}

// node_modules/handsontable/plugins/contextMenu/predefinedItems/rowBelow.mjs
var KEY11 = "row_below";
function rowBelowItem() {
  return {
    key: KEY11,
    name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ROW_BELOW);
    },
    callback() {
      const latestSelection = this.getSelectedRangeLast().getBottomRightCorner();
      this.alter("insert_row_below", latestSelection.row, 1, "ContextMenu.rowBelow");
    },
    disabled() {
      const range = this.getSelectedRangeLast();
      if (!range || this.selection.isSelectedByColumnHeader() || range.isSingleHeader() && range.highlight.row < 0 || this.countSourceRows() >= this.getSettings().maxRows) {
        return true;
      }
      return false;
    },
    hidden() {
      return !this.getSettings().allowInsertRow;
    }
  };
}

// node_modules/handsontable/plugins/contextMenu/predefinedItems/noItems.mjs
var KEY12 = "no_items";
function noItemsItem() {
  return {
    key: KEY12,
    name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_NO_ITEMS);
    },
    disabled: true,
    isCommand: false
  };
}

// node_modules/handsontable/plugins/contextMenu/predefinedItems/undo.mjs
var KEY13 = "undo";
function undoItem() {
  return {
    key: KEY13,
    name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_UNDO);
    },
    callback() {
      this.getPlugin("undoRedo").undo();
    },
    hidden() {
      const undoRedoPlugin = this.getPlugin("undoRedo");
      return !undoRedoPlugin || !undoRedoPlugin.isEnabled();
    },
    disabled() {
      return !this.getPlugin("undoRedo").isUndoAvailable();
    }
  };
}

// node_modules/handsontable/plugins/contextMenu/predefinedItems/index.mjs
var ITEMS = [KEY10, KEY11, KEY4, KEY5, KEY3, KEY9, KEY8, KEY13, KEY7, KEY6, KEY2, KEY, KEY12];
var _predefinedItems = {
  [KEY]: separatorItem,
  [KEY12]: noItemsItem,
  [KEY10]: rowAboveItem,
  [KEY11]: rowBelowItem,
  [KEY4]: columnLeftItem,
  [KEY5]: columnRightItem,
  [KEY3]: clearColumnItem,
  [KEY9]: removeRowItem,
  [KEY8]: removeColumnItem,
  [KEY13]: undoItem,
  [KEY7]: redoItem,
  [KEY6]: readOnlyItem,
  [KEY2]: alignmentItem
};
function predefinedItems() {
  const items = {};
  objectEach(_predefinedItems, (itemFactory, key) => {
    items[key] = itemFactory();
  });
  return items;
}

// node_modules/handsontable/plugins/comments/contextMenuItem/addEditComment.mjs
function addEditCommentItem(plugin) {
  return {
    key: "commentsAddEdit",
    name() {
      var _this$getSelectedRang;
      const highlight = (_this$getSelectedRang = this.getSelectedRangeLast()) === null || _this$getSelectedRang === void 0 ? void 0 : _this$getSelectedRang.highlight;
      if (highlight !== null && highlight !== void 0 && highlight.isCell() && plugin.getCommentAtCell(highlight.row, highlight.col)) {
        return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_EDIT_COMMENT);
      }
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ADD_COMMENT);
    },
    callback() {
      const range = this.getSelectedRangeLast();
      plugin.setRange(range);
      plugin.show();
      plugin.focusEditor();
    },
    disabled() {
      const range = this.getSelectedRangeLast();
      if (!range || range.highlight.isHeader() || this.selection.isEntireRowSelected() && this.selection.isEntireColumnSelected() || this.countRenderedRows() === 0 || this.countRenderedCols() === 0) {
        return true;
      }
      return false;
    }
  };
}

// node_modules/handsontable/plugins/comments/contextMenuItem/removeComment.mjs
function removeCommentItem(plugin) {
  return {
    key: "commentsRemove",
    name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_REMOVE_COMMENT);
    },
    callback() {
      const range = this.getSelectedRangeLast();
      range.forAll((row, column) => {
        if (row >= 0 && column >= 0) {
          plugin.removeCommentAtCell(row, column, false);
        }
      });
      this.render();
    },
    disabled() {
      const range = this.getSelectedRangeLast();
      if (!range || range.highlight.isHeader() || this.selection.isEntireRowSelected() && this.selection.isEntireColumnSelected() || this.countRenderedRows() === 0 || this.countRenderedCols() === 0) {
        return true;
      }
      return false;
    }
  };
}

// node_modules/handsontable/plugins/comments/contextMenuItem/readOnlyComment.mjs
function readOnlyCommentItem(plugin) {
  return {
    key: "commentsReadOnly",
    name() {
      const label = this.getTranslatedPhrase(CONTEXTMENU_ITEMS_READ_ONLY_COMMENT);
      const areReadOnly = checkSelectionConsistency(this.getSelectedRange(), (row, col) => {
        return plugin.getCommentMeta(row, col, META_READONLY);
      });
      return areReadOnly ? markLabelAsSelected(label) : label;
    },
    callback() {
      const range = this.getSelectedRangeLast();
      range.forAll((row, column) => {
        if (row >= 0 && column >= 0) {
          const currentState = !!plugin.getCommentMeta(row, column, META_READONLY);
          plugin.updateCommentMeta(row, column, {
            [META_READONLY]: !currentState
          });
        }
      });
    },
    disabled() {
      const range = this.getSelectedRangeLast();
      if (!range || range.highlight.isHeader() || !plugin.getCommentAtCell(range.highlight.row, range.highlight.col) || this.selection.isEntireRowSelected() && this.selection.isEntireColumnSelected() || this.countRenderedRows() === 0 || this.countRenderedCols() === 0) {
        return true;
      }
      return false;
    }
  };
}

// node_modules/handsontable/plugins/comments/comments.mjs
function _classPrivateMethodInitSpec12(e, a) {
  _checkPrivateRedeclaration13(e, a), a.add(e);
}
function _classPrivateFieldInitSpec8(e, t, a) {
  _checkPrivateRedeclaration13(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration13(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty17(e, r, t) {
  return (r = _toPropertyKey17(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey17(t) {
  var i = _toPrimitive17(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive17(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _classPrivateFieldSet6(s, a, r) {
  return s.set(_assertClassBrand13(s, a), r), r;
}
function _classPrivateFieldGet8(s, a) {
  return s.get(_assertClassBrand13(s, a));
}
function _assertClassBrand13(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var PLUGIN_KEY9 = "comments";
var PLUGIN_PRIORITY8 = 60;
var META_COMMENT = "comment";
var META_COMMENT_VALUE = "value";
var META_STYLE = "style";
var META_READONLY = "readOnly";
var SHORTCUTS_GROUP6 = PLUGIN_KEY9;
var SHORTCUTS_CONTEXT_NAME = `plugin:${PLUGIN_KEY9}`;
var _editor2 = /* @__PURE__ */ new WeakMap();
var _displaySwitch = /* @__PURE__ */ new WeakMap();
var _preventEditorAutoSwitch = /* @__PURE__ */ new WeakMap();
var _preventEditorHiding = /* @__PURE__ */ new WeakMap();
var _cellBelowCursor = /* @__PURE__ */ new WeakMap();
var _commentValueBeforeSave = /* @__PURE__ */ new WeakMap();
var _Comments_brand = /* @__PURE__ */ new WeakSet();
var Comments = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec12(this, _Comments_brand);
    _defineProperty17(this, "range", {});
    _classPrivateFieldInitSpec8(this, _editor2, null);
    _classPrivateFieldInitSpec8(this, _displaySwitch, null);
    _classPrivateFieldInitSpec8(this, _preventEditorAutoSwitch, false);
    _classPrivateFieldInitSpec8(this, _preventEditorHiding, false);
    _classPrivateFieldInitSpec8(this, _cellBelowCursor, null);
    _classPrivateFieldInitSpec8(this, _commentValueBeforeSave, "");
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY9;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY8;
  }
  static get DEFAULT_SETTINGS() {
    return {
      displayDelay: 250
    };
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link Comments#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[PLUGIN_KEY9];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _this = this;
    if (this.enabled) {
      return;
    }
    if (!_classPrivateFieldGet8(_editor2, this)) {
      _classPrivateFieldSet6(_editor2, this, new commentEditor_default(this.hot.rootDocument, this.hot.isRtl()));
      _classPrivateFieldGet8(_editor2, this).addLocalHook("resize", function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _assertClassBrand13(_Comments_brand, _this, _onEditorResize).call(_this, ...args);
      });
    }
    if (!_classPrivateFieldGet8(_displaySwitch, this)) {
      _classPrivateFieldSet6(_displaySwitch, this, new displaySwitch_default(this.getSetting("displayDelay")));
    }
    this.addHook("afterContextMenuDefaultOptions", (options) => this.addToContextMenu(options));
    this.addHook("afterRenderer", (TD, row, col, prop, value, cellProperties) => _assertClassBrand13(_Comments_brand, this, _onAfterRenderer).call(this, TD, cellProperties));
    this.addHook("afterScroll", () => _assertClassBrand13(_Comments_brand, this, _onAfterScroll).call(this));
    this.addHook("afterBeginEditing", () => this.hide());
    this.addHook("afterDocumentKeyDown", (event) => _assertClassBrand13(_Comments_brand, this, _onAfterDocumentKeyDown).call(this, event));
    this.addHook("beforeCompositionStart", (event) => _assertClassBrand13(_Comments_brand, this, _onAfterDocumentKeyDown).call(this, event));
    this.addHook("afterSetTheme", function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _assertClassBrand13(_Comments_brand, _this, _updateEditorThemeClassName).call(_this, ...args);
    });
    _classPrivateFieldGet8(_displaySwitch, this).addLocalHook("hide", () => this.hide());
    _classPrivateFieldGet8(_displaySwitch, this).addLocalHook("show", (row, col) => this.showAtCell(row, col));
    this.registerShortcuts();
    this.registerListeners();
    super.enablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *   - [`comments`](@/api/options.md#comments)
   */
  updatePlugin() {
    _classPrivateFieldGet8(_displaySwitch, this).updateDelay(this.getSetting("displayDelay"));
    super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.unregisterShortcuts();
    super.disablePlugin();
  }
  /**
   * Register shortcuts responsible for toggling context menu.
   *
   * @private
   */
  registerShortcuts() {
    const manager = this.hot.getShortcutManager();
    const gridContext = manager.getContext("grid");
    const pluginContext = manager.addContext(SHORTCUTS_CONTEXT_NAME);
    gridContext.addShortcut({
      keys: [["Control", "Alt", "M"]],
      callback: () => {
        const range = this.hot.getSelectedRangeLast();
        _classPrivateFieldSet6(_preventEditorHiding, this, true);
        this.hot.scrollToFocusedCell(() => {
          this.setRange(range);
          this.show();
          this.focusEditor();
          manager.setActiveContextName(SHORTCUTS_CONTEXT_NAME);
          this.hot._registerTimeout(() => {
            _classPrivateFieldSet6(_preventEditorHiding, this, false);
          });
        });
      },
      stopPropagation: true,
      runOnlyIf: () => {
        var _this$hot$getSelected;
        return (_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight.isCell();
      },
      group: SHORTCUTS_GROUP6
    });
    pluginContext.addShortcut({
      keys: [["Escape"]],
      callback: () => {
        _classPrivateFieldGet8(_editor2, this).setValue(_classPrivateFieldGet8(_commentValueBeforeSave, this));
        this.hide();
        manager.setActiveContextName("grid");
      },
      runOnlyIf: () => _classPrivateFieldGet8(_editor2, this).isVisible() && _classPrivateFieldGet8(_editor2, this).isFocused(),
      group: SHORTCUTS_GROUP6
    });
    pluginContext.addShortcut({
      keys: [["Control/Meta", "Enter"]],
      callback: () => {
        this.hide();
        manager.setActiveContextName("grid");
      },
      runOnlyIf: () => _classPrivateFieldGet8(_editor2, this).isVisible() && _classPrivateFieldGet8(_editor2, this).isFocused(),
      group: SHORTCUTS_GROUP6
    });
    pluginContext.addShortcut({
      keys: [["Shift", "Tab"], ["Tab"]],
      forwardToContext: manager.getContext("grid"),
      callback: () => {
        _classPrivateFieldGet8(_editor2, this).setValue(_classPrivateFieldGet8(_editor2, this).getValue());
        this.hide();
        manager.setActiveContextName("grid");
      },
      group: SHORTCUTS_GROUP6
    });
  }
  /**
   * Unregister shortcuts responsible for toggling context menu.
   *
   * @private
   */
  unregisterShortcuts() {
    this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(SHORTCUTS_GROUP6);
  }
  /**
   * Registers all necessary DOM listeners.
   *
   * @private
   */
  registerListeners() {
    const {
      rootDocument
    } = this.hot;
    const editorElement = this.getEditorInputElement();
    this.eventManager.addEventListener(rootDocument, "mouseover", (event) => _assertClassBrand13(_Comments_brand, this, _onMouseOver).call(this, event));
    this.eventManager.addEventListener(rootDocument, "mousedown", (event) => _assertClassBrand13(_Comments_brand, this, _onMouseDown).call(this, event));
    this.eventManager.addEventListener(rootDocument, "mouseup", () => _assertClassBrand13(_Comments_brand, this, _onMouseUp2).call(this));
    this.eventManager.addEventListener(editorElement, "focus", () => _assertClassBrand13(_Comments_brand, this, _onEditorFocus).call(this));
    this.eventManager.addEventListener(editorElement, "blur", () => _assertClassBrand13(_Comments_brand, this, _onEditorBlur).call(this));
    this.eventManager.addEventListener(this.getEditorInputElement(), "mousedown", (event) => _assertClassBrand13(_Comments_brand, this, _onInputElementMouseDown).call(this, event));
  }
  /**
   * Sets the current cell range to be able to use general methods like {@link Comments#setComment}, {@link Comments#removeComment}, {@link Comments#show}.
   *
   * @param {object} range Object with `from` property, each with `row` and `col` properties.
   */
  setRange(range) {
    this.range = range;
  }
  /**
   * Clears the currently selected cell.
   */
  clearRange() {
    this.range = {};
  }
  /**
   * Checks if the event target is a cell containing a comment.
   *
   * @private
   * @param {Event} event DOM event.
   * @returns {boolean}
   */
  targetIsCellWithComment(event) {
    const closestCell = closest(event.target, "TD", "TBODY");
    return !!(closestCell && hasClass(closestCell, "htCommentCell") && closest(closestCell, [this.hot.rootElement]));
  }
  /**
   * Checks if the event target is a comment textarea.
   *
   * @private
   * @param {Event} event DOM event.
   * @returns {boolean}
   */
  targetIsCommentTextArea(event) {
    return this.getEditorInputElement() === event.target;
  }
  /**
   * Sets a comment for a cell according to the previously set range (see {@link Comments#setRange}).
   *
   * @param {string} value Comment contents.
   */
  setComment(value) {
    if (!this.range.from) {
      throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
    }
    const editorValue = _classPrivateFieldGet8(_editor2, this).getValue();
    let comment = "";
    if (value !== null && value !== void 0) {
      comment = value;
    } else if (editorValue !== null && editorValue !== void 0) {
      comment = editorValue;
    }
    const row = this.range.from.row;
    const col = this.range.from.col;
    this.updateCommentMeta(row, col, {
      [META_COMMENT_VALUE]: comment
    });
    this.hot.render();
  }
  /**
   * Sets a comment for a specified cell.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} value Comment contents.
   */
  setCommentAtCell(row, column, value) {
    this.setRange({
      from: this.hot._createCellCoords(row, column)
    });
    this.setComment(value);
  }
  /**
   * Removes a comment from a cell according to previously set range (see {@link Comments#setRange}).
   *
   * @param {boolean} [forceRender=true] If set to `true`, the table will be re-rendered at the end of the operation.
   */
  removeComment() {
    let forceRender = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
    if (!this.range.from) {
      throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
    }
    this.hot.setCellMeta(this.range.from.row, this.range.from.col, META_COMMENT);
    if (forceRender) {
      this.hot.render();
    }
    this.hide();
  }
  /**
   * Removes a comment from a specified cell.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {boolean} [forceRender=true] If `true`, the table will be re-rendered at the end of the operation.
   */
  removeCommentAtCell(row, column) {
    let forceRender = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    this.setRange({
      from: this.hot._createCellCoords(row, column)
    });
    this.removeComment(forceRender);
  }
  /**
   * Gets comment from a cell according to previously set range (see {@link Comments#setRange}).
   *
   * @returns {string|undefined} Returns a content of the comment.
   */
  getComment() {
    const row = this.range.from.row;
    const column = this.range.from.col;
    return this.getCommentMeta(row, column, META_COMMENT_VALUE);
  }
  /**
   * Gets comment from a cell at the provided coordinates.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @returns {string|undefined} Returns a content of the comment.
   */
  getCommentAtCell(row, column) {
    return this.getCommentMeta(row, column, META_COMMENT_VALUE);
  }
  /**
   * Shows the comment editor accordingly to the previously set range (see {@link Comments#setRange}).
   *
   * @returns {boolean} Returns `true` if comment editor was shown.
   */
  show() {
    var _ref;
    if (!this.range.from) {
      throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
    }
    const {
      from: {
        row,
        col
      }
    } = this.range;
    if (row < 0 || row > this.hot.countSourceRows() - 1 || col < 0 || col > this.hot.countSourceCols() - 1) {
      return false;
    }
    const meta = this.hot.getCellMeta(this.range.from.row, this.range.from.col);
    _classPrivateFieldGet8(_displaySwitch, this).cancelHiding();
    _classPrivateFieldGet8(_editor2, this).setValue((_ref = meta[META_COMMENT] ? meta[META_COMMENT][META_COMMENT_VALUE] : null) !== null && _ref !== void 0 ? _ref : "");
    _classPrivateFieldGet8(_editor2, this).show();
    this.refreshEditor(true);
    return true;
  }
  /**
   * Shows comment editor according to cell coordinates.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @returns {boolean} Returns `true` if comment editor was shown.
   */
  showAtCell(row, column) {
    this.setRange({
      from: this.hot._createCellCoords(row, column)
    });
    return this.show();
  }
  /**
   * Hides the comment editor.
   */
  hide() {
    _classPrivateFieldGet8(_editor2, this).hide();
  }
  /**
   * Refreshes comment editor position and styling.
   *
   * @param {boolean} [force=false] If `true` then recalculation will be forced.
   */
  refreshEditor() {
    let force = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    if (!force && (!this.range.from || !_classPrivateFieldGet8(_editor2, this).isVisible())) {
      return;
    }
    const {
      rowIndexMapper,
      columnIndexMapper
    } = this.hot;
    const {
      row: visualRow,
      col: visualColumn
    } = this.range.from;
    let renderableRow = rowIndexMapper.getRenderableFromVisualIndex(visualRow);
    let renderableColumn = columnIndexMapper.getRenderableFromVisualIndex(visualColumn);
    const targetingPreviousRow = renderableRow === null;
    _classPrivateFieldGet8(_editor2, this).setPosition(0, 0);
    if (renderableRow === null) {
      renderableRow = rowIndexMapper.getRenderableFromVisualIndex(rowIndexMapper.getNearestNotHiddenIndex(visualRow, -1));
    }
    if (renderableColumn === null) {
      renderableColumn = columnIndexMapper.getRenderableFromVisualIndex(columnIndexMapper.getNearestNotHiddenIndex(visualColumn, -1));
    }
    const isBeforeRenderedRows = renderableRow === null;
    const isBeforeRenderedColumns = renderableColumn === null;
    renderableRow = renderableRow !== null && renderableRow !== void 0 ? renderableRow : 0;
    renderableColumn = renderableColumn !== null && renderableColumn !== void 0 ? renderableColumn : 0;
    const {
      rootWindow,
      view: {
        _wt: wt
      }
    } = this.hot;
    const {
      wtTable
    } = wt;
    const TD = wt.getCell({
      row: renderableRow,
      col: renderableColumn
    }, true);
    const commentStyle = this.getCommentMeta(visualRow, visualColumn, META_STYLE);
    if (commentStyle) {
      _classPrivateFieldGet8(_editor2, this).setSize(commentStyle.width, commentStyle.height);
    } else {
      _classPrivateFieldGet8(_editor2, this).resetSize();
    }
    const lastColWidth = isBeforeRenderedColumns ? 0 : wtTable.getColumnWidth(renderableColumn);
    const lastRowHeight = targetingPreviousRow && !isBeforeRenderedRows ? outerHeight(TD) : 0;
    const {
      left: left2,
      top: top2,
      width: cellWidth,
      height: cellHeight
    } = TD.getBoundingClientRect();
    const {
      width: editorWidth,
      height: editorHeight
    } = _classPrivateFieldGet8(_editor2, this).getSize();
    const {
      innerWidth,
      innerHeight
    } = this.hot.rootWindow;
    const documentElement = this.hot.rootDocument.documentElement;
    const scrollbarWidth = getScrollbarWidth(this.hot.rootDocument);
    const verticalScrollbarWidth = hasVerticalScrollbar(this.hot.rootWindow) ? scrollbarWidth : 0;
    const horizontalScrollbarWidth = hasHorizontalScrollbar(this.hot.rootWindow) ? scrollbarWidth : 0;
    let x = left2 + rootWindow.scrollX + lastColWidth;
    let y = top2 + rootWindow.scrollY + lastRowHeight;
    if (this.hot.isRtl()) {
      x -= editorWidth + lastColWidth;
    }
    if (this.hot.isLtr() && left2 + cellWidth + editorWidth > innerWidth - verticalScrollbarWidth) {
      x = left2 + rootWindow.scrollX - editorWidth - 1;
    } else if (this.hot.isRtl() && x < -(documentElement.scrollWidth - documentElement.clientWidth)) {
      x = left2 + rootWindow.scrollX + lastColWidth + 1;
    }
    if (top2 + editorHeight > innerHeight - horizontalScrollbarWidth) {
      y -= editorHeight - cellHeight + 1;
    }
    _classPrivateFieldGet8(_editor2, this).setPosition(x, y);
    _classPrivateFieldGet8(_editor2, this).setReadOnlyState(this.getCommentMeta(visualRow, visualColumn, META_READONLY));
    _classPrivateFieldGet8(_editor2, this).observeSize();
  }
  /**
   * Focuses the comments editor element.
   */
  focusEditor() {
    _classPrivateFieldGet8(_editor2, this).focus();
  }
  /**
   * Sets or update the comment-related cell meta.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {object} metaObject Object defining all the comment-related meta information.
   */
  updateCommentMeta(row, column, metaObject) {
    const oldComment = this.hot.getCellMeta(row, column)[META_COMMENT];
    let newComment;
    if (oldComment) {
      newComment = deepClone(oldComment);
      deepExtend(newComment, metaObject);
    } else {
      newComment = metaObject;
    }
    this.hot.setCellMeta(row, column, META_COMMENT, newComment);
  }
  /**
   * Gets the comment related meta information.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} property Cell meta property.
   * @returns {Mixed}
   */
  getCommentMeta(row, column, property) {
    const cellMeta = this.hot.getCellMeta(row, column);
    if (!cellMeta[META_COMMENT]) {
      return void 0;
    }
    return cellMeta[META_COMMENT][property];
  }
  /**
   * Add Comments plugin options to the Context Menu.
   *
   * @private
   * @param {object} options The menu options.
   */
  addToContextMenu(options) {
    options.items.push({
      name: KEY
    }, addEditCommentItem(this), removeCommentItem(this), readOnlyCommentItem(this));
  }
  /**
   * Gets the editors input element.
   *
   * @private
   * @returns {HTMLTextAreaElement}
   */
  getEditorInputElement() {
    return _classPrivateFieldGet8(_editor2, this).getInputElement();
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    var _classPrivateFieldGet210, _classPrivateFieldGet310;
    (_classPrivateFieldGet210 = _classPrivateFieldGet8(_editor2, this)) === null || _classPrivateFieldGet210 === void 0 || _classPrivateFieldGet210.destroy();
    (_classPrivateFieldGet310 = _classPrivateFieldGet8(_displaySwitch, this)) === null || _classPrivateFieldGet310 === void 0 || _classPrivateFieldGet310.destroy();
    super.destroy();
  }
};
function _onMouseDown(event) {
  if (!this.hot.view || !this.hot.view._wt) {
    return;
  }
  if (!_classPrivateFieldGet8(_preventEditorAutoSwitch, this) && !this.targetIsCommentTextArea(event)) {
    const eventCell = closest(event.target, "TD", "TBODY");
    let coordinates = null;
    if (eventCell) {
      coordinates = this.hot.getCoords(eventCell);
    }
    if (!eventCell || this.range.from && coordinates && (this.range.from.row !== coordinates.row || this.range.from.col !== coordinates.col)) {
      this.hide();
    }
  }
}
function _onInputElementMouseDown(event) {
  event.stopPropagation();
}
function _onMouseOver(event) {
  const {
    rootDocument
  } = this.hot;
  if (_classPrivateFieldGet8(_preventEditorAutoSwitch, this) || _classPrivateFieldGet8(_editor2, this).isFocused() || hasClass(event.target, "wtBorder") || _classPrivateFieldGet8(_cellBelowCursor, this) === event.target || !_classPrivateFieldGet8(_editor2, this)) {
    return;
  }
  _classPrivateFieldSet6(_cellBelowCursor, this, rootDocument.elementFromPoint(event.clientX, event.clientY));
  if (this.targetIsCellWithComment(event)) {
    const range = this.hot._createCellRange(this.hot.getCoords(event.target));
    _classPrivateFieldGet8(_displaySwitch, this).show(range);
  } else if (isChildOf(event.target, rootDocument) && !this.targetIsCommentTextArea(event)) {
    _classPrivateFieldGet8(_displaySwitch, this).hide();
  }
}
function _onMouseUp2() {
  _classPrivateFieldSet6(_preventEditorAutoSwitch, this, false);
}
function _onAfterRenderer(TD, cellProperties) {
  if (cellProperties[META_COMMENT] && cellProperties[META_COMMENT][META_COMMENT_VALUE]) {
    addClass(TD, cellProperties.commentedCellClassName);
  }
}
function _onEditorBlur() {
  _classPrivateFieldSet6(_commentValueBeforeSave, this, "");
  this.hot.getShortcutManager().setActiveContextName("grid");
  this.setComment();
}
function _onEditorFocus() {
  _classPrivateFieldSet6(_commentValueBeforeSave, this, this.getComment());
  this.hot.listen();
  this.hot.getShortcutManager().setActiveContextName(SHORTCUTS_CONTEXT_NAME);
}
function _onEditorResize(width, height) {
  this.updateCommentMeta(this.range.from.row, this.range.from.col, {
    [META_STYLE]: {
      width,
      height
    }
  });
}
function _onAfterDocumentKeyDown(event) {
  if (_classPrivateFieldGet8(_editor2, this).isFocused()) {
    stopImmediatePropagation(event);
  }
}
function _onAfterScroll() {
  if (!_classPrivateFieldGet8(_preventEditorHiding, this)) {
    this.hide();
  }
}
function _updateEditorThemeClassName() {
  const editorElement = _classPrivateFieldGet8(_editor2, this).getEditorElement();
  removeClass(editorElement, /ht-theme-.*/g);
  addClass(editorElement, this.hot.getCurrentThemeName());
}

// node_modules/handsontable/plugins/contextMenu/commandExecutor.mjs
function _defineProperty18(e, r, t) {
  return (r = _toPropertyKey18(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey18(t) {
  var i = _toPrimitive18(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive18(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var CommandExecutor = class {
  constructor(hotInstance) {
    _defineProperty18(this, "hot", void 0);
    _defineProperty18(this, "commands", {});
    _defineProperty18(this, "commonCallback", null);
    this.hot = hotInstance;
  }
  /**
   * Register command.
   *
   * @param {string} name Command name.
   * @param {object} commandDescriptor Command descriptor object with properties like `key` (command id),
   *                                   `callback` (task to execute), `name` (command name), `disabled` (command availability).
   */
  registerCommand(name, commandDescriptor) {
    this.commands[name] = commandDescriptor;
  }
  /**
   * Set common callback which will be trigger on every executed command.
   *
   * @param {Function} callback Function which will be fired on every command execute.
   */
  setCommonCallback(callback) {
    this.commonCallback = callback;
  }
  /**
   * Execute command by its name.
   *
   * @param {string} commandName Command id.
   * @param {*} params Arguments passed to command task.
   */
  execute(commandName) {
    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      params[_key - 1] = arguments[_key];
    }
    const commandSplit = commandName.split(":");
    const commandNamePrimary = commandSplit[0];
    const subCommandName = commandSplit.length === 2 ? commandSplit[1] : null;
    let command = this.commands[commandNamePrimary];
    if (!command) {
      throw new Error(`Menu command '${commandNamePrimary}' not exists.`);
    }
    if (subCommandName && command.submenu) {
      command = findSubCommand(subCommandName, command.submenu.items);
    }
    if (command.disabled === true) {
      return;
    }
    if (typeof command.disabled === "function" && command.disabled.call(this.hot) === true) {
      return;
    }
    if (hasOwnProperty(command, "submenu")) {
      return;
    }
    const callbacks = [];
    if (typeof command.callback === "function") {
      callbacks.push(command.callback);
    }
    if (typeof this.commonCallback === "function") {
      callbacks.push(this.commonCallback);
    }
    params.unshift(commandSplit.join(":"));
    arrayEach(callbacks, (callback) => callback.apply(this.hot, params));
  }
};
function findSubCommand(subCommandName, subCommands) {
  let command;
  arrayEach(subCommands, (cmd) => {
    const cmds = cmd.key ? cmd.key.split(":") : null;
    if (Array.isArray(cmds) && cmds[1] === subCommandName) {
      command = cmd;
      return false;
    }
  });
  return command;
}

// node_modules/handsontable/plugins/contextMenu/itemsFactory.mjs
function _defineProperty19(e, r, t) {
  return (r = _toPropertyKey19(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey19(t) {
  var i = _toPrimitive19(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive19(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var ItemsFactory = class {
  constructor(hotInstance) {
    let orderPattern = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    _defineProperty19(this, "hot", void 0);
    _defineProperty19(this, "predefinedItems", predefinedItems());
    _defineProperty19(this, "defaultOrderPattern", void 0);
    this.hot = hotInstance;
    this.defaultOrderPattern = orderPattern;
  }
  /**
   * Set predefined items.
   *
   * @param {Array} predefinedItemsCollection Array of predefined items.
   */
  setPredefinedItems(predefinedItemsCollection) {
    const items = {};
    this.defaultOrderPattern.length = 0;
    objectEach(predefinedItemsCollection, (value, key) => {
      let menuItemKey = "";
      if (value.name === KEY) {
        items[KEY] = value;
        menuItemKey = KEY;
      } else if (isNaN(parseInt(key, 10))) {
        value.key = value.key === void 0 ? key : value.key;
        items[key] = value;
        menuItemKey = value.key;
      } else {
        items[value.key] = value;
        menuItemKey = value.key;
      }
      this.defaultOrderPattern.push(menuItemKey);
    });
    this.predefinedItems = items;
  }
  /**
   * Get all menu items based on pattern.
   *
   * @param {Array|object|boolean} pattern Pattern which you can define by displaying menu items order. If `true` default
   *                                       pattern will be used.
   * @returns {Array}
   */
  getItems() {
    let pattern = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    return getItems(pattern, this.defaultOrderPattern, this.predefinedItems);
  }
};
function getItems() {
  let itemsPattern = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
  let defaultPattern = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  let items = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  const result = [];
  let pattern = itemsPattern;
  if (pattern && pattern.items) {
    pattern = pattern.items;
  } else if (!Array.isArray(pattern)) {
    pattern = defaultPattern;
  }
  if (isObject(pattern)) {
    objectEach(pattern, (value, key) => {
      let item = items[typeof value === "string" ? value : key];
      if (!item) {
        item = value;
      }
      if (isObject(value)) {
        extend(item, value);
      } else if (typeof item === "string") {
        item = {
          name: item
        };
      }
      if (item.key === void 0) {
        item.key = key;
      }
      result.push(item);
    });
  } else {
    arrayEach(pattern, (name, key) => {
      let item = items[name];
      if (!item && ITEMS.indexOf(name) >= 0) {
        return;
      }
      if (!item) {
        item = {
          name,
          key: `${key}`
        };
      }
      if (isObject(name)) {
        extend(item, name);
      }
      if (item.key === void 0) {
        item.key = key;
      }
      result.push(item);
    });
  }
  return result;
}

// node_modules/handsontable/plugins/contextMenu/menu/cursor.mjs
function _defineProperty20(e, r, t) {
  return (r = _toPropertyKey20(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey20(t) {
  var i = _toPrimitive20(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive20(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var Cursor = class {
  constructor(object, rootWindow) {
    _defineProperty20(this, "top", void 0);
    _defineProperty20(this, "topRelative", void 0);
    _defineProperty20(this, "left", void 0);
    _defineProperty20(this, "leftRelative", void 0);
    _defineProperty20(this, "scrollTop", void 0);
    _defineProperty20(this, "scrollLeft", void 0);
    _defineProperty20(this, "cellHeight", void 0);
    _defineProperty20(this, "cellWidth", void 0);
    const windowScrollTop = rootWindow.scrollY;
    const windowScrollLeft = rootWindow.scrollX;
    let top2;
    let topRelative;
    let left2;
    let leftRelative;
    let cellHeight;
    let cellWidth;
    this.rootWindow = rootWindow;
    this.type = this.getSourceType(object);
    if (this.type === "literal") {
      top2 = parseInt(object.top, 10);
      left2 = parseInt(object.left, 10);
      cellHeight = object.height || 0;
      cellWidth = object.width || 0;
      topRelative = top2;
      leftRelative = left2;
      top2 += windowScrollTop;
      left2 += windowScrollLeft;
    } else if (this.type === "event") {
      top2 = parseInt(object.pageY, 10);
      left2 = parseInt(object.pageX, 10);
      cellHeight = object.target.clientHeight;
      cellWidth = object.target.clientWidth;
      topRelative = top2 - windowScrollTop;
      leftRelative = left2 - windowScrollLeft;
    }
    this.top = top2;
    this.topRelative = topRelative;
    this.left = left2;
    this.leftRelative = leftRelative;
    this.scrollTop = windowScrollTop;
    this.scrollLeft = windowScrollLeft;
    this.cellHeight = cellHeight;
    this.cellWidth = cellWidth;
  }
  /**
   * Get source type name.
   *
   * @param {*} object Event or Object with coordinates.
   * @returns {string} Returns one of this values: `'literal'`, `'event'`.
   */
  getSourceType(object) {
    let type = "literal";
    if (object instanceof Event) {
      type = "event";
    }
    return type;
  }
  /**
   * Checks if element can be placed above the cursor.
   *
   * @param {HTMLElement} element Element to check if it's size will fit above the cursor.
   * @returns {boolean}
   */
  fitsAbove(element) {
    return this.topRelative >= element.offsetHeight;
  }
  /**
   * Checks if element can be placed below the cursor.
   *
   * @param {HTMLElement} element Element to check if it's size will fit below the cursor.
   * @param {number} [viewportHeight] The viewport height.
   * @returns {boolean}
   */
  fitsBelow(element) {
    let viewportHeight = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.rootWindow.innerHeight;
    return this.topRelative + element.offsetHeight <= viewportHeight;
  }
  /**
   * Checks if element can be placed on the right of the cursor.
   *
   * @param {HTMLElement} element Element to check if it's size will fit on the right of the cursor.
   * @param {number} [viewportWidth] The viewport width.
   * @returns {boolean}
   */
  fitsOnRight(element) {
    let viewportWidth = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.rootWindow.innerWidth;
    return this.leftRelative + this.cellWidth + element.offsetWidth <= viewportWidth;
  }
  /**
   * Checks if element can be placed on the left on the cursor.
   *
   * @param {HTMLElement} element Element to check if it's size will fit on the left of the cursor.
   * @returns {boolean}
   */
  fitsOnLeft(element) {
    return this.leftRelative >= element.offsetWidth;
  }
};

// node_modules/handsontable/plugins/contextMenu/menu/positioner.mjs
function _classPrivateFieldInitSpec9(e, t, a) {
  _checkPrivateRedeclaration14(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration14(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldGet9(s, a) {
  return s.get(_assertClassBrand14(s, a));
}
function _classPrivateFieldSet7(s, a, r) {
  return s.set(_assertClassBrand14(s, a), r), r;
}
function _assertClassBrand14(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _container2 = /* @__PURE__ */ new WeakMap();
var _parentContainer = /* @__PURE__ */ new WeakMap();
var _cursor = /* @__PURE__ */ new WeakMap();
var _keepInViewport = /* @__PURE__ */ new WeakMap();
var _offset = /* @__PURE__ */ new WeakMap();
var Positioner = class {
  constructor(keepInViewport) {
    _classPrivateFieldInitSpec9(this, _container2, void 0);
    _classPrivateFieldInitSpec9(this, _parentContainer, void 0);
    _classPrivateFieldInitSpec9(this, _cursor, void 0);
    _classPrivateFieldInitSpec9(this, _keepInViewport, false);
    _classPrivateFieldInitSpec9(this, _offset, {
      above: 0,
      below: 0,
      left: 0,
      right: 0
    });
    _classPrivateFieldSet7(_keepInViewport, this, keepInViewport);
  }
  /**
   * Sets offset position for specified directions (`above`, `below`, `left` or `right`).
   *
   * @param {'above' | 'below' | 'left' | 'right'} direction A direction name.
   * @param {number} [offset=0] Offset value.
   * @returns {Positioner}
   */
  setOffset(direction) {
    let offset2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    _classPrivateFieldGet9(_offset, this)[direction] = offset2;
    return this;
  }
  /**
   * Sets the menu element to work with. The element can be owned by the main menu or the submenu.
   *
   * @param {HTMLElement} container The menu container element.
   * @returns {Positioner}
   */
  setElement(container) {
    _classPrivateFieldSet7(_container2, this, container);
    return this;
  }
  /**
   * Sets the parent menu element to work with.
   *
   * @param {HTMLElement} container The parent menu container element.
   * @returns {Positioner}
   */
  setParentElement(container) {
    _classPrivateFieldSet7(_parentContainer, this, container);
    return this;
  }
  /**
   * Updates the menu position.
   *
   * @param {object|MouseEvent} coords The literal object with `top`, `left`, `width` and `height` props or a
   * mouse event object.
   */
  updatePosition(coords) {
    _classPrivateFieldSet7(_cursor, this, new Cursor(coords, _classPrivateFieldGet9(_container2, this).ownerDocument.defaultView));
    if (_classPrivateFieldGet9(_keepInViewport, this)) {
      if (_classPrivateFieldGet9(_cursor, this).fitsBelow(_classPrivateFieldGet9(_container2, this))) {
        this.setPositionBelowCursor();
      } else if (_classPrivateFieldGet9(_cursor, this).fitsAbove(_classPrivateFieldGet9(_container2, this))) {
        this.setPositionAboveCursor();
      } else {
        this.setPositionBelowCursor();
      }
      this.updateHorizontalPosition();
    } else {
      this.setPositionBelowCursor();
      this.setPositionOnRightOfCursor();
    }
  }
  /**
   * Updates the menu horizontal position.
   */
  updateHorizontalPosition() {
    if (_classPrivateFieldGet9(_container2, this).dir === "rtl") {
      if (_classPrivateFieldGet9(_cursor, this).fitsOnLeft(_classPrivateFieldGet9(_container2, this))) {
        this.setPositionOnLeftOfCursor();
      } else {
        this.setPositionOnRightOfCursor();
      }
    } else if (_classPrivateFieldGet9(_cursor, this).fitsOnRight(_classPrivateFieldGet9(_container2, this))) {
      this.setPositionOnRightOfCursor();
    } else {
      this.setPositionOnLeftOfCursor();
    }
  }
  /**
   * Sets the menu position above the cursor object.
   */
  setPositionAboveCursor() {
    let top2 = _classPrivateFieldGet9(_offset, this).above + _classPrivateFieldGet9(_cursor, this).top - _classPrivateFieldGet9(_container2, this).offsetHeight;
    if (_classPrivateFieldGet9(_parentContainer, this)) {
      const rootWindow = _classPrivateFieldGet9(_parentContainer, this).ownerDocument.defaultView;
      const style = rootWindow.getComputedStyle(_classPrivateFieldGet9(_parentContainer, this).querySelector(".ht_master"));
      const paddingTop = Number.parseInt(style.paddingTop, 10);
      const borderTop = Number.parseInt(style.borderTop, 10);
      top2 = _classPrivateFieldGet9(_cursor, this).top + _classPrivateFieldGet9(_cursor, this).cellHeight - _classPrivateFieldGet9(_container2, this).scrollHeight + paddingTop + borderTop;
    }
    _classPrivateFieldGet9(_container2, this).style.top = `${top2}px`;
  }
  /**
   * Sets the menu position below the cursor object.
   */
  setPositionBelowCursor() {
    let top2 = _classPrivateFieldGet9(_offset, this).below + _classPrivateFieldGet9(_cursor, this).top + 1;
    if (_classPrivateFieldGet9(_parentContainer, this)) {
      const rootWindow = _classPrivateFieldGet9(_parentContainer, this).ownerDocument.defaultView;
      const style = rootWindow.getComputedStyle(_classPrivateFieldGet9(_parentContainer, this).querySelector(".ht_master"));
      const paddingTop = Number.parseInt(style.paddingTop, 10);
      const borderTop = Number.parseInt(style.borderTop, 10);
      top2 = _classPrivateFieldGet9(_cursor, this).top - paddingTop - borderTop - 1;
    }
    _classPrivateFieldGet9(_container2, this).style.top = `${top2}px`;
  }
  /**
   * Sets the menu position on the right of the cursor object.
   */
  setPositionOnRightOfCursor() {
    let left2 = _classPrivateFieldGet9(_cursor, this).left;
    if (_classPrivateFieldGet9(_parentContainer, this)) {
      const rootWindow = _classPrivateFieldGet9(_parentContainer, this).ownerDocument.defaultView;
      const borderRightWidth = Number.parseInt(rootWindow.getComputedStyle(_classPrivateFieldGet9(_parentContainer, this).querySelector(".htCore")).borderRightWidth, 10);
      left2 += _classPrivateFieldGet9(_cursor, this).cellWidth + borderRightWidth;
    } else {
      left2 += _classPrivateFieldGet9(_offset, this).right;
    }
    _classPrivateFieldGet9(_container2, this).style.left = `${left2}px`;
  }
  /**
   * Sets the menu position on the left of the cursor object.
   */
  setPositionOnLeftOfCursor() {
    let left2 = _classPrivateFieldGet9(_offset, this).left + _classPrivateFieldGet9(_cursor, this).left - _classPrivateFieldGet9(_container2, this).offsetWidth;
    if (_classPrivateFieldGet9(_parentContainer, this)) {
      const rootWindow = _classPrivateFieldGet9(_parentContainer, this).ownerDocument.defaultView;
      const borderLeftWidth = Number.parseInt(rootWindow.getComputedStyle(_classPrivateFieldGet9(_parentContainer, this).querySelector(".htCore")).borderLeftWidth, 10);
      left2 -= borderLeftWidth;
    }
    _classPrivateFieldGet9(_container2, this).style.left = `${left2}px`;
  }
};

// node_modules/handsontable/utils/paginator.mjs
function createPaginator(_ref) {
  let {
    initialPage = -1,
    size = () => 0,
    onItemSelect = () => {
    },
    onClear = () => {
    }
  } = _ref;
  const visitedPages = /* @__PURE__ */ new Set();
  let currentIndex = clamp(initialPage, -1, getSize() - 1);
  function _updateState(newIndex, direction) {
    const lastIndex = getSize() - 1;
    if (newIndex < 0) {
      newIndex = lastIndex;
    }
    if (newIndex > lastIndex) {
      newIndex = 0;
    }
    if (visitedPages.has(newIndex)) {
      return -1;
    }
    visitedPages.add(newIndex);
    const changeProceed = onItemSelect(newIndex, false);
    if (changeProceed === false) {
      newIndex = _updateState(
        direction === 1 ? ++newIndex : --newIndex,
        // eslint-disable-line no-plusplus
        direction
      );
    }
    return newIndex;
  }
  function setCurrentPage(index) {
    if (index > -1 && index < getSize() && onItemSelect(index, true) !== false) {
      currentIndex = index;
    }
  }
  function getCurrentPage() {
    return currentIndex;
  }
  function toFirstItem() {
    if (getSize() > 0) {
      visitedPages.clear();
      currentIndex = _updateState(0, 1);
    }
  }
  function toLastItem() {
    if (getSize() > 0) {
      visitedPages.clear();
      currentIndex = _updateState(getSize() - 1, -1);
    }
  }
  function toNextItem() {
    if (getSize() > 0) {
      visitedPages.clear();
      currentIndex = _updateState(++currentIndex, 1);
    }
  }
  function toPreviousItem() {
    if (getSize() > 0) {
      visitedPages.clear();
      currentIndex = _updateState(--currentIndex, -1);
    }
  }
  function getSize() {
    return Math.max(size(), 0);
  }
  function clear() {
    visitedPages.clear();
    currentIndex = initialPage;
    onClear();
  }
  return {
    setCurrentPage,
    getCurrentPage,
    toFirstItem,
    toLastItem,
    toNextItem,
    toPreviousItem,
    getSize,
    clear
  };
}

// node_modules/handsontable/plugins/contextMenu/menu/utils.mjs
function normalizeSelection(selRanges) {
  return arrayMap(selRanges, (range) => ({
    start: range.getTopStartCorner(),
    end: range.getBottomEndCorner()
  }));
}
function isItemSubMenu(itemToTest) {
  return hasOwnProperty(itemToTest, "submenu");
}
function isItemSeparator(itemToTest) {
  return new RegExp(KEY, "i").test(itemToTest.name);
}
function isItemDisabled(itemToTest, hot) {
  return itemToTest.disabled === true || typeof itemToTest.disabled === "function" && itemToTest.disabled.call(hot) === true;
}
function isItemSelectionDisabled(itemToTest) {
  return hasOwnProperty(itemToTest, "disableSelection");
}
function isSeparator(cell) {
  return hasClass(cell, "htSeparator");
}
function hasSubMenu(cell) {
  return hasClass(cell, "htSubmenu");
}
function isDisabled(cell) {
  return hasClass(cell, "htDisabled");
}
function isSelectionDisabled(cell) {
  return hasClass(cell, "htSelectionDisabled");
}
function isItemHidden(item, instance) {
  return !item.hidden || !(typeof item.hidden === "function" && item.hidden.call(instance));
}
function shiftSeparators(items, separator) {
  const result = items.slice(0);
  for (let i = 0; i < result.length; ) {
    if (result[i].name === separator) {
      result.shift();
    } else {
      break;
    }
  }
  return result;
}
function popSeparators(items, separator) {
  let result = items.slice(0);
  result.reverse();
  result = shiftSeparators(result, separator);
  result.reverse();
  return result;
}
function removeDuplicatedSeparators(items) {
  const result = [];
  arrayEach(items, (value, index) => {
    if (index > 0) {
      if (result[result.length - 1].name !== value.name) {
        result.push(value);
      }
    } else {
      result.push(value);
    }
  });
  return result;
}
function filterSeparators(items) {
  let separator = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : KEY;
  let result = items.slice(0);
  result = shiftSeparators(result, separator);
  result = popSeparators(result, separator);
  result = removeDuplicatedSeparators(result);
  return result;
}
function isItemCheckable(itemToTest) {
  return itemToTest.checkable === true;
}

// node_modules/handsontable/plugins/contextMenu/menu/navigator.mjs
function createMenuNavigator(hotMenu) {
  return createPaginator({
    size: () => hotMenu.countRows(),
    onItemSelect(currentItem, directItemChange) {
      const cell = hotMenu.getCell(currentItem, 0);
      if (!cell || isSeparator(cell) || isDisabled(cell) || isSelectionDisabled(cell)) {
        return false;
      }
      hotMenu.selectCell(currentItem, 0, ...directItemChange ? [currentItem, 0, false, false] : []);
    },
    onClear() {
      hotMenu.deselectCell();
    }
  });
}

// node_modules/handsontable/plugins/contextMenu/menu/defaultShortcutsList.mjs
function createDefaultShortcutsList(menu) {
  const {
    hot,
    hotMenu
  } = menu;
  return [{
    keys: [["Control/Meta", "A"]],
    forwardToContext: hot.getShortcutManager().getContext("grid"),
    callback: () => menu.close(true)
  }, {
    keys: [["Tab"], ["Shift", "Tab"]],
    callback: (event, keys) => {
      const settings = hot.getSettings();
      const tabMoves = typeof settings.tabMoves === "function" ? settings.tabMoves(event) : settings.tabMoves;
      if (keys.includes("shift")) {
        hot.selection.transformStart(-tabMoves.row, -tabMoves.col);
      } else {
        hot.selection.transformStart(tabMoves.row, tabMoves.col);
      }
      menu.close(true);
    }
  }, {
    keys: [["Escape"]],
    callback: () => menu.close()
  }, {
    keys: [["ArrowDown"]],
    callback: () => menu.getNavigator().toNextItem()
  }, {
    keys: [["ArrowUp"]],
    callback: () => menu.getNavigator().toPreviousItem()
  }, {
    keys: [[hot.isRtl() ? "ArrowLeft" : "ArrowRight"]],
    callback: () => {
      const selection = hotMenu.getSelectedLast();
      if (selection) {
        const subMenu = menu.openSubMenu(selection[0]);
        if (subMenu) {
          subMenu.getNavigator().toFirstItem();
        }
      }
    }
  }, {
    keys: [[hot.isRtl() ? "ArrowRight" : "ArrowLeft"]],
    callback: () => {
      const selection = hotMenu.getSelectedLast();
      if (selection && menu.isSubMenu()) {
        menu.close();
        if (menu.isSubMenu()) {
          menu.parentMenu.hotMenu.listen();
        }
      }
    }
  }, {
    keys: [["Control/Meta", "ArrowUp"], ["Home"]],
    callback: () => menu.getNavigator().toFirstItem()
  }, {
    keys: [["Control/Meta", "ArrowDown"], ["End"]],
    callback: () => menu.getNavigator().toLastItem()
  }, {
    keys: [["Enter"], ["Space"]],
    callback: (event) => {
      const selection = hotMenu.getSelectedLast();
      if (!selection) {
        return;
      }
      if (hotMenu.getSourceDataAtRow(selection[0]).submenu) {
        menu.openSubMenu(selection[0]).getNavigator().toFirstItem();
      } else {
        menu.executeCommand(event);
        menu.close(true);
      }
    }
  }, {
    keys: [["PageUp"]],
    callback: () => {
      const selection = hotMenu.getSelectedLast();
      if (selection) {
        hotMenu.selection.transformStart(-hotMenu.countVisibleRows(), 0);
      } else {
        menu.getNavigator().toFirstItem();
      }
    }
  }, {
    keys: [["PageDown"]],
    callback: () => {
      const selection = hotMenu.getSelectedLast();
      if (selection) {
        hotMenu.selection.transformStart(hotMenu.countVisibleRows(), 0);
      } else {
        menu.getNavigator().toLastItem();
      }
    }
  }];
}

// node_modules/handsontable/plugins/contextMenu/menu/shortcuts.mjs
var SHORTCUTS_CONTEXT = "menu";
var SHORTCUTS_GROUP7 = SHORTCUTS_CONTEXT;
function createKeyboardShortcutsCtrl(menu) {
  let customKeyboardShortcuts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  const customShortcuts = [];
  _addShortcuts(createDefaultShortcutsList(menu));
  customKeyboardShortcuts.forEach((_ref) => {
    let {
      shortcuts,
      contextName
    } = _ref;
    addCustomShortcuts(shortcuts, contextName);
  });
  function _addShortcuts(shortcuts, contextName) {
    getContext(contextName).addShortcuts(shortcuts, {
      group: SHORTCUTS_CONTEXT
    });
  }
  function addCustomShortcuts(shortcuts, contextName) {
    const context = getContext(contextName);
    shortcuts.forEach((_ref2) => {
      let {
        keys
      } = _ref2;
      keys.forEach((k) => context.removeShortcutsByKeys(k));
    });
    customShortcuts.push({
      shortcuts,
      contextName
    });
    _addShortcuts(shortcuts, contextName);
  }
  function getCustomShortcuts() {
    return [...customShortcuts];
  }
  function _getContextName(contextName) {
    return contextName ? `${SHORTCUTS_GROUP7}:${contextName}` : SHORTCUTS_GROUP7;
  }
  function getContext(contextName) {
    var _manager$getContext;
    const manager = menu.hotMenu.getShortcutManager();
    const name = _getContextName(contextName);
    return (_manager$getContext = manager.getContext(name)) !== null && _manager$getContext !== void 0 ? _manager$getContext : manager.addContext(name);
  }
  function listen(contextName) {
    menu.hotMenu.getShortcutManager().setActiveContextName(_getContextName(contextName));
  }
  return {
    addCustomShortcuts,
    getCustomShortcuts,
    getContext,
    listen
  };
}

// node_modules/handsontable/plugins/contextMenu/menu/menuItemRenderer.mjs
function createMenuItemRenderer(mainTableHot) {
  return (menuHot, TD, row, col, prop, value) => {
    const item = menuHot.getSourceDataAtRow(row);
    const wrapper = mainTableHot.rootDocument.createElement("div");
    const itemValue = typeof value === "function" ? value.call(mainTableHot) : value;
    const ariaLabel = typeof item.ariaLabel === "function" ? item.ariaLabel.call(mainTableHot) : item.ariaLabel;
    const ariaChecked = typeof item.ariaChecked === "function" ? item.ariaChecked.call(mainTableHot) : item.ariaChecked;
    empty(TD);
    addClass(wrapper, "htItemWrapper");
    if (mainTableHot.getSettings().ariaTags) {
      const isFocusable = !isItemDisabled(item, mainTableHot) && !isItemSelectionDisabled(item) && !isItemSeparator(item);
      setAttribute(TD, [...isItemCheckable(item) ? [A11Y_MENU_ITEM_CHECKBOX(), A11Y_LABEL(ariaLabel), A11Y_CHECKED(ariaChecked)] : [A11Y_MENU_ITEM(), A11Y_LABEL(itemValue)], ...isFocusable ? [A11Y_TABINDEX(-1)] : [], ...isItemDisabled(item, mainTableHot) ? [A11Y_DISABLED()] : [], ...isItemSubMenu(item) ? [A11Y_EXPANDED(false)] : []]);
    }
    TD.className = "";
    TD.appendChild(wrapper);
    if (isItemSeparator(item)) {
      addClass(TD, "htSeparator");
    } else if (typeof item.renderer === "function") {
      addClass(TD, "htCustomMenuRenderer");
      TD.appendChild(item.renderer(menuHot, wrapper, row, col, prop, itemValue));
    } else {
      fastInnerHTML(wrapper, itemValue);
    }
    if (isItemDisabled(item, mainTableHot)) {
      addClass(TD, "htDisabled");
    } else if (isItemSelectionDisabled(item)) {
      addClass(TD, "htSelectionDisabled");
    } else if (isItemSubMenu(item)) {
      addClass(TD, "htSubmenu");
    }
  };
}

// node_modules/handsontable/plugins/contextMenu/menu/menu.mjs
function _classPrivateFieldInitSpec10(e, t, a) {
  _checkPrivateRedeclaration15(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration15(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty21(e, r, t) {
  return (r = _toPropertyKey21(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey21(t) {
  var i = _toPrimitive21(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive21(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _classPrivateFieldSet8(s, a, r) {
  return s.set(_assertClassBrand15(s, a), r), r;
}
function _classPrivateFieldGet10(s, a) {
  return s.get(_assertClassBrand15(s, a));
}
function _assertClassBrand15(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var MIN_WIDTH = 215;
var _navigator = /* @__PURE__ */ new WeakMap();
var _shortcutsCtrl = /* @__PURE__ */ new WeakMap();
var _tableBorderWidth = /* @__PURE__ */ new WeakMap();
var Menu = class _Menu {
  /**
   * Getter for the table border width.
   * This getter retrieves the border width of the table used in the menu.
   *
   * @returns {number} The border width of the table in pixels.
   */
  get tableBorderWidth() {
    if (_classPrivateFieldGet10(_tableBorderWidth, this) === void 0 && this.hotMenu) {
      _classPrivateFieldSet8(_tableBorderWidth, this, parseInt(this.hotMenu.rootWindow.getComputedStyle(this.hotMenu.view._wt.wtTable.TABLE).borderWidth, 10));
    }
    return _classPrivateFieldGet10(_tableBorderWidth, this);
  }
  /**
   * @param {Core} hotInstance Handsontable instance.
   * @param {MenuOptions} [options] Menu options.
   */
  constructor(hotInstance, options) {
    var _this = this;
    _defineProperty21(this, "hot", void 0);
    _defineProperty21(this, "options", void 0);
    _defineProperty21(this, "eventManager", new eventManager_default(this));
    _defineProperty21(this, "container", void 0);
    _defineProperty21(this, "positioner", void 0);
    _defineProperty21(this, "hotMenu", null);
    _defineProperty21(this, "hotSubMenus", {});
    _defineProperty21(this, "parentMenu", void 0);
    _defineProperty21(this, "menuItems", null);
    _defineProperty21(this, "origOutsideClickDeselects", null);
    _classPrivateFieldInitSpec10(this, _navigator, void 0);
    _classPrivateFieldInitSpec10(this, _shortcutsCtrl, void 0);
    _classPrivateFieldInitSpec10(this, _tableBorderWidth, void 0);
    this.hot = hotInstance;
    this.options = options || {
      parent: null,
      name: null,
      className: "",
      keepInViewport: true,
      standalone: false,
      minWidth: MIN_WIDTH,
      container: this.hot.rootDocument.documentElement
    };
    this.container = this.createContainer(this.options.name);
    this.positioner = new Positioner(this.options.keepInViewport);
    this.parentMenu = this.options.parent || null;
    this.registerEvents();
    if (this.isSubMenu()) {
      this.addLocalHook("afterSelectionChange", function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _this.parentMenu.runLocalHooks("afterSelectionChange", ...args);
      });
    }
    this.hot.addHook("afterSetTheme", (themeName, firstRun) => {
      if (!firstRun) {
        var _this$hotMenu;
        (_this$hotMenu = this.hotMenu) === null || _this$hotMenu === void 0 || _this$hotMenu.useTheme(themeName);
      }
    });
  }
  /**
   * Register event listeners.
   *
   * @private
   */
  registerEvents() {
    let frame = this.hot.rootWindow;
    while (frame) {
      this.eventManager.addEventListener(frame.document, "mousedown", (event) => this.onDocumentMouseDown(event));
      this.eventManager.addEventListener(frame.document, "touchstart", (event) => this.onDocumentMouseDown(event));
      this.eventManager.addEventListener(frame.document, "contextmenu", (event) => this.onDocumentContextMenu(event));
      frame = getParentWindow(frame);
    }
  }
  /**
   * Set array of objects which defines menu items.
   *
   * @param {Array} menuItems Menu items to display.
   */
  setMenuItems(menuItems) {
    this.menuItems = menuItems;
  }
  /**
   * Gets the controller object that allows modifying the the menu item selection.
   *
   * @returns {Paginator | undefined}
   */
  getNavigator() {
    return _classPrivateFieldGet10(_navigator, this);
  }
  /**
   * Gets the controller object that allows extending the keyboard shortcuts of the menu.
   *
   * @returns {KeyboardShortcutsMenuController | undefined}
   */
  getKeyboardShortcutsCtrl() {
    return _classPrivateFieldGet10(_shortcutsCtrl, this);
  }
  /**
   * Returns currently selected menu item. Returns `null` if no item was selected.
   *
   * @returns {object|null}
   */
  getSelectedItem() {
    return this.hasSelectedItem() ? this.hotMenu.getSourceDataAtRow(this.hotMenu.getSelectedLast()[0]) : null;
  }
  /**
   * Checks if the menu has selected (highlighted) any item from the menu list.
   *
   * @returns {boolean}
   */
  hasSelectedItem() {
    return Array.isArray(this.hotMenu.getSelectedLast());
  }
  /**
   * Check if menu is using as sub-menu.
   *
   * @returns {boolean}
   */
  isSubMenu() {
    return this.parentMenu !== null;
  }
  /**
   * Open menu.
   *
   * @fires Hooks#beforeContextMenuShow
   * @fires Hooks#afterContextMenuShow
   */
  open() {
    this.runLocalHooks("beforeOpen");
    this.container.removeAttribute("style");
    this.container.style.display = "block";
    const delayedOpenSubMenu = debounce((row) => this.openSubMenu(row), 300);
    const minWidthOfMenu = this.options.minWidth || MIN_WIDTH;
    let noItemsDefined = false;
    let filteredItems = arrayFilter(this.menuItems, (item) => {
      if (item.key === KEY12) {
        noItemsDefined = true;
      }
      return isItemHidden(item, this.hot);
    });
    if (filteredItems.length < 1 && !noItemsDefined) {
      filteredItems.push(predefinedItems()[KEY12]);
    } else if (filteredItems.length === 0) {
      return;
    }
    filteredItems = filterSeparators(filteredItems, KEY);
    let shouldAutoCloseMenu = false;
    const settings = {
      data: filteredItems,
      colHeaders: false,
      autoColumnSize: true,
      autoWrapRow: false,
      modifyColWidth(width) {
        if (isDefined(width) && width < minWidthOfMenu) {
          return minWidthOfMenu;
        }
        return width;
      },
      autoRowSize: false,
      readOnly: true,
      editor: false,
      copyPaste: false,
      hiddenRows: true,
      maxCols: 1,
      columns: [{
        data: "name",
        renderer: createMenuItemRenderer(this.hot)
      }],
      renderAllRows: true,
      fragmentSelection: false,
      outsideClickDeselects: false,
      disableVisualSelection: "area",
      layoutDirection: this.hot.isRtl() ? "rtl" : "ltr",
      ariaTags: false,
      themeName: this.hot.getCurrentThemeName(),
      beforeRefreshDimensions: () => false,
      beforeOnCellMouseOver: (event, coords) => {
        _classPrivateFieldGet10(_navigator, this).setCurrentPage(coords.row);
      },
      afterOnCellMouseOver: (event, coords) => {
        if (this.isAllSubMenusClosed()) {
          delayedOpenSubMenu(coords.row);
        } else {
          this.openSubMenu(coords.row);
        }
      },
      afterOnCellContextMenu: (event) => {
        event.preventDefault();
        if (isWindowsOS() && shouldAutoCloseMenu && this.hasSelectedItem()) {
          this.close(true);
        }
      },
      afterSelection: (row, column, row2, column2, preventScrolling) => {
        if (this.hotMenu.view.isMouseDown()) {
          preventScrolling.value = true;
        }
        this.runLocalHooks("afterSelectionChange", this.getSelectedItem());
      },
      beforeOnCellMouseUp: (event) => {
        if (this.hasSelectedItem()) {
          shouldAutoCloseMenu = !this.isCommandPassive(this.getSelectedItem());
          this.executeCommand(event);
        }
      },
      afterOnCellMouseUp: (event) => {
        if ((!isWindowsOS() || !isRightClick(event)) && shouldAutoCloseMenu && this.hasSelectedItem()) {
          if (isMobileBrowser() || isIpadOS()) {
            this.hot._registerTimeout(() => this.close(true), 325);
          } else {
            this.close(true);
          }
        }
      },
      afterUnlisten: () => {
        if (!this.hasSelectedItem() && this.isOpened()) {
          this.hotMenu.listen();
        }
      }
    };
    this.origOutsideClickDeselects = this.hot.getSettings().outsideClickDeselects;
    this.hot.getSettings().outsideClickDeselects = false;
    this.hotMenu = new this.hot.constructor(this.container, settings);
    this.hotMenu.addHook("afterInit", () => this.onAfterInit());
    this.hotMenu.init();
    _classPrivateFieldSet8(_navigator, this, createMenuNavigator(this.hotMenu));
    _classPrivateFieldSet8(_shortcutsCtrl, this, createKeyboardShortcutsCtrl(this));
    _classPrivateFieldGet10(_shortcutsCtrl, this).listen();
    this.focus();
    if (this.isSubMenu()) {
      this.addLocalHook("afterOpen", () => this.parentMenu.runLocalHooks("afterSubmenuOpen", this));
    }
    this.runLocalHooks("afterOpen", this);
  }
  /**
   * Close menu.
   *
   * @param {boolean} [closeParent=false] If `true` try to close parent menu if exists.
   */
  close() {
    let closeParent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    if (!this.isOpened()) {
      return;
    }
    if (closeParent && this.isSubMenu()) {
      this.parentMenu.close();
    } else {
      _classPrivateFieldGet10(_navigator, this).clear();
      this.closeAllSubMenus();
      this.container.style.display = "none";
      this.hotMenu.destroy();
      this.hotMenu = null;
      this.hot.getSettings().outsideClickDeselects = this.origOutsideClickDeselects;
      this.runLocalHooks("afterClose");
      if (this.isSubMenu()) {
        if (this.hot.getSettings().ariaTags) {
          const selection = this.parentMenu.hotMenu.getSelectedLast();
          if (selection) {
            const cell = this.parentMenu.hotMenu.getCell(selection[0], 0);
            setAttribute(cell, [A11Y_EXPANDED(false)]);
          }
        }
        this.parentMenu.hotMenu.listen();
      }
    }
  }
  /**
   * Open sub menu at the provided row index.
   *
   * @param {number} row Row index.
   * @returns {Menu|boolean} Returns created menu or `false` if no one menu was created.
   */
  openSubMenu(row) {
    if (!this.hotMenu) {
      return false;
    }
    const cell = this.hotMenu.getCell(row, 0);
    this.closeAllSubMenus();
    if (!cell || !hasSubMenu(cell)) {
      return false;
    }
    const dataItem = this.hotMenu.getSourceDataAtRow(row);
    const subMenu = new _Menu(this.hot, {
      parent: this,
      name: dataItem.name,
      className: this.options.className,
      keepInViewport: true,
      container: this.options.container
    });
    subMenu.setMenuItems(dataItem.submenu.items);
    subMenu.open();
    subMenu.setPosition(cell.getBoundingClientRect());
    this.hotSubMenus[dataItem.key] = subMenu;
    if (this.hot.getSettings().ariaTags) {
      setAttribute(cell, [A11Y_EXPANDED(true)]);
    }
    return subMenu;
  }
  /**
   * Close sub menu at row index.
   *
   * @param {number} row Row index.
   */
  closeSubMenu(row) {
    const dataItem = this.hotMenu.getSourceDataAtRow(row);
    const menus = this.hotSubMenus[dataItem.key];
    if (menus) {
      menus.destroy();
      delete this.hotSubMenus[dataItem.key];
      const cell = this.hotMenu.getCell(row, 0);
      if (this.hot.getSettings().ariaTags) {
        setAttribute(cell, [A11Y_EXPANDED(false)]);
      }
    }
  }
  /**
   * Close all opened sub menus.
   */
  closeAllSubMenus() {
    arrayEach(this.hotMenu.getData(), (value, row) => this.closeSubMenu(row));
  }
  /**
   * Checks if all created and opened sub menus are closed.
   *
   * @returns {boolean}
   */
  isAllSubMenusClosed() {
    return Object.keys(this.hotSubMenus).length === 0;
  }
  /**
   * Focus the menu so all keyboard shortcuts become active.
   */
  focus() {
    if (this.isOpened()) {
      this.hotMenu.rootElement.focus({
        preventScroll: true
      });
      this.getKeyboardShortcutsCtrl().listen();
      this.hotMenu.listen();
    }
  }
  /**
   * Destroy instance.
   */
  destroy() {
    const menuContainerParentElement = this.container.parentNode;
    this.clearLocalHooks();
    this.close();
    this.parentMenu = null;
    this.eventManager.destroy();
    if (menuContainerParentElement) {
      menuContainerParentElement.removeChild(this.container);
    }
  }
  /**
   * Checks if menu was opened.
   *
   * @returns {boolean} Returns `true` if menu was opened.
   */
  isOpened() {
    return this.hotMenu !== null;
  }
  /**
   * Execute menu command.
   *
   * The `executeCommand()` method works only for selected cells.
   *
   * When no cells are selected, `executeCommand()` doesn't do anything.
   *
   * @param {Event} [event] The mouse event object.
   */
  executeCommand(event) {
    if (!this.isOpened() || !this.hasSelectedItem()) {
      return;
    }
    const selectedItem = this.getSelectedItem();
    this.runLocalHooks("select", selectedItem, event);
    if (this.isCommandPassive(selectedItem)) {
      return;
    }
    const selRanges = this.hot.getSelectedRange();
    const normalizedSelection = selRanges ? normalizeSelection(selRanges) : [];
    this.runLocalHooks("executeCommand", selectedItem.key, normalizedSelection, event);
    if (this.isSubMenu()) {
      this.parentMenu.runLocalHooks("executeCommand", selectedItem.key, normalizedSelection, event);
    }
  }
  /**
   * Checks if the passed command is passive or not. The command is passive when it's marked as
   * disabled, the descriptor object contains `isCommand` property set to `false`, command
   * is a separator, or the item is recognized as submenu. For passive items the menu is not
   * closed automatically after the user trigger the command through the UI.
   *
   * @param {object} commandDescriptor Selected menu item from the menu data source.
   * @returns {boolean}
   */
  isCommandPassive(commandDescriptor) {
    return commandDescriptor.isCommand === false || isItemSeparator(commandDescriptor) || isItemDisabled(commandDescriptor, this.hot) || isItemSubMenu(commandDescriptor);
  }
  /**
   * Set offset menu position for specified area (`above`, `below`, `left` or `right`).
   *
   * @param {string} area Specified area name (`above`, `below`, `left` or `right`).
   * @param {number} offset Offset value.
   */
  setOffset(area) {
    let offset2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    this.positioner.setOffset(area, offset2);
  }
  /**
   * Set menu position based on dom event or based on literal object.
   *
   * @param {Event|object} coords Event or literal Object with coordinates.
   */
  setPosition(coords) {
    if (this.isSubMenu()) {
      this.positioner.setParentElement(this.parentMenu.container);
    }
    this.positioner.setElement(this.container).updatePosition(coords);
  }
  /**
   * Updates the dimensions of the menu based on its content.
   * This method calculates the real height of the menu by summing up the heights of its items,
   * and adjusts the width and height of the menu's holder and hider elements accordingly.
   */
  updateMenuDimensions() {
    const stylesHandler = this.hotMenu.view.getStylesHandler();
    const {
      wtTable
    } = this.hotMenu.view._wt;
    const data = this.hotMenu.getSettings().data;
    const hiderStyle = wtTable.hider.style;
    const holderStyle = wtTable.holder.style;
    const currentHiderWidth = parseInt(hiderStyle.width, 10);
    const realHeight = arrayReduce(data, (accumulator, value, index) => {
      const itemCell = this.hotMenu.getCell(index, 0);
      const currentRowHeight = itemCell ? outerHeight(this.hotMenu.getCell(index, 0)) : 0;
      return accumulator + (value.name === KEY ? 1 : currentRowHeight);
    }, 0);
    if (stylesHandler.isClassicTheme()) {
      holderStyle.width = `${currentHiderWidth + 3}px`;
      holderStyle.height = `${realHeight + 3}px`;
    } else {
      holderStyle.width = `${currentHiderWidth}px`;
      holderStyle.height = `${realHeight}px`;
    }
    hiderStyle.height = holderStyle.height;
  }
  /**
   * Create container/wrapper for handsontable.
   *
   * @private
   * @param {string} [name] Class name.
   * @returns {HTMLElement}
   */
  createContainer() {
    let name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    const doc = this.options.container.ownerDocument;
    let className = name;
    let container;
    if (className) {
      if (isFunction(className)) {
        className = className.call(this.hot);
        if (className === null || isUndefined(className)) {
          className = "";
        } else {
          className = className.toString();
        }
      }
      className = className.replace(/[^A-Za-z0-9]/g, "_");
      className = `${this.options.className}Sub_${className}`;
      container = doc.querySelector(`.${this.options.className}.${className}`);
    }
    if (!container) {
      container = doc.createElement("div");
      addClass(container, `htMenu handsontable ${this.options.className}`);
      if (className) {
        addClass(container, className);
      }
      this.options.container.appendChild(container);
    }
    return container;
  }
  /**
   * On after init listener.
   *
   * @private
   */
  onAfterInit() {
    this.updateMenuDimensions();
    if (this.hot.getSettings().ariaTags) {
      setAttribute(this.hotMenu.rootElement, [A11Y_MENU(), A11Y_TABINDEX(-1)]);
    }
  }
  /**
   * Document mouse down listener.
   *
   * @private
   * @param {Event} event The mouse event object.
   */
  onDocumentMouseDown(event) {
    if (!this.isOpened()) {
      return;
    }
    if (this.options.standalone && this.hotMenu && !isChildOf(event.target, this.hotMenu.rootElement)) {
      this.close(true);
    } else if ((this.isAllSubMenusClosed() || this.isSubMenu()) && !isChildOf(event.target, ".htMenu")) {
      this.close(true);
    }
  }
  /**
   * Document's contextmenu listener.
   *
   * @private
   * @param {MouseEvent} event The mouse event object.
   */
  onDocumentContextMenu(event) {
    if (!this.isOpened()) {
      return;
    }
    if (hasClass(event.target, "htCore") && isChildOf(event.target, this.hotMenu.rootElement)) {
      event.preventDefault();
    }
  }
};
mixin(Menu, localHooks_default);

// node_modules/handsontable/plugins/contextMenu/contextMenu.mjs
function _classPrivateMethodInitSpec13(e, a) {
  _checkPrivateRedeclaration16(e, a), a.add(e);
}
function _checkPrivateRedeclaration16(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty22(e, r, t) {
  return (r = _toPropertyKey22(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey22(t) {
  var i = _toPrimitive22(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive22(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _assertClassBrand16(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var PLUGIN_KEY10 = "contextMenu";
var PLUGIN_PRIORITY9 = 70;
var SHORTCUTS_GROUP8 = PLUGIN_KEY10;
Hooks.getSingleton().register("afterContextMenuDefaultOptions");
Hooks.getSingleton().register("beforeContextMenuShow");
Hooks.getSingleton().register("afterContextMenuShow");
Hooks.getSingleton().register("afterContextMenuHide");
Hooks.getSingleton().register("afterContextMenuExecute");
var _ContextMenu_brand = /* @__PURE__ */ new WeakSet();
var ContextMenu = class _ContextMenu extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec13(this, _ContextMenu_brand);
    _defineProperty22(this, "commandExecutor", new CommandExecutor(this.hot));
    _defineProperty22(this, "itemsFactory", null);
    _defineProperty22(this, "menu", null);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY10;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY9;
  }
  static get PLUGIN_DEPS() {
    return ["plugin:AutoColumnSize"];
  }
  /**
   * Context menu default items order when `contextMenu` options is set as `true`.
   *
   * @returns {string[]}
   */
  static get DEFAULT_ITEMS() {
    return [KEY10, KEY11, KEY, KEY4, KEY5, KEY, KEY9, KEY8, KEY, KEY13, KEY7, KEY, KEY6, KEY, KEY2];
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ContextMenu#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[PLUGIN_KEY10];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _this = this;
    if (this.enabled) {
      return;
    }
    const settings = this.hot.getSettings()[PLUGIN_KEY10];
    if (typeof settings.callback === "function") {
      this.commandExecutor.setCommonCallback(settings.callback);
    }
    this.menu = new Menu(this.hot, {
      className: "htContextMenu",
      keepInViewport: true,
      container: settings.uiContainer || this.hot.rootDocument.body
    });
    this.menu.addLocalHook("beforeOpen", () => _assertClassBrand16(_ContextMenu_brand, this, _onMenuBeforeOpen).call(this));
    this.menu.addLocalHook("afterOpen", () => _assertClassBrand16(_ContextMenu_brand, this, _onMenuAfterOpen).call(this));
    this.menu.addLocalHook("afterClose", () => _assertClassBrand16(_ContextMenu_brand, this, _onMenuAfterClose).call(this));
    this.menu.addLocalHook("executeCommand", function() {
      for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
        params[_key] = arguments[_key];
      }
      return _this.executeCommand.call(_this, ...params);
    });
    this.addHook("afterOnCellContextMenu", (event) => _assertClassBrand16(_ContextMenu_brand, this, _onAfterOnCellContextMenu).call(this, event));
    this.registerShortcuts();
    super.enablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`contextMenu`](@/api/options.md#contextmenu)
   */
  updatePlugin() {
    this.disablePlugin();
    this.enablePlugin();
    super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.close();
    if (this.menu) {
      this.menu.destroy();
      this.menu = null;
    }
    this.unregisterShortcuts();
    super.disablePlugin();
  }
  /**
   * Register shortcuts responsible for toggling context menu.
   *
   * @private
   */
  registerShortcuts() {
    this.hot.getShortcutManager().getContext("grid").addShortcut({
      keys: [["Control/Meta", "Shift", "Backslash"], ["Shift", "F10"]],
      callback: () => {
        const {
          highlight
        } = this.hot.getSelectedRangeLast();
        this.hot.scrollToFocusedCell();
        const rect = this.hot.getCell(highlight.row, highlight.col, true).getBoundingClientRect();
        const offset2 = getDocumentOffsetByElement(this.menu.container, this.hot.rootDocument);
        this.open({
          left: rect.left + offset2.left,
          top: rect.top + offset2.top - 1 + rect.height
        }, {
          left: rect.width,
          above: -rect.height
        });
        this.menu.getNavigator().toFirstItem();
      },
      runOnlyIf: () => {
        var _this$hot$getSelected;
        const highlight = (_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight;
        return highlight && this.hot.selection.isCellVisible(highlight) && !this.menu.isOpened();
      },
      group: SHORTCUTS_GROUP8
    });
  }
  /**
   * Unregister shortcuts responsible for toggling context menu.
   *
   * @private
   */
  unregisterShortcuts() {
    this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(SHORTCUTS_GROUP8);
  }
  /**
   * Opens menu and re-position it based on the passed coordinates.
   *
   * @param {{ top: number, left: number }|Event} position An object with `top` and `left` properties
   * which contains coordinates relative to the browsers viewport (without included scroll offsets).
   * Or if the native event is passed the menu will be positioned based on the `pageX` and `pageY`
   * coordinates.
   * @param {{ above: number, below: number, left: number, right: number }} offset An object allows applying
   * the offset to the menu position.
   * @fires Hooks#beforeContextMenuShow
   * @fires Hooks#afterContextMenuShow
   */
  open(position) {
    var _this$menu;
    let offset2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      above: 0,
      below: 0,
      left: 0,
      right: 0
    };
    if ((_this$menu = this.menu) !== null && _this$menu !== void 0 && _this$menu.isOpened()) {
      return;
    }
    this.prepareMenuItems();
    this.menu.open();
    const themeHasTableBorder = this.menu.tableBorderWidth > 0;
    objectEach(offset2, (value, key) => {
      const valueWithoutBorder = ["below", "right"].includes(key) ? value + 1 : value - 1;
      this.menu.setOffset(key, themeHasTableBorder ? value : valueWithoutBorder);
    });
    this.menu.setPosition(position);
  }
  /**
   * Closes the menu.
   */
  close() {
    var _this$menu2;
    (_this$menu2 = this.menu) === null || _this$menu2 === void 0 || _this$menu2.close();
    this.itemsFactory = null;
  }
  /**
   * Execute context menu command.
   *
   * The `executeCommand()` method works only for selected cells.
   *
   * When no cells are selected, `executeCommand()` doesn't do anything.
   *
   * You can execute all predefined commands:
   *  * `'row_above'` - Insert row above
   *  * `'row_below'` - Insert row below
   *  * `'col_left'` - Insert column left
   *  * `'col_right'` - Insert column right
   *  * `'clear_column'` - Clear selected column
   *  * `'remove_row'` - Remove row
   *  * `'remove_col'` - Remove column
   *  * `'undo'` - Undo last action
   *  * `'redo'` - Redo last action
   *  * `'make_read_only'` - Make cell read only
   *  * `'alignment:left'` - Alignment to the left
   *  * `'alignment:top'` - Alignment to the top
   *  * `'alignment:right'` - Alignment to the right
   *  * `'alignment:bottom'` - Alignment to the bottom
   *  * `'alignment:middle'` - Alignment to the middle
   *  * `'alignment:center'` - Alignment to the center (justify).
   *
   * Or you can execute command registered in settings where `key` is your command name.
   *
   * @param {string} commandName The command name to be executed.
   * @param {*} params Additional parameters passed to command executor module.
   */
  executeCommand(commandName) {
    if (this.itemsFactory === null) {
      this.prepareMenuItems();
    }
    for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      params[_key2 - 1] = arguments[_key2];
    }
    this.commandExecutor.execute(commandName, ...params);
  }
  /**
   * Prepares available contextMenu's items list and registers them in commandExecutor.
   *
   * @private
   * @fires Hooks#afterContextMenuDefaultOptions
   * @fires Hooks#beforeContextMenuSetItems
   */
  prepareMenuItems() {
    this.itemsFactory = new ItemsFactory(this.hot, _ContextMenu.DEFAULT_ITEMS);
    const settings = this.hot.getSettings()[PLUGIN_KEY10];
    const predefinedItems2 = {
      items: this.itemsFactory.getItems(settings)
    };
    this.hot.runHooks("afterContextMenuDefaultOptions", predefinedItems2);
    this.itemsFactory.setPredefinedItems(predefinedItems2.items);
    const menuItems = this.itemsFactory.getItems(settings);
    this.hot.runHooks("beforeContextMenuSetItems", menuItems);
    this.menu.setMenuItems(menuItems);
    arrayEach(menuItems, (command) => this.commandExecutor.registerCommand(command.key, command));
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    this.close();
    if (this.menu) {
      this.menu.destroy();
    }
    super.destroy();
  }
};
function _onAfterOnCellContextMenu(event) {
  const settings = this.hot.getSettings();
  const showRowHeaders = settings.rowHeaders;
  const showColHeaders = settings.colHeaders;
  function isValidElement(element2) {
    return element2.nodeName === "TD" || element2.parentNode.nodeName === "TD";
  }
  const element = event.target;
  this.close();
  if (hasClass(element, "handsontableInput")) {
    return;
  }
  event.preventDefault();
  event.stopPropagation();
  if (!(showRowHeaders || showColHeaders)) {
    if (!isValidElement(element) && !(hasClass(element, "current") && hasClass(element, "wtBorder"))) {
      return;
    }
  }
  const offset2 = getDocumentOffsetByElement(this.menu.container, this.hot.rootDocument);
  this.open({
    top: event.clientY + offset2.top,
    left: event.clientX + offset2.left
  });
}
function _onMenuBeforeOpen() {
  this.hot.runHooks("beforeContextMenuShow", this);
}
function _onMenuAfterOpen() {
  this.hot.runHooks("afterContextMenuShow", this);
}
function _onMenuAfterClose() {
  this.hot.listen();
  this.hot.runHooks("afterContextMenuHide", this);
}
ContextMenu.SEPARATOR = {
  name: KEY
};

// node_modules/handsontable/plugins/copyPaste/contextMenuItem/copy.mjs
function copyItem(copyPastePlugin) {
  return {
    key: "copy",
    name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_COPY);
    },
    callback() {
      copyPastePlugin.copyCellsOnly();
    },
    disabled() {
      if (this.countRows() === 0 || this.countCols() === 0) {
        return true;
      }
      const range = this.getSelectedRangeLast();
      if (!range) {
        return true;
      }
      if (range.isSingleHeader()) {
        return true;
      }
      const selected = this.getSelected();
      if (!selected || selected.length > 1) {
        return true;
      }
      return false;
    },
    hidden: false
  };
}

// node_modules/handsontable/plugins/copyPaste/contextMenuItem/copyColumnHeadersOnly.mjs
function copyColumnHeadersOnlyItem(copyPastePlugin) {
  return {
    key: "copy_column_headers_only",
    name() {
      const selectedRange = this.getSelectedRangeLast();
      const nounForm = selectedRange ? clamp(selectedRange.getWidth() - 1, 0, 1) : 0;
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_COPY_COLUMN_HEADERS_ONLY, nounForm);
    },
    callback() {
      copyPastePlugin.copyColumnHeadersOnly();
    },
    disabled() {
      if (!this.hasColHeaders()) {
        return true;
      }
      const range = this.getSelectedRangeLast();
      if (!range) {
        return true;
      }
      if (range.isSingleHeader()) {
        return true;
      }
      const selected = this.getSelected();
      if (!selected || selected.length > 1) {
        return true;
      }
      return false;
    },
    hidden: false
  };
}

// node_modules/handsontable/plugins/copyPaste/contextMenuItem/copyWithColumnGroupHeaders.mjs
function copyWithColumnGroupHeadersItem(copyPastePlugin) {
  return {
    key: "copy_with_column_group_headers",
    name() {
      const selectedRange = this.getSelectedRangeLast();
      const nounForm = selectedRange ? clamp(selectedRange.getWidth() - 1, 0, 1) : 0;
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_GROUP_HEADERS, nounForm);
    },
    callback() {
      copyPastePlugin.copyWithAllColumnHeaders();
    },
    disabled() {
      if (!this.hasColHeaders() || !this.getSettings().nestedHeaders) {
        return true;
      }
      const range = this.getSelectedRangeLast();
      if (!range) {
        return true;
      }
      if (range.isSingleHeader()) {
        return true;
      }
      const selected = this.getSelected();
      if (!selected || selected.length > 1) {
        return true;
      }
      return false;
    },
    hidden: false
  };
}

// node_modules/handsontable/plugins/copyPaste/contextMenuItem/copyWithColumnHeaders.mjs
function copyWithColumnHeadersItem(copyPastePlugin) {
  return {
    key: "copy_with_column_headers",
    name() {
      const selectedRange = this.getSelectedRangeLast();
      const nounForm = selectedRange ? clamp(selectedRange.getWidth() - 1, 0, 1) : 0;
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_HEADERS, nounForm);
    },
    callback() {
      copyPastePlugin.copyWithColumnHeaders();
    },
    disabled() {
      if (!this.hasColHeaders()) {
        return true;
      }
      const range = this.getSelectedRangeLast();
      if (!range) {
        return true;
      }
      if (range.isSingleHeader()) {
        return true;
      }
      const selected = this.getSelected();
      if (!selected || selected.length > 1) {
        return true;
      }
      return false;
    },
    hidden: false
  };
}

// node_modules/handsontable/plugins/copyPaste/contextMenuItem/cut.mjs
function cutItem(copyPastePlugin) {
  return {
    key: "cut",
    name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_CUT);
    },
    callback() {
      copyPastePlugin.cut();
    },
    disabled() {
      if (this.countRows() === 0 || this.countCols() === 0) {
        return true;
      }
      const range = this.getSelectedRangeLast();
      if (!range) {
        return true;
      }
      if (range.isSingleHeader()) {
        return true;
      }
      const selected = this.getSelected();
      if (!selected || selected.length > 1) {
        return true;
      }
      return false;
    },
    hidden: false
  };
}

// node_modules/handsontable/plugins/copyPaste/clipboardData.mjs
var ClipboardData = class {
  constructor() {
    this.data = {};
  }
  setData(type, value) {
    this.data[type] = value;
  }
  getData(type) {
    return this.data[type] || void 0;
  }
};

// node_modules/handsontable/plugins/copyPaste/pasteEvent.mjs
var PasteEvent = class {
  constructor() {
    this.clipboardData = new ClipboardData();
  }
  preventDefault() {
  }
  composedPath() {
    return [];
  }
};

// node_modules/handsontable/plugins/copyPaste/copyableRanges.mjs
function _classPrivateMethodInitSpec14(e, a) {
  _checkPrivateRedeclaration17(e, a), a.add(e);
}
function _classPrivateFieldInitSpec11(e, t, a) {
  _checkPrivateRedeclaration17(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration17(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldGet11(s, a) {
  return s.get(_assertClassBrand17(s, a));
}
function _classPrivateFieldSet9(s, a, r) {
  return s.set(_assertClassBrand17(s, a), r), r;
}
function _assertClassBrand17(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _selectedRange = /* @__PURE__ */ new WeakMap();
var _countRows = /* @__PURE__ */ new WeakMap();
var _countColumns = /* @__PURE__ */ new WeakMap();
var _rowsLimit = /* @__PURE__ */ new WeakMap();
var _columnsLimit = /* @__PURE__ */ new WeakMap();
var _countColumnHeaders = /* @__PURE__ */ new WeakMap();
var _CopyableRangesFactory_brand = /* @__PURE__ */ new WeakSet();
var CopyableRangesFactory = class {
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * @param {{
   *   countRows: function(): number,
   *   countColumns: function(): number,
   *   rowsLimit: function(): number,
   *   columnsLimit: function(): number,
   *   countColumnHeaders: function(): number
   * }} dependencies The utils class dependencies.
   */
  constructor(_ref) {
    let {
      countRows,
      countColumns,
      rowsLimit,
      columnsLimit,
      countColumnHeaders
    } = _ref;
    _classPrivateMethodInitSpec14(this, _CopyableRangesFactory_brand);
    _classPrivateFieldInitSpec11(this, _selectedRange, void 0);
    _classPrivateFieldInitSpec11(this, _countRows, void 0);
    _classPrivateFieldInitSpec11(this, _countColumns, void 0);
    _classPrivateFieldInitSpec11(this, _rowsLimit, void 0);
    _classPrivateFieldInitSpec11(this, _columnsLimit, void 0);
    _classPrivateFieldInitSpec11(this, _countColumnHeaders, void 0);
    _classPrivateFieldSet9(_countRows, this, countRows);
    _classPrivateFieldSet9(_countColumns, this, countColumns);
    _classPrivateFieldSet9(_rowsLimit, this, rowsLimit);
    _classPrivateFieldSet9(_columnsLimit, this, columnsLimit);
    _classPrivateFieldSet9(_countColumnHeaders, this, countColumnHeaders);
  }
  /* eslint-enable jsdoc/require-description-complete-sentence */
  /**
   * Sets the selection range to be processed.
   *
   * @param {CellRange} selectedRange The selection range represented by the CellRange class.
   */
  setSelectedRange(selectedRange) {
    _classPrivateFieldSet9(_selectedRange, this, selectedRange);
  }
  /**
   * Returns a new coords object within the dataset range (cells) with `startRow`, `startCol`, `endRow`
   * and `endCol` keys.
   *
   * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}
   */
  getCellsRange() {
    if (_classPrivateFieldGet11(_countRows, this).call(this) === 0 || _classPrivateFieldGet11(_countColumns, this).call(this) === 0) {
      return null;
    }
    const {
      row: startRow,
      col: startCol
    } = _classPrivateFieldGet11(_selectedRange, this).getTopStartCorner();
    const {
      row: endRow,
      col: endCol
    } = _classPrivateFieldGet11(_selectedRange, this).getBottomEndCorner();
    const finalEndRow = _assertClassBrand17(_CopyableRangesFactory_brand, this, _trimRowsRange).call(this, startRow, endRow);
    const finalEndCol = _assertClassBrand17(_CopyableRangesFactory_brand, this, _trimColumnsRange).call(this, startCol, endCol);
    const isRangeTrimmed = endRow !== finalEndRow || endCol !== finalEndCol;
    return {
      isRangeTrimmed,
      startRow,
      startCol,
      endRow: finalEndRow,
      endCol: finalEndCol
    };
  }
  /**
   * Returns a new coords object within the most-bottom column headers range with `startRow`,
   * `startCol`, `endRow` and `endCol` keys.
   *
   * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}
   */
  getMostBottomColumnHeadersRange() {
    if (_classPrivateFieldGet11(_countColumns, this).call(this) === 0 || _classPrivateFieldGet11(_countColumnHeaders, this).call(this) === 0) {
      return null;
    }
    const {
      col: startCol
    } = _classPrivateFieldGet11(_selectedRange, this).getTopStartCorner();
    const {
      col: endCol
    } = _classPrivateFieldGet11(_selectedRange, this).getBottomEndCorner();
    const finalEndCol = _assertClassBrand17(_CopyableRangesFactory_brand, this, _trimColumnsRange).call(this, startCol, endCol);
    const isRangeTrimmed = endCol !== finalEndCol;
    return {
      isRangeTrimmed,
      startRow: -1,
      startCol,
      endRow: -1,
      endCol: finalEndCol
    };
  }
  /**
   * Returns a new coords object within all column headers layers (including nested headers) range with
   * `startRow`, `startCol`, `endRow` and `endCol` keys.
   *
   * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}
   */
  getAllColumnHeadersRange() {
    if (_classPrivateFieldGet11(_countColumns, this).call(this) === 0 || _classPrivateFieldGet11(_countColumnHeaders, this).call(this) === 0) {
      return null;
    }
    const {
      col: startCol
    } = _classPrivateFieldGet11(_selectedRange, this).getTopStartCorner();
    const {
      col: endCol
    } = _classPrivateFieldGet11(_selectedRange, this).getBottomEndCorner();
    const finalEndCol = _assertClassBrand17(_CopyableRangesFactory_brand, this, _trimColumnsRange).call(this, startCol, endCol);
    const isRangeTrimmed = endCol !== finalEndCol;
    return {
      isRangeTrimmed,
      startRow: -_classPrivateFieldGet11(_countColumnHeaders, this).call(this),
      startCol,
      endRow: -1,
      endCol: finalEndCol
    };
  }
};
function _trimColumnsRange(startColumn, endColumn) {
  return Math.min(endColumn, Math.max(startColumn + _classPrivateFieldGet11(_columnsLimit, this).call(this) - 1, startColumn));
}
function _trimRowsRange(startRow, endRow) {
  return Math.min(endRow, Math.max(startRow + _classPrivateFieldGet11(_rowsLimit, this).call(this) - 1, startRow));
}
function normalizeRanges(ranges) {
  const rows = [];
  const columns = [];
  arrayEach(ranges, (range) => {
    const minRow = Math.min(range.startRow, range.endRow);
    const maxRow = Math.max(range.startRow, range.endRow);
    rangeEach(minRow, maxRow, (row) => {
      if (rows.indexOf(row) === -1) {
        rows.push(row);
      }
    });
    const minColumn = Math.min(range.startCol, range.endCol);
    const maxColumn = Math.max(range.startCol, range.endCol);
    rangeEach(minColumn, maxColumn, (column) => {
      if (columns.indexOf(column) === -1) {
        columns.push(column);
      }
    });
  });
  return {
    rows,
    columns
  };
}

// node_modules/handsontable/plugins/copyPaste/copyPaste.mjs
function _classPrivateMethodInitSpec15(e, a) {
  _checkPrivateRedeclaration18(e, a), a.add(e);
}
function _classPrivateFieldInitSpec12(e, t, a) {
  _checkPrivateRedeclaration18(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration18(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty23(e, r, t) {
  return (r = _toPropertyKey23(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey23(t) {
  var i = _toPrimitive23(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive23(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _classPrivateFieldGet12(s, a) {
  return s.get(_assertClassBrand18(s, a));
}
function _classPrivateFieldSet10(s, a, r) {
  return s.set(_assertClassBrand18(s, a), r), r;
}
function _assertClassBrand18(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
Hooks.getSingleton().register("afterCopyLimit");
Hooks.getSingleton().register("modifyCopyableRange");
Hooks.getSingleton().register("beforeCut");
Hooks.getSingleton().register("afterCut");
Hooks.getSingleton().register("beforePaste");
Hooks.getSingleton().register("afterPaste");
Hooks.getSingleton().register("beforeCopy");
Hooks.getSingleton().register("afterCopy");
var PLUGIN_KEY11 = "copyPaste";
var PLUGIN_PRIORITY10 = 80;
var SETTING_KEYS3 = ["fragmentSelection"];
var META_HEAD = ['<meta name="generator" content="Handsontable"/>', '<style type="text/css">td{white-space:normal}br{mso-data-placement:same-cell}</style>'].join("");
var _enableCopyColumnHeaders = /* @__PURE__ */ new WeakMap();
var _enableCopyColumnGroupHeaders = /* @__PURE__ */ new WeakMap();
var _enableCopyColumnHeadersOnly = /* @__PURE__ */ new WeakMap();
var _copyMode = /* @__PURE__ */ new WeakMap();
var _isTriggeredByCopy = /* @__PURE__ */ new WeakMap();
var _isTriggeredByCut = /* @__PURE__ */ new WeakMap();
var _copyableRangesFactory = /* @__PURE__ */ new WeakMap();
var _preventViewportScrollOnPaste = /* @__PURE__ */ new WeakMap();
var _CopyPaste_brand = /* @__PURE__ */ new WeakSet();
var CopyPaste = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec15(this, _CopyPaste_brand);
    _defineProperty23(this, "columnsLimit", Infinity);
    _defineProperty23(this, "rowsLimit", Infinity);
    _defineProperty23(this, "pasteMode", "overwrite");
    _defineProperty23(this, "uiContainer", this.hot.rootDocument.body);
    _classPrivateFieldInitSpec12(this, _enableCopyColumnHeaders, false);
    _classPrivateFieldInitSpec12(this, _enableCopyColumnGroupHeaders, false);
    _classPrivateFieldInitSpec12(this, _enableCopyColumnHeadersOnly, false);
    _classPrivateFieldInitSpec12(this, _copyMode, "cells-only");
    _classPrivateFieldInitSpec12(this, _isTriggeredByCopy, false);
    _classPrivateFieldInitSpec12(this, _isTriggeredByCut, false);
    _classPrivateFieldInitSpec12(this, _copyableRangesFactory, new CopyableRangesFactory({
      countRows: () => this.hot.countRows(),
      countColumns: () => this.hot.countCols(),
      rowsLimit: () => this.rowsLimit,
      columnsLimit: () => this.columnsLimit,
      countColumnHeaders: () => this.hot.view.getColumnHeadersCount()
    }));
    _classPrivateFieldInitSpec12(this, _preventViewportScrollOnPaste, false);
    _defineProperty23(this, "copyableRanges", []);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY11;
  }
  static get SETTING_KEYS() {
    return [PLUGIN_KEY11, ...SETTING_KEYS3];
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY10;
  }
  static get DEFAULT_SETTINGS() {
    return {
      pasteMode: "overwrite",
      rowsLimit: Infinity,
      columnsLimit: Infinity,
      copyColumnHeaders: false,
      copyColumnGroupHeaders: false,
      copyColumnHeadersOnly: false
    };
  }
  /**
   * Checks if the [`CopyPaste`](#copypaste) plugin is enabled.
   *
   * This method gets called by Handsontable's [`beforeInit`](@/api/hooks.md#beforeinit) hook.
   * If it returns `true`, the [`enablePlugin()`](#enableplugin) method gets called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[PLUGIN_KEY11];
  }
  /**
   * Enables the [`CopyPaste`](#copypaste) plugin for your Handsontable instance.
   */
  enablePlugin() {
    var _this$getSetting, _this$getSetting2, _this = this;
    if (this.enabled) {
      return;
    }
    this.pasteMode = (_this$getSetting = this.getSetting("pasteMode")) !== null && _this$getSetting !== void 0 ? _this$getSetting : this.pasteMode;
    this.rowsLimit = isNaN(this.getSetting("rowsLimit")) ? this.rowsLimit : this.getSetting("rowsLimit");
    this.columnsLimit = isNaN(this.getSetting("columnsLimit")) ? this.columnsLimit : this.getSetting("columnsLimit");
    _classPrivateFieldSet10(_enableCopyColumnHeaders, this, this.getSetting("copyColumnHeaders"));
    _classPrivateFieldSet10(_enableCopyColumnGroupHeaders, this, this.getSetting("copyColumnGroupHeaders"));
    _classPrivateFieldSet10(_enableCopyColumnHeadersOnly, this, this.getSetting("copyColumnHeadersOnly"));
    this.uiContainer = (_this$getSetting2 = this.getSetting("uiContainer")) !== null && _this$getSetting2 !== void 0 ? _this$getSetting2 : this.uiContainer;
    this.addHook("afterContextMenuDefaultOptions", (options) => _assertClassBrand18(_CopyPaste_brand, this, _onAfterContextMenuDefaultOptions).call(this, options));
    this.addHook("afterSelection", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _assertClassBrand18(_CopyPaste_brand, _this, _onAfterSelection).call(_this, ...args);
    });
    this.addHook("afterSelectionEnd", () => _assertClassBrand18(_CopyPaste_brand, this, _onAfterSelectionEnd).call(this));
    this.eventManager.addEventListener(this.hot.rootDocument, "copy", function() {
      return _this.onCopy(...arguments);
    });
    this.eventManager.addEventListener(this.hot.rootDocument, "cut", function() {
      return _this.onCut(...arguments);
    });
    this.eventManager.addEventListener(this.hot.rootDocument, "paste", function() {
      return _this.onPaste(...arguments);
    });
    if (isSafari()) {
      this.eventManager.addEventListener(this.hot.rootDocument.body, "mouseenter", function() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return _assertClassBrand18(_CopyPaste_brand, _this, _onSafariMouseEnter).call(_this, ...args);
      });
      this.eventManager.addEventListener(this.hot.rootDocument.body, "mouseleave", function() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        return _assertClassBrand18(_CopyPaste_brand, _this, _onSafariMouseLeave).call(_this, ...args);
      });
      this.addHook("afterSelection", () => _assertClassBrand18(_CopyPaste_brand, this, _onSafariAfterSelection).call(this));
    }
    super.enablePlugin();
  }
  /**
   * Updates the state of the [`CopyPaste`](#copypaste) plugin.
   *
   * Gets called when [`updateSettings()`](@/api/core.md#updatesettings)
   * is invoked with any of the following configuration options:
   *  - [`copyPaste`](@/api/options.md#copypaste)
   *  - [`fragmentSelection`](@/api/options.md#fragmentselection)
   */
  updatePlugin() {
    this.disablePlugin();
    this.enablePlugin();
    super.updatePlugin();
  }
  /**
   * Disables the [`CopyPaste`](#copypaste) plugin for your Handsontable instance.
   */
  disablePlugin() {
    super.disablePlugin();
  }
  /**
   * Copies the contents of the selected cells (and/or their related column headers) to the system clipboard.
   *
   * Takes an optional parameter (`copyMode`) that defines the scope of copying:
   *
   * | `copyMode` value              | Description                                                     |
   * | ----------------------------- | --------------------------------------------------------------- |
   * | `'cells-only'` (default)      | Copy the selected cells                                         |
   * | `'with-column-headers'`       | - Copy the selected cells<br>- Copy the nearest column headers  |
   * | `'with-column-group-headers'` | - Copy the selected cells<br>- Copy all related columns headers |
   * | `'column-headers-only'`       | Copy the nearest column headers (without copying cells)         |
   *
   * @param {string} [copyMode='cells-only'] Copy mode.
   */
  copy() {
    let copyMode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "cells-only";
    _classPrivateFieldSet10(_copyMode, this, copyMode);
    _classPrivateFieldSet10(_isTriggeredByCopy, this, true);
    _assertClassBrand18(_CopyPaste_brand, this, _ensureClipboardEventsGetTriggered).call(this, "copy");
  }
  /**
   * Copies the contents of the selected cells.
   */
  copyCellsOnly() {
    this.copy("cells-only");
  }
  /**
   * Copies the contents of column headers that are nearest to the selected cells.
   */
  copyColumnHeadersOnly() {
    this.copy("column-headers-only");
  }
  /**
   * Copies the contents of the selected cells and all their related column headers.
   */
  copyWithAllColumnHeaders() {
    this.copy("with-column-group-headers");
  }
  /**
   * Copies the contents of the selected cells and their nearest column headers.
   */
  copyWithColumnHeaders() {
    this.copy("with-column-headers");
  }
  /**
   * Cuts the contents of the selected cells to the system clipboard.
   */
  cut() {
    _classPrivateFieldSet10(_isTriggeredByCut, this, true);
    _assertClassBrand18(_CopyPaste_brand, this, _ensureClipboardEventsGetTriggered).call(this, "cut");
  }
  /**
   * Converts the contents of multiple ranges (`ranges`) into a single string.
   *
   * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges Array of objects with properties `startRow`, `endRow`, `startCol` and `endCol`.
   * @returns {string} A string that will be copied to the clipboard.
   */
  getRangedCopyableData(ranges) {
    return stringify2(this.getRangedData(ranges));
  }
  /**
   * Converts the contents of multiple ranges (`ranges`) into an array of arrays.
   *
   * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.
   * @returns {Array[]} An array of arrays that will be copied to the clipboard.
   */
  getRangedData(ranges) {
    const data = [];
    const {
      rows,
      columns
    } = normalizeRanges(ranges);
    arrayEach(rows, (row) => {
      const rowSet = [];
      arrayEach(columns, (column) => {
        if (row < 0) {
          rowSet.push(this.hot.getColHeader(column, row));
        } else {
          rowSet.push(this.hot.getCopyableData(row, column));
        }
      });
      data.push(rowSet);
    });
    return data;
  }
  /**
   * Simulates the paste action.
   *
   * For security reasons, modern browsers don't allow reading from the system clipboard.
   *
   * @param {string} pastableText The value to paste, as a raw string.
   * @param {string} [pastableHtml=''] The value to paste, as HTML.
   */
  paste() {
    let pastableText = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    let pastableHtml = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : pastableText;
    if (!pastableText && !pastableHtml) {
      return;
    }
    const pasteData = new PasteEvent();
    if (pastableText) {
      pasteData.clipboardData.setData("text/plain", pastableText);
    }
    if (pastableHtml) {
      pasteData.clipboardData.setData("text/html", pastableHtml);
    }
    this.onPaste(pasteData);
  }
  /**
   * Prepares copyable text from the cells selection in the invisible textarea.
   */
  setCopyableText() {
    const selectionRange = this.hot.getSelectedRangeLast();
    if (!selectionRange) {
      return;
    }
    if (selectionRange.isSingleHeader()) {
      this.copyableRanges = [];
      return;
    }
    _classPrivateFieldGet12(_copyableRangesFactory, this).setSelectedRange(selectionRange);
    const groupedRanges = /* @__PURE__ */ new Map([["headers", null], ["cells", null]]);
    if (_classPrivateFieldGet12(_copyMode, this) === "column-headers-only") {
      groupedRanges.set("headers", _classPrivateFieldGet12(_copyableRangesFactory, this).getMostBottomColumnHeadersRange());
    } else {
      if (_classPrivateFieldGet12(_copyMode, this) === "with-column-headers") {
        groupedRanges.set("headers", _classPrivateFieldGet12(_copyableRangesFactory, this).getMostBottomColumnHeadersRange());
      } else if (_classPrivateFieldGet12(_copyMode, this) === "with-column-group-headers") {
        groupedRanges.set("headers", _classPrivateFieldGet12(_copyableRangesFactory, this).getAllColumnHeadersRange());
      }
      groupedRanges.set("cells", _classPrivateFieldGet12(_copyableRangesFactory, this).getCellsRange());
    }
    this.copyableRanges = Array.from(groupedRanges.values()).filter((range) => range !== null).map((_ref) => {
      let {
        startRow,
        startCol,
        endRow,
        endCol
      } = _ref;
      return {
        startRow,
        startCol,
        endRow,
        endCol
      };
    });
    this.copyableRanges = this.hot.runHooks("modifyCopyableRange", this.copyableRanges);
    const cellsRange = groupedRanges.get("cells");
    if (cellsRange !== null && cellsRange.isRangeTrimmed) {
      const {
        startRow,
        startCol,
        endRow,
        endCol
      } = cellsRange;
      this.hot.runHooks("afterCopyLimit", endRow - startRow + 1, endCol - startCol + 1, this.rowsLimit, this.columnsLimit);
    }
  }
  /**
   * Verifies if editor exists and is open.
   *
   * @private
   * @returns {boolean}
   */
  isEditorOpened() {
    var _this$hot$getActiveEd;
    return (_this$hot$getActiveEd = this.hot.getActiveEditor()) === null || _this$hot$getActiveEd === void 0 ? void 0 : _this$hot$getActiveEd.isOpened();
  }
  /**
   * Prepares new values to populate them into datasource.
   *
   * @private
   * @param {Array} inputArray An array of the data to populate.
   * @param {Array} [selection] The selection which indicates from what position the data will be populated.
   * @returns {Array} Range coordinates after populate data.
   */
  populateValues(inputArray) {
    let selection = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.hot.getSelectedRangeLast();
    if (!inputArray.length) {
      return;
    }
    const populatedRowsLength = inputArray.length;
    const populatedColumnsLength = inputArray[0].length;
    const newRows = [];
    const {
      row: startRow,
      col: startColumn
    } = selection.getTopStartCorner();
    const {
      row: endRowFromSelection,
      col: endColumnFromSelection
    } = selection.getBottomEndCorner();
    let visualRowForPopulatedData = startRow;
    let visualColumnForPopulatedData = startColumn;
    let lastVisualRow = startRow;
    let lastVisualColumn = startColumn;
    while (newRows.length < populatedRowsLength || visualRowForPopulatedData <= endRowFromSelection) {
      const {
        skipRowOnPaste,
        visualRow
      } = this.hot.getCellMeta(visualRowForPopulatedData, startColumn);
      visualRowForPopulatedData = visualRow + 1;
      if (skipRowOnPaste === true) {
        continue;
      }
      lastVisualRow = visualRow;
      visualColumnForPopulatedData = startColumn;
      const newRow = [];
      const insertedRow = newRows.length % populatedRowsLength;
      while (newRow.length < populatedColumnsLength || visualColumnForPopulatedData <= endColumnFromSelection) {
        const {
          skipColumnOnPaste,
          visualCol
        } = this.hot.getCellMeta(startRow, visualColumnForPopulatedData);
        visualColumnForPopulatedData = visualCol + 1;
        if (skipColumnOnPaste === true) {
          continue;
        }
        lastVisualColumn = visualCol;
        const insertedColumn = newRow.length % populatedColumnsLength;
        newRow.push(inputArray[insertedRow][insertedColumn]);
      }
      newRows.push(newRow);
    }
    _classPrivateFieldSet10(_preventViewportScrollOnPaste, this, true);
    this.hot.populateFromArray(startRow, startColumn, newRows, void 0, void 0, "CopyPaste.paste", this.pasteMode);
    return [startRow, startColumn, lastVisualRow, lastVisualColumn];
  }
  /**
   * Add the `contenteditable` attribute to the highlighted cell and select its content.
   */
  /**
   * `copy` event callback on textarea element.
   *
   * @param {Event} event ClipboardEvent.
   * @private
   */
  onCopy(event) {
    const eventTarget = event.composedPath()[0];
    const focusedElement = this.hot.getFocusManager().getRefocusElement();
    const isHotInput = eventTarget === null || eventTarget === void 0 ? void 0 : eventTarget.hasAttribute("data-hot-input");
    if (!this.hot.isListening() && !_classPrivateFieldGet12(_isTriggeredByCopy, this) || this.isEditorOpened() || isHTMLElement(eventTarget) && (isHotInput && eventTarget !== focusedElement || !isHotInput && eventTarget !== this.hot.rootDocument.body && !isInternalElement(eventTarget, this.hot.rootElement))) {
      return;
    }
    event.preventDefault();
    this.setCopyableText();
    _classPrivateFieldSet10(_isTriggeredByCopy, this, false);
    const data = this.getRangedData(this.copyableRanges);
    const copiedHeadersCount = _assertClassBrand18(_CopyPaste_brand, this, _countCopiedHeaders).call(this, this.copyableRanges);
    const allowCopying = !!this.hot.runHooks("beforeCopy", data, this.copyableRanges, copiedHeadersCount);
    if (allowCopying) {
      const textPlain = stringify2(data);
      if (event && event.clipboardData) {
        const textHTML = _dataToHTML(data, this.hot.rootDocument);
        event.clipboardData.setData("text/plain", textPlain);
        event.clipboardData.setData("text/html", [META_HEAD, textHTML].join(""));
      } else if (typeof ClipboardEvent === "undefined") {
        this.hot.rootWindow.clipboardData.setData("Text", textPlain);
      }
      this.hot.runHooks("afterCopy", data, this.copyableRanges, copiedHeadersCount);
    }
    _classPrivateFieldSet10(_copyMode, this, "cells-only");
  }
  /**
   * `cut` event callback on textarea element.
   *
   * @param {Event} event ClipboardEvent.
   * @private
   */
  onCut(event) {
    const eventTarget = event.composedPath()[0];
    const focusedElement = this.hot.getFocusManager().getRefocusElement();
    const isHotInput = eventTarget === null || eventTarget === void 0 ? void 0 : eventTarget.hasAttribute("data-hot-input");
    if (!this.hot.isListening() && !_classPrivateFieldGet12(_isTriggeredByCut, this) || this.isEditorOpened() || isHTMLElement(eventTarget) && (isHotInput && eventTarget !== focusedElement || !isHotInput && eventTarget !== this.hot.rootDocument.body && !isInternalElement(eventTarget, this.hot.rootElement))) {
      return;
    }
    event.preventDefault();
    this.setCopyableText();
    _classPrivateFieldSet10(_isTriggeredByCut, this, false);
    const rangedData = this.getRangedData(this.copyableRanges);
    const allowCuttingOut = !!this.hot.runHooks("beforeCut", rangedData, this.copyableRanges);
    if (allowCuttingOut) {
      const textPlain = stringify2(rangedData);
      if (event && event.clipboardData) {
        const textHTML = _dataToHTML(rangedData, this.hot.rootDocument);
        event.clipboardData.setData("text/plain", textPlain);
        event.clipboardData.setData("text/html", [META_HEAD, textHTML].join(""));
      } else if (typeof ClipboardEvent === "undefined") {
        this.hot.rootWindow.clipboardData.setData("Text", textPlain);
      }
      this.hot.emptySelectedCells("CopyPaste.cut");
      this.hot.runHooks("afterCut", rangedData, this.copyableRanges);
    }
  }
  /**
   * `paste` event callback on textarea element.
   *
   * @param {Event} event ClipboardEvent or pseudo ClipboardEvent, if paste was called manually.
   * @private
   */
  onPaste(event) {
    const eventTarget = event.composedPath()[0];
    const focusedElement = this.hot.getFocusManager().getRefocusElement();
    const isHotInput = eventTarget === null || eventTarget === void 0 ? void 0 : eventTarget.hasAttribute("data-hot-input");
    if (!this.hot.isListening() || this.isEditorOpened() || !this.hot.getSelected() || isHTMLElement(eventTarget) && (isHotInput && eventTarget !== focusedElement || !isHotInput && eventTarget !== this.hot.rootDocument.body && !isInternalElement(eventTarget, this.hot.rootElement))) {
      return;
    }
    event.preventDefault();
    let pastedData;
    if (event && typeof event.clipboardData !== "undefined") {
      const textHTML = sanitize(event.clipboardData.getData("text/html"), {
        ADD_TAGS: ["meta"],
        ADD_ATTR: ["content"],
        FORCE_BODY: true
      });
      if (textHTML && /(<table)|(<TABLE)/g.test(textHTML)) {
        const parsedConfig = htmlToGridSettings(textHTML, this.hot.rootDocument);
        pastedData = parsedConfig.data;
      } else {
        pastedData = event.clipboardData.getData("text/plain");
      }
    } else if (typeof ClipboardEvent === "undefined" && typeof this.hot.rootWindow.clipboardData !== "undefined") {
      pastedData = this.hot.rootWindow.clipboardData.getData("Text");
    }
    if (typeof pastedData === "string") {
      pastedData = parse(pastedData);
    }
    if (pastedData === void 0 || pastedData && pastedData.length === 0) {
      return;
    }
    if (this.hot.runHooks("beforePaste", pastedData, this.copyableRanges) === false) {
      return;
    }
    const [startRow, startColumn, endRow, endColumn] = this.populateValues(pastedData);
    this.hot.selectCell(startRow, startColumn, Math.min(this.hot.countRows() - 1, endRow), Math.min(this.hot.countCols() - 1, endColumn));
    this.hot.runHooks("afterPaste", pastedData, this.copyableRanges);
  }
  /**
   * Add copy and cut options to the Context Menu.
   *
   * @param {object} options Contains default added options of the Context Menu.
   */
  /**
   * Destroys the `CopyPaste` plugin instance.
   */
  destroy() {
    super.destroy();
  }
};
function _ensureClipboardEventsGetTriggered(eventName) {
  if (isSafari()) {
    const lastSelectedRange = this.hot.getSelectedRangeLast();
    if (lastSelectedRange) {
      const {
        row: highlightRow,
        col: highlightColumn
      } = lastSelectedRange.highlight;
      const currentlySelectedCell = this.hot.getCell(highlightRow, highlightColumn, true);
      if (currentlySelectedCell) {
        runWithSelectedContendEditableElement(currentlySelectedCell, () => {
          this.hot.rootDocument.execCommand(eventName);
        });
      }
    }
  } else {
    this.hot.rootDocument.execCommand(eventName);
  }
}
function _countCopiedHeaders(ranges) {
  const {
    rows
  } = normalizeRanges(ranges);
  let columnHeadersCount = 0;
  for (let row = 0; row < rows.length; row++) {
    if (rows[row] >= 0) {
      break;
    }
    columnHeadersCount += 1;
  }
  return {
    columnHeadersCount
  };
}
function _addContentEditableToHighlightedCell() {
  if (this.hot.isListening()) {
    const lastSelectedRange = this.hot.getSelectedRangeLast();
    if (lastSelectedRange) {
      const {
        row: highlightRow,
        col: highlightColumn
      } = lastSelectedRange.highlight;
      const currentlySelectedCell = this.hot.getCell(highlightRow, highlightColumn, true);
      if (currentlySelectedCell) {
        makeElementContentEditableAndSelectItsContent(currentlySelectedCell);
      }
    }
  }
}
function _removeContentEditableFromHighlightedCell() {
  if (this.hot.isListening()) {
    const lastSelectedRange = this.hot.getSelectedRangeLast();
    if (lastSelectedRange) {
      const {
        row: highlightRow,
        col: highlightColumn
      } = lastSelectedRange.highlight;
      const currentlySelectedCell = this.hot.getCell(highlightRow, highlightColumn, true);
      if (currentlySelectedCell !== null && currentlySelectedCell !== void 0 && currentlySelectedCell.hasAttribute("contenteditable")) {
        removeContentEditableFromElementAndDeselect(currentlySelectedCell);
      }
    }
  }
}
function _onAfterContextMenuDefaultOptions(options) {
  options.items.push({
    name: "---------"
  }, copyItem(this));
  if (_classPrivateFieldGet12(_enableCopyColumnHeaders, this)) {
    options.items.push(copyWithColumnHeadersItem(this));
  }
  if (_classPrivateFieldGet12(_enableCopyColumnGroupHeaders, this)) {
    options.items.push(copyWithColumnGroupHeadersItem(this));
  }
  if (_classPrivateFieldGet12(_enableCopyColumnHeadersOnly, this)) {
    options.items.push(copyColumnHeadersOnlyItem(this));
  }
  options.items.push(cutItem(this));
}
function _onAfterSelection(fromRow, fromColumn, toRow, toColumn, preventScrolling) {
  if (_classPrivateFieldGet12(_preventViewportScrollOnPaste, this)) {
    preventScrolling.value = true;
  }
  _classPrivateFieldSet10(_preventViewportScrollOnPaste, this, false);
}
function _onAfterSelectionEnd() {
  if (this.isEditorOpened()) {
    return;
  }
  if (this.hot.getSettings().fragmentSelection) {
    return;
  }
  this.setCopyableText();
}
function _onSafariMouseEnter() {
  _assertClassBrand18(_CopyPaste_brand, this, _removeContentEditableFromHighlightedCell).call(this);
}
function _onSafariMouseLeave() {
  _assertClassBrand18(_CopyPaste_brand, this, _addContentEditableToHighlightedCell).call(this);
}
function _onSafariAfterSelection() {
  _assertClassBrand18(_CopyPaste_brand, this, _removeContentEditableFromHighlightedCell).call(this);
}

// node_modules/handsontable/plugins/customBorders/utils.mjs
function createId(row, col) {
  return `border_row${row}col${col}`;
}
function createDefaultCustomBorder() {
  return {
    width: 1,
    color: "#000"
  };
}
function createSingleEmptyBorder() {
  return {
    hide: true
  };
}
function createDefaultHtBorder() {
  return {
    width: 1,
    color: "#000",
    cornerVisible: false
  };
}
function normalizeBorder(border) {
  if (isDefined(border.start) || isDefined(border.left)) {
    var _border$start;
    border.start = (_border$start = border.start) !== null && _border$start !== void 0 ? _border$start : border.left;
  }
  if (isDefined(border.end) || isDefined(border.right)) {
    var _border$end;
    border.end = (_border$end = border.end) !== null && _border$end !== void 0 ? _border$end : border.right;
  }
  delete border.left;
  delete border.right;
  return border;
}
function denormalizeBorder(border) {
  if (isDefined(border.start)) {
    border.left = border.start;
  }
  if (isDefined(border.end)) {
    border.right = border.end;
  }
  return border;
}
function createEmptyBorders(row, col) {
  return {
    id: createId(row, col),
    border: createDefaultHtBorder(),
    row,
    col,
    top: createSingleEmptyBorder(),
    bottom: createSingleEmptyBorder(),
    start: createSingleEmptyBorder(),
    end: createSingleEmptyBorder()
  };
}
function extendDefaultBorder(defaultBorder, customBorder) {
  if (hasOwnProperty(customBorder, "border") && customBorder.border) {
    defaultBorder.border = customBorder.border;
  }
  if (hasOwnProperty(customBorder, "top") && isDefined(customBorder.top)) {
    if (customBorder.top) {
      if (!isObject(customBorder.top)) {
        customBorder.top = createDefaultCustomBorder();
      }
      defaultBorder.top = customBorder.top;
    } else {
      customBorder.top = createSingleEmptyBorder();
      defaultBorder.top = customBorder.top;
    }
  }
  if (hasOwnProperty(customBorder, "bottom") && isDefined(customBorder.bottom)) {
    if (customBorder.bottom) {
      if (!isObject(customBorder.bottom)) {
        customBorder.bottom = createDefaultCustomBorder();
      }
      defaultBorder.bottom = customBorder.bottom;
    } else {
      customBorder.bottom = createSingleEmptyBorder();
      defaultBorder.bottom = customBorder.bottom;
    }
  }
  if (hasOwnProperty(customBorder, "start") && isDefined(customBorder.start)) {
    if (customBorder.start) {
      if (!isObject(customBorder.start)) {
        customBorder.start = createDefaultCustomBorder();
      }
      defaultBorder.start = customBorder.start;
    } else {
      customBorder.start = createSingleEmptyBorder();
      defaultBorder.start = customBorder.start;
    }
  }
  if (hasOwnProperty(customBorder, "end") && isDefined(customBorder.end)) {
    if (customBorder.end) {
      if (!isObject(customBorder.end)) {
        customBorder.end = createDefaultCustomBorder();
      }
      defaultBorder.end = customBorder.end;
    } else {
      customBorder.end = createSingleEmptyBorder();
      defaultBorder.end = customBorder.end;
    }
  }
  return defaultBorder;
}
function checkSelectionBorders(hot, direction) {
  let atLeastOneHasBorder = false;
  arrayEach(hot.getSelectedRange(), (range) => {
    range.forAll((r, c) => {
      if (r < 0 || c < 0) {
        return;
      }
      const metaBorders = hot.getCellMeta(r, c).borders;
      if (metaBorders) {
        if (direction) {
          if (!hasOwnProperty(metaBorders[direction], "hide") || metaBorders[direction].hide === false) {
            atLeastOneHasBorder = true;
            return false;
          }
        } else {
          atLeastOneHasBorder = true;
          return false;
        }
      }
    });
  });
  return atLeastOneHasBorder;
}
function markSelected(label) {
  return `<span class="selected">${String.fromCharCode(10003)}</span>${label}`;
}
function hasLeftRightTypeOptions(borders) {
  return borders.some((border) => isDefined(border.left) || isDefined(border.right));
}
function hasStartEndTypeOptions(borders) {
  return borders.some((border) => isDefined(border.start) || isDefined(border.end));
}
var physicalToInlinePropNames = /* @__PURE__ */ new Map([["left", "start"], ["right", "end"]]);
function toInlinePropName(propName) {
  var _physicalToInlineProp;
  return (_physicalToInlineProp = physicalToInlinePropNames.get(propName)) !== null && _physicalToInlineProp !== void 0 ? _physicalToInlineProp : propName;
}

// node_modules/handsontable/plugins/customBorders/contextMenuItem/bottom.mjs
function bottom(customBordersPlugin) {
  return {
    key: "borders:bottom",
    name() {
      let label = this.getTranslatedPhrase(CONTEXTMENU_ITEMS_BORDERS_BOTTOM);
      const hasBorder = checkSelectionBorders(this, "bottom");
      if (hasBorder) {
        label = markSelected(label);
      }
      return label;
    },
    callback(key, selected) {
      const hasBorder = checkSelectionBorders(this, "bottom");
      customBordersPlugin.prepareBorder(selected, "bottom", hasBorder);
    }
  };
}

// node_modules/handsontable/plugins/customBorders/contextMenuItem/left.mjs
function left(customBordersPlugin) {
  const borderDirection = customBordersPlugin.hot.isRtl() ? "end" : "start";
  return {
    key: "borders:left",
    name() {
      let label = this.getTranslatedPhrase(CONTEXTMENU_ITEMS_BORDERS_LEFT);
      const hasBorder = checkSelectionBorders(this, borderDirection);
      if (hasBorder) {
        label = markSelected(label);
      }
      return label;
    },
    callback(key, selected) {
      const hasBorder = checkSelectionBorders(this, borderDirection);
      customBordersPlugin.prepareBorder(selected, borderDirection, hasBorder);
    }
  };
}

// node_modules/handsontable/plugins/customBorders/contextMenuItem/noBorders.mjs
function noBorders(customBordersPlugin) {
  return {
    key: "borders:no_borders",
    name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_REMOVE_BORDERS);
    },
    callback(key, selected) {
      customBordersPlugin.prepareBorder(selected, "noBorders");
    },
    disabled() {
      return !checkSelectionBorders(this);
    }
  };
}

// node_modules/handsontable/plugins/customBorders/contextMenuItem/right.mjs
function right(customBordersPlugin) {
  const borderDirection = customBordersPlugin.hot.isRtl() ? "start" : "end";
  return {
    key: "borders:right",
    name() {
      let label = this.getTranslatedPhrase(CONTEXTMENU_ITEMS_BORDERS_RIGHT);
      const hasBorder = checkSelectionBorders(this, borderDirection);
      if (hasBorder) {
        label = markSelected(label);
      }
      return label;
    },
    callback(key, selected) {
      const hasBorder = checkSelectionBorders(this, borderDirection);
      customBordersPlugin.prepareBorder(selected, borderDirection, hasBorder);
    }
  };
}

// node_modules/handsontable/plugins/customBorders/contextMenuItem/top.mjs
function top(customBordersPlugin) {
  return {
    key: "borders:top",
    name() {
      let label = this.getTranslatedPhrase(CONTEXTMENU_ITEMS_BORDERS_TOP);
      const hasBorder = checkSelectionBorders(this, "top");
      if (hasBorder) {
        label = markSelected(label);
      }
      return label;
    },
    callback(key, selected) {
      const hasBorder = checkSelectionBorders(this, "top");
      customBordersPlugin.prepareBorder(selected, "top", hasBorder);
    }
  };
}

// node_modules/handsontable/plugins/customBorders/customBorders.mjs
function _classPrivateMethodInitSpec16(e, a) {
  _checkPrivateRedeclaration19(e, a), a.add(e);
}
function _checkPrivateRedeclaration19(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty24(e, r, t) {
  return (r = _toPropertyKey24(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey24(t) {
  var i = _toPrimitive24(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive24(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _assertClassBrand19(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var PLUGIN_KEY12 = "customBorders";
var PLUGIN_PRIORITY11 = 90;
var _CustomBorders_brand = /* @__PURE__ */ new WeakSet();
var CustomBorders = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec16(this, _CustomBorders_brand);
    _defineProperty24(this, "savedBorders", []);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY12;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY11;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link CustomBorders#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[PLUGIN_KEY12];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    if (this.enabled) {
      return;
    }
    this.addHook("afterContextMenuDefaultOptions", (options) => _assertClassBrand19(_CustomBorders_brand, this, _onAfterContextMenuDefaultOptions2).call(this, options));
    this.addHook("init", () => _assertClassBrand19(_CustomBorders_brand, this, _onAfterInit2).call(this));
    super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.hideBorders();
    super.disablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`customBorders`](@/api/options.md#customborders)
   */
  updatePlugin() {
    this.disablePlugin();
    this.enablePlugin();
    this.changeBorderSettings();
    super.updatePlugin();
  }
  /**
   * Set custom borders.
   *
   * @example
   * ```js
   * const customBordersPlugin = hot.getPlugin('customBorders');
   *
   * // Using an array of arrays (produced by `.getSelected()` method).
   * customBordersPlugin.setBorders([[1, 1, 2, 2], [6, 2, 0, 2]], {start: {width: 2, color: 'blue'}});
   *
   * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).
   * //  Selecting a cell range.
   * hot.selectCell(0, 0, 2, 2);
   * // Returning selected cells' range with the getSelectedRange method.
   * customBordersPlugin.setBorders(hot.getSelectedRange(), {start: {hide: false, width: 2, color: 'blue'}});
   * ```
   *
   * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.
   * @param {object} borderObject Object with `top`, `right`, `bottom` and `start` properties.
   */
  setBorders(selectionRanges, borderObject) {
    let borderKeys = ["top", "bottom", "start", "end"];
    let normBorder = null;
    if (borderObject) {
      this.checkSettingsCohesion([borderObject]);
      borderKeys = Object.keys(borderObject);
      normBorder = normalizeBorder(borderObject);
    }
    const selectionType = detectSelectionType(selectionRanges);
    const selectionSchemaNormalizer = normalizeSelectionFactory(selectionType, {
      createCellCoords: this.hot._createCellCoords.bind(this.hot),
      createCellRange: this.hot._createCellRange.bind(this.hot)
    });
    arrayEach(selectionRanges, (selection) => {
      selectionSchemaNormalizer(selection).forAll((row, col) => {
        arrayEach(borderKeys, (borderKey) => {
          this.prepareBorderFromCustomAdded(row, col, normBorder, toInlinePropName(borderKey));
        });
      });
    });
    this.hot.view.render();
  }
  /**
   * Get custom borders.
   *
   * @example
   * ```js
   * const customBordersPlugin = hot.getPlugin('customBorders');
   *
   * // Using an array of arrays (produced by `.getSelected()` method).
   * customBordersPlugin.getBorders([[1, 1, 2, 2], [6, 2, 0, 2]]);
   * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).
   * customBordersPlugin.getBorders(hot.getSelectedRange());
   * // Using without param - return all customBorders.
   * customBordersPlugin.getBorders();
   * ```
   *
   * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.
   * @returns {object[]} Returns array of border objects.
   */
  getBorders(selectionRanges) {
    if (!Array.isArray(selectionRanges)) {
      return this.savedBorders;
    }
    const selectionType = detectSelectionType(selectionRanges);
    const selectionSchemaNormalizer = normalizeSelectionFactory(selectionType, {
      createCellCoords: this.hot._createCellCoords.bind(this.hot),
      createCellRange: this.hot._createCellRange.bind(this.hot)
    });
    const selectedBorders = [];
    arrayEach(selectionRanges, (selection) => {
      selectionSchemaNormalizer(selection).forAll((row, col) => {
        arrayEach(this.savedBorders, (border) => {
          if (border.row === row && border.col === col) {
            selectedBorders.push(denormalizeBorder(border));
          }
        });
      });
    });
    return selectedBorders;
  }
  /**
   * Clear custom borders.
   *
   * @example
   * ```js
   * const customBordersPlugin = hot.getPlugin('customBorders');
   *
   * // Using an array of arrays (produced by `.getSelected()` method).
   * customBordersPlugin.clearBorders([[1, 1, 2, 2], [6, 2, 0, 2]]);
   * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).
   * customBordersPlugin.clearBorders(hot.getSelectedRange());
   * // Using without param - clear all customBorders.
   * customBordersPlugin.clearBorders();
   * ```
   *
   * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.
   */
  clearBorders(selectionRanges) {
    if (selectionRanges) {
      this.setBorders(selectionRanges);
    } else {
      arrayEach(this.savedBorders, (border) => {
        this.clearBordersFromSelectionSettings(border.id);
        this.clearNullCellRange();
        this.hot.removeCellMeta(border.row, border.col, "borders");
      });
      this.savedBorders.length = 0;
    }
  }
  /**
   * Insert WalkontableSelection instance into Walkontable settings.
   *
   * @private
   * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
   * @param {string} [place] Coordinate where add/remove border - `top`, `bottom`, `start`, `end`.
   */
  insertBorderIntoSettings(border, place) {
    const hasSavedBorders = this.checkSavedBorders(border);
    if (!hasSavedBorders) {
      this.savedBorders.push(border);
    }
    const visualCellRange = this.hot._createCellRange(this.hot._createCellCoords(border.row, border.col));
    const hasCustomSelections = this.checkCustomSelections(border, visualCellRange, place);
    if (!hasCustomSelections) {
      this.hot.selection.highlight.addCustomSelection({
        border,
        visualCellRange
      });
    }
  }
  /**
   * Prepare borders from setting (single cell).
   *
   * @private
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {object} borderDescriptor Object with `row` and `col`, `start`, `end`, `top` and `bottom` properties.
   * @param {string} [place] Coordinate where add/remove border - `top`, `bottom`, `start`, `end`.
   */
  prepareBorderFromCustomAdded(row, column, borderDescriptor, place) {
    const nrOfRows = this.hot.countRows();
    const nrOfColumns = this.hot.countCols();
    if (row >= nrOfRows || column >= nrOfColumns) {
      return;
    }
    let border = createEmptyBorders(row, column);
    if (borderDescriptor) {
      border = extendDefaultBorder(border, borderDescriptor);
      arrayEach(this.hot.selection.highlight.customSelections, (customSelection) => {
        if (border.id === customSelection.settings.id) {
          Object.assign(customSelection.settings, borderDescriptor);
          border.id = customSelection.settings.id;
          border.top = customSelection.settings.top;
          border.bottom = customSelection.settings.bottom;
          border.start = customSelection.settings.start;
          border.end = customSelection.settings.end;
          return false;
        }
      });
    }
    this.hot.setCellMeta(row, column, "borders", denormalizeBorder(border));
    this.insertBorderIntoSettings(border, place);
  }
  /**
   * Prepare borders from setting (object).
   *
   * @private
   * @param {object} range {CellRange} The CellRange object.
   * @param {object} customBorder Object with `start`, `end`, `top` and `bottom` properties.
   */
  prepareBorderFromCustomAddedRange(range, customBorder) {
    const lastRowIndex = Math.min(range.to.row, this.hot.countRows() - 1);
    const lastColumnIndex = Math.min(range.to.col, this.hot.countCols() - 1);
    rangeEach(range.from.row, lastRowIndex, (rowIndex) => {
      rangeEach(range.from.col, lastColumnIndex, (colIndex) => {
        const border = createEmptyBorders(rowIndex, colIndex);
        let add2 = 0;
        if (rowIndex === range.from.row) {
          if (hasOwnProperty(customBorder, "top")) {
            add2 += 1;
            border.top = customBorder.top;
          }
        }
        if (rowIndex === range.to.row) {
          if (hasOwnProperty(customBorder, "bottom")) {
            add2 += 1;
            border.bottom = customBorder.bottom;
          }
        }
        if (colIndex === range.from.col) {
          if (hasOwnProperty(customBorder, "start")) {
            add2 += 1;
            border.start = customBorder.start;
          }
        }
        if (colIndex === range.to.col) {
          if (hasOwnProperty(customBorder, "end")) {
            add2 += 1;
            border.end = customBorder.end;
          }
        }
        if (add2 > 0) {
          this.hot.setCellMeta(rowIndex, colIndex, "borders", denormalizeBorder(border));
          this.insertBorderIntoSettings(border);
        } else {
        }
      });
    });
  }
  /**
   * Remove border (triggered from context menu).
   *
   * @private
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   */
  removeAllBorders(row, column) {
    const borderId = createId(row, column);
    this.spliceBorder(borderId);
    this.clearBordersFromSelectionSettings(borderId);
    this.clearNullCellRange();
    this.hot.removeCellMeta(row, column, "borders");
  }
  /**
   * Set borders for each cell re. To border position.
   *
   * @private
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} place Coordinate where add/remove border - `top`, `bottom`, `start`, `end` and `noBorders`.
   * @param {boolean} remove True when remove borders, and false when add borders.
   */
  setBorder(row, column, place, remove) {
    let bordersMeta = this.hot.getCellMeta(row, column).borders;
    if (!bordersMeta || bordersMeta.border === void 0) {
      bordersMeta = createEmptyBorders(row, column);
    } else {
      bordersMeta = normalizeBorder(bordersMeta);
    }
    if (remove) {
      bordersMeta[place] = createSingleEmptyBorder();
      const hideCount = this.countHide(bordersMeta);
      if (hideCount === 4) {
        this.removeAllBorders(row, column);
      } else {
        const customSelectionsChecker = this.checkCustomSelectionsFromContextMenu(bordersMeta, place, remove);
        if (!customSelectionsChecker) {
          this.insertBorderIntoSettings(bordersMeta);
        }
        this.hot.setCellMeta(row, column, "borders", denormalizeBorder(bordersMeta));
      }
    } else {
      bordersMeta[place] = createDefaultCustomBorder();
      const customSelectionsChecker = this.checkCustomSelectionsFromContextMenu(bordersMeta, place, remove);
      if (!customSelectionsChecker) {
        this.insertBorderIntoSettings(bordersMeta);
      }
      this.hot.setCellMeta(row, column, "borders", denormalizeBorder(bordersMeta));
    }
  }
  /**
   * Prepare borders based on cell and border position.
   *
   * @private
   * @param {CellRange[]} selected An array of CellRange objects.
   * @param {string} place Coordinate where add/remove border - `top`, `bottom`, `left`, `right` and `noBorders`.
   * @param {boolean} remove True when remove borders, and false when add borders.
   */
  prepareBorder(selected, place, remove) {
    arrayEach(selected, (_ref) => {
      let {
        start,
        end
      } = _ref;
      if (start.row === end.row && start.col === end.col) {
        if (place === "noBorders") {
          this.removeAllBorders(start.row, start.col);
        } else {
          this.setBorder(start.row, start.col, place, remove);
        }
      } else {
        switch (place) {
          case "noBorders":
            rangeEach(start.col, end.col, (colIndex) => {
              rangeEach(start.row, end.row, (rowIndex) => {
                this.removeAllBorders(rowIndex, colIndex);
              });
            });
            break;
          case "top":
            rangeEach(start.col, end.col, (topCol) => {
              this.setBorder(start.row, topCol, place, remove);
            });
            break;
          case "bottom":
            rangeEach(start.col, end.col, (bottomCol) => {
              this.setBorder(end.row, bottomCol, place, remove);
            });
            break;
          case "start":
            rangeEach(start.row, end.row, (rowStart) => {
              this.setBorder(rowStart, start.col, place, remove);
            });
            break;
          case "end":
            rangeEach(start.row, end.row, (rowEnd) => {
              this.setBorder(rowEnd, end.col, place, remove);
            });
            break;
          default:
            break;
        }
      }
    });
  }
  /**
   * Create borders from settings.
   *
   * @private
   * @param {Array} customBorders Object with `row` and `col`, `start`, `end`, `top` and `bottom` properties.
   */
  createCustomBorders(customBorders) {
    arrayEach(customBorders, (customBorder) => {
      const normCustomBorder = normalizeBorder(customBorder);
      if (customBorder.range) {
        this.prepareBorderFromCustomAddedRange(customBorder.range, normCustomBorder);
      } else {
        this.prepareBorderFromCustomAdded(customBorder.row, customBorder.col, normCustomBorder);
      }
    });
  }
  /**
   * Count hide property in border object.
   *
   * @private
   * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and
   *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
   * @returns {number}
   */
  countHide(border) {
    const {
      top: top2,
      bottom: bottom2,
      start,
      end
    } = border;
    const values = [top2, bottom2, start, end];
    return arrayReduce(values, (accumulator, value) => {
      let result = accumulator;
      if (value && value.hide) {
        result += 1;
      }
      return result;
    }, 0);
  }
  /**
   * Clear borders settings from custom selections.
   *
   * @private
   * @param {string} borderId Border id name as string.
   */
  clearBordersFromSelectionSettings(borderId) {
    const index = arrayMap(this.hot.selection.highlight.customSelections, (customSelection) => customSelection.settings.id).indexOf(borderId);
    if (index > -1) {
      this.hot.selection.highlight.customSelections[index].clear();
    }
  }
  /**
   * Clear cellRange with null value.
   *
   * @private
   */
  clearNullCellRange() {
    arrayEach(this.hot.selection.highlight.customSelections, (customSelection, index) => {
      if (customSelection.cellRange === null) {
        this.hot.selection.highlight.customSelections[index].destroy();
        this.hot.selection.highlight.customSelections.splice(index, 1);
        return false;
      }
    });
  }
  /**
   * Hide custom borders.
   *
   * @private
   */
  hideBorders() {
    arrayEach(this.savedBorders, (border) => {
      this.clearBordersFromSelectionSettings(border.id);
      this.clearNullCellRange();
    });
  }
  /**
   * Splice border from savedBorders.
   *
   * @private
   * @param {string} borderId Border id name as string.
   */
  spliceBorder(borderId) {
    const index = arrayMap(this.savedBorders, (border) => border.id).indexOf(borderId);
    if (index > -1) {
      this.savedBorders.splice(index, 1);
    }
  }
  /**
   * Check if an border already exists in the savedBorders array, and if true update border in savedBorders.
   *
   * @private
   * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and
   *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
   *
   * @returns {boolean}
   */
  checkSavedBorders(border) {
    let check = false;
    const hideCount = this.countHide(border);
    if (hideCount === 4) {
      this.spliceBorder(border.id);
      check = true;
    } else {
      arrayEach(this.savedBorders, (savedBorder, index) => {
        if (border.id === savedBorder.id) {
          this.savedBorders[index] = border;
          check = true;
          return false;
        }
      });
    }
    return check;
  }
  /**
   * Check if an border already exists in the customSelections, and if true call toggleHiddenClass method.
   *
   * @private
   * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and
   *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
   * @param {string} place Coordinate where add/remove border - `top`, `bottom`, `start`, `end` and `noBorders`.
   * @param {boolean} remove True when remove borders, and false when add borders.
   *
   * @returns {boolean}
   */
  checkCustomSelectionsFromContextMenu(border, place, remove) {
    let check = false;
    arrayEach(this.hot.selection.highlight.customSelections, (customSelection) => {
      if (border.id === customSelection.settings.id) {
        const borders = this.hot.view._wt.selectionManager.getBorderInstances(customSelection);
        arrayEach(borders, (borderObject) => {
          borderObject.toggleHiddenClass(place, remove);
        });
        check = true;
        return false;
      }
    });
    return check;
  }
  /**
   * Check if an border already exists in the customSelections, and if true reset cellRange.
   *
   * @private
   * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and
   *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
   * @param {CellRange} cellRange The selection range to check.
   * @param {string} [place] Coordinate where add/remove border - `top`, `bottom`, `start`, `end`.
   * @returns {boolean}
   */
  checkCustomSelections(border, cellRange, place) {
    const hideCount = this.countHide(border);
    let check = false;
    if (hideCount === 4) {
      this.removeAllBorders(border.row, border.col);
      check = true;
    } else {
      arrayEach(this.hot.selection.highlight.customSelections, (customSelection) => {
        if (border.id === customSelection.settings.id) {
          customSelection.visualCellRange = cellRange;
          customSelection.commit();
          if (place) {
            const borders = this.hot.view._wt.selectionManager.getBorderInstances(customSelection);
            arrayEach(borders, (borderObject) => {
              borderObject.changeBorderStyle(place, border);
            });
          }
          check = true;
          return false;
        }
      });
    }
    return check;
  }
  /**
   * Change borders from settings.
   *
   * @private
   */
  changeBorderSettings() {
    const customBorders = this.hot.getSettings()[PLUGIN_KEY12];
    if (Array.isArray(customBorders)) {
      const bordersClone = deepClone(customBorders);
      this.checkSettingsCohesion(bordersClone);
      if (!bordersClone.length) {
        this.savedBorders = bordersClone;
      }
      this.createCustomBorders(bordersClone);
    } else if (customBorders !== void 0) {
      this.createCustomBorders(this.savedBorders);
    }
  }
  /**
   * Checks the settings cohesion. The properties such like "left"/"right" are supported only
   * in the LTR mode and the "left"/"right" options can not be used together with "start"/"end" properties.
   *
   * @private
   * @param {object[]} customBorders The user defined custom border objects array.
   */
  checkSettingsCohesion(customBorders) {
    const hasLeftOrRight = hasLeftRightTypeOptions(customBorders);
    const hasStartOrEnd = hasStartEndTypeOptions(customBorders);
    if (hasLeftOrRight && hasStartOrEnd) {
      throw new Error('The "left"/"right" and "start"/"end" options should not be used together. Please use only the option "start"/"end".');
    }
    if (this.hot.isRtl() && hasLeftOrRight) {
      throw new Error('The "left"/"right" properties are not supported for RTL. Please use option "start"/"end".');
    }
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
};
function _onAfterContextMenuDefaultOptions2(defaultOptions2) {
  if (!this.hot.getSettings()[PLUGIN_KEY12]) {
    return;
  }
  defaultOptions2.items.push({
    name: "---------"
  }, {
    key: "borders",
    name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_BORDERS);
    },
    disabled() {
      const range = this.getSelectedRangeLast();
      if (!range) {
        return true;
      }
      if (range.isSingleHeader()) {
        return true;
      }
      return this.selection.isSelectedByCorner();
    },
    submenu: {
      items: [top(this), right(this), bottom(this), left(this), noBorders(this)]
    }
  });
}
function _onAfterInit2() {
  this.changeBorderSettings();
}

// node_modules/handsontable/plugins/dragToScroll/dragToScroll.mjs
function _classPrivateMethodInitSpec17(e, a) {
  _checkPrivateRedeclaration20(e, a), a.add(e);
}
function _checkPrivateRedeclaration20(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty25(e, r, t) {
  return (r = _toPropertyKey25(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey25(t) {
  var i = _toPrimitive25(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive25(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _assertClassBrand20(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var PLUGIN_KEY13 = "dragToScroll";
var PLUGIN_PRIORITY12 = 100;
var _DragToScroll_brand = /* @__PURE__ */ new WeakSet();
var DragToScroll = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec17(this, _DragToScroll_brand);
    _defineProperty25(this, "boundaries", null);
    _defineProperty25(this, "callback", null);
    _defineProperty25(this, "listening", false);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY13;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY12;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link DragToScroll#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[PLUGIN_KEY13];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    if (this.enabled) {
      return;
    }
    this.addHook("afterOnCellMouseDown", (event) => _assertClassBrand20(_DragToScroll_brand, this, _setupListening).call(this, event));
    this.addHook("afterOnCellCornerMouseDown", (event) => _assertClassBrand20(_DragToScroll_brand, this, _setupListening).call(this, event));
    this.registerEvents();
    super.enablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`dragToScroll`](@/api/options.md#dragtoscroll)
   */
  updatePlugin() {
    this.disablePlugin();
    this.enablePlugin();
    super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.unregisterEvents();
    super.disablePlugin();
  }
  /**
   * Sets the boundaries/dimensions of the scrollable viewport.
   *
   * @param {DOMRect|{left: number, right: number, top: number, bottom: number}} [boundaries] An object with
   * coordinates. Contains the window boundaries by default. The object is compatible with DOMRect.
   */
  setBoundaries() {
    let boundaries = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
      left: 0,
      right: this.hot.rootWindow.innerWidth,
      top: 0,
      bottom: this.hot.rootWindow.innerHeight
    };
    this.boundaries = boundaries;
  }
  /**
   * Changes callback function.
   *
   * @param {Function} callback The callback function.
   */
  setCallback(callback) {
    this.callback = callback;
  }
  /**
   * Checks if the mouse position (X, Y) is outside the viewport and fires a callback with calculated X an Y diffs
   * between passed boundaries.
   *
   * @param {number} x Mouse X coordinate to check.
   * @param {number} y Mouse Y coordinate to check.
   */
  check(x, y) {
    let diffX = 0;
    let diffY = 0;
    if (y < this.boundaries.top) {
      diffY = y - this.boundaries.top;
    } else if (y > this.boundaries.bottom) {
      diffY = y - this.boundaries.bottom;
    }
    if (x < this.boundaries.left) {
      diffX = x - this.boundaries.left;
    } else if (x > this.boundaries.right) {
      diffX = x - this.boundaries.right;
    }
    this.callback(diffX, diffY);
  }
  /**
   * Enables listening on `mousemove` event.
   *
   * @private
   */
  listen() {
    this.listening = true;
  }
  /**
   * Disables listening on `mousemove` event.
   *
   * @private
   */
  unlisten() {
    this.listening = false;
  }
  /**
   * Returns current state of listening.
   *
   * @private
   * @returns {boolean}
   */
  isListening() {
    return this.listening;
  }
  /**
   * Registers dom listeners.
   *
   * @private
   */
  registerEvents() {
    const {
      rootWindow
    } = this.hot;
    let frame = rootWindow;
    while (frame) {
      this.eventManager.addEventListener(frame.document, "contextmenu", () => this.unlisten());
      this.eventManager.addEventListener(frame.document, "mouseup", () => this.unlisten());
      this.eventManager.addEventListener(frame.document, "mousemove", (event) => this.onMouseMove(event));
      frame = getParentWindow(frame);
    }
  }
  /**
   * Unbinds the events used by the plugin.
   *
   * @private
   */
  unregisterEvents() {
    this.eventManager.clear();
  }
  /**
   * 'mouseMove' event callback.
   *
   * @private
   * @param {MouseEvent} event `mousemove` event properties.
   */
  onMouseMove(event) {
    if (!this.isListening()) {
      return;
    }
    this.check(event.clientX, event.clientY);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
};
function _setupListening(event) {
  if (isRightClick(event)) {
    return;
  }
  const scrollHandler = this.hot.view._wt.wtOverlays.topOverlay.mainTableScrollableElement;
  this.setBoundaries(scrollHandler !== this.hot.rootWindow ? scrollHandler.getBoundingClientRect() : void 0);
  this.setCallback((scrollX, scrollY) => {
    var _scrollHandler$scroll, _scrollHandler$scroll2;
    const horizontalScrollValue = (_scrollHandler$scroll = scrollHandler.scrollLeft) !== null && _scrollHandler$scroll !== void 0 ? _scrollHandler$scroll : scrollHandler.scrollX;
    const verticalScrollValue = (_scrollHandler$scroll2 = scrollHandler.scrollTop) !== null && _scrollHandler$scroll2 !== void 0 ? _scrollHandler$scroll2 : scrollHandler.scrollY;
    scrollHandler.scroll(horizontalScrollValue + Math.sign(scrollX) * 50, verticalScrollValue + Math.sign(scrollY) * 20);
  });
  this.listen();
}

// node_modules/handsontable/plugins/dropdownMenu/dropdownMenu.mjs
function _classPrivateMethodInitSpec18(e, a) {
  _checkPrivateRedeclaration21(e, a), a.add(e);
}
function _classPrivateFieldInitSpec13(e, t, a) {
  _checkPrivateRedeclaration21(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration21(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty26(e, r, t) {
  return (r = _toPropertyKey26(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey26(t) {
  var i = _toPrimitive26(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive26(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _classPrivateFieldGet13(s, a) {
  return s.get(_assertClassBrand21(s, a));
}
function _classPrivateFieldSet11(s, a, r) {
  return s.set(_assertClassBrand21(s, a), r), r;
}
function _assertClassBrand21(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
Hooks.getSingleton().register("afterDropdownMenuDefaultOptions");
Hooks.getSingleton().register("beforeDropdownMenuShow");
Hooks.getSingleton().register("afterDropdownMenuShow");
Hooks.getSingleton().register("afterDropdownMenuHide");
Hooks.getSingleton().register("afterDropdownMenuExecute");
var PLUGIN_KEY14 = "dropdownMenu";
var PLUGIN_PRIORITY13 = 230;
var BUTTON_CLASS_NAME = "changeType";
var SHORTCUTS_GROUP9 = PLUGIN_KEY14;
var _isButtonClicked = /* @__PURE__ */ new WeakMap();
var _DropdownMenu_brand = /* @__PURE__ */ new WeakSet();
var DropdownMenu = class _DropdownMenu extends BasePlugin {
  static get PLUGIN_KEY() {
    return PLUGIN_KEY14;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY13;
  }
  static get PLUGIN_DEPS() {
    return ["plugin:AutoColumnSize"];
  }
  /**
   * Default menu items order when `dropdownMenu` is enabled by setting the config item to `true`.
   *
   * @returns {Array}
   */
  static get DEFAULT_ITEMS() {
    return [KEY4, KEY5, KEY, KEY8, KEY, KEY3, KEY, KEY6, KEY, KEY2];
  }
  /**
   * Instance of {@link CommandExecutor}.
   *
   * @private
   * @type {CommandExecutor}
   */
  constructor(hotInstance) {
    super(hotInstance);
    _classPrivateMethodInitSpec18(this, _DropdownMenu_brand);
    _defineProperty26(this, "commandExecutor", new CommandExecutor(this.hot));
    _defineProperty26(this, "itemsFactory", null);
    _defineProperty26(this, "menu", null);
    _classPrivateFieldInitSpec13(this, _isButtonClicked, false);
    this.hot.addHook("afterGetColHeader", (col, TH) => _assertClassBrand21(_DropdownMenu_brand, this, _onAfterGetColHeader3).call(this, col, TH));
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link DropdownMenu#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return this.hot.getSettings()[PLUGIN_KEY14];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   *
   * @fires Hooks#afterDropdownMenuDefaultOptions
   * @fires Hooks#beforeDropdownMenuSetItems
   */
  enablePlugin() {
    var _this = this;
    if (this.enabled) {
      return;
    }
    this.itemsFactory = new ItemsFactory(this.hot, _DropdownMenu.DEFAULT_ITEMS);
    this.addHook("beforeOnCellMouseDown", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _assertClassBrand21(_DropdownMenu_brand, _this, _onBeforeOnCellMouseDown3).call(_this, ...args);
    });
    this.addHook("beforeViewportScrollHorizontally", function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _assertClassBrand21(_DropdownMenu_brand, _this, _onBeforeViewportScrollHorizontally).call(_this, ...args);
    });
    const settings = this.hot.getSettings()[PLUGIN_KEY14];
    const predefinedItems2 = {
      items: this.itemsFactory.getItems(settings)
    };
    this.registerEvents();
    if (typeof settings.callback === "function") {
      this.commandExecutor.setCommonCallback(settings.callback);
    }
    this.registerShortcuts();
    super.enablePlugin();
    this.callOnPluginsReady(() => {
      this.hot.runHooks("afterDropdownMenuDefaultOptions", predefinedItems2);
      this.itemsFactory.setPredefinedItems(predefinedItems2.items);
      const menuItems = this.itemsFactory.getItems(settings);
      if (this.menu) {
        this.menu.destroy();
      }
      this.menu = new Menu(this.hot, {
        className: "htDropdownMenu",
        keepInViewport: true,
        container: settings.uiContainer || this.hot.rootDocument.body
      });
      this.hot.runHooks("beforeDropdownMenuSetItems", menuItems);
      this.menu.setMenuItems(menuItems);
      this.menu.addLocalHook("beforeOpen", () => _assertClassBrand21(_DropdownMenu_brand, this, _onMenuBeforeOpen2).call(this));
      this.menu.addLocalHook("afterOpen", () => _assertClassBrand21(_DropdownMenu_brand, this, _onMenuAfterOpen2).call(this));
      this.menu.addLocalHook("afterSubmenuOpen", (subMenuInstance) => _assertClassBrand21(_DropdownMenu_brand, this, _onSubMenuAfterOpen).call(this, subMenuInstance));
      this.menu.addLocalHook("afterClose", () => _assertClassBrand21(_DropdownMenu_brand, this, _onMenuAfterClose2).call(this));
      this.menu.addLocalHook("executeCommand", function() {
        for (var _len3 = arguments.length, params = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          params[_key3] = arguments[_key3];
        }
        return _this.executeCommand.call(_this, ...params);
      });
      arrayEach(menuItems, (command) => this.commandExecutor.registerCommand(command.key, command));
    });
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`dropdownMenu`](@/api/options.md#dropdownmenu)
   */
  updatePlugin() {
    this.disablePlugin();
    this.enablePlugin();
    super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.close();
    if (this.menu) {
      this.menu.destroy();
    }
    this.unregisterShortcuts();
    super.disablePlugin();
  }
  /**
   * Register shortcuts responsible for toggling dropdown menu.
   *
   * @private
   */
  registerShortcuts() {
    const gridContext = this.hot.getShortcutManager().getContext("grid");
    const callback = () => {
      const {
        highlight
      } = this.hot.getSelectedRangeLast();
      if ((highlight.isHeader() && highlight.row === -1 || highlight.isCell()) && highlight.col >= 0) {
        this.hot.selectColumns(highlight.col, highlight.col, -1);
        const {
          from
        } = this.hot.getSelectedRangeLast();
        const offset2 = getDocumentOffsetByElement(this.menu.container, this.hot.rootDocument);
        const target = this.hot.getCell(-1, from.col, true).querySelector(`.${BUTTON_CLASS_NAME}`);
        const rect = target.getBoundingClientRect();
        this.open({
          left: rect.left + offset2.left,
          top: rect.top + target.offsetHeight + offset2.top
        }, {
          left: rect.width,
          right: 0,
          above: 0,
          below: 3
        });
        this.menu.getNavigator().toFirstItem();
      }
    };
    gridContext.addShortcuts([{
      keys: [["Shift", "Alt", "ArrowDown"], ["Control/Meta", "Enter"]],
      callback,
      runOnlyIf: () => {
        var _this$hot$getSelected;
        const highlight = (_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight;
        return highlight && this.hot.selection.isCellVisible(highlight) && highlight.isHeader() && !this.menu.isOpened();
      },
      captureCtrl: true,
      group: SHORTCUTS_GROUP9
    }, {
      keys: [["Shift", "Alt", "ArrowDown"]],
      callback,
      runOnlyIf: () => {
        var _this$hot$getSelected2;
        const highlight = (_this$hot$getSelected2 = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected2 === void 0 ? void 0 : _this$hot$getSelected2.highlight;
        return highlight && this.hot.selection.isCellVisible(highlight) && highlight.isCell() && !this.menu.isOpened();
      },
      group: SHORTCUTS_GROUP9
    }]);
  }
  /**
   * Unregister shortcuts responsible for toggling dropdown menu.
   *
   * @private
   */
  unregisterShortcuts() {
    this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(SHORTCUTS_GROUP9);
  }
  /**
   * Registers the DOM listeners.
   *
   * @private
   */
  registerEvents() {
    this.eventManager.addEventListener(this.hot.rootElement, "click", (event) => _assertClassBrand21(_DropdownMenu_brand, this, _onTableClick).call(this, event));
  }
  /**
   * Opens menu and re-position it based on the passed coordinates.
   *
   * @param {{ top: number, left: number }|Event} position An object with `top` and `left` properties
   * which contains coordinates relative to the browsers viewport (without included scroll offsets).
   * Or if the native event is passed the menu will be positioned based on the `pageX` and `pageY`
   * coordinates.
   * @param {{ above: number, below: number, left: number, right: number }} offset An object allows applying
   * the offset to the menu position.
   * @fires Hooks#beforeDropdownMenuShow
   * @fires Hooks#afterDropdownMenuShow
   */
  open(position) {
    var _this$menu;
    let offset2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      above: 0,
      below: 0,
      left: 0,
      right: 0
    };
    if ((_this$menu = this.menu) !== null && _this$menu !== void 0 && _this$menu.isOpened()) {
      return;
    }
    this.menu.open();
    objectEach(offset2, (value, key) => {
      this.menu.setOffset(key, value);
    });
    this.menu.setPosition(position);
  }
  /**
   * Closes dropdown menu.
   */
  close() {
    var _this$menu2;
    (_this$menu2 = this.menu) === null || _this$menu2 === void 0 || _this$menu2.close();
  }
  /**
   * Executes context menu command.
   *
   * The `executeCommand()` method works only for selected cells.
   *
   * When no cells are selected, `executeCommand()` doesn't do anything.
   *
   * You can execute all predefined commands:
   *  * `'col_left'` - Insert column left
   *  * `'col_right'` - Insert column right
   *  * `'clear_column'` - Clear selected column
   *  * `'remove_col'` - Remove column
   *  * `'undo'` - Undo last action
   *  * `'redo'` - Redo last action
   *  * `'make_read_only'` - Make cell read only
   *  * `'alignment:left'` - Alignment to the left
   *  * `'alignment:top'` - Alignment to the top
   *  * `'alignment:right'` - Alignment to the right
   *  * `'alignment:bottom'` - Alignment to the bottom
   *  * `'alignment:middle'` - Alignment to the middle
   *  * `'alignment:center'` - Alignment to the center (justify).
   *
   * Or you can execute command registered in settings where `key` is your command name.
   *
   * @param {string} commandName Command name to execute.
   * @param {*} params Additional parameters passed to the command executor.
   */
  executeCommand(commandName) {
    for (var _len4 = arguments.length, params = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      params[_key4 - 1] = arguments[_key4];
    }
    this.commandExecutor.execute(commandName, ...params);
  }
  /**
   * Turns on / off listening on dropdown menu.
   *
   * @private
   * @param {boolean} listen Turn on listening when value is set to true, otherwise turn it off.
   */
  setListening() {
    let listen = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
    if (this.menu.isOpened()) {
      if (listen) {
        this.menu.hotMenu.listen();
      } else {
        this.menu.hotMenu.unlisten();
      }
    }
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    this.close();
    if (this.menu) {
      this.menu.destroy();
    }
    super.destroy();
  }
};
function _addCustomShortcuts(menuInstance) {
  menuInstance.getKeyboardShortcutsCtrl().addCustomShortcuts([{
    keys: [["Control/Meta", "A"]],
    callback: () => false
  }]);
}
function _onTableClick(event) {
  if (hasClass(event.target, BUTTON_CLASS_NAME)) {
    const offset2 = getDocumentOffsetByElement(this.menu.container, this.hot.rootDocument);
    const rect = event.target.getBoundingClientRect();
    event.stopPropagation();
    _classPrivateFieldSet11(_isButtonClicked, this, false);
    this.open({
      left: rect.left + offset2.left,
      top: rect.top + event.target.offsetHeight + offset2.top
    }, {
      left: rect.width,
      right: 0,
      above: 0,
      below: 3
    });
  }
}
function _onAfterGetColHeader3(col, TH) {
  const headerRow = TH.parentNode;
  if (!headerRow) {
    return;
  }
  const headerRowList = headerRow.parentNode.childNodes;
  const level = Array.prototype.indexOf.call(headerRowList, headerRow);
  if (col < 0 || level !== headerRowList.length - 1) {
    return;
  }
  const existingButton = TH.querySelector(`.${BUTTON_CLASS_NAME}`);
  if (this.enabled && existingButton) {
    return;
  }
  if (!this.enabled) {
    if (existingButton) {
      existingButton.parentNode.removeChild(existingButton);
    }
    return;
  }
  const button = this.hot.rootDocument.createElement("button");
  button.className = BUTTON_CLASS_NAME;
  button.type = "button";
  button.tabIndex = -1;
  if (this.hot.getSettings().ariaTags) {
    setAttribute(button, [A11Y_HIDDEN(), A11Y_LABEL(" ")]);
    setAttribute(TH, [A11Y_HASPOPUP("menu")]);
  }
  button.onclick = function() {
    return false;
  };
  TH.firstChild.insertBefore(button, TH.firstChild.firstChild);
}
function _onMenuBeforeOpen2() {
  this.hot.runHooks("beforeDropdownMenuShow", this);
}
function _onMenuAfterOpen2() {
  this.hot.runHooks("afterDropdownMenuShow", this);
  _assertClassBrand21(_DropdownMenu_brand, this, _addCustomShortcuts).call(this, this.menu);
}
function _onSubMenuAfterOpen(subMenuInstance) {
  _assertClassBrand21(_DropdownMenu_brand, this, _addCustomShortcuts).call(this, subMenuInstance);
}
function _onMenuAfterClose2() {
  this.hot.listen();
  this.hot.runHooks("afterDropdownMenuHide", this);
}
function _onBeforeViewportScrollHorizontally(visualColumn) {
  return _classPrivateFieldGet13(_isButtonClicked, this) ? null : visualColumn;
}
function _onBeforeOnCellMouseDown3(event) {
  if (hasClass(event.target, BUTTON_CLASS_NAME)) {
    _classPrivateFieldSet11(_isButtonClicked, this, true);
  }
}
DropdownMenu.SEPARATOR = {
  name: KEY
};

// node_modules/handsontable/plugins/exportFile/dataProvider.mjs
function _defineProperty27(e, r, t) {
  return (r = _toPropertyKey27(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey27(t) {
  var i = _toPrimitive27(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive27(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var DataProvider = class {
  constructor(hotInstance) {
    _defineProperty27(this, "hot", void 0);
    _defineProperty27(this, "options", {});
    this.hot = hotInstance;
  }
  /**
   * Set options for data provider.
   *
   * @param {object} options Object with specified options.
   */
  setOptions(options) {
    this.options = options;
  }
  /**
   * Get table data based on provided settings to the class constructor.
   *
   * @returns {Array}
   */
  getData() {
    const {
      startRow,
      startCol,
      endRow,
      endCol
    } = this._getDataRange();
    const options = this.options;
    const data = [];
    rangeEach(startRow, endRow, (rowIndex) => {
      const row = [];
      if (!options.exportHiddenRows && this._isHiddenRow(rowIndex)) {
        return;
      }
      rangeEach(startCol, endCol, (colIndex) => {
        if (!options.exportHiddenColumns && this._isHiddenColumn(colIndex)) {
          return;
        }
        row.push(this.hot.getDataAtCell(rowIndex, colIndex));
      });
      data.push(row);
    });
    return data;
  }
  /**
   * Gets list of row headers.
   *
   * @returns {Array}
   */
  getRowHeaders() {
    const headers = [];
    if (this.options.rowHeaders) {
      const {
        startRow,
        endRow
      } = this._getDataRange();
      const rowHeaders = this.hot.getRowHeader();
      rangeEach(startRow, endRow, (row) => {
        if (!this.options.exportHiddenRows && this._isHiddenRow(row)) {
          return;
        }
        headers.push(rowHeaders[row]);
      });
    }
    return headers;
  }
  /**
   * Gets list of columns headers.
   *
   * @returns {Array}
   */
  getColumnHeaders() {
    const headers = [];
    if (this.options.columnHeaders) {
      const {
        startCol,
        endCol
      } = this._getDataRange();
      const colHeaders = this.hot.getColHeader();
      rangeEach(startCol, endCol, (column) => {
        if (!this.options.exportHiddenColumns && this._isHiddenColumn(column)) {
          return;
        }
        headers.push(colHeaders[column]);
      });
    }
    return headers;
  }
  /**
   * Get data range object based on settings provided in the class constructor.
   *
   * @private
   * @returns {object} Returns object with keys `startRow`, `startCol`, `endRow` and `endCol`.
   */
  _getDataRange() {
    const cols = this.hot.countCols() - 1;
    const rows = this.hot.countRows() - 1;
    let [startRow = 0, startCol = 0, endRow = rows, endCol = cols] = this.options.range;
    startRow = Math.max(startRow, 0);
    startCol = Math.max(startCol, 0);
    endRow = Math.min(endRow, rows);
    endCol = Math.min(endCol, cols);
    return {
      startRow,
      startCol,
      endRow,
      endCol
    };
  }
  /**
   * Check if row at specified row index is hidden.
   *
   * @private
   * @param {number} row Row index.
   * @returns {boolean}
   */
  _isHiddenRow(row) {
    return this.hot.rowIndexMapper.isHidden(this.hot.toPhysicalRow(row));
  }
  /**
   * Check if column at specified column index is hidden.
   *
   * @private
   * @param {number} column Visual column index.
   * @returns {boolean}
   */
  _isHiddenColumn(column) {
    return this.hot.columnIndexMapper.isHidden(this.hot.toPhysicalColumn(column));
  }
};
var dataProvider_default = DataProvider;

// node_modules/handsontable/plugins/exportFile/types/_base.mjs
function _defineProperty28(e, r, t) {
  return (r = _toPropertyKey28(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey28(t) {
  var i = _toPrimitive28(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive28(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var BaseType = class _BaseType {
  /**
   * Default options.
   *
   * @returns {object}
   */
  static get DEFAULT_OPTIONS() {
    return {
      mimeType: "text/plain",
      fileExtension: "txt",
      filename: "Handsontable [YYYY]-[MM]-[DD]",
      encoding: "utf-8",
      bom: false,
      columnHeaders: false,
      rowHeaders: false,
      exportHiddenColumns: false,
      exportHiddenRows: false,
      range: []
    };
  }
  /**
   * Data provider.
   *
   * @type {DataProvider}
   */
  constructor(dataProvider, options) {
    _defineProperty28(this, "dataProvider", void 0);
    _defineProperty28(this, "options", void 0);
    this.dataProvider = dataProvider;
    this.options = this._mergeOptions(options);
    this.dataProvider.setOptions(this.options);
  }
  /**
   * Merge options provided by users with defaults.
   *
   * @param {object} options An object with options to merge with.
   * @returns {object} Returns new options object.
   */
  _mergeOptions(options) {
    let _options = clone(this.constructor.DEFAULT_OPTIONS);
    const date = /* @__PURE__ */ new Date();
    _options = extend(clone(_BaseType.DEFAULT_OPTIONS), _options);
    _options = extend(_options, options);
    _options.filename = substitute(_options.filename, {
      YYYY: date.getFullYear(),
      MM: `${date.getMonth() + 1}`.padStart(2, "0"),
      DD: `${date.getDate()}`.padStart(2, "0")
    });
    return _options;
  }
};
var base_default2 = BaseType;

// node_modules/handsontable/plugins/exportFile/types/csv.mjs
function _classPrivateMethodInitSpec19(e, a) {
  _checkPrivateRedeclaration22(e, a), a.add(e);
}
function _checkPrivateRedeclaration22(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _assertClassBrand22(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var CHAR_CARRIAGE_RETURN = String.fromCharCode(13);
var CHAR_DOUBLE_QUOTES = String.fromCharCode(34);
var CHAR_LINE_FEED = String.fromCharCode(10);
var CHAR_EQUAL = String.fromCharCode(61);
var CHAR_PLUS = String.fromCharCode(43);
var CHAR_MINUS = String.fromCharCode(45);
var CHAR_AT = String.fromCharCode(64);
var CHAR_TAB = String.fromCharCode(9);
var _Csv_brand = /* @__PURE__ */ new WeakSet();
var Csv = class extends base_default2 {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec19(this, _Csv_brand);
  }
  /**
   * Default options for exporting CSV format.
   *
   * @returns {object}
   */
  static get DEFAULT_OPTIONS() {
    return {
      mimeType: "text/csv",
      fileExtension: "csv",
      bom: true,
      columnDelimiter: ",",
      rowDelimiter: "\r\n",
      sanitizeValues: false
    };
  }
  /**
   * Create string body in desired format.
   *
   * @returns {string}
   */
  export() {
    const options = this.options;
    const data = this.dataProvider.getData();
    let columnHeaders = this.dataProvider.getColumnHeaders();
    const hasColumnHeaders = columnHeaders.length > 0;
    const rowHeaders = this.dataProvider.getRowHeaders();
    const hasRowHeaders = rowHeaders.length > 0;
    let result = options.bom ? String.fromCharCode(65279) : "";
    if (hasColumnHeaders) {
      columnHeaders = arrayMap(columnHeaders, (value) => this._escapeCell(value, {
        force: true,
        sanitizeValue: options.sanitizeValues
      }));
      if (hasRowHeaders) {
        result += options.columnDelimiter;
      }
      result += columnHeaders.join(options.columnDelimiter);
      result += options.rowDelimiter;
    }
    arrayEach(data, (value, index) => {
      if (index > 0) {
        result += options.rowDelimiter;
      }
      if (hasRowHeaders) {
        result += this._escapeCell(rowHeaders[index], {
          sanitizeValue: options.sanitizeValues
        });
        result += options.columnDelimiter;
      }
      const escapedValue = value.map((cellValue) => this._escapeCell(cellValue, {
        sanitizeValue: options.sanitizeValues
      })).join(options.columnDelimiter);
      result += escapedValue;
    });
    return result;
  }
  /**
   * Escape cell value.
   *
   * @param {*} value Cell value.
   * @param {object} options Options.
   * @param {boolean} [options.force=false] Indicates if cell value will be escaped forcefully.
   * @param {boolean|RegExp|Function} [options.sanitizeValue=false] Controls the sanitization of cell value.
   * @returns {string}
   */
  _escapeCell(value) {
    let {
      force = false,
      sanitizeValue = false
    } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let returnValue = stringify(value);
    if (returnValue === "") {
      return returnValue;
    }
    if (sanitizeValue) {
      force = true;
    }
    if (sanitizeValue instanceof RegExp) {
      returnValue = _assertClassBrand22(_Csv_brand, this, _sanitizeValueWithRegExp).call(this, returnValue, sanitizeValue);
    } else if (typeof sanitizeValue === "function") {
      returnValue = sanitizeValue(returnValue);
    } else if (sanitizeValue) {
      returnValue = _assertClassBrand22(_Csv_brand, this, _sanitizeValueWithOWASP).call(this, returnValue);
    }
    if (force || returnValue.indexOf(CHAR_CARRIAGE_RETURN) >= 0 || returnValue.indexOf(CHAR_DOUBLE_QUOTES) >= 0 || returnValue.indexOf(CHAR_LINE_FEED) >= 0 || returnValue.indexOf(this.options.columnDelimiter) >= 0) {
      returnValue = returnValue.replace(new RegExp('"', "g"), '""');
      returnValue = `"${returnValue}"`;
    }
    return returnValue;
  }
};
function _sanitizeValueWithOWASP(value) {
  if (value.startsWith(CHAR_EQUAL) || value.startsWith(CHAR_PLUS) || value.startsWith(CHAR_MINUS) || value.startsWith(CHAR_AT) || value.startsWith(CHAR_TAB) || value.startsWith(CHAR_CARRIAGE_RETURN)) {
    return `'${value}`;
  }
  return value;
}
function _sanitizeValueWithRegExp(value, regexp) {
  return regexp.test(value) ? `'${value}` : value;
}
var csv_default = Csv;

// node_modules/handsontable/plugins/exportFile/typeFactory.mjs
var TYPE_CSV = "csv";
var EXPORT_TYPES = {
  [TYPE_CSV]: csv_default
};
function typeFactory(type, dataProvider, options) {
  if (typeof EXPORT_TYPES[type] === "function") {
    return new EXPORT_TYPES[type](dataProvider, options);
  }
  return null;
}

// node_modules/handsontable/plugins/exportFile/exportFile.mjs
var PLUGIN_KEY15 = "exportFile";
var PLUGIN_PRIORITY14 = 240;
var ExportFile = class extends BasePlugin {
  static get PLUGIN_KEY() {
    return PLUGIN_KEY15;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY14;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ExportFile#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return true;
  }
  /**
   * @typedef ExportOptions
   * @memberof ExportFile
   * @type {object}
   * @property {boolean} [exportHiddenRows=false] Include hidden rows in the exported file.
   * @property {boolean} [exportHiddenColumns=false] Include hidden columns in the exported file.
   * @property {boolean} [columnHeaders=false] Include column headers in the exported file.
   * @property {boolean} [rowHeaders=false] Include row headers in the exported file.
   * @property {string} [columnDelimiter=','] Column delimiter.
   * @property {string} [range=[]] Cell range that will be exported to file.
   * @property {boolean|RegExp|Function} [sanitizeValues=false] Controls the sanitization of cell value.
   */
  /**
   * Exports table data as a string.
   *
   * @param {string} format Export format type eq. `'csv'`.
   * @param {ExportOptions} options Export options.
   * @returns {string}
   */
  exportAsString(format2) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return this._createTypeFormatter(format2, options).export();
  }
  /**
   * Exports table data as a blob object.
   *
   * @param {string} format Export format type eq. `'csv'`.
   * @param {ExportOptions} options Export options.
   * @returns {Blob}
   */
  exportAsBlob(format2) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return this._createBlob(this._createTypeFormatter(format2, options));
  }
  /**
   * Exports table data as a downloadable file.
   *
   * @param {string} format Export format type eg. `'csv'`.
   * @param {ExportOptions} options Export options.
   */
  downloadFile(format2) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const {
      rootDocument,
      rootWindow
    } = this.hot;
    const formatter2 = this._createTypeFormatter(format2, options);
    const blob = this._createBlob(formatter2);
    const URL = rootWindow.URL || rootWindow.webkitURL;
    const a = rootDocument.createElement("a");
    const name = `${formatter2.options.filename}.${formatter2.options.fileExtension}`;
    if (a.download !== void 0) {
      const url = URL.createObjectURL(blob);
      a.style.display = "none";
      a.setAttribute("href", url);
      a.setAttribute("download", name);
      rootDocument.body.appendChild(a);
      a.dispatchEvent(new MouseEvent("click"));
      rootDocument.body.removeChild(a);
      setTimeout(() => {
        URL.revokeObjectURL(url);
      }, 100);
    } else if (navigator.msSaveOrOpenBlob) {
      navigator.msSaveOrOpenBlob(blob, name);
    }
  }
  /**
   * Creates and returns class formatter for specified export type.
   *
   * @private
   * @param {string} format Export format type eq. `'csv'`.
   * @param {ExportOptions} options Export options.
   * @returns {BaseType}
   */
  _createTypeFormatter(format2) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!EXPORT_TYPES[format2]) {
      throw new Error(`Export format type "${format2}" is not supported.`);
    }
    return typeFactory(format2, new dataProvider_default(this.hot), options);
  }
  /**
   * Creates blob object based on provided type formatter class.
   *
   * @private
   * @param {BaseType} typeFormatter The instance of the specyfic formatter/exporter.
   * @returns {Blob}
   */
  _createBlob(typeFormatter) {
    let formatter2 = null;
    if (typeof Blob !== "undefined") {
      formatter2 = new Blob([typeFormatter.export()], {
        type: `${typeFormatter.options.mimeType};charset=${typeFormatter.options.encoding}`
      });
    }
    return formatter2;
  }
};

// node_modules/handsontable/plugins/filters/component/_base.mjs
function _defineProperty29(e, r, t) {
  return (r = _toPropertyKey29(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey29(t) {
  var i = _toPrimitive29(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive29(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var BaseComponent = class {
  constructor(hotInstance, _ref) {
    let {
      id,
      stateless = true
    } = _ref;
    _defineProperty29(this, "hot", void 0);
    _defineProperty29(this, "id", void 0);
    _defineProperty29(this, "elements", []);
    _defineProperty29(this, "hidden", false);
    _defineProperty29(this, "stateId", "");
    _defineProperty29(this, "state", void 0);
    this.hot = hotInstance;
    this.id = id;
    this.stateId = `Filters.component.${this.id}`;
    this.state = stateless ? null : this.hot.columnIndexMapper.registerMap(this.stateId, new LinkedPhysicalIndexToValueMap());
  }
  /**
   * Gets the list of elements from which the component is built.
   *
   * @returns {BaseUI[]}
   */
  getElements() {
    return this.elements;
  }
  /**
   * Reset elements to its initial state.
   */
  reset() {
    arrayEach(this.elements, (ui) => ui.reset());
  }
  /**
   * Hide component.
   */
  hide() {
    this.hidden = true;
  }
  /**
   * Show component.
   */
  show() {
    this.hidden = false;
  }
  /**
   * Check if component is hidden.
   *
   * @returns {boolean}
   */
  isHidden() {
    return this.hot === null || this.hidden;
  }
  /**
   * Restores the component state from the given physical column index. The method
   * internally calls the `setState` method. The state then is individually processed
   * by each component.
   *
   * @param {number} physicalColumn The physical column index.
   */
  restoreState(physicalColumn) {
    if (this.state) {
      this.setState(this.state.getValueAtIndex(physicalColumn));
    }
  }
  /**
   * The custom logic for component state restoring.
   */
  setState() {
    throw new Error("The state setting logic is not implemented");
  }
  /**
   * Saves the component state to the given physical column index. The method
   * internally calls the `getState` method, which returns the current state of
   * the component.
   *
   * @param {number} physicalColumn The physical column index.
   */
  saveState(physicalColumn) {
    if (this.state) {
      this.state.setValueAtIndex(physicalColumn, this.getState());
    }
  }
  /**
   * The custom logic for component state gathering (for stateful components).
   */
  getState() {
    throw new Error("The state gathering logic is not implemented");
  }
  /**
   * Destroy element.
   */
  destroy() {
    this.hot.columnIndexMapper.unregisterMap(this.stateId);
    this.clearLocalHooks();
    arrayEach(this.elements, (ui) => ui.destroy());
    this.state = null;
    this.elements = null;
    this.hot = null;
  }
};
mixin(BaseComponent, localHooks_default);

// node_modules/handsontable/plugins/filters/conditionRegisterer.mjs
var conditions = {};
function getCondition(name, args) {
  if (!conditions[name]) {
    throw Error(`Filter condition "${name}" does not exist.`);
  }
  const {
    condition: condition24,
    descriptor
  } = conditions[name];
  let conditionArguments = args;
  if (descriptor.inputValuesDecorator) {
    conditionArguments = descriptor.inputValuesDecorator(conditionArguments);
  }
  return function(dataRow) {
    return condition24.apply(dataRow.meta.instance, [].concat([dataRow], [conditionArguments]));
  };
}
function getConditionDescriptor(name) {
  if (!conditions[name]) {
    throw Error(`Filter condition "${name}" does not exist.`);
  }
  return conditions[name].descriptor;
}
function registerCondition(name, condition24, descriptor) {
  descriptor.key = name;
  conditions[name] = {
    condition: condition24,
    descriptor
  };
}

// node_modules/handsontable/plugins/filters/condition/none.mjs
var CONDITION_NAME = "none";
function condition() {
  return true;
}
registerCondition(CONDITION_NAME, condition, {
  name: FILTERS_CONDITIONS_NONE,
  inputsCount: 0,
  showOperators: false
});

// node_modules/handsontable/plugins/filters/condition/empty.mjs
var CONDITION_NAME2 = "empty";
function condition2(dataRow) {
  return isEmpty(dataRow.value);
}
registerCondition(CONDITION_NAME2, condition2, {
  name: FILTERS_CONDITIONS_EMPTY,
  inputsCount: 0,
  showOperators: true
});

// node_modules/handsontable/plugins/filters/condition/notEmpty.mjs
var CONDITION_NAME3 = "not_empty";
function condition3(dataRow, inputValues) {
  return !getCondition(CONDITION_NAME2, inputValues)(dataRow);
}
registerCondition(CONDITION_NAME3, condition3, {
  name: FILTERS_CONDITIONS_NOT_EMPTY,
  inputsCount: 0,
  showOperators: true
});

// node_modules/handsontable/plugins/filters/condition/equal.mjs
var CONDITION_NAME4 = "eq";
function condition4(dataRow, _ref) {
  let [value] = _ref;
  return stringify(dataRow.value).toLocaleLowerCase(dataRow.meta.locale) === stringify(value);
}
registerCondition(CONDITION_NAME4, condition4, {
  name: FILTERS_CONDITIONS_EQUAL,
  inputsCount: 1,
  showOperators: true
});

// node_modules/handsontable/plugins/filters/condition/notEqual.mjs
var CONDITION_NAME5 = "neq";
function condition5(dataRow, inputValues) {
  return !getCondition(CONDITION_NAME4, inputValues)(dataRow);
}
registerCondition(CONDITION_NAME5, condition5, {
  name: FILTERS_CONDITIONS_NOT_EQUAL,
  inputsCount: 1,
  showOperators: true
});

// node_modules/handsontable/plugins/filters/condition/greaterThan.mjs
var CONDITION_NAME6 = "gt";
function condition6(dataRow, _ref) {
  let [value] = _ref;
  let conditionValue = value;
  if (dataRow.meta.type === "numeric") {
    conditionValue = parseFloat(conditionValue, 10);
  }
  return dataRow.value > conditionValue;
}
registerCondition(CONDITION_NAME6, condition6, {
  name: FILTERS_CONDITIONS_GREATER_THAN,
  inputsCount: 1,
  showOperators: true
});

// node_modules/handsontable/plugins/filters/condition/greaterThanOrEqual.mjs
var CONDITION_NAME7 = "gte";
function condition7(dataRow, _ref) {
  let [value] = _ref;
  let conditionValue = value;
  if (dataRow.meta.type === "numeric") {
    conditionValue = parseFloat(conditionValue, 10);
  }
  return dataRow.value >= conditionValue;
}
registerCondition(CONDITION_NAME7, condition7, {
  name: FILTERS_CONDITIONS_GREATER_THAN_OR_EQUAL,
  inputsCount: 1,
  showOperators: true
});

// node_modules/handsontable/plugins/filters/condition/lessThan.mjs
var CONDITION_NAME8 = "lt";
function condition8(dataRow, _ref) {
  let [value] = _ref;
  let conditionValue = value;
  if (dataRow.meta.type === "numeric") {
    conditionValue = parseFloat(conditionValue, 10);
  }
  return dataRow.value < conditionValue;
}
registerCondition(CONDITION_NAME8, condition8, {
  name: FILTERS_CONDITIONS_LESS_THAN,
  inputsCount: 1,
  showOperators: true
});

// node_modules/handsontable/plugins/filters/condition/lessThanOrEqual.mjs
var CONDITION_NAME9 = "lte";
function condition9(dataRow, _ref) {
  let [value] = _ref;
  let conditionValue = value;
  if (dataRow.meta.type === "numeric") {
    conditionValue = parseFloat(conditionValue, 10);
  }
  return dataRow.value <= conditionValue;
}
registerCondition(CONDITION_NAME9, condition9, {
  name: FILTERS_CONDITIONS_LESS_THAN_OR_EQUAL,
  inputsCount: 1,
  showOperators: true
});

// node_modules/handsontable/plugins/filters/condition/date/after.mjs
var CONDITION_NAME10 = "date_after";
function condition10(dataRow, _ref) {
  let [value] = _ref;
  const date = moment_default(dataRow.value, dataRow.meta.dateFormat);
  const inputDate = moment_default(value, dataRow.meta.dateFormat);
  if (!date.isValid() || !inputDate.isValid()) {
    return false;
  }
  return date.diff(inputDate) >= 0;
}
registerCondition(CONDITION_NAME10, condition10, {
  name: FILTERS_CONDITIONS_AFTER,
  inputsCount: 1,
  showOperators: true
});

// node_modules/handsontable/plugins/filters/condition/date/before.mjs
var CONDITION_NAME11 = "date_before";
function condition11(dataRow, _ref) {
  let [value] = _ref;
  const date = moment_default(dataRow.value, dataRow.meta.dateFormat);
  const inputDate = moment_default(value, dataRow.meta.dateFormat);
  if (!date.isValid() || !inputDate.isValid()) {
    return false;
  }
  return date.diff(inputDate) <= 0;
}
registerCondition(CONDITION_NAME11, condition11, {
  name: FILTERS_CONDITIONS_BEFORE,
  inputsCount: 1,
  showOperators: true
});

// node_modules/handsontable/plugins/filters/condition/between.mjs
var CONDITION_NAME12 = "between";
function condition12(dataRow, _ref) {
  let [from, to] = _ref;
  let fromValue = from;
  let toValue = to;
  if (dataRow.meta.type === "numeric") {
    const _from = parseFloat(fromValue, 10);
    const _to = parseFloat(toValue, 10);
    fromValue = Math.min(_from, _to);
    toValue = Math.max(_from, _to);
  } else if (dataRow.meta.type === "date") {
    const dateBefore = getCondition(CONDITION_NAME11, [toValue]);
    const dateAfter = getCondition(CONDITION_NAME10, [fromValue]);
    return dateBefore(dataRow) && dateAfter(dataRow);
  }
  return dataRow.value >= fromValue && dataRow.value <= toValue;
}
registerCondition(CONDITION_NAME12, condition12, {
  name: FILTERS_CONDITIONS_BETWEEN,
  inputsCount: 2,
  showOperators: true
});

// node_modules/handsontable/plugins/filters/condition/notBetween.mjs
var CONDITION_NAME13 = "not_between";
function condition13(dataRow, inputValues) {
  return !getCondition(CONDITION_NAME12, inputValues)(dataRow);
}
registerCondition(CONDITION_NAME13, condition13, {
  name: FILTERS_CONDITIONS_NOT_BETWEEN,
  inputsCount: 2,
  showOperators: true
});

// node_modules/handsontable/plugins/filters/condition/beginsWith.mjs
var CONDITION_NAME14 = "begins_with";
function condition14(dataRow, _ref) {
  let [value] = _ref;
  return stringify(dataRow.value).toLocaleLowerCase(dataRow.meta.locale).startsWith(stringify(value));
}
registerCondition(CONDITION_NAME14, condition14, {
  name: FILTERS_CONDITIONS_BEGINS_WITH,
  inputsCount: 1,
  showOperators: true
});

// node_modules/handsontable/plugins/filters/condition/endsWith.mjs
var CONDITION_NAME15 = "ends_with";
function condition15(dataRow, _ref) {
  let [value] = _ref;
  return stringify(dataRow.value).toLocaleLowerCase(dataRow.meta.locale).endsWith(stringify(value));
}
registerCondition(CONDITION_NAME15, condition15, {
  name: FILTERS_CONDITIONS_ENDS_WITH,
  inputsCount: 1,
  showOperators: true
});

// node_modules/handsontable/plugins/filters/condition/contains.mjs
var CONDITION_NAME16 = "contains";
function condition16(dataRow, _ref) {
  let [value] = _ref;
  return stringify(dataRow.value).toLocaleLowerCase(dataRow.meta.locale).indexOf(stringify(value)) >= 0;
}
registerCondition(CONDITION_NAME16, condition16, {
  name: FILTERS_CONDITIONS_CONTAINS,
  inputsCount: 1,
  showOperators: true
});

// node_modules/handsontable/plugins/filters/condition/notContains.mjs
var CONDITION_NAME17 = "not_contains";
function condition17(dataRow, inputValues) {
  return !getCondition(CONDITION_NAME16, inputValues)(dataRow);
}
registerCondition(CONDITION_NAME17, condition17, {
  name: FILTERS_CONDITIONS_NOT_CONTAIN,
  inputsCount: 1,
  showOperators: true
});

// node_modules/handsontable/plugins/filters/condition/date/tomorrow.mjs
var CONDITION_NAME18 = "date_tomorrow";
function condition18(dataRow) {
  const date = moment_default(dataRow.value, dataRow.meta.dateFormat);
  if (!date.isValid()) {
    return false;
  }
  return date.isSame(moment_default().subtract(-1, "days").startOf("day"), "d");
}
registerCondition(CONDITION_NAME18, condition18, {
  name: FILTERS_CONDITIONS_TOMORROW,
  inputsCount: 0
});

// node_modules/handsontable/plugins/filters/condition/date/today.mjs
var CONDITION_NAME19 = "date_today";
function condition19(dataRow) {
  const date = moment_default(dataRow.value, dataRow.meta.dateFormat);
  if (!date.isValid()) {
    return false;
  }
  return date.isSame(moment_default().startOf("day"), "d");
}
registerCondition(CONDITION_NAME19, condition19, {
  name: FILTERS_CONDITIONS_TODAY,
  inputsCount: 0
});

// node_modules/handsontable/plugins/filters/condition/date/yesterday.mjs
var CONDITION_NAME20 = "date_yesterday";
function condition20(dataRow) {
  const date = moment_default(dataRow.value, dataRow.meta.dateFormat);
  if (!date.isValid()) {
    return false;
  }
  return date.isSame(moment_default().subtract(1, "days").startOf("day"), "d");
}
registerCondition(CONDITION_NAME20, condition20, {
  name: FILTERS_CONDITIONS_YESTERDAY,
  inputsCount: 0
});

// node_modules/handsontable/plugins/filters/utils.mjs
var sortCompare = getComparisonFunction();
function toVisualValue(value, defaultEmptyValue) {
  let visualValue = value;
  if (visualValue === "") {
    visualValue = `(${defaultEmptyValue})`;
  }
  return visualValue;
}
function createArrayAssertion(initialData) {
  const dataset = new Set(initialData);
  return function(value) {
    return dataset.has(value);
  };
}
function toEmptyString(value) {
  return value === null || value === void 0 ? "" : value;
}
function unifyColumnValues(values) {
  return Array.from(new Set(values)).map((value) => toEmptyString(value)).sort((a, b) => {
    if (typeof a === "number" && typeof b === "number") {
      return a - b;
    }
    if (a === b) {
      return 0;
    }
    return a > b ? 1 : -1;
  });
}
function intersectValues(base, selected, defaultEmptyValue, callback) {
  const result = [];
  const same = base === selected;
  let selectedItemsAssertion;
  if (!same) {
    selectedItemsAssertion = createArrayAssertion(selected);
  }
  base.forEach((value) => {
    let checked = false;
    if (same || selectedItemsAssertion(value)) {
      checked = true;
    }
    const item = {
      checked,
      value,
      visualValue: toVisualValue(value, defaultEmptyValue)
    };
    if (callback) {
      callback(item);
    }
    result.push(item);
  });
  return result;
}

// node_modules/handsontable/plugins/filters/condition/byValue.mjs
var CONDITION_NAME21 = "by_value";
function condition21(dataRow, _ref) {
  let [value] = _ref;
  return value(dataRow.value);
}
registerCondition(CONDITION_NAME21, condition21, {
  name: "By value",
  inputsCount: 0,
  inputValuesDecorator(_ref2) {
    let [data] = _ref2;
    return [createArrayAssertion(data)];
  },
  showOperators: false
});

// node_modules/handsontable/plugins/filters/condition/true.mjs
var CONDITION_NAME22 = "true";
function condition22() {
  return true;
}
registerCondition(CONDITION_NAME22, condition22, {
  name: "True"
});

// node_modules/handsontable/plugins/filters/condition/false.mjs
var CONDITION_NAME23 = "false";
function condition23() {
  return false;
}
registerCondition(CONDITION_NAME23, condition23, {
  name: "False"
});

// node_modules/handsontable/plugins/filters/logicalOperationRegisterer.mjs
var operations = {};
function getOperationFunc(id) {
  if (!operations[id]) {
    throw Error(`Operation with id "${id}" does not exist.`);
  }
  const func = operations[id].func;
  return function(conditions2, value) {
    return func(conditions2, value);
  };
}
function getOperationName(id) {
  return operations[id].name;
}
function registerOperation(id, name, func) {
  operations[id] = {
    name,
    func
  };
}

// node_modules/handsontable/plugins/filters/logicalOperations/conjunction.mjs
var OPERATION_ID = "conjunction";
var SHORT_NAME_FOR_COMPONENT = FILTERS_LABELS_CONJUNCTION;
function operationResult(conditions2, value) {
  return conditions2.every((condition24) => condition24.func(value));
}
registerOperation(OPERATION_ID, SHORT_NAME_FOR_COMPONENT, operationResult);

// node_modules/handsontable/plugins/filters/logicalOperations/disjunction.mjs
var OPERATION_ID2 = "disjunction";
var SHORT_NAME_FOR_COMPONENT2 = FILTERS_LABELS_DISJUNCTION;
function operationResult2(conditions2, value) {
  return conditions2.some((condition24) => condition24.func(value));
}
registerOperation(OPERATION_ID2, SHORT_NAME_FOR_COMPONENT2, operationResult2);

// node_modules/handsontable/plugins/filters/logicalOperations/disjunctionWithExtraCondition.mjs
var OPERATION_ID3 = "disjunctionWithExtraCondition";
var SHORT_NAME_FOR_COMPONENT3 = FILTERS_LABELS_DISJUNCTION;
function operationResult3(conditions2, value) {
  if (conditions2.length < 3) {
    throw Error("Operation doesn't work on less then three conditions.");
  }
  return conditions2.slice(0, conditions2.length - 1).some((condition24) => condition24.func(value)) && conditions2[conditions2.length - 1].func(value);
}
registerOperation(OPERATION_ID3, SHORT_NAME_FOR_COMPONENT3, operationResult3);

// node_modules/handsontable/plugins/filters/constants.mjs
var TYPE_NUMERIC = "numeric";
var TYPE_TEXT = "text";
var TYPE_DATE = "date";
var TYPES = {
  [TYPE_NUMERIC]: [CONDITION_NAME, KEY, CONDITION_NAME2, CONDITION_NAME3, KEY, CONDITION_NAME4, CONDITION_NAME5, KEY, CONDITION_NAME6, CONDITION_NAME7, CONDITION_NAME8, CONDITION_NAME9, CONDITION_NAME12, CONDITION_NAME13],
  [TYPE_TEXT]: [CONDITION_NAME, KEY, CONDITION_NAME2, CONDITION_NAME3, KEY, CONDITION_NAME4, CONDITION_NAME5, KEY, CONDITION_NAME14, CONDITION_NAME15, KEY, CONDITION_NAME16, CONDITION_NAME17],
  [TYPE_DATE]: [CONDITION_NAME, KEY, CONDITION_NAME2, CONDITION_NAME3, KEY, CONDITION_NAME4, CONDITION_NAME5, KEY, CONDITION_NAME11, CONDITION_NAME10, CONDITION_NAME12, KEY, CONDITION_NAME18, CONDITION_NAME19, CONDITION_NAME20]
};
function getOptionsList(type) {
  const items = [];
  let typeName = type;
  if (!TYPES[typeName]) {
    typeName = TYPE_TEXT;
  }
  arrayEach(TYPES[typeName], (typeValue) => {
    let option;
    if (typeValue === KEY) {
      option = {
        name: KEY
      };
    } else {
      option = clone(getConditionDescriptor(typeValue));
    }
    items.push(option);
  });
  return items;
}

// node_modules/handsontable/plugins/filters/ui/_base.mjs
function _defineProperty30(e, r, t) {
  return (r = _toPropertyKey30(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey30(t) {
  var i = _toPrimitive30(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive30(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var STATE_BUILT = "built";
var STATE_BUILDING = "building";
var EVENTS_TO_REGISTER = ["click", "input", "keydown", "keypress", "keyup", "focus", "blur", "change"];
var BaseUI = class _BaseUI {
  static get DEFAULTS() {
    return clone({
      className: "",
      value: "",
      tagName: "div",
      children: [],
      wrapIt: true
    });
  }
  /**
   * Instance of Handsontable.
   *
   * @type {Core}
   */
  constructor(hotInstance, options) {
    _defineProperty30(this, "hot", void 0);
    _defineProperty30(this, "eventManager", new eventManager_default(this));
    _defineProperty30(this, "options", void 0);
    _defineProperty30(this, "_element", void 0);
    _defineProperty30(this, "buildState", void 0);
    this.hot = hotInstance;
    this.options = extend(_BaseUI.DEFAULTS, options);
    this._element = this.hot.rootDocument.createElement(this.options.wrapIt ? "div" : this.options.tagName);
  }
  /**
   * Set the element value.
   *
   * @param {*} value Set the component value.
   */
  setValue(value) {
    this.options.value = value;
    this.update();
  }
  /**
   * Get the element value.
   *
   * @returns {*}
   */
  getValue() {
    return this.options.value;
  }
  /**
   * Get element as a DOM object.
   *
   * @returns {Element}
   */
  get element() {
    if (this.buildState === STATE_BUILDING) {
      return this._element;
    }
    if (this.buildState === STATE_BUILT) {
      this.update();
      return this._element;
    }
    this.buildState = STATE_BUILDING;
    this.build();
    this.buildState = STATE_BUILT;
    return this._element;
  }
  /**
   * Check if element was built (built whole DOM structure).
   *
   * @returns {boolean}
   */
  isBuilt() {
    return this.buildState === STATE_BUILT;
  }
  /**
   * Translate value if it is possible. It's checked if value belongs to namespace of translated phrases.
   *
   * @param {*} value Value which will may be translated.
   * @returns {*} Translated value if translation was possible, original value otherwise.
   */
  translateIfPossible(value) {
    if (typeof value === "string" && value.startsWith(FILTERS_NAMESPACE)) {
      return this.hot.getTranslatedPhrase(value);
    }
    return value;
  }
  /**
   * Build DOM structure.
   */
  build() {
    const registerEvent = (element, eventName) => {
      this.eventManager.addEventListener(element, eventName, (event) => this.runLocalHooks(eventName, event, this));
    };
    if (!this.buildState) {
      this.buildState = STATE_BUILDING;
    }
    this._element.setAttribute("data-hot-input", true);
    if (this.options.tabIndex !== void 0) {
      this._element.setAttribute("tabindex", this.options.tabIndex);
    }
    if (this.options.role !== void 0) {
      this._element.setAttribute("role", this.options.role);
    }
    if (this.options.className) {
      addClass(this._element, this.options.className);
    }
    if (this.options.children.length) {
      arrayEach(this.options.children, (element) => this._element.appendChild(element.element));
    } else if (this.options.wrapIt) {
      const element = this.hot.rootDocument.createElement(this.options.tagName);
      element.setAttribute("data-hot-input", true);
      objectEach(this.options, (value, key) => {
        if (element[key] !== void 0 && key !== "className" && key !== "tagName" && key !== "children") {
          element[key] = this.translateIfPossible(value);
        }
      });
      this._element.appendChild(element);
      arrayEach(EVENTS_TO_REGISTER, (eventName) => registerEvent(element, eventName));
    } else {
      arrayEach(EVENTS_TO_REGISTER, (eventName) => registerEvent(this._element, eventName));
    }
  }
  /**
   * Update DOM structure.
   */
  update() {
  }
  /**
   * Reset to initial state.
   */
  reset() {
    this.options.value = "";
    this.update();
  }
  /**
   * Show element.
   */
  show() {
    this.element.style.display = "";
  }
  /**
   * Hide element.
   */
  hide() {
    this.element.style.display = "none";
  }
  /**
   * Focus element.
   */
  focus() {
  }
  destroy() {
    this.eventManager.destroy();
    this.eventManager = null;
    this.hot = null;
    if (this._element.parentNode) {
      this._element.parentNode.removeChild(this._element);
    }
    this._element = null;
  }
};
mixin(BaseUI, localHooks_default);

// node_modules/handsontable/plugins/filters/ui/input.mjs
function _classPrivateMethodInitSpec20(e, a) {
  _checkPrivateRedeclaration23(e, a), a.add(e);
}
function _classPrivateFieldInitSpec14(e, t, a) {
  _checkPrivateRedeclaration23(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration23(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldGet14(s, a) {
  return s.get(_assertClassBrand23(s, a));
}
function _classPrivateFieldSet12(s, a, r) {
  return s.set(_assertClassBrand23(s, a), r), r;
}
function _assertClassBrand23(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _input = /* @__PURE__ */ new WeakMap();
var _InputUI_brand = /* @__PURE__ */ new WeakSet();
var InputUI = class _InputUI extends BaseUI {
  static get DEFAULTS() {
    return clone({
      placeholder: "",
      type: "text",
      tagName: "input",
      tabIndex: -1
    });
  }
  /**
   * The reference to the input element.
   *
   * @type {HTMLInputElement}
   */
  constructor(hotInstance, options) {
    super(hotInstance, extend(_InputUI.DEFAULTS, options));
    _classPrivateMethodInitSpec20(this, _InputUI_brand);
    _classPrivateFieldInitSpec14(this, _input, void 0);
    this.registerHooks();
  }
  /**
   * Register all necessary hooks.
   */
  registerHooks() {
    this.addLocalHook("keyup", (event) => _assertClassBrand23(_InputUI_brand, this, _onKeyup).call(this, event));
  }
  /**
   * Build DOM structure.
   */
  build() {
    super.build();
    const icon = this.hot.rootDocument.createElement("div");
    _classPrivateFieldSet12(_input, this, this._element.firstChild);
    addClass(this._element, "htUIInput");
    addClass(icon, "htUIInputIcon");
    this._element.appendChild(icon);
    this.update();
  }
  /**
   * Update element.
   */
  update() {
    if (!this.isBuilt()) {
      return;
    }
    _classPrivateFieldGet14(_input, this).type = this.options.type;
    _classPrivateFieldGet14(_input, this).placeholder = this.translateIfPossible(this.options.placeholder);
    _classPrivateFieldGet14(_input, this).value = this.translateIfPossible(this.options.value);
  }
  /**
   * Focus element.
   */
  focus() {
    if (this.isBuilt()) {
      _classPrivateFieldGet14(_input, this).focus();
    }
  }
};
function _onKeyup(event) {
  this.options.value = event.target.value;
}

// node_modules/handsontable/plugins/filters/ui/select.mjs
function _classPrivateMethodInitSpec21(e, a) {
  _checkPrivateRedeclaration24(e, a), a.add(e);
}
function _classPrivateFieldInitSpec15(e, t, a) {
  _checkPrivateRedeclaration24(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration24(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldSet13(s, a, r) {
  return s.set(_assertClassBrand24(s, a), r), r;
}
function _classPrivateFieldGet15(s, a) {
  return s.get(_assertClassBrand24(s, a));
}
function _assertClassBrand24(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _menu = /* @__PURE__ */ new WeakMap();
var _items = /* @__PURE__ */ new WeakMap();
var _caption = /* @__PURE__ */ new WeakMap();
var _captionElement = /* @__PURE__ */ new WeakMap();
var _dropdown = /* @__PURE__ */ new WeakMap();
var _SelectUI_brand = /* @__PURE__ */ new WeakSet();
var SelectUI = class _SelectUI extends BaseUI {
  static get DEFAULTS() {
    return clone({
      className: "htUISelect",
      wrapIt: false,
      tabIndex: -1
    });
  }
  /**
   * Instance of {@link Menu}.
   *
   * @type {Menu}
   */
  constructor(hotInstance, options) {
    super(hotInstance, extend(_SelectUI.DEFAULTS, options));
    _classPrivateMethodInitSpec21(this, _SelectUI_brand);
    _classPrivateFieldInitSpec15(this, _menu, null);
    _classPrivateFieldInitSpec15(this, _items, []);
    _classPrivateFieldInitSpec15(this, _caption, void 0);
    _classPrivateFieldInitSpec15(this, _captionElement, void 0);
    _classPrivateFieldInitSpec15(this, _dropdown, void 0);
    this.registerHooks();
  }
  /**
   * Gets the instance of the Menu.
   *
   * @returns {Menu}
   */
  getMenu() {
    return _classPrivateFieldGet15(_menu, this);
  }
  /**
   * Register all necessary hooks.
   */
  registerHooks() {
    this.addLocalHook("click", () => _assertClassBrand24(_SelectUI_brand, this, _onClick).call(this));
  }
  /**
   * Set options which can be selected in the list.
   *
   * @param {Array} items Array of objects with required keys `key` and `name`.
   */
  setItems(items) {
    _classPrivateFieldSet13(_items, this, this.translateNames(items));
    if (_classPrivateFieldGet15(_menu, this)) {
      _classPrivateFieldGet15(_menu, this).setMenuItems(_classPrivateFieldGet15(_items, this));
    }
  }
  /**
   * Translate names of menu items.
   *
   * @param {Array} items Array of objects with required keys `key` and `name`.
   * @returns {Array} Items with translated `name` keys.
   */
  translateNames(items) {
    arrayEach(items, (item) => {
      item.name = this.translateIfPossible(item.name);
    });
    return items;
  }
  /**
   * Build DOM structure.
   */
  build() {
    super.build();
    _classPrivateFieldSet13(_menu, this, new Menu(this.hot, {
      className: "htSelectUI htFiltersConditionsMenu",
      keepInViewport: false,
      standalone: true,
      container: this.options.menuContainer
    }));
    _classPrivateFieldGet15(_menu, this).setMenuItems(_classPrivateFieldGet15(_items, this));
    const caption = new BaseUI(this.hot, {
      className: "htUISelectCaption"
    });
    const dropdown = new BaseUI(this.hot, {
      className: "htUISelectDropdown"
    });
    _classPrivateFieldSet13(_caption, this, caption);
    _classPrivateFieldSet13(_captionElement, this, caption.element);
    _classPrivateFieldSet13(_dropdown, this, dropdown);
    if (this.hot.getSettings().ariaTags) {
      setAttribute(dropdown.element, [A11Y_HIDDEN()]);
      setAttribute(this._element, [A11Y_LISTBOX()]);
    }
    arrayEach([caption, dropdown], (element) => this._element.appendChild(element.element));
    _classPrivateFieldGet15(_menu, this).addLocalHook("select", (command) => _assertClassBrand24(_SelectUI_brand, this, _onMenuSelect).call(this, command));
    _classPrivateFieldGet15(_menu, this).addLocalHook("afterClose", () => _assertClassBrand24(_SelectUI_brand, this, _onMenuClosed).call(this));
    this.update();
  }
  /**
   * Update DOM structure.
   */
  update() {
    if (!this.isBuilt()) {
      return;
    }
    let conditionName;
    if (this.options.value) {
      conditionName = this.options.value.name;
    } else {
      conditionName = _classPrivateFieldGet15(_menu, this).hot.getTranslatedPhrase(FILTERS_CONDITIONS_NONE);
    }
    _classPrivateFieldGet15(_captionElement, this).textContent = conditionName;
    super.update();
  }
  /**
   * Open select dropdown menu with available options.
   */
  openOptions() {
    const rect = this.element.getBoundingClientRect();
    if (_classPrivateFieldGet15(_menu, this)) {
      _classPrivateFieldGet15(_menu, this).open();
      _classPrivateFieldGet15(_menu, this).setPosition({
        left: this.hot.isLtr() ? rect.left - 5 : rect.left - 31,
        top: rect.top - 1,
        width: rect.width,
        height: rect.height
      });
      _classPrivateFieldGet15(_menu, this).getNavigator().toFirstItem();
      _classPrivateFieldGet15(_menu, this).getKeyboardShortcutsCtrl().addCustomShortcuts([{
        keys: [["Tab"], ["Shift", "Tab"]],
        callback: (event) => {
          this.closeOptions();
          this.runLocalHooks("tabKeydown", event);
        }
      }, {
        keys: [["Control/Meta", "A"]],
        callback: () => false
      }]);
    }
  }
  /**
   * Close select dropdown menu.
   */
  closeOptions() {
    if (_classPrivateFieldGet15(_menu, this)) {
      _classPrivateFieldGet15(_menu, this).close();
    }
  }
  /**
   * Focus element.
   */
  focus() {
    if (this.isBuilt()) {
      this.element.focus();
    }
  }
  /**
   * Destroy instance.
   */
  destroy() {
    if (_classPrivateFieldGet15(_menu, this)) {
      _classPrivateFieldGet15(_menu, this).destroy();
      _classPrivateFieldSet13(_menu, this, null);
    }
    if (_classPrivateFieldGet15(_caption, this)) {
      _classPrivateFieldGet15(_caption, this).destroy();
    }
    if (_classPrivateFieldGet15(_dropdown, this)) {
      _classPrivateFieldGet15(_dropdown, this).destroy();
    }
    super.destroy();
  }
};
function _onMenuSelect(command) {
  if (command.name !== KEY) {
    this.options.value = command;
    this.update();
    this.runLocalHooks("select", this.options.value);
  }
}
function _onMenuClosed() {
  this.runLocalHooks("afterClose");
}
function _onClick() {
  this.openOptions();
}

// node_modules/handsontable/plugins/filters/component/condition.mjs
function _classPrivateMethodInitSpec22(e, a) {
  _checkPrivateRedeclaration25(e, a), a.add(e);
}
function _checkPrivateRedeclaration25(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty31(e, r, t) {
  return (r = _toPropertyKey31(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey31(t) {
  var i = _toPrimitive31(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive31(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _assertClassBrand25(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _ConditionComponent_brand = /* @__PURE__ */ new WeakSet();
var ConditionComponent = class extends BaseComponent {
  constructor(hotInstance, options) {
    super(hotInstance, {
      id: options.id,
      stateless: false
    });
    _classPrivateMethodInitSpec22(this, _ConditionComponent_brand);
    _defineProperty31(this, "name", "");
    _defineProperty31(this, "addSeparator", false);
    this.name = options.name;
    this.addSeparator = options.addSeparator;
    this.elements.push(new SelectUI(this.hot, {
      menuContainer: options.menuContainer
    }));
    this.elements.push(new InputUI(this.hot, {
      placeholder: FILTERS_BUTTONS_PLACEHOLDER_VALUE
    }));
    this.elements.push(new InputUI(this.hot, {
      placeholder: FILTERS_BUTTONS_PLACEHOLDER_SECOND_VALUE
    }));
    this.registerHooks();
  }
  /**
   * Register all necessary hooks.
   *
   * @private
   */
  registerHooks() {
    this.getSelectElement().addLocalHook("select", (command) => _assertClassBrand25(_ConditionComponent_brand, this, _onConditionSelect).call(this, command)).addLocalHook("afterClose", () => this.runLocalHooks("afterClose")).addLocalHook("tabKeydown", (event) => this.runLocalHooks("selectTabKeydown", event));
    arrayEach(this.getInputElements(), (input) => {
      input.addLocalHook("keydown", (event) => _assertClassBrand25(_ConditionComponent_brand, this, _onInputKeyDown).call(this, event));
    });
  }
  /**
   * Set state of the component.
   *
   * @param {object} value State to restore.
   */
  setState(value) {
    this.reset();
    if (!value) {
      return;
    }
    const copyOfCommand = clone(value.command);
    if (copyOfCommand.name.startsWith(FILTERS_CONDITIONS_NAMESPACE)) {
      copyOfCommand.name = this.hot.getTranslatedPhrase(copyOfCommand.name);
    }
    this.getSelectElement().setValue(copyOfCommand);
    arrayEach(value.args, (arg, index) => {
      if (index > copyOfCommand.inputsCount - 1) {
        return false;
      }
      const element = this.getInputElement(index);
      element.setValue(arg);
      element[copyOfCommand.inputsCount > index ? "show" : "hide"]();
      if (!index) {
        this.hot._registerTimeout(() => element.focus(), 10);
      }
    });
  }
  /**
   * Export state of the component (get selected filter and filter arguments).
   *
   * @returns {object} Returns object where `command` key keeps used condition filter and `args` key its arguments.
   */
  getState() {
    const command = this.getSelectElement().getValue() || getConditionDescriptor(CONDITION_NAME);
    const args = [];
    arrayEach(this.getInputElements(), (element, index) => {
      if (command.inputsCount > index) {
        args.push(element.getValue());
      }
    });
    return {
      command,
      args
    };
  }
  /**
   * Update state of component.
   *
   * @param {object} condition The condition object.
   * @param {object} condition.command The command object with condition name as `key` property.
   * @param {Array} condition.args An array of values to compare.
   * @param {number} column Physical column index.
   */
  updateState(condition24, column) {
    const command = condition24 ? getConditionDescriptor(condition24.name) : getConditionDescriptor(CONDITION_NAME);
    this.state.setValueAtIndex(column, {
      command,
      args: condition24 ? condition24.args : []
    });
    if (!condition24) {
      arrayEach(this.getInputElements(), (element) => element.setValue(null));
    }
  }
  /**
   * Get select element.
   *
   * @returns {SelectUI}
   */
  getSelectElement() {
    return this.elements.filter((element) => element instanceof SelectUI)[0];
  }
  /**
   * Get input element.
   *
   * @param {number} index Index an array of elements.
   * @returns {InputUI}
   */
  getInputElement() {
    let index = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
    return this.getInputElements()[index];
  }
  /**
   * Get input elements.
   *
   * @returns {Array}
   */
  getInputElements() {
    return this.elements.filter((element) => element instanceof InputUI);
  }
  /**
   * Get menu object descriptor.
   *
   * @returns {object}
   */
  getMenuItemDescriptor() {
    return {
      key: this.id,
      name: this.name,
      isCommand: false,
      disableSelection: true,
      hidden: () => this.isHidden(),
      renderer: (hot, wrapper, row, col, prop, value) => {
        addClass(wrapper.parentNode, "htFiltersMenuCondition");
        if (this.addSeparator) {
          addClass(wrapper.parentNode, "border");
        }
        const label = this.hot.rootDocument.createElement("div");
        addClass(label, "htFiltersMenuLabel");
        label.textContent = value;
        wrapper.appendChild(label);
        if (!wrapper.parentElement.hasAttribute("ghost-table")) {
          arrayEach(this.elements, (ui) => wrapper.appendChild(ui.element));
        }
        return wrapper;
      }
    };
  }
  /**
   * Reset elements to their initial state.
   */
  reset() {
    const selectedColumn = this.hot.getPlugin("filters").getSelectedColumn();
    let items = [getConditionDescriptor(CONDITION_NAME)];
    if (selectedColumn !== null) {
      const {
        visualIndex
      } = selectedColumn;
      items = getOptionsList(this.hot.getDataType(0, visualIndex, this.hot.countRows(), visualIndex));
    }
    arrayEach(this.getInputElements(), (element) => element.hide());
    this.getSelectElement().setItems(items);
    super.reset();
    this.getSelectElement().setValue(items[0]);
  }
};
function _onConditionSelect(command) {
  arrayEach(this.getInputElements(), (element, index) => {
    element[command.inputsCount > index ? "show" : "hide"]();
    if (index === 0) {
      this.hot._registerTimeout(() => element.focus(), 10);
    }
  });
  this.runLocalHooks("change", command);
}
function _onInputKeyDown(event) {
  if (isKey(event.keyCode, "ESCAPE")) {
    this.runLocalHooks("cancel");
    stopImmediatePropagation(event);
  }
}

// node_modules/handsontable/plugins/filters/ui/radioInput.mjs
function _classPrivateFieldInitSpec16(e, t, a) {
  _checkPrivateRedeclaration26(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration26(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldGet16(s, a) {
  return s.get(_assertClassBrand26(s, a));
}
function _classPrivateFieldSet14(s, a, r) {
  return s.set(_assertClassBrand26(s, a), r), r;
}
function _assertClassBrand26(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _input2 = /* @__PURE__ */ new WeakMap();
var _label = /* @__PURE__ */ new WeakMap();
var RadioInputUI = class _RadioInputUI extends BaseUI {
  static get DEFAULTS() {
    return clone({
      type: "radio",
      tagName: "input",
      className: "htUIRadio",
      label: {}
    });
  }
  /**
   * The reference to the input element.
   *
   * @type {HTMLInputElement}
   */
  constructor(hotInstance, options) {
    super(hotInstance, extend(_RadioInputUI.DEFAULTS, options));
    _classPrivateFieldInitSpec16(this, _input2, void 0);
    _classPrivateFieldInitSpec16(this, _label, void 0);
  }
  /**
   * Build DOM structure.
   */
  build() {
    super.build();
    const label = this.hot.rootDocument.createElement("label");
    label.textContent = this.translateIfPossible(this.options.label.textContent);
    label.htmlFor = this.translateIfPossible(this.options.label.htmlFor);
    _classPrivateFieldSet14(_label, this, label);
    _classPrivateFieldSet14(_input2, this, this._element.firstChild);
    _classPrivateFieldGet16(_input2, this).checked = this.options.checked;
    this._element.appendChild(label);
    this.update();
  }
  /**
   * Update element.
   */
  update() {
    if (!this.isBuilt()) {
      return;
    }
    _classPrivateFieldGet16(_label, this).textContent = this.translateIfPossible(this.options.label.textContent);
  }
  /**
   * Check if radio button is checked.
   *
   * @returns {boolean}
   */
  isChecked() {
    return this.isBuilt() ? _classPrivateFieldGet16(_input2, this).checked : false;
  }
  /**
   * Set input checked attribute.
   *
   * @param {boolean} value Set the component state.
   */
  setChecked() {
    let value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
    if (this.isBuilt()) {
      _classPrivateFieldGet16(_input2, this).checked = value;
    }
  }
  /**
   * Focus element.
   */
  focus() {
    if (this.isBuilt()) {
      _classPrivateFieldGet16(_input2, this).focus();
    }
  }
};

// node_modules/handsontable/plugins/filters/component/operators.mjs
function _classPrivateMethodInitSpec23(e, a) {
  _checkPrivateRedeclaration27(e, a), a.add(e);
}
function _checkPrivateRedeclaration27(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty32(e, r, t) {
  return (r = _toPropertyKey32(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey32(t) {
  var i = _toPrimitive32(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive32(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _assertClassBrand27(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var SELECTED_AT_START_ELEMENT_INDEX = 0;
var _OperatorsComponent_brand = /* @__PURE__ */ new WeakSet();
var OperatorsComponent = class extends BaseComponent {
  constructor(hotInstance, options) {
    super(hotInstance, {
      id: options.id,
      stateless: false
    });
    _classPrivateMethodInitSpec23(this, _OperatorsComponent_brand);
    _defineProperty32(this, "name", "");
    this.name = options.name;
    this.buildOperatorsElement();
  }
  /**
   * Get menu object descriptor.
   *
   * @returns {object}
   */
  getMenuItemDescriptor() {
    return {
      key: this.id,
      name: this.name,
      isCommand: false,
      disableSelection: true,
      hidden: () => this.isHidden(),
      renderer: (hot, wrapper) => {
        addClass(wrapper.parentNode, "htFiltersMenuOperators");
        arrayEach(this.elements, (ui) => wrapper.appendChild(ui.element));
        return wrapper;
      }
    };
  }
  /**
   * Add RadioInputUI elements to component.
   *
   * @private
   */
  buildOperatorsElement() {
    const operationKeys = [OPERATION_ID, OPERATION_ID2];
    arrayEach(operationKeys, (operation) => {
      const radioInput = new RadioInputUI(this.hot, {
        name: "operator",
        label: {
          htmlFor: operation,
          textContent: getOperationName(operation)
        },
        value: operation,
        checked: operation === operationKeys[SELECTED_AT_START_ELEMENT_INDEX],
        id: operation
      });
      radioInput.addLocalHook("change", (event) => _assertClassBrand27(_OperatorsComponent_brand, this, _onRadioInputChange).call(this, event));
      this.elements.push(radioInput);
    });
  }
  /**
   * Set state of operators component to check radio input at specific `index`.
   *
   * @param {number} searchedIndex Index of radio input to check.
   */
  setChecked(searchedIndex) {
    if (this.elements.length < searchedIndex) {
      throw Error(toSingleLine`Radio button with index ${searchedIndex} doesn't exist.`);
    }
    arrayEach(this.elements, (element, index) => {
      element.setChecked(index === searchedIndex);
    });
  }
  /**
   * Get `id` of active operator.
   *
   * @returns {string}
   */
  getActiveOperationId() {
    const operationElement = this.elements.find((element) => element instanceof RadioInputUI && element.isChecked());
    if (operationElement) {
      return operationElement.getValue();
    }
    return OPERATION_ID;
  }
  /**
   * Export state of the component (get selected operator).
   *
   * @returns {string} Returns `id` of selected operator.
   */
  getState() {
    return this.getActiveOperationId();
  }
  /**
   * Set state of the component.
   *
   * @param {object} value State to restore.
   */
  setState(value) {
    this.reset();
    if (value && this.getActiveOperationId() !== value) {
      arrayEach(this.elements, (element) => {
        element.setChecked(element.getValue() === value);
      });
    }
  }
  /**
   * Update state of component.
   *
   * @param {string} [operationId='conjunction'] Id of selected operation.
   * @param {number} column Physical column index.
   */
  updateState() {
    let operationId = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : OPERATION_ID;
    let column = arguments.length > 1 ? arguments[1] : void 0;
    let selectedOperationId = operationId;
    if (selectedOperationId === OPERATION_ID3) {
      selectedOperationId = OPERATION_ID2;
    }
    this.state.setValueAtIndex(column, selectedOperationId);
  }
  /**
   * Reset elements to their initial state.
   */
  reset() {
    this.setChecked(SELECTED_AT_START_ELEMENT_INDEX);
  }
};
function _onRadioInputChange(event) {
  this.setState(event.target.value);
}

// node_modules/handsontable/plugins/filters/ui/link.mjs
function _classPrivateFieldInitSpec17(e, t, a) {
  _checkPrivateRedeclaration28(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration28(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldGet17(s, a) {
  return s.get(_assertClassBrand28(s, a));
}
function _classPrivateFieldSet15(s, a, r) {
  return s.set(_assertClassBrand28(s, a), r), r;
}
function _assertClassBrand28(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _link = /* @__PURE__ */ new WeakMap();
var LinkUI = class _LinkUI extends BaseUI {
  static get DEFAULTS() {
    return clone({
      href: "#",
      tagName: "a",
      tabIndex: -1,
      role: "button"
    });
  }
  /**
   * The reference to the link element.
   *
   * @type {HTMLLinkElement}
   */
  constructor(hotInstance, options) {
    super(hotInstance, extend(_LinkUI.DEFAULTS, options));
    _classPrivateFieldInitSpec17(this, _link, void 0);
  }
  /**
   * Build DOM structure.
   */
  build() {
    super.build();
    _classPrivateFieldSet15(_link, this, this._element.firstChild);
  }
  /**
   * Update element.
   */
  update() {
    if (!this.isBuilt()) {
      return;
    }
    _classPrivateFieldGet17(_link, this).textContent = this.translateIfPossible(this.options.textContent);
  }
  /**
   * Focus element.
   */
  focus() {
    if (this.isBuilt()) {
      _classPrivateFieldGet17(_link, this).focus();
    }
  }
  /**
   * Activate the element.
   */
  activate() {
    _classPrivateFieldGet17(_link, this).click();
  }
};

// node_modules/handsontable/plugins/filters/ui/multipleSelect.mjs
function _classPrivateMethodInitSpec24(e, a) {
  _checkPrivateRedeclaration29(e, a), a.add(e);
}
function _classPrivateFieldInitSpec18(e, t, a) {
  _checkPrivateRedeclaration29(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration29(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldGet18(s, a) {
  return s.get(_assertClassBrand29(s, a));
}
function _classPrivateFieldSet16(s, a, r) {
  return s.set(_assertClassBrand29(s, a), r), r;
}
function _assertClassBrand29(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var SHORTCUTS_GROUP10 = "multipleSelect.itemBox";
var _items2 = /* @__PURE__ */ new WeakMap();
var _itemsBox = /* @__PURE__ */ new WeakMap();
var _locale = /* @__PURE__ */ new WeakMap();
var _searchInput = /* @__PURE__ */ new WeakMap();
var _selectAllUI = /* @__PURE__ */ new WeakMap();
var _clearAllUI = /* @__PURE__ */ new WeakMap();
var _MultipleSelectUI_brand = /* @__PURE__ */ new WeakSet();
var MultipleSelectUI = class _MultipleSelectUI extends BaseUI {
  static get DEFAULTS() {
    return clone({
      className: "htUIMultipleSelect",
      value: []
    });
  }
  /**
   * List of available select options.
   *
   * @type {Array}
   */
  constructor(hotInstance, options) {
    super(hotInstance, extend(_MultipleSelectUI.DEFAULTS, options));
    _classPrivateMethodInitSpec24(this, _MultipleSelectUI_brand);
    _classPrivateFieldInitSpec18(this, _items2, []);
    _classPrivateFieldInitSpec18(this, _itemsBox, void 0);
    _classPrivateFieldInitSpec18(this, _locale, void 0);
    _classPrivateFieldInitSpec18(this, _searchInput, void 0);
    _classPrivateFieldInitSpec18(this, _selectAllUI, void 0);
    _classPrivateFieldInitSpec18(this, _clearAllUI, void 0);
    _classPrivateFieldSet16(_searchInput, this, new InputUI(this.hot, {
      placeholder: FILTERS_BUTTONS_PLACEHOLDER_SEARCH,
      className: "htUIMultipleSelectSearch"
    }));
    _classPrivateFieldSet16(_selectAllUI, this, new LinkUI(this.hot, {
      textContent: FILTERS_BUTTONS_SELECT_ALL,
      className: "htUISelectAll"
    }));
    _classPrivateFieldSet16(_clearAllUI, this, new LinkUI(this.hot, {
      textContent: FILTERS_BUTTONS_CLEAR,
      className: "htUIClearAll"
    }));
    this.registerHooks();
  }
  /**
   * Gets the instance of the internal Handsontable that acts here as a listbox component.
   *
   * @returns {Handsontable}
   */
  getItemsBox() {
    return _classPrivateFieldGet18(_itemsBox, this);
  }
  /**
   * Register all necessary hooks.
   */
  registerHooks() {
    _classPrivateFieldGet18(_searchInput, this).addLocalHook("keydown", (event) => _assertClassBrand29(_MultipleSelectUI_brand, this, _onInputKeyDown2).call(this, event));
    _classPrivateFieldGet18(_searchInput, this).addLocalHook("input", (event) => _assertClassBrand29(_MultipleSelectUI_brand, this, _onInput).call(this, event));
    _classPrivateFieldGet18(_selectAllUI, this).addLocalHook("click", (event) => _assertClassBrand29(_MultipleSelectUI_brand, this, _onSelectAllClick).call(this, event));
    _classPrivateFieldGet18(_clearAllUI, this).addLocalHook("click", (event) => _assertClassBrand29(_MultipleSelectUI_brand, this, _onClearAllClick).call(this, event));
  }
  /**
   * Set available options.
   *
   * @param {Array} items Array of objects with `checked` and `label` property.
   */
  setItems(items) {
    var _classPrivateFieldGet210;
    _classPrivateFieldSet16(_items2, this, items);
    (_classPrivateFieldGet210 = _classPrivateFieldGet18(_itemsBox, this)) === null || _classPrivateFieldGet210 === void 0 || _classPrivateFieldGet210.loadData(_classPrivateFieldGet18(_items2, this));
  }
  /**
   * Set a locale for the component.
   *
   * @param {string} locale Locale used for filter actions performed on data, ie. `en-US`.
   */
  setLocale(locale) {
    _classPrivateFieldSet16(_locale, this, locale);
  }
  /**
   * Get a locale for the component.
   *
   * @returns {string}
   */
  getLocale() {
    return _classPrivateFieldGet18(_locale, this);
  }
  /**
   * Get all available options.
   *
   * @returns {Array}
   */
  getItems() {
    return [..._classPrivateFieldGet18(_items2, this)];
  }
  /**
   * Get element value.
   *
   * @returns {Array} Array of selected values.
   */
  getValue() {
    return itemsToValue(_classPrivateFieldGet18(_items2, this));
  }
  /**
   * Gets the instance of the search input element.
   *
   * @returns {InputUI}
   */
  getSearchInputElement() {
    return _classPrivateFieldGet18(_searchInput, this);
  }
  /**
   * Gets the instance of the "select all" link element.
   *
   * @returns {LinkUI}
   */
  getSelectAllElement() {
    return _classPrivateFieldGet18(_selectAllUI, this);
  }
  /**
   * Gets the instance of the "clear" link element.
   *
   * @returns {LinkUI}
   */
  getClearAllElement() {
    return _classPrivateFieldGet18(_clearAllUI, this);
  }
  /**
   * Check if all values listed in element are selected.
   *
   * @returns {boolean}
   */
  isSelectedAllValues() {
    return _classPrivateFieldGet18(_items2, this).length === this.getValue().length;
  }
  /**
   * Build DOM structure.
   */
  build() {
    super.build();
    const {
      rootDocument
    } = this.hot;
    const itemsBoxWrapper = rootDocument.createElement("div");
    const selectionControl = new BaseUI(this.hot, {
      className: "htUISelectionControls",
      children: [_classPrivateFieldGet18(_selectAllUI, this), _classPrivateFieldGet18(_clearAllUI, this)]
    });
    this._element.appendChild(_classPrivateFieldGet18(_searchInput, this).element);
    this._element.appendChild(selectionControl.element);
    this._element.appendChild(itemsBoxWrapper);
    const hotInitializer = (wrapper) => {
      var _classPrivateFieldGet310;
      if (!this._element) {
        return;
      }
      (_classPrivateFieldGet310 = _classPrivateFieldGet18(_itemsBox, this)) === null || _classPrivateFieldGet310 === void 0 || _classPrivateFieldGet310.destroy();
      addClass(wrapper, "htUIMultipleSelectHot");
      _classPrivateFieldSet16(_itemsBox, this, new this.hot.constructor(wrapper, {
        data: _classPrivateFieldGet18(_items2, this),
        columns: [{
          data: "checked",
          type: "checkbox",
          label: {
            property: "visualValue",
            position: "after"
          }
        }],
        beforeRenderer: (TD, row, col, prop, value, cellProperties) => {
          TD.title = cellProperties.instance.getDataAtRowProp(row, cellProperties.label.property);
        },
        afterListen: () => {
          this.runLocalHooks("focus", this);
        },
        beforeOnCellMouseUp: () => {
          _classPrivateFieldGet18(_itemsBox, this).listen();
        },
        modifyColWidth: (width) => {
          const minWidth = _classPrivateFieldGet18(_itemsBox, this).container.scrollWidth - getScrollbarWidth(rootDocument);
          if (width !== void 0 && width < minWidth) {
            return minWidth;
          }
          return width;
        },
        maxCols: 1,
        autoWrapCol: true,
        height: 110,
        copyPaste: false,
        disableVisualSelection: "area",
        fillHandle: false,
        fragmentSelection: "cell",
        tabMoves: {
          row: 1,
          col: 0
        },
        themeName: this.hot.getCurrentThemeName(),
        layoutDirection: this.hot.isRtl() ? "rtl" : "ltr"
      }));
      _classPrivateFieldGet18(_itemsBox, this).init();
      this.hot.addHook("afterSetTheme", (themeName, firstRun) => {
        if (!firstRun) {
          _classPrivateFieldGet18(_itemsBox, this).useTheme(themeName);
        }
      });
      const shortcutManager = _classPrivateFieldGet18(_itemsBox, this).getShortcutManager();
      const gridContext = shortcutManager.getContext("grid");
      gridContext.removeShortcutsByKeys(["Tab"]);
      gridContext.removeShortcutsByKeys(["Shift", "Tab"]);
      gridContext.addShortcut({
        keys: [["Escape"]],
        callback: (event) => {
          this.runLocalHooks("keydown", event, this);
        },
        group: SHORTCUTS_GROUP10
      });
      gridContext.addShortcut({
        keys: [["Tab"], ["Shift", "Tab"]],
        callback: (event) => {
          _classPrivateFieldGet18(_itemsBox, this).deselectCell();
          this.runLocalHooks("keydown", event, this);
          this.runLocalHooks("listTabKeydown", event, this);
        },
        group: SHORTCUTS_GROUP10
      });
    };
    hotInitializer(itemsBoxWrapper);
    this.hot._registerTimeout(() => hotInitializer(itemsBoxWrapper), 100);
  }
  /**
   * Focus element.
   */
  focus() {
    if (this.isBuilt()) {
      _classPrivateFieldGet18(_itemsBox, this).listen();
    }
  }
  /**
   * Reset DOM structure.
   */
  reset() {
    _classPrivateFieldGet18(_searchInput, this).reset();
    _classPrivateFieldGet18(_selectAllUI, this).reset();
    _classPrivateFieldGet18(_clearAllUI, this).reset();
  }
  /**
   * Update DOM structure.
   */
  update() {
    if (!this.isBuilt()) {
      return;
    }
    _classPrivateFieldGet18(_itemsBox, this).loadData(valueToItems(_classPrivateFieldGet18(_items2, this), this.options.value));
    super.update();
  }
  /**
   * Destroy instance.
   */
  destroy() {
    var _classPrivateFieldGet42;
    (_classPrivateFieldGet42 = _classPrivateFieldGet18(_itemsBox, this)) === null || _classPrivateFieldGet42 === void 0 || _classPrivateFieldGet42.destroy();
    _classPrivateFieldGet18(_searchInput, this).destroy();
    _classPrivateFieldGet18(_clearAllUI, this).destroy();
    _classPrivateFieldGet18(_selectAllUI, this).destroy();
    _classPrivateFieldSet16(_searchInput, this, null);
    _classPrivateFieldSet16(_clearAllUI, this, null);
    _classPrivateFieldSet16(_selectAllUI, this, null);
    _classPrivateFieldSet16(_itemsBox, this, null);
    _classPrivateFieldSet16(_items2, this, null);
    super.destroy();
  }
};
function _onInput(event) {
  const value = event.target.value.toLocaleLowerCase(this.getLocale());
  let filteredItems;
  if (value === "") {
    filteredItems = [..._classPrivateFieldGet18(_items2, this)];
  } else {
    filteredItems = _classPrivateFieldGet18(_items2, this).filter((item) => `${item.value}`.toLocaleLowerCase(this.getLocale()).indexOf(value) >= 0);
  }
  _classPrivateFieldGet18(_itemsBox, this).loadData(filteredItems);
}
function _onInputKeyDown2(event) {
  this.runLocalHooks("keydown", event, this);
  const isKeyCode = partial(isKey, event.keyCode);
  if (isKeyCode("ARROW_DOWN")) {
    event.preventDefault();
    stopImmediatePropagation(event);
    _classPrivateFieldGet18(_itemsBox, this).listen();
    _classPrivateFieldGet18(_itemsBox, this).selectCell(0, 0);
  }
}
function _onSelectAllClick(event) {
  const changes = [];
  event.preventDefault();
  _classPrivateFieldGet18(_itemsBox, this).getSourceData().forEach((row, rowIndex) => {
    row.checked = true;
    changes.push(dataRowToChangesArray(row, rowIndex)[0]);
  });
  _classPrivateFieldGet18(_itemsBox, this).setSourceDataAtCell(changes);
}
function _onClearAllClick(event) {
  const changes = [];
  event.preventDefault();
  _classPrivateFieldGet18(_itemsBox, this).getSourceData().forEach((row, rowIndex) => {
    row.checked = false;
    changes.push(dataRowToChangesArray(row, rowIndex)[0]);
  });
  _classPrivateFieldGet18(_itemsBox, this).setSourceDataAtCell(changes);
}
function valueToItems(availableItems, selectedValue) {
  const arrayAssertion = createArrayAssertion(selectedValue);
  return availableItems.map((item) => {
    item.checked = arrayAssertion(item.value);
    return item;
  });
}
function itemsToValue(availableItems) {
  const items = [];
  availableItems.forEach((item) => {
    if (item.checked) {
      items.push(item.value);
    }
  });
  return items;
}

// node_modules/handsontable/plugins/filters/component/value.mjs
function _classPrivateMethodInitSpec25(e, a) {
  _checkPrivateRedeclaration30(e, a), a.add(e);
}
function _checkPrivateRedeclaration30(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty33(e, r, t) {
  return (r = _toPropertyKey33(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey33(t) {
  var i = _toPrimitive33(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive33(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _assertClassBrand30(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _ValueComponent_brand = /* @__PURE__ */ new WeakSet();
var ValueComponent = class extends BaseComponent {
  constructor(hotInstance, options) {
    super(hotInstance, {
      id: options.id,
      stateless: false
    });
    _classPrivateMethodInitSpec25(this, _ValueComponent_brand);
    _defineProperty33(this, "name", "");
    this.name = options.name;
    this.elements.push(new MultipleSelectUI(this.hot));
    this.registerHooks();
  }
  /**
   * Register all necessary hooks.
   *
   * @private
   */
  registerHooks() {
    this.getMultipleSelectElement().addLocalHook("keydown", (event) => _assertClassBrand30(_ValueComponent_brand, this, _onInputKeyDown3).call(this, event)).addLocalHook("listTabKeydown", (event) => this.runLocalHooks("listTabKeydown", event));
    this.hot.addHook("modifyFiltersMultiSelectValue", (value, meta) => _assertClassBrand30(_ValueComponent_brand, this, _onModifyDisplayedValue).call(this, value, meta));
  }
  /**
   * Gets the list of elements from which the component is built.
   *
   * @returns {BaseUI[]}
   */
  getElements() {
    const selectElement = this.getMultipleSelectElement();
    return [selectElement.getSearchInputElement(), selectElement.getSelectAllElement(), selectElement.getClearAllElement(), this.getMultipleSelectElement()];
  }
  /**
   * Set state of the component.
   *
   * @param {object} value The component value.
   */
  setState(value) {
    this.reset();
    if (value && value.command.key === CONDITION_NAME21) {
      const select = this.getMultipleSelectElement();
      select.setItems(value.itemsSnapshot);
      select.setValue(value.args[0]);
      select.setLocale(value.locale);
    }
  }
  /**
   * Export state of the component (get selected filter and filter arguments).
   *
   * @returns {object} Returns object where `command` key keeps used condition filter and `args` key its arguments.
   */
  getState() {
    const select = this.getMultipleSelectElement();
    const availableItems = select.getItems();
    return {
      command: {
        key: select.isSelectedAllValues() || !availableItems.length ? CONDITION_NAME : CONDITION_NAME21
      },
      args: [select.getValue()],
      itemsSnapshot: availableItems
    };
  }
  /**
   * Update state of component.
   *
   * @param {object} stateInfo Information about state containing stack of edited column,
   * stack of dependent conditions, data factory and optional condition arguments change. It's described by object containing keys:
   * `editedConditionStack`, `dependentConditionStacks`, `visibleDataFactory` and `conditionArgsChange`.
   */
  updateState(stateInfo) {
    const updateColumnState = (physicalColumn, conditions2, conditionArgsChange, filteredRowsFactory, conditionsStack) => {
      const [firstByValueCondition] = arrayFilter(conditions2, (condition24) => condition24.name === CONDITION_NAME21);
      const state = {};
      const defaultBlankCellValue = this.hot.getTranslatedPhrase(FILTERS_VALUES_BLANK_CELLS);
      if (firstByValueCondition) {
        const filteredRows = filteredRowsFactory(physicalColumn, conditionsStack);
        const rowValues = arrayMap(filteredRows, (row) => row.value);
        const rowMetaMap = new Map(filteredRows.map((row) => [row.value, this.hot.getCellMeta(row.meta.visualRow, row.meta.visualCol)]));
        const unifiedRowValues = unifyColumnValues(rowValues);
        if (conditionArgsChange) {
          firstByValueCondition.args[0] = conditionArgsChange;
        }
        const selectedValues = [];
        const itemsSnapshot = intersectValues(unifiedRowValues, firstByValueCondition.args[0], defaultBlankCellValue, (item) => {
          if (item.checked) {
            selectedValues.push(item.value);
          }
          _assertClassBrand30(_ValueComponent_brand, this, _triggerModifyMultipleSelectionValueHook).call(this, item, rowMetaMap);
        });
        const column = stateInfo.editedConditionStack.column;
        state.locale = this.hot.getCellMeta(0, column).locale;
        state.args = [selectedValues];
        state.command = getConditionDescriptor(CONDITION_NAME21);
        state.itemsSnapshot = itemsSnapshot;
      } else {
        state.args = [];
        state.command = getConditionDescriptor(CONDITION_NAME);
      }
      this.state.setValueAtIndex(physicalColumn, state);
    };
    updateColumnState(stateInfo.editedConditionStack.column, stateInfo.editedConditionStack.conditions, stateInfo.conditionArgsChange, stateInfo.filteredRowsFactory);
    if (stateInfo.dependentConditionStacks.length) {
      updateColumnState(stateInfo.dependentConditionStacks[0].column, stateInfo.dependentConditionStacks[0].conditions, stateInfo.conditionArgsChange, stateInfo.filteredRowsFactory, stateInfo.editedConditionStack);
    }
  }
  /**
   * Get multiple select element.
   *
   * @returns {MultipleSelectUI}
   */
  getMultipleSelectElement() {
    return this.elements.filter((element) => element instanceof MultipleSelectUI)[0];
  }
  /**
   * Get object descriptor for menu item entry.
   *
   * @returns {object}
   */
  getMenuItemDescriptor() {
    return {
      key: this.id,
      name: this.name,
      isCommand: false,
      disableSelection: true,
      hidden: () => this.isHidden(),
      renderer: (hot, wrapper, row, col, prop, value) => {
        addClass(wrapper.parentNode, "htFiltersMenuValue");
        const label = this.hot.rootDocument.createElement("div");
        addClass(label, "htFiltersMenuLabel");
        label.textContent = value;
        wrapper.appendChild(label);
        if (!wrapper.parentElement.hasAttribute("ghost-table")) {
          arrayEach(this.elements, (ui) => wrapper.appendChild(ui.element));
        }
        return wrapper;
      }
    };
  }
  /**
   * Reset elements to their initial state.
   */
  reset() {
    const defaultBlankCellValue = this.hot.getTranslatedPhrase(FILTERS_VALUES_BLANK_CELLS);
    const rowEntries = this._getColumnVisibleValues();
    const rowValues = rowEntries.map((entry) => entry.value);
    const rowMetaMap = new Map(rowEntries.map((row) => [row.value, row.meta]));
    const values = unifyColumnValues(rowValues);
    const items = intersectValues(values, values, defaultBlankCellValue, (item) => {
      _assertClassBrand30(_ValueComponent_brand, this, _triggerModifyMultipleSelectionValueHook).call(this, item, rowMetaMap);
    });
    this.getMultipleSelectElement().setItems(items);
    super.reset();
    this.getMultipleSelectElement().setValue(values);
    const selectedColumn = this.hot.getPlugin("filters").getSelectedColumn();
    if (selectedColumn !== null) {
      this.getMultipleSelectElement().setLocale(this.hot.getCellMeta(0, selectedColumn.visualIndex).locale);
    }
  }
  /**
   * Get data for currently selected column.
   *
   * @returns {Array}
   * @private
   */
  _getColumnVisibleValues() {
    const selectedColumn = this.hot.getPlugin("filters").getSelectedColumn();
    if (selectedColumn === null) {
      return [];
    }
    return arrayMap(this.hot.getDataAtCol(selectedColumn.visualIndex), (v, rowIndex) => {
      return {
        value: toEmptyString(v),
        meta: this.hot.getCellMeta(rowIndex, selectedColumn.visualIndex)
      };
    });
  }
};
function _onInputKeyDown3(event) {
  if (isKey(event.keyCode, "ESCAPE")) {
    this.runLocalHooks("cancel");
    stopImmediatePropagation(event);
  }
}
function _triggerModifyMultipleSelectionValueHook(item, metaMap) {
  if (this.hot.hasHook("modifyFiltersMultiSelectValue")) {
    item.visualValue = this.hot.runHooks("modifyFiltersMultiSelectValue", item.visualValue, metaMap.get(item.value));
  }
}
function _onModifyDisplayedValue(value, meta) {
  switch (meta.type) {
    case "numeric":
      return getRenderedValue(value, meta);
    default:
      return value;
  }
}

// node_modules/handsontable/plugins/filters/component/actionBar.mjs
var _ActionBarComponent;
function _classPrivateMethodInitSpec26(e, a) {
  _checkPrivateRedeclaration31(e, a), a.add(e);
}
function _checkPrivateRedeclaration31(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty34(e, r, t) {
  return (r = _toPropertyKey34(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey34(t) {
  var i = _toPrimitive34(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive34(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _assertClassBrand31(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _ActionBarComponent_brand = /* @__PURE__ */ new WeakSet();
var ActionBarComponent = class _ActionBarComponent2 extends BaseComponent {
  static get BUTTON_OK() {
    return "ok";
  }
  static get BUTTON_CANCEL() {
    return "cancel";
  }
  constructor(hotInstance, options) {
    super(hotInstance, {
      id: options.id,
      stateless: true
    });
    _classPrivateMethodInitSpec26(this, _ActionBarComponent_brand);
    _defineProperty34(this, "name", "");
    this.name = options.name;
    this.elements.push(new InputUI(this.hot, {
      type: "button",
      value: FILTERS_BUTTONS_OK,
      className: "htUIButton htUIButtonOK",
      identifier: _ActionBarComponent2.BUTTON_OK
    }));
    this.elements.push(new InputUI(this.hot, {
      type: "button",
      value: FILTERS_BUTTONS_CANCEL,
      className: "htUIButton htUIButtonCancel",
      identifier: _ActionBarComponent2.BUTTON_CANCEL
    }));
    this.registerHooks();
  }
  /**
   * Register all necessary hooks.
   *
   * @private
   */
  registerHooks() {
    arrayEach(this.elements, (element) => {
      element.addLocalHook("click", (event, button) => _assertClassBrand31(_ActionBarComponent_brand, this, _onButtonClick).call(this, event, button));
    });
  }
  /**
   * Get menu object descriptor.
   *
   * @returns {object}
   */
  getMenuItemDescriptor() {
    return {
      key: this.id,
      name: this.name,
      isCommand: false,
      disableSelection: true,
      hidden: () => this.isHidden(),
      renderer: (hot, wrapper) => {
        addClass(wrapper.parentNode, "htFiltersMenuActionBar");
        arrayEach(this.elements, (ui) => wrapper.appendChild(ui.element));
        return wrapper;
      }
    };
  }
  /**
   * Fire accept event.
   */
  accept() {
    this.runLocalHooks("accept");
  }
  /**
   * Fire cancel event.
   */
  cancel() {
    this.runLocalHooks("cancel");
  }
};
_ActionBarComponent = ActionBarComponent;
function _onButtonClick(event, button) {
  if (button.options.identifier === _ActionBarComponent.BUTTON_OK) {
    this.accept();
  } else {
    this.cancel();
  }
}

// node_modules/handsontable/plugins/filters/conditionCollection.mjs
function _defineProperty35(e, r, t) {
  return (r = _toPropertyKey35(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey35(t) {
  var i = _toPrimitive35(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive35(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var MAP_NAME = "ConditionCollection.filteringStates";
var ConditionCollection = class {
  constructor(hot) {
    let isMapRegistrable = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    _defineProperty35(this, "hot", void 0);
    _defineProperty35(this, "isMapRegistrable", void 0);
    _defineProperty35(this, "filteringStates", new LinkedPhysicalIndexToValueMap());
    this.hot = hot;
    this.isMapRegistrable = isMapRegistrable;
    if (this.isMapRegistrable === true) {
      this.hot.columnIndexMapper.registerMap(MAP_NAME, this.filteringStates);
    } else {
      this.filteringStates.init(this.hot.columnIndexMapper.getNumberOfIndexes());
    }
  }
  /**
   * Check if condition collection is empty (so no needed to filter data).
   *
   * @returns {boolean}
   */
  isEmpty() {
    return this.getFilteredColumns().length === 0;
  }
  /**
   * Check if value is matched to the criteria of conditions chain.
   *
   * @param {object} value Object with `value` and `meta` keys.
   * @param {number} column The physical column index.
   * @returns {boolean}
   */
  isMatch(value, column) {
    var _stateForColumn$condi;
    const stateForColumn = this.filteringStates.getValueAtIndex(column);
    const conditions2 = (_stateForColumn$condi = stateForColumn === null || stateForColumn === void 0 ? void 0 : stateForColumn.conditions) !== null && _stateForColumn$condi !== void 0 ? _stateForColumn$condi : [];
    const operation = stateForColumn === null || stateForColumn === void 0 ? void 0 : stateForColumn.operation;
    return this.isMatchInConditions(conditions2, value, operation);
  }
  /**
   * Check if the value is matches the conditions.
   *
   * @param {Array} conditions List of conditions.
   * @param {object} value Object with `value` and `meta` keys.
   * @param {string} [operationType='conjunction'] Type of conditions operation.
   * @returns {boolean}
   */
  isMatchInConditions(conditions2, value) {
    let operationType = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : OPERATION_ID;
    if (conditions2.length) {
      return getOperationFunc(operationType)(conditions2, value);
    }
    return true;
  }
  /**
   * Add condition to the collection.
   *
   * @param {number} column The physical column index.
   * @param {object} conditionDefinition Object with keys:
   *  * `command` Object, Command object with condition name as `key` property.
   *  * `args` Array, Condition arguments.
   * @param {string} [operation='conjunction'] Type of conditions operation.
   * @param {number} [position] Position to which condition will be added. When argument is undefined
   * the condition will be processed as the last condition.
   * @fires ConditionCollection#beforeAdd
   * @fires ConditionCollection#afterAdd
   */
  addCondition(column, conditionDefinition) {
    let operation = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : OPERATION_ID;
    let position = arguments.length > 3 ? arguments[3] : void 0;
    const localeForColumn = this.hot.getCellMeta(0, column).locale;
    const args = conditionDefinition.args.map((v) => typeof v === "string" ? v.toLocaleLowerCase(localeForColumn) : v);
    const name = conditionDefinition.name || conditionDefinition.command.key;
    this.runLocalHooks("beforeAdd", column);
    const columnType = this.getOperation(column);
    if (columnType) {
      if (columnType !== operation) {
        throw Error(toSingleLine`The column of index ${column} has been already applied with a \`${columnType}\`\x20
        filter operation. Use \`removeConditions\` to clear the current conditions and then add new ones.\x20
        Mind that you cannot mix different types of operations (for instance, if you use \`conjunction\`,\x20
        use it consequently for a particular column).`);
      }
    } else if (isUndefined(operations[operation])) {
      throw new Error(toSingleLine`Unexpected operation named \`${operation}\`. Possible ones are\x20
        \`disjunction\` and \`conjunction\`.`);
    }
    const conditionsForColumn = this.getConditions(column);
    if (conditionsForColumn.length === 0) {
      this.filteringStates.setValueAtIndex(column, {
        operation,
        conditions: [{
          name,
          args,
          func: getCondition(name, args)
        }]
      }, position);
    } else {
      conditionsForColumn.push({
        name,
        args,
        func: getCondition(name, args)
      });
    }
    this.runLocalHooks("afterAdd", column);
  }
  /**
   * Get all added conditions from the collection at specified column index.
   *
   * @param {number} column The physical column index.
   * @returns {Array} Returns conditions collection as an array.
   */
  getConditions(column) {
    var _this$filteringStates, _this$filteringStates2;
    return (_this$filteringStates = (_this$filteringStates2 = this.filteringStates.getValueAtIndex(column)) === null || _this$filteringStates2 === void 0 ? void 0 : _this$filteringStates2.conditions) !== null && _this$filteringStates !== void 0 ? _this$filteringStates : [];
  }
  /**
   * Get operation for particular column.
   *
   * @param {number} column The physical column index.
   * @returns {string|undefined}
   */
  getOperation(column) {
    var _this$filteringStates3;
    return (_this$filteringStates3 = this.filteringStates.getValueAtIndex(column)) === null || _this$filteringStates3 === void 0 ? void 0 : _this$filteringStates3.operation;
  }
  /**
   * Get all filtered physical columns in the order in which actions are performed.
   *
   * @returns {Array}
   */
  getFilteredColumns() {
    return this.filteringStates.getEntries().map((_ref) => {
      let [physicalColumn] = _ref;
      return physicalColumn;
    });
  }
  /**
   * Gets position in the filtering states stack for the specific column.
   *
   * @param {number} column The physical column index.
   * @returns {number} Returns -1 when the column doesn't exist in the stack.
   */
  getColumnStackPosition(column) {
    return this.getFilteredColumns().indexOf(column);
  }
  /**
   * Export all previously added conditions.
   *
   * @returns {Array}
   */
  exportAllConditions() {
    return this.filteringStates.getEntries().reduce((allConditions, _ref2) => {
      let [column, {
        operation,
        conditions: conditions2
      }] = _ref2;
      allConditions.push({
        column,
        operation,
        conditions: conditions2.map((_ref3) => {
          let {
            name,
            args
          } = _ref3;
          return {
            name,
            args: [...args]
          };
        })
      });
      return allConditions;
    }, []);
  }
  /**
   * Import conditions to the collection.
   *
   * @param {Array} conditions The collection of the conditions.
   */
  importAllConditions(conditions2) {
    this.clean();
    conditions2.forEach((stack) => {
      stack.conditions.forEach((condition24) => this.addCondition(stack.column, condition24));
    });
  }
  /**
   * Remove conditions at given column index.
   *
   * @param {number} column The physical column index.
   * @fires ConditionCollection#beforeRemove
   * @fires ConditionCollection#afterRemove
   */
  removeConditions(column) {
    this.runLocalHooks("beforeRemove", column);
    this.filteringStates.clearValue(column);
    this.runLocalHooks("afterRemove", column);
  }
  /**
   * Clean all conditions collection and reset order stack.
   *
   * @fires ConditionCollection#beforeClean
   * @fires ConditionCollection#afterClean
   */
  clean() {
    this.runLocalHooks("beforeClean");
    this.filteringStates.clear();
    this.runLocalHooks("afterClean");
  }
  /**
   * Check if at least one condition was added at specified column index. And if second parameter is passed then additionally
   * check if condition exists under its name.
   *
   * @param {number} column The physical column index.
   * @param {string} [name] Condition name.
   * @returns {boolean}
   */
  hasConditions(column, name) {
    const conditions2 = this.getConditions(column);
    if (name) {
      return conditions2.some((condition24) => condition24.name === name);
    }
    return conditions2.length > 0;
  }
  /**
   * Destroy object.
   */
  destroy() {
    if (this.isMapRegistrable) {
      this.hot.columnIndexMapper.unregisterMap(MAP_NAME);
    }
    this.filteringStates = null;
    this.clearLocalHooks();
  }
};
mixin(ConditionCollection, localHooks_default);
var conditionCollection_default = ConditionCollection;

// node_modules/handsontable/plugins/filters/dataFilter.mjs
function _defineProperty36(e, r, t) {
  return (r = _toPropertyKey36(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey36(t) {
  var i = _toPrimitive36(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive36(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var DataFilter = class {
  constructor(conditionCollection) {
    let columnDataFactory = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : () => [];
    _defineProperty36(this, "conditionCollection", void 0);
    _defineProperty36(this, "columnDataFactory", void 0);
    this.conditionCollection = conditionCollection;
    this.columnDataFactory = columnDataFactory;
  }
  /**
   * Filter data based on the conditions collection.
   *
   * @returns {Array}
   */
  filter() {
    let filteredData = [];
    arrayEach(this.conditionCollection.getFilteredColumns(), (physicalColumn, index) => {
      let columnData = this.columnDataFactory(physicalColumn);
      if (index) {
        columnData = this._getIntersectData(columnData, filteredData);
      }
      filteredData = this.filterByColumn(physicalColumn, columnData);
    });
    return filteredData;
  }
  /**
   * Filter data based on specified physical column index.
   *
   * @param {number} column The physical column index.
   * @param {Array} [dataSource] Data source as array of objects with `value` and `meta` keys (e.g. `{value: 'foo', meta: {}}`).
   * @returns {Array} Returns filtered data.
   */
  filterByColumn(column) {
    let dataSource = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    const filteredData = [];
    arrayEach(dataSource, (dataRow) => {
      if (dataRow !== void 0 && this.conditionCollection.isMatch(dataRow, column)) {
        filteredData.push(dataRow);
      }
    });
    return filteredData;
  }
  /**
   * Intersect data.
   *
   * @private
   * @param {Array} data The data to intersect.
   * @param {Array} needles The collection intersected rows with the data.
   * @returns {Array}
   */
  _getIntersectData(data, needles) {
    const result = [];
    arrayEach(needles, (needleRow) => {
      const row = needleRow.meta.visualRow;
      if (data[row] !== void 0) {
        result[row] = data[row];
      }
    });
    return result;
  }
};
var dataFilter_default = DataFilter;

// node_modules/handsontable/plugins/filters/conditionUpdateObserver.mjs
function _classPrivateMethodInitSpec27(e, a) {
  _checkPrivateRedeclaration32(e, a), a.add(e);
}
function _checkPrivateRedeclaration32(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty37(e, r, t) {
  return (r = _toPropertyKey37(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey37(t) {
  var i = _toPrimitive37(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive37(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _assertClassBrand32(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _ConditionUpdateObserver_brand = /* @__PURE__ */ new WeakSet();
var ConditionUpdateObserver = class {
  constructor(hot, conditionCollection) {
    let columnDataFactory = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : () => [];
    _classPrivateMethodInitSpec27(this, _ConditionUpdateObserver_brand);
    _defineProperty37(this, "hot", void 0);
    _defineProperty37(this, "conditionCollection", void 0);
    _defineProperty37(this, "columnDataFactory", void 0);
    _defineProperty37(this, "changes", []);
    _defineProperty37(this, "grouping", false);
    _defineProperty37(this, "latestEditedColumnPosition", -1);
    _defineProperty37(this, "latestOrderStack", []);
    this.hot = hot;
    this.conditionCollection = conditionCollection;
    this.columnDataFactory = columnDataFactory;
    this.conditionCollection.addLocalHook("beforeRemove", (column) => _assertClassBrand32(_ConditionUpdateObserver_brand, this, _onConditionBeforeModify).call(this, column));
    this.conditionCollection.addLocalHook("afterRemove", (column) => this.updateStatesAtColumn(column));
    this.conditionCollection.addLocalHook("afterAdd", (column) => this.updateStatesAtColumn(column));
    this.conditionCollection.addLocalHook("beforeClean", () => _assertClassBrand32(_ConditionUpdateObserver_brand, this, _onConditionBeforeClean).call(this));
    this.conditionCollection.addLocalHook("afterClean", () => _assertClassBrand32(_ConditionUpdateObserver_brand, this, _onConditionAfterClean).call(this));
  }
  /**
   * Enable grouping changes. Grouping is helpful in situations when a lot of conditions is added in one moment. Instead of
   * trigger `update` hook for every condition by adding/removing you can group this changes and call `flush` method to trigger
   * it once.
   */
  groupChanges() {
    this.grouping = true;
  }
  /**
   * Flush all collected changes. This trigger `update` hook for every previously collected change from condition collection.
   */
  flush() {
    this.grouping = false;
    arrayEach(this.changes, (column) => {
      this.updateStatesAtColumn(column);
    });
    this.changes.length = 0;
  }
  /**
   * Update all related states which should be changed after invoking changes applied to current column.
   *
   * @param {number} column The column index.
   * @param {object} conditionArgsChange Object describing condition changes which can be handled by filters on `update` hook.
   * It contains keys `conditionKey` and `conditionValue` which refers to change specified key of condition to specified value
   * based on referred keys.
   */
  updateStatesAtColumn(column, conditionArgsChange) {
    var _this = this;
    if (this.grouping) {
      if (this.changes.indexOf(column) === -1) {
        this.changes.push(column);
      }
      return;
    }
    const allConditions = this.conditionCollection.exportAllConditions();
    let editedColumnPosition = this.conditionCollection.getColumnStackPosition(column);
    if (editedColumnPosition === -1) {
      editedColumnPosition = this.latestEditedColumnPosition;
    }
    const conditionsBefore = allConditions.slice(0, editedColumnPosition);
    const conditionsAfter = allConditions.slice(editedColumnPosition);
    if (conditionsAfter.length && conditionsAfter[0].column === column) {
      conditionsAfter.shift();
    }
    const visibleDataFactory = curry(function(curriedConditionsBefore, curriedColumn) {
      let conditionsStack = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
      const splitConditionCollection = new conditionCollection_default(_this.hot, false);
      const curriedConditionsBeforeArray = [].concat(curriedConditionsBefore, conditionsStack);
      splitConditionCollection.importAllConditions(curriedConditionsBeforeArray);
      const allRows = _this.columnDataFactory(curriedColumn);
      let visibleRows;
      if (splitConditionCollection.isEmpty()) {
        visibleRows = allRows;
      } else {
        visibleRows = new dataFilter_default(splitConditionCollection, (columnData) => _this.columnDataFactory(columnData)).filter();
      }
      visibleRows = arrayMap(visibleRows, (rowData) => rowData.meta.visualRow);
      const visibleRowsAssertion = createArrayAssertion(visibleRows);
      splitConditionCollection.destroy();
      return arrayFilter(allRows, (rowData) => visibleRowsAssertion(rowData.meta.visualRow));
    })(conditionsBefore);
    const editedConditions = [].concat(this.conditionCollection.getConditions(column));
    this.runLocalHooks("update", {
      editedConditionStack: {
        column,
        conditions: editedConditions
      },
      dependentConditionStacks: conditionsAfter,
      filteredRowsFactory: visibleDataFactory,
      conditionArgsChange
    });
  }
  /**
   * On before conditions clean listener.
   *
   * @private
   */
  /**
   * Destroy instance.
   */
  destroy() {
    this.clearLocalHooks();
    objectEach(this, (value, property) => {
      this[property] = null;
    });
  }
};
function _onConditionBeforeModify(column) {
  this.latestEditedColumnPosition = this.conditionCollection.getColumnStackPosition(column);
}
function _onConditionBeforeClean() {
  this.latestOrderStack = this.conditionCollection.getFilteredColumns();
}
function _onConditionAfterClean() {
  arrayEach(this.latestOrderStack, (column) => {
    this.updateStatesAtColumn(column);
  });
}
mixin(ConditionUpdateObserver, localHooks_default);
var conditionUpdateObserver_default = ConditionUpdateObserver;

// node_modules/handsontable/plugins/filters/menu/focusNavigator.mjs
function createFocusNavigator(elements) {
  const navigator2 = createPaginator({
    initialPage: 0,
    size: () => elements.length,
    onItemSelect: (currentIndex, directItemChange) => {
      const element = elements[currentIndex];
      if (element instanceof MultipleSelectUI) {
        return directItemChange;
      }
      if (element.element && !isVisible(element.element)) {
        return false;
      }
      element.focus();
    }
  });
  return navigator2;
}

// node_modules/handsontable/plugins/filters/menu/focusController.mjs
var SHORTCUTS_MENU_CONTEXT = "filters";
function createMenuFocusController(mainMenu, menuItems) {
  let lastSelectedMenuItem = -1;
  let menuInstance;
  const focusNavigator = createFocusNavigator(menuItems);
  const updateNavigatorPosition = (element) => () => {
    if (menuInstance.isOpened()) {
      menuInstance.getKeyboardShortcutsCtrl().listen(SHORTCUTS_MENU_CONTEXT);
    }
    focusNavigator.setCurrentPage(menuItems.indexOf(element));
  };
  menuItems.forEach((element) => {
    if (element instanceof BaseUI) {
      element.addLocalHook("click", updateNavigatorPosition(element));
      element.addLocalHook("focus", updateNavigatorPosition(element));
      element.addLocalHook("afterClose", updateNavigatorPosition(element));
    }
  });
  setMenu(mainMenu);
  function addKeyboardShortcuts(menu) {
    const mainMenuShortcutsCtrl = menuInstance.getKeyboardShortcutsCtrl();
    const currentMenuShortcutsCtrl = menu.getKeyboardShortcutsCtrl();
    focusNavigator.clear();
    currentMenuShortcutsCtrl.addCustomShortcuts([{
      keys: [["Tab"], ["Shift", "Tab"]],
      forwardToContext: mainMenuShortcutsCtrl.getContext(SHORTCUTS_MENU_CONTEXT),
      callback: () => {
        if (menu.isSubMenu()) {
          menu.close();
        }
        mainMenuShortcutsCtrl.listen(SHORTCUTS_MENU_CONTEXT);
      }
    }]);
    if (menu.isSubMenu()) {
      return;
    }
    mainMenuShortcutsCtrl.addCustomShortcuts([{
      keys: [["Tab"], ["Shift", "Tab"]],
      callback: (event) => {
        const menuNavigator = menuInstance.getNavigator();
        if (menuNavigator.getCurrentPage() > -1) {
          lastSelectedMenuItem = menuNavigator.getCurrentPage();
        }
        menuNavigator.clear();
        if (event.shiftKey) {
          focusNavigator.toPreviousItem();
        } else {
          focusNavigator.toNextItem();
        }
      }
    }, {
      keys: [["Escape"]],
      callback: () => {
        menuInstance.close();
      }
    }, {
      keys: [["Enter"], ["Space"]],
      preventDefault: false,
      callback: (event) => {
        const element = menuItems[focusNavigator.getCurrentPage()];
        if (element instanceof SelectUI) {
          element.openOptions();
          event.preventDefault();
        }
        if (element instanceof LinkUI) {
          element.activate();
          event.preventDefault();
        }
        if (!(element instanceof BaseUI)) {
          event.preventDefault();
        }
      }
    }], SHORTCUTS_MENU_CONTEXT);
  }
  function listen() {
    menuInstance.focus();
    menuInstance.getKeyboardShortcutsCtrl().listen(SHORTCUTS_MENU_CONTEXT);
  }
  function setMenu(menu) {
    menu.addLocalHook("afterSelectionChange", (selectedItem) => {
      if (!selectedItem.key.startsWith("filter_")) {
        focusNavigator.clear();
      }
    });
    menu.addLocalHook("afterSubmenuOpen", addKeyboardShortcuts);
    menu.addLocalHook("afterOpen", addKeyboardShortcuts);
    menuInstance = menu;
  }
  function getMenu() {
    return menuInstance;
  }
  function getLastMenuPage() {
    return lastSelectedMenuItem;
  }
  return {
    ...focusNavigator,
    listen,
    setMenu,
    getMenu,
    getLastMenuPage
  };
}

// node_modules/handsontable/plugins/filters/filters.mjs
function _classPrivateMethodInitSpec28(e, a) {
  _checkPrivateRedeclaration33(e, a), a.add(e);
}
function _classPrivateFieldInitSpec19(e, t, a) {
  _checkPrivateRedeclaration33(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration33(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty38(e, r, t) {
  return (r = _toPropertyKey38(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey38(t) {
  var i = _toPrimitive38(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive38(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _classPrivateFieldSet17(s, a, r) {
  return s.set(_assertClassBrand33(s, a), r), r;
}
function _classPrivateFieldGet19(s, a) {
  return s.get(_assertClassBrand33(s, a));
}
function _assertClassBrand33(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var PLUGIN_KEY16 = "filters";
var PLUGIN_PRIORITY15 = 250;
var SHORTCUTS_GROUP11 = PLUGIN_KEY16;
var _menuFocusNavigator = /* @__PURE__ */ new WeakMap();
var _dropdownMenuTraces = /* @__PURE__ */ new WeakMap();
var _previousConditionStack = /* @__PURE__ */ new WeakMap();
var _Filters_brand = /* @__PURE__ */ new WeakSet();
var Filters = class extends BasePlugin {
  static get PLUGIN_KEY() {
    return PLUGIN_KEY16;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY15;
  }
  static get PLUGIN_DEPS() {
    return ["plugin:DropdownMenu", "plugin:HiddenRows", "cell-type:checkbox"];
  }
  /**
   * Instance of {@link DropdownMenu}.
   *
   * @private
   * @type {DropdownMenu}
   */
  constructor(hotInstance) {
    var _this;
    super(hotInstance);
    _this = this;
    _classPrivateMethodInitSpec28(this, _Filters_brand);
    _defineProperty38(this, "dropdownMenuPlugin", null);
    _defineProperty38(this, "conditionCollection", null);
    _defineProperty38(this, "conditionUpdateObserver", null);
    _defineProperty38(this, "components", /* @__PURE__ */ new Map([["filter_by_condition", null], ["filter_operators", null], ["filter_by_condition2", null], ["filter_by_value", null], ["filter_action_bar", null]]));
    _defineProperty38(this, "filtersRowsMap", null);
    _classPrivateFieldInitSpec19(this, _menuFocusNavigator, void 0);
    _classPrivateFieldInitSpec19(this, _dropdownMenuTraces, /* @__PURE__ */ new WeakSet());
    _classPrivateFieldInitSpec19(this, _previousConditionStack, []);
    this.hot.addHook("afterGetColHeader", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _assertClassBrand33(_Filters_brand, _this, _onAfterGetColHeader4).call(_this, ...args);
    });
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link Filters#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return this.hot.getSettings()[PLUGIN_KEY16] ? true : false;
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _this2 = this;
    if (this.enabled) {
      return;
    }
    this.filtersRowsMap = this.hot.rowIndexMapper.registerMap(this.pluginName, new TrimmingMap());
    this.dropdownMenuPlugin = this.hot.getPlugin("dropdownMenu");
    const dropdownSettings = this.hot.getSettings().dropdownMenu;
    const menuContainer = dropdownSettings && dropdownSettings.uiContainer || this.hot.rootDocument.body;
    const addConfirmationHooks = (component) => {
      component.addLocalHook("accept", () => _assertClassBrand33(_Filters_brand, this, _onActionBarSubmit).call(this, "accept"));
      component.addLocalHook("cancel", () => _assertClassBrand33(_Filters_brand, this, _onActionBarSubmit).call(this, "cancel"));
      component.addLocalHook("change", (command) => _assertClassBrand33(_Filters_brand, this, _onComponentChange).call(this, component, command));
      return component;
    };
    const filterByConditionLabel = () => `${this.hot.getTranslatedPhrase(FILTERS_DIVS_FILTER_BY_CONDITION)}:`;
    const filterValueLabel = () => `${this.hot.getTranslatedPhrase(FILTERS_DIVS_FILTER_BY_VALUE)}:`;
    if (!this.components.get("filter_by_condition")) {
      const conditionComponent = new ConditionComponent(this.hot, {
        id: "filter_by_condition",
        name: filterByConditionLabel,
        addSeparator: false,
        menuContainer
      });
      conditionComponent.addLocalHook("afterClose", () => _assertClassBrand33(_Filters_brand, this, _onSelectUIClosed).call(this));
      this.components.set("filter_by_condition", addConfirmationHooks(conditionComponent));
    }
    if (!this.components.get("filter_operators")) {
      this.components.set("filter_operators", new OperatorsComponent(this.hot, {
        id: "filter_operators",
        name: "Operators"
      }));
    }
    if (!this.components.get("filter_by_condition2")) {
      const conditionComponent = new ConditionComponent(this.hot, {
        id: "filter_by_condition2",
        name: "",
        addSeparator: true,
        menuContainer
      });
      conditionComponent.addLocalHook("afterClose", () => _assertClassBrand33(_Filters_brand, this, _onSelectUIClosed).call(this));
      this.components.set("filter_by_condition2", addConfirmationHooks(conditionComponent));
    }
    if (!this.components.get("filter_by_value")) {
      this.components.set("filter_by_value", addConfirmationHooks(new ValueComponent(this.hot, {
        id: "filter_by_value",
        name: filterValueLabel
      })));
    }
    if (!this.components.get("filter_action_bar")) {
      this.components.set("filter_action_bar", addConfirmationHooks(new ActionBarComponent(this.hot, {
        id: "filter_action_bar",
        name: "Action bar"
      })));
    }
    if (!this.conditionCollection) {
      this.conditionCollection = new conditionCollection_default(this.hot);
    }
    if (!this.conditionUpdateObserver) {
      this.conditionUpdateObserver = new conditionUpdateObserver_default(this.hot, this.conditionCollection, (physicalColumn) => this.getDataMapAtColumn(physicalColumn));
      this.conditionUpdateObserver.addLocalHook("update", (conditionState) => _assertClassBrand33(_Filters_brand, this, _updateComponents).call(this, conditionState));
    }
    this.components.forEach((component) => component.show());
    this.addHook("afterDropdownMenuDefaultOptions", function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _assertClassBrand33(_Filters_brand, _this2, _onAfterDropdownMenuDefaultOptions).call(_this2, ...args);
    });
    this.addHook("beforeDropdownMenuShow", () => _assertClassBrand33(_Filters_brand, this, _onBeforeDropdownMenuShow).call(this));
    this.addHook("afterDropdownMenuShow", () => _assertClassBrand33(_Filters_brand, this, _onAfterDropdownMenuShow).call(this));
    this.addHook("afterDropdownMenuHide", () => _assertClassBrand33(_Filters_brand, this, _onAfterDropdownMenuHide).call(this));
    this.addHook("afterChange", (changes) => _assertClassBrand33(_Filters_brand, this, _onAfterChange2).call(this, changes));
    if (this.hot.getSettings().dropdownMenu && this.dropdownMenuPlugin) {
      this.dropdownMenuPlugin.disablePlugin();
      this.dropdownMenuPlugin.enablePlugin();
    }
    if (!_classPrivateFieldGet19(_menuFocusNavigator, this) && this.dropdownMenuPlugin.enabled) {
      const focusableItems = [
        // A fake menu item that once focused allows escaping from the focus navigation (using Tab keys)
        // to the menu navigation using arrow keys.
        {
          focus: () => {
            const menu = _classPrivateFieldGet19(_menuFocusNavigator, this).getMenu();
            const menuNavigator = menu.getNavigator();
            const lastSelectedMenuItem = _classPrivateFieldGet19(_menuFocusNavigator, this).getLastMenuPage();
            menu.focus();
            if (lastSelectedMenuItem > 0) {
              menuNavigator.setCurrentPage(lastSelectedMenuItem);
            } else {
              menuNavigator.toFirstItem();
            }
          }
        },
        ...Array.from(this.components).map((_ref) => {
          let [, component] = _ref;
          return component.getElements();
        }).flat()
      ];
      _classPrivateFieldSet17(_menuFocusNavigator, this, createMenuFocusController(this.dropdownMenuPlugin.menu, focusableItems));
      const forwardToFocusNavigation = (event) => {
        _classPrivateFieldGet19(_menuFocusNavigator, this).listen();
        event.preventDefault();
        if (isKey(event.keyCode, "TAB")) {
          if (event.shiftKey) {
            _classPrivateFieldGet19(_menuFocusNavigator, this).toPreviousItem();
          } else {
            _classPrivateFieldGet19(_menuFocusNavigator, this).toNextItem();
          }
        }
      };
      this.components.get("filter_by_value").addLocalHook("listTabKeydown", forwardToFocusNavigation);
      this.components.get("filter_by_condition").addLocalHook("selectTabKeydown", forwardToFocusNavigation);
    }
    this.registerShortcuts();
    super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    if (this.enabled) {
      var _this$dropdownMenuPlu;
      if ((_this$dropdownMenuPlu = this.dropdownMenuPlugin) !== null && _this$dropdownMenuPlu !== void 0 && _this$dropdownMenuPlu.enabled) {
        this.dropdownMenuPlugin.menu.clearLocalHooks();
      }
      this.components.forEach((component, key) => {
        component.destroy();
        this.components.set(key, null);
      });
      this.conditionCollection.destroy();
      this.conditionCollection = null;
      this.hot.rowIndexMapper.unregisterMap(this.pluginName);
    }
    this.unregisterShortcuts();
    super.disablePlugin();
  }
  /**
   * Register shortcuts responsible for clearing the filters.
   *
   * @private
   */
  registerShortcuts() {
    this.hot.getShortcutManager().getContext("grid").addShortcut({
      keys: [["Alt", "A"]],
      stopPropagation: true,
      callback: () => {
        const selection = this.hot.getSelected();
        this.clearConditions();
        this.filter();
        if (selection) {
          this.hot.selectCells(selection);
        }
      },
      group: SHORTCUTS_GROUP11
    });
  }
  /**
   * Unregister shortcuts responsible for clearing the filters.
   *
   * @private
   */
  unregisterShortcuts() {
    this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(SHORTCUTS_GROUP11);
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * @memberof Filters#
   * @function addCondition
   * @description
   * Adds condition to the conditions collection at specified column index.
   *
   * Possible predefined conditions:
   *  * `begins_with` - Begins with
   *  * `between` - Between
   *  * `by_value` - By value
   *  * `contains` - Contains
   *  * `date_after` - After a date
   *  * `date_before` - Before a date
   *  * `date_today` - Today
   *  * `date_tomorrow` - Tomorrow
   *  * `date_yesterday` - Yesterday
   *  * `empty` - Empty
   *  * `ends_with` - Ends with
   *  * `eq` - Equal
   *  * `gt` - Greater than
   *  * `gte` - Greater than or equal
   *  * `lt` - Less than
   *  * `lte` - Less than or equal
   *  * `none` - None (no filter)
   *  * `not_between` - Not between
   *  * `not_contains` - Not contains
   *  * `not_empty` - Not empty
   *  * `neq` - Not equal.
   *
   * Possible operations on collection of conditions:
   *  * `conjunction` - [**Conjunction**](https://en.wikipedia.org/wiki/Logical_conjunction) on conditions collection (by default), i.e. for such operation: <br/> c1 AND c2 AND c3 AND c4 ... AND cn === TRUE, where c1 ... cn are conditions.
   *  * `disjunction` - [**Disjunction**](https://en.wikipedia.org/wiki/Logical_disjunction) on conditions collection, i.e. for such operation: <br/> c1 OR c2 OR c3 OR c4 ... OR cn === TRUE, where c1, c2, c3, c4 ... cn are conditions.
   *  * `disjunctionWithExtraCondition` - **Disjunction** on first `n - 1`\* conditions from collection with an extra requirement computed from the last condition, i.e. for such operation: <br/> c1 OR c2 OR c3 OR c4 ... OR cn-1 AND cn === TRUE, where c1, c2, c3, c4 ... cn are conditions.
   *
   * \* when `n` is collection size; it's used i.e. for one operation introduced from UI (when choosing from filter's drop-down menu two conditions with OR operator between them, mixed with choosing values from the multiple choice select)
   *
   * **Note**: Mind that you cannot mix different types of operations (for instance, if you use `conjunction`, use it consequently for a particular column).
   *
   * @example
   * ::: only-for javascript
   * ```js
   * const container = document.getElementById('example');
   * const hot = new Handsontable(container, {
   *   data: getData(),
   *   filters: true
   * });
   *
   * // access to filters plugin instance
   * const filtersPlugin = hot.getPlugin('filters');
   *
   * // add filter "Greater than" 95 to column at index 1
   * filtersPlugin.addCondition(1, 'gt', [95]);
   * filtersPlugin.filter();
   *
   * // add filter "By value" to column at index 1
   * // in this case all value's that don't match will be filtered.
   * filtersPlugin.addCondition(1, 'by_value', [['ing', 'ed', 'as', 'on']]);
   * filtersPlugin.filter();
   *
   * // add filter "Begins with" with value "de" AND "Not contains" with value "ing"
   * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'conjunction');
   * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'conjunction');
   * filtersPlugin.filter();
   *
   * // add filter "Begins with" with value "de" OR "Not contains" with value "ing"
   * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'disjunction');
   * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'disjunction');
   * filtersPlugin.filter();
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * const hotRef = useRef(null);
   *
   * ...
   *
   * <HotTable
   *   ref={hotRef}
   *   data={getData()}
   *   filters={true}
   * />
   *
   * // access to filters plugin instance
   * const hot = hotRef.current.hotInstance;
   * const filtersPlugin = hot.getPlugin('filters');
   *
   * // add filter "Greater than" 95 to column at index 1
   * filtersPlugin.addCondition(1, 'gt', [95]);
   * filtersPlugin.filter();
   *
   * // add filter "By value" to column at index 1
   * // in this case all value's that don't match will be filtered.
   * filtersPlugin.addCondition(1, 'by_value', [['ing', 'ed', 'as', 'on']]);
   * filtersPlugin.filter();
   *
   * // add filter "Begins with" with value "de" AND "Not contains" with value "ing"
   * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'conjunction');
   * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'conjunction');
   * filtersPlugin.filter();
   *
   * // add filter "Begins with" with value "de" OR "Not contains" with value "ing"
   * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'disjunction');
   * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'disjunction');
   * filtersPlugin.filter();
   * ```
   * :::
   *
   * @param {number} column Visual column index.
   * @param {string} name Condition short name.
   * @param {Array} args Condition arguments.
   * @param {string} [operationId=conjunction] `id` of operation which is performed on the column.
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  addCondition(column, name, args) {
    let operationId = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : OPERATION_ID;
    const physicalColumn = this.hot.toPhysicalColumn(column);
    this.conditionCollection.addCondition(physicalColumn, {
      command: {
        key: name
      },
      args
    }, operationId);
  }
  /**
   * Removes conditions at specified column index.
   *
   * @param {number} column Visual column index.
   */
  removeConditions(column) {
    const physicalColumn = this.hot.toPhysicalColumn(column);
    this.conditionCollection.removeConditions(physicalColumn);
  }
  /**
   * Clears all conditions previously added to the collection for the specified column index or, if the column index
   * was not passed, clear the conditions for all columns.
   *
   * @param {number} [column] Visual column index.
   */
  clearConditions(column) {
    if (column === void 0) {
      this.conditionCollection.clean();
    } else {
      const physicalColumn = this.hot.toPhysicalColumn(column);
      this.conditionCollection.removeConditions(physicalColumn);
    }
  }
  /**
   * Imports filter conditions to all columns to the plugin. The method accepts
   * the array of conditions with the same structure as the {@link Filters#exportConditions} method returns.
   * Importing conditions will replace the current conditions. Once replaced, the state of the condition
   * will be reflected in the UI. To apply the changes and filter the table, call
   * the {@link Filters#filter} method eventually.
   *
   * @param {Array} conditions Array of conditions.
   */
  importConditions(conditions2) {
    this.conditionCollection.importAllConditions(conditions2);
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * Exports filter conditions for all columns from the plugin.
   * The array represents the filter state for each column. For example:
   *
   * ```js
   * [
   *   {
   *     column: 1,
   *     operation: 'conjunction',
   *     conditions: [
   *       { name: 'gt', args: [95] },
   *     ]
   *   },
   *   {
   *     column: 7,
   *     operation: 'conjunction',
   *     conditions: [
   *       { name: 'contains', args: ['mike'] },
   *       { name: 'begins_with', args: ['m'] },
   *     ]
   *   },
   * ]
   * ```
   *
   * @returns {Array}
   */
  exportConditions() {
    return this.conditionCollection.exportAllConditions();
  }
  /* eslint-enable jsdoc/require-description-complete-sentence */
  /**
   * Filters data based on added filter conditions.
   *
   * @fires Hooks#beforeFilter
   * @fires Hooks#afterFilter
   */
  filter() {
    const {
      navigableHeaders
    } = this.hot.getSettings();
    const dataFilter = this._createDataFilter();
    const needToFilter = !this.conditionCollection.isEmpty();
    let visibleVisualRows = [];
    const conditions2 = this.exportConditions();
    const allowFiltering = this.hot.runHooks("beforeFilter", conditions2, _classPrivateFieldGet19(_previousConditionStack, this));
    if (allowFiltering !== false && needToFilter) {
      const trimmedRows = [];
      this.hot.batchExecution(() => {
        this.filtersRowsMap.clear();
        visibleVisualRows = arrayMap(dataFilter.filter(), (rowData) => rowData.meta.visualRow);
        const visibleVisualRowsAssertion = createArrayAssertion(visibleVisualRows);
        rangeEach(this.hot.countSourceRows() - 1, (row) => {
          if (!visibleVisualRowsAssertion(row)) {
            trimmedRows.push(row);
          }
        });
        arrayEach(trimmedRows, (physicalRow) => {
          this.filtersRowsMap.setValueAtIndex(physicalRow, true);
        });
      }, true);
      if (!navigableHeaders && !visibleVisualRows.length) {
        this.hot.deselectCell();
      }
      _classPrivateFieldSet17(_previousConditionStack, this, this.exportConditions());
    } else if (allowFiltering !== false && !needToFilter) {
      _classPrivateFieldSet17(_previousConditionStack, this, this.exportConditions());
      this.filtersRowsMap.clear();
    } else {
      this.importConditions(_classPrivateFieldGet19(_previousConditionStack, this));
    }
    if (this.hot.selection.isSelected()) {
      this.hot.selectCell(navigableHeaders ? -1 : 0, this.hot.getSelectedRangeLast().highlight.col);
    }
    if (allowFiltering !== false) {
      this.hot.runHooks("afterFilter", conditions2);
      this.hot.view.adjustElementsSize();
      this.hot.render();
    }
  }
  /**
   * Gets last selected column index.
   *
   * @returns {{visualIndex: number, physicalIndex: number} | null} Returns `null` when a column is
   * not selected. Otherwise, returns an object with `visualIndex` and `physicalIndex` properties containing
   * the index of the column.
   */
  getSelectedColumn() {
    var _this$hot$getSelected;
    const highlight = (_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight;
    if (!highlight) {
      return null;
    }
    return {
      visualIndex: highlight.col,
      physicalIndex: this.hot.toPhysicalColumn(highlight.col)
    };
  }
  /**
   * Returns handsontable source data with cell meta based on current selection.
   *
   * @param {number} [column] The physical column index. By default column index accept the value of the selected column.
   * @returns {Array} Returns array of objects where keys as row index.
   */
  getDataMapAtColumn(column) {
    const visualColumn = this.hot.toVisualColumn(column);
    const data = [];
    arrayEach(this.hot.getSourceDataAtCol(visualColumn), (value, rowIndex) => {
      var _this$hot$getDataAtCe;
      const {
        row,
        col,
        visualCol,
        visualRow,
        type,
        instance,
        dateFormat,
        locale
      } = this.hot.getCellMeta(rowIndex, visualColumn);
      const dataValue = (_this$hot$getDataAtCe = this.hot.getDataAtCell(this.hot.toVisualRow(rowIndex), visualColumn)) !== null && _this$hot$getDataAtCe !== void 0 ? _this$hot$getDataAtCe : value;
      data.push({
        meta: {
          row,
          col,
          visualCol,
          visualRow,
          type,
          instance,
          dateFormat,
          locale
        },
        value: toEmptyString(dataValue)
      });
    });
    return data;
  }
  /**
   * Update the condition of ValueComponent, based on the handled changes.
   *
   * @private
   * @param {number} columnIndex Column index of handled ValueComponent condition.
   */
  updateValueComponentCondition(columnIndex) {
    const dataAtCol = this.hot.getDataAtCol(columnIndex);
    const selectedValues = unifyColumnValues(dataAtCol);
    this.conditionUpdateObserver.updateStatesAtColumn(columnIndex, selectedValues);
  }
  /**
   * Restores components to its saved state.
   *
   * @private
   * @param {Array} components List of components.
   */
  restoreComponents(components) {
    var _this$getSelectedColu;
    const physicalIndex = (_this$getSelectedColu = this.getSelectedColumn()) === null || _this$getSelectedColu === void 0 ? void 0 : _this$getSelectedColu.physicalIndex;
    components.forEach((component) => {
      if (component.isHidden()) {
        return;
      }
      component.restoreState(physicalIndex);
    });
    this.updateDependentComponentsVisibility();
  }
  /**
   * After dropdown menu show listener.
   */
  /**
   * Get an operation, based on the number and types of arguments (where arguments are states of components).
   *
   * @param {string} suggestedOperation Operation which was chosen by user from UI.
   * @param {object} byConditionState1 State of first condition component.
   * @param {object} byConditionState2 State of second condition component.
   * @param {object} byValueState State of value component.
   * @private
   * @returns {string}
   */
  getOperationBasedOnArguments(suggestedOperation, byConditionState1, byConditionState2, byValueState) {
    let operation = suggestedOperation;
    if (operation === OPERATION_ID2 && byConditionState1.command.key !== CONDITION_NAME && byConditionState2.command.key !== CONDITION_NAME && byValueState.command.key !== CONDITION_NAME) {
      operation = OPERATION_ID3;
    } else if (byValueState.command.key !== CONDITION_NAME) {
      if (byConditionState1.command.key === CONDITION_NAME || byConditionState2.command.key === CONDITION_NAME) {
        operation = OPERATION_ID;
      }
    }
    return operation;
  }
  /**
   * On action bar submit listener.
   *
   * @private
   * @param {string} submitType The submit type.
   */
  /**
   * Listen to the keyboard input on document body and forward events to instance of Handsontable
   * created by DropdownMenu plugin.
   *
   * @private
   */
  setListeningDropdownMenu() {
    if (this.dropdownMenuPlugin) {
      this.dropdownMenuPlugin.setListening();
    }
  }
  /**
   * Updates visibility of some of the components, based on the state of the parent component.
   *
   * @private
   */
  updateDependentComponentsVisibility() {
    const component = this.components.get("filter_by_condition");
    const {
      command
    } = component.getState();
    const componentsToShow = [this.components.get("filter_by_condition2"), this.components.get("filter_operators")];
    if (command.showOperators) {
      this.showComponents(...componentsToShow);
    } else {
      this.hideComponents(...componentsToShow);
    }
  }
  /**
   * On after get column header listener.
   *
   * @param {number} col Visual column index.
   * @param {HTMLTableCellElement} TH Header's TH element.
   * @param {number} headerLevel The index of header level counting from the top (positive
   *                             values counting from 0 to N).
   *
   */
  /**
   * Creates DataFilter instance based on condition collection.
   *
   * @private
   * @param {ConditionCollection} conditionCollection Condition collection object.
   * @returns {DataFilter}
   */
  _createDataFilter() {
    let conditionCollection = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.conditionCollection;
    return new dataFilter_default(conditionCollection, (physicalColumn) => this.getDataMapAtColumn(physicalColumn));
  }
  /**
   * It updates the components state. The state is triggered by ConditionUpdateObserver, which
   * reacts to any condition added to the condition collection. It may be added through the UI
   * components or by API call.
   *
   * @param {object} conditionsState An object with the state generated by UI components.
   */
  /**
   * Returns indexes of passed components inside list of `dropdownMenu` items.
   *
   * @private
   * @param {...BaseComponent} components List of components.
   * @returns {Array}
   */
  getIndexesOfComponents() {
    const indexes = [];
    if (!this.dropdownMenuPlugin) {
      return indexes;
    }
    const menu = this.dropdownMenuPlugin.menu;
    for (var _len3 = arguments.length, components = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      components[_key3] = arguments[_key3];
    }
    arrayEach(components, (component) => {
      arrayEach(menu.menuItems, (item, index) => {
        if (item.key === component.getMenuItemDescriptor().key) {
          indexes.push(index);
        }
      });
    });
    return indexes;
  }
  /**
   * Changes visibility of component.
   *
   * @private
   * @param {boolean} visible Determine if components should be visible.
   * @param {...BaseComponent} components List of components.
   */
  changeComponentsVisibility() {
    let visible = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
    if (!this.dropdownMenuPlugin) {
      return;
    }
    const menu = this.dropdownMenuPlugin.menu;
    const hotMenu = menu.hotMenu;
    const hiddenRows = hotMenu.getPlugin("hiddenRows");
    for (var _len4 = arguments.length, components = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      components[_key4 - 1] = arguments[_key4];
    }
    const indexes = this.getIndexesOfComponents(...components);
    if (visible) {
      hiddenRows.showRows(indexes);
    } else {
      hiddenRows.hideRows(indexes);
    }
    hotMenu.render();
  }
  /**
   * Hides components of filters `dropdownMenu`.
   *
   * @private
   * @param {...BaseComponent} components List of components.
   */
  hideComponents() {
    for (var _len5 = arguments.length, components = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      components[_key5] = arguments[_key5];
    }
    this.changeComponentsVisibility(false, ...components);
  }
  /**
   * Shows components of filters `dropdownMenu`.
   *
   * @private
   * @param {...BaseComponent} components List of components.
   */
  showComponents() {
    for (var _len6 = arguments.length, components = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
      components[_key6] = arguments[_key6];
    }
    this.changeComponentsVisibility(true, ...components);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    if (this.enabled) {
      this.components.forEach((component, key) => {
        if (component !== null) {
          component.destroy();
          this.components.set(key, null);
        }
      });
      this.conditionCollection.destroy();
      this.conditionUpdateObserver.destroy();
      this.hot.rowIndexMapper.unregisterMap(this.pluginName);
    }
    super.destroy();
  }
};
function _onAfterChange2(changes) {
  if (changes) {
    arrayEach(changes, (change) => {
      const [, prop] = change;
      const columnIndex = this.hot.propToCol(prop);
      if (this.conditionCollection.hasConditions(columnIndex)) {
        this.updateValueComponentCondition(columnIndex);
      }
    });
  }
}
function _onAfterDropdownMenuShow() {
  const menu = this.dropdownMenuPlugin.menu;
  this.restoreComponents(Array.from(this.components.values()));
  menu.updateMenuDimensions();
}
function _onAfterDropdownMenuHide() {
  this.components.get("filter_by_condition").getSelectElement().closeOptions();
  this.components.get("filter_by_condition2").getSelectElement().closeOptions();
}
function _onBeforeDropdownMenuShow() {
  const mainMenu = this.dropdownMenuPlugin.menu;
  if (!_classPrivateFieldGet19(_dropdownMenuTraces, this).has(mainMenu)) {
    _classPrivateFieldGet19(_menuFocusNavigator, this).setMenu(mainMenu);
  }
  _classPrivateFieldGet19(_dropdownMenuTraces, this).add(mainMenu);
}
function _onAfterDropdownMenuDefaultOptions(defaultOptions2) {
  defaultOptions2.items.push({
    name: KEY
  });
  this.components.forEach((component) => {
    defaultOptions2.items.push(component.getMenuItemDescriptor());
  });
}
function _onActionBarSubmit(submitType) {
  var _this$dropdownMenuPlu3;
  if (submitType === "accept") {
    const selectedColumn = this.getSelectedColumn();
    if (selectedColumn === null) {
      var _this$dropdownMenuPlu2;
      (_this$dropdownMenuPlu2 = this.dropdownMenuPlugin) === null || _this$dropdownMenuPlu2 === void 0 || _this$dropdownMenuPlu2.close();
      return;
    }
    const {
      physicalIndex
    } = selectedColumn;
    const byConditionState1 = this.components.get("filter_by_condition").getState();
    const byConditionState2 = this.components.get("filter_by_condition2").getState();
    const byValueState = this.components.get("filter_by_value").getState();
    const operation = this.getOperationBasedOnArguments(this.components.get("filter_operators").getActiveOperationId(), byConditionState1, byConditionState2, byValueState);
    this.conditionUpdateObserver.groupChanges();
    let columnStackPosition = this.conditionCollection.getColumnStackPosition(physicalIndex);
    if (columnStackPosition === -1) {
      columnStackPosition = void 0;
    }
    this.conditionCollection.removeConditions(physicalIndex);
    if (byConditionState1.command.key !== CONDITION_NAME) {
      this.conditionCollection.addCondition(physicalIndex, byConditionState1, operation, columnStackPosition);
      if (byConditionState2.command.key !== CONDITION_NAME) {
        this.conditionCollection.addCondition(physicalIndex, byConditionState2, operation, columnStackPosition);
      }
    }
    if (byValueState.command.key !== CONDITION_NAME) {
      this.conditionCollection.addCondition(physicalIndex, byValueState, operation, columnStackPosition);
    }
    this.conditionUpdateObserver.flush();
    this.components.forEach((component) => component.saveState(physicalIndex));
    this.filter();
  }
  (_this$dropdownMenuPlu3 = this.dropdownMenuPlugin) === null || _this$dropdownMenuPlu3 === void 0 || _this$dropdownMenuPlu3.close();
}
function _onComponentChange(component, command) {
  const menu = this.dropdownMenuPlugin.menu;
  this.updateDependentComponentsVisibility();
  if (component.constructor === ConditionComponent && !command.inputsCount) {
    this.setListeningDropdownMenu();
  }
  menu.updateMenuDimensions();
}
function _onSelectUIClosed() {
  this.setListeningDropdownMenu();
}
function _onAfterGetColHeader4(col, TH, headerLevel) {
  const physicalColumn = this.hot.toPhysicalColumn(col);
  if (this.enabled && this.conditionCollection.hasConditions(physicalColumn) && headerLevel === this.hot.view.getColumnHeadersCount() - 1) {
    addClass(TH, "htFiltersActive");
  } else {
    removeClass(TH, "htFiltersActive");
  }
}
function _updateComponents(conditionsState) {
  var _this$dropdownMenuPlu4;
  if (!((_this$dropdownMenuPlu4 = this.dropdownMenuPlugin) !== null && _this$dropdownMenuPlu4 !== void 0 && _this$dropdownMenuPlu4.enabled)) {
    return;
  }
  const {
    editedConditionStack: {
      conditions: conditions2,
      column
    },
    conditionArgsChange
  } = conditionsState;
  if (Array.isArray(conditionArgsChange)) {
    _classPrivateFieldSet17(_previousConditionStack, this, _classPrivateFieldGet19(_previousConditionStack, this).map((stack) => {
      if (stack.column === column && conditions2.length > 0) {
        stack.conditions.forEach((condition24) => {
          if (condition24.name === "by_value") {
            condition24.args = [[...conditionArgsChange]];
          }
        });
      }
      return stack;
    }));
  }
  const conditionsByValue = conditions2.filter((condition24) => condition24.name === CONDITION_NAME21);
  const conditionsWithoutByValue = conditions2.filter((condition24) => condition24.name !== CONDITION_NAME21);
  if (conditionsByValue.length >= 2 || conditionsWithoutByValue.length >= 3) {
    warn(toSingleLine`The filter conditions have been applied properly, but couldn’t be displayed visually.\x20
        The overall amount of conditions exceed the capability of the dropdown menu.\x20
        For more details see the documentation.`);
  } else {
    const operationType = this.conditionCollection.getOperation(column);
    this.components.get("filter_by_condition").updateState(conditionsWithoutByValue[0], column);
    this.components.get("filter_by_condition2").updateState(conditionsWithoutByValue[1], column);
    this.components.get("filter_operators").updateState(operationType, column);
    this.components.get("filter_by_value").updateState(conditionsState);
  }
}

// node_modules/handsontable/plugins/formulas/engine/settings.mjs
var DEFAULT_LICENSE_KEY = "internal-use-in-handsontable";
var DEFAULT_SETTINGS = {
  licenseKey: DEFAULT_LICENSE_KEY,
  useArrayArithmetic: true,
  useColumnIndex: false,
  useStats: false,
  evaluateNullToZero: true,
  precisionEpsilon: 1e-13,
  precisionRounding: 14,
  smartRounding: true,
  leapYear1900: false,
  nullDate: {
    year: 1899,
    month: 12,
    day: 30
  },
  nullYear: 30,
  dateFormats: ["DD/MM/YYYY", "DD/MM/YY"],
  timeFormats: ["hh:mm", "hh:mm:ss.sss"],
  matchWholeCell: true,
  useRegularExpressions: false,
  useWildcards: true,
  functionArgSeparator: ",",
  thousandSeparator: "",
  decimalSeparator: ".",
  language: "enGB"
};
function getEngineSettingsOverrides(hotSettings) {
  var _hotSettings$PLUGIN_K;
  return {
    maxColumns: hotSettings.maxColumns,
    maxRows: hotSettings.maxRows,
    language: (_hotSettings$PLUGIN_K = hotSettings[PLUGIN_KEY17]) === null || _hotSettings$PLUGIN_K === void 0 || (_hotSettings$PLUGIN_K = _hotSettings$PLUGIN_K.language) === null || _hotSettings$PLUGIN_K === void 0 ? void 0 : _hotSettings$PLUGIN_K.langCode
  };
}
function cleanEngineSettings(pluginSettings) {
  return Object.keys(pluginSettings).reduce((obj, key) => {
    if (key !== "hyperformula") {
      obj[key] = pluginSettings[key];
    }
    return obj;
  }, {});
}
function getEngineSettingsWithDefaultsAndOverrides(hotSettings) {
  var _pluginSettings$engin;
  const pluginSettings = hotSettings[PLUGIN_KEY17];
  const userSettings = cleanEngineSettings(pluginSettings !== null && pluginSettings !== void 0 && (_pluginSettings$engin = pluginSettings.engine) !== null && _pluginSettings$engin !== void 0 && _pluginSettings$engin.hyperformula ? pluginSettings.engine : {});
  const overrides = getEngineSettingsOverrides(hotSettings);
  return {
    ...DEFAULT_SETTINGS,
    ...userSettings,
    ...overrides
  };
}
function getEngineSettingsWithOverrides(hotSettings) {
  var _pluginSettings$engin2;
  const pluginSettings = hotSettings[PLUGIN_KEY17];
  const userSettings = cleanEngineSettings(pluginSettings !== null && pluginSettings !== void 0 && (_pluginSettings$engin2 = pluginSettings.engine) !== null && _pluginSettings$engin2 !== void 0 && _pluginSettings$engin2.hyperformula ? pluginSettings.engine : {});
  const overrides = getEngineSettingsOverrides(hotSettings);
  return {
    ...userSettings,
    ...overrides
  };
}
function haveEngineSettingsChanged(currentEngineSettings, newEngineSettings) {
  return Object.keys(newEngineSettings).some((settingOption) => {
    return newEngineSettings[settingOption] !== void 0 && newEngineSettings[settingOption] !== currentEngineSettings[settingOption];
  });
}

// node_modules/handsontable/plugins/formulas/engine/register.mjs
function getEngineRelationshipRegistry() {
  const registryKey = "engine_relationship";
  const pluginStaticRegistry = staticRegister(PLUGIN_KEY17);
  if (!pluginStaticRegistry.hasItem(registryKey)) {
    pluginStaticRegistry.register(registryKey, /* @__PURE__ */ new Map());
  }
  return pluginStaticRegistry.getItem(registryKey);
}
function getSharedEngineUsageRegistry() {
  const registryKey = "shared_engine_usage";
  const pluginStaticRegistry = staticRegister(PLUGIN_KEY17);
  if (!pluginStaticRegistry.hasItem(registryKey)) {
    pluginStaticRegistry.register(registryKey, /* @__PURE__ */ new Map());
  }
  return pluginStaticRegistry.getItem(registryKey);
}
function setupEngine(hotInstance) {
  const hotSettings = hotInstance.getSettings();
  const pluginSettings = hotSettings[PLUGIN_KEY17];
  const engineConfigItem = pluginSettings === null || pluginSettings === void 0 ? void 0 : pluginSettings.engine;
  if (pluginSettings === true) {
    return null;
  }
  if (isUndefined(engineConfigItem)) {
    return null;
  }
  if (typeof engineConfigItem.hyperformula === "function" || typeof engineConfigItem === "function") {
    var _engineConfigItem$hyp;
    return registerEngine((_engineConfigItem$hyp = engineConfigItem.hyperformula) !== null && _engineConfigItem$hyp !== void 0 ? _engineConfigItem$hyp : engineConfigItem, hotSettings, hotInstance);
  } else if (typeof engineConfigItem === "object" && isUndefined(engineConfigItem.hyperformula)) {
    const engineRelationship = getEngineRelationshipRegistry();
    const sharedEngineUsage = getSharedEngineUsageRegistry().get(engineConfigItem);
    if (!engineRelationship.has(engineConfigItem)) {
      engineRelationship.set(engineConfigItem, []);
    }
    engineRelationship.get(engineConfigItem).push(hotInstance);
    if (sharedEngineUsage) {
      sharedEngineUsage.push(hotInstance.guid);
    }
    if (!engineConfigItem.getConfig().licenseKey) {
      engineConfigItem.updateConfig({
        licenseKey: DEFAULT_LICENSE_KEY
      });
    }
    if (engineConfigItem.getConfig().leapYear1900 !== DEFAULT_SETTINGS.leapYear1900 || isObjectEqual(engineConfigItem.getConfig().nullDate, DEFAULT_SETTINGS.nullDate) === false) {
      warn(toSingleLine`If you use HyperFormula with Handsontable, keep the default \`leapYear1900\` and \`nullDate\` 
      settings. Otherwise, HyperFormula's dates may not sync correctly with Handsontable's dates.`);
    }
    return engineConfigItem;
  }
  return null;
}
function registerEngine(engineClass, hotSettings, hotInstance) {
  const pluginSettings = hotSettings[PLUGIN_KEY17];
  const engineSettings = getEngineSettingsWithDefaultsAndOverrides(hotSettings);
  const engineRegistry = getEngineRelationshipRegistry();
  const sharedEngineRegistry = getSharedEngineUsageRegistry();
  registerCustomFunctions(engineClass, pluginSettings.functions);
  registerLanguage(engineClass, pluginSettings.language);
  const engineInstance = engineClass.buildEmpty(engineSettings);
  engineRegistry.set(engineInstance, [hotInstance]);
  sharedEngineRegistry.set(engineInstance, [hotInstance.guid]);
  registerNamedExpressions(engineInstance, pluginSettings.namedExpressions);
  engineInstance.on("sheetAdded", () => {
    engineInstance.rebuildAndRecalculate();
  });
  engineInstance.on("sheetRemoved", () => {
    engineInstance.rebuildAndRecalculate();
  });
  return engineInstance;
}
function getRegisteredHotInstances(engine) {
  var _engineRegistry$get;
  const engineRegistry = getEngineRelationshipRegistry();
  const hotInstances = engineRegistry.size === 0 ? [] : Array.from((_engineRegistry$get = engineRegistry.get(engine)) !== null && _engineRegistry$get !== void 0 ? _engineRegistry$get : []);
  return new Map(hotInstances.map((hot) => [hot.getPlugin("formulas").sheetId, hot]));
}
function unregisterEngine(engine, hotInstance) {
  if (engine) {
    const engineRegistry = getEngineRelationshipRegistry();
    const engineHotRelationship = engineRegistry.get(engine);
    const sharedEngineRegistry = getSharedEngineUsageRegistry();
    const sharedEngineUsage = sharedEngineRegistry.get(engine);
    if (engineHotRelationship && engineHotRelationship.includes(hotInstance)) {
      engineHotRelationship.splice(engineHotRelationship.indexOf(hotInstance), 1);
      if (engineHotRelationship.length === 0) {
        engineRegistry.delete(engine);
      }
    }
    if (sharedEngineUsage && sharedEngineUsage.includes(hotInstance.guid)) {
      sharedEngineUsage.splice(sharedEngineUsage.indexOf(hotInstance.guid), 1);
      if (sharedEngineUsage.length === 0) {
        sharedEngineRegistry.delete(engine);
        engine.destroy();
      }
    }
  }
}
function registerCustomFunctions(engineClass, customFunctions) {
  if (customFunctions) {
    customFunctions.forEach((func) => {
      const {
        name,
        plugin,
        translations
      } = func;
      try {
        engineClass.registerFunction(name, plugin, translations);
      } catch (e) {
        warn(e.message);
      }
    });
  }
}
function registerLanguage(engineClass, languageSetting) {
  if (languageSetting) {
    const {
      langCode
    } = languageSetting;
    try {
      engineClass.registerLanguage(langCode, languageSetting);
    } catch (e) {
      warn(e.message);
    }
  }
}
function registerNamedExpressions(engineInstance, namedExpressions) {
  if (namedExpressions) {
    engineInstance.suspendEvaluation();
    namedExpressions.forEach((namedExp) => {
      const {
        name,
        expression,
        scope,
        options
      } = namedExp;
      try {
        engineInstance.addNamedExpression(name, expression, scope, options);
      } catch (e) {
        warn(e.message);
      }
    });
    engineInstance.resumeEvaluation();
  }
}
function setupSheet(engineInstance, sheetName) {
  if (isUndefined(sheetName) || !engineInstance.doesSheetExist(sheetName)) {
    sheetName = engineInstance.addSheet(sheetName);
  }
  return sheetName;
}

// node_modules/handsontable/plugins/formulas/utils.mjs
var DEFAULT_DATE_FORMAT_HYPERFORMULA = "DD/MM/YYYY";
function isEscapedFormulaExpression(expression) {
  return typeof expression === "string" && expression.charAt(0) === "'" && expression.charAt(1) === "=";
}
function unescapeFormulaExpression(expression) {
  return isEscapedFormulaExpression(expression) ? expression.substr(1) : expression;
}
function isFormula(value) {
  return typeof value === "string" && value.startsWith("=");
}
function isDate2(value, cellType) {
  return typeof value === "string" && cellType === "date";
}
function isDateValid(date, dateFormat) {
  return moment_default(date, dateFormat, true).isValid();
}
function getDateInHfFormat(date, dateFormat) {
  return moment_default(date, dateFormat, true).format(DEFAULT_DATE_FORMAT_HYPERFORMULA);
}
function getDateInHotFormat(date, dateFormat) {
  return moment_default(date, DEFAULT_DATE_FORMAT_HYPERFORMULA, true).format(dateFormat);
}
function getDateFromExcelDate(numericDate, dateFormat) {
  const dateOffset = -1;
  const dateForFormatting = new Date(Date.UTC(0, 0, numericDate + dateOffset));
  return moment_default(dateForFormatting).format(dateFormat);
}

// node_modules/handsontable/helpers/moves.mjs
function getMoveLine(movedIndexes, finalIndex, numberOfIndexes) {
  const notMovedElements = Array.from(Array(numberOfIndexes).keys()).filter((index) => movedIndexes.includes(index) === false);
  if (finalIndex === 0) {
    var _notMovedElements$fin;
    return (_notMovedElements$fin = notMovedElements[finalIndex]) !== null && _notMovedElements$fin !== void 0 ? _notMovedElements$fin : 0;
  }
  return notMovedElements[finalIndex - 1] + 1;
}
function getInitiallyCalculatedMoves(movedIndexes, moveLine) {
  const moves = [];
  movedIndexes.forEach((movedIndex) => {
    const move = {
      from: movedIndex,
      to: moveLine
    };
    moves.forEach((previouslyMovedIndex) => {
      const isMovingFromEndToStart = previouslyMovedIndex.from > previouslyMovedIndex.to;
      const isMovingElementBefore = previouslyMovedIndex.to <= move.from;
      const isMovingAfterElement = previouslyMovedIndex.from > move.from;
      if (isMovingAfterElement && isMovingElementBefore && isMovingFromEndToStart) {
        move.from += 1;
      }
    });
    if (move.from >= moveLine) {
      moveLine += 1;
    }
    moves.push(move);
  });
  return moves;
}
function adjustedCalculatedMoves(moves) {
  moves.forEach((move, index) => {
    const nextMoved = moves.slice(index + 1);
    nextMoved.forEach((nextMovedIndex) => {
      const isMovingFromStartToEnd = nextMovedIndex.from < nextMovedIndex.to;
      if (nextMovedIndex.from > move.from && isMovingFromStartToEnd) {
        nextMovedIndex.from -= 1;
      }
    });
  });
  return moves;
}
function getMoves(movedIndexes, finalIndex, numberOfIndexes) {
  const moves = getInitiallyCalculatedMoves(movedIndexes, getMoveLine(movedIndexes, finalIndex, numberOfIndexes));
  return adjustedCalculatedMoves(moves);
}

// node_modules/handsontable/plugins/formulas/indexSyncer/axisSyncer.mjs
function _classPrivateFieldInitSpec20(e, t, a) {
  _checkPrivateRedeclaration34(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration34(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldGet20(s, a) {
  return s.get(_assertClassBrand34(s, a));
}
function _classPrivateFieldSet18(s, a, r) {
  return s.set(_assertClassBrand34(s, a), r), r;
}
function _assertClassBrand34(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _axis = /* @__PURE__ */ new WeakMap();
var _indexMapper = /* @__PURE__ */ new WeakMap();
var _indexSyncer = /* @__PURE__ */ new WeakMap();
var _indexesSequence = /* @__PURE__ */ new WeakMap();
var _movedIndexes = /* @__PURE__ */ new WeakMap();
var _finalIndex = /* @__PURE__ */ new WeakMap();
var _removedIndexes = /* @__PURE__ */ new WeakMap();
var AxisSyncer = class {
  constructor(axis, indexMapper, indexSyncer) {
    _classPrivateFieldInitSpec20(this, _axis, void 0);
    _classPrivateFieldInitSpec20(this, _indexMapper, void 0);
    _classPrivateFieldInitSpec20(this, _indexSyncer, void 0);
    _classPrivateFieldInitSpec20(this, _indexesSequence, []);
    _classPrivateFieldInitSpec20(this, _movedIndexes, []);
    _classPrivateFieldInitSpec20(this, _finalIndex, void 0);
    _classPrivateFieldInitSpec20(this, _removedIndexes, []);
    _classPrivateFieldSet18(_axis, this, axis);
    _classPrivateFieldSet18(_indexMapper, this, indexMapper);
    _classPrivateFieldSet18(_indexSyncer, this, indexSyncer);
  }
  /**
   * Sets removed HF indexes (it should be done right before performing move on HOT).
   *
   * @param {Array<number>} removedIndexes List of removed physical indexes.
   * @returns {Array<number>} List of removed visual indexes.
   */
  setRemovedHfIndexes(removedIndexes) {
    _classPrivateFieldSet18(_removedIndexes, this, removedIndexes.map((physicalIndex) => {
      const visualIndex = _classPrivateFieldGet20(_indexMapper, this).getVisualFromPhysicalIndex(physicalIndex);
      return this.getHfIndexFromVisualIndex(visualIndex);
    }));
    return _classPrivateFieldGet20(_removedIndexes, this);
  }
  /**
   * Gets removed HF indexes (right before performing removal on HOT).
   *
   * @returns {Array<number>} List of removed HF indexes.
   */
  getRemovedHfIndexes() {
    return _classPrivateFieldGet20(_removedIndexes, this);
  }
  /**
   * Gets corresponding HyperFormula index for particular visual index. It's respecting the idea that HF's engine
   * is fed also with trimmed indexes (business requirements for formula result calculation also for trimmed elements).
   *
   * @param {number} visualIndex Visual index.
   * @returns {number}
   */
  getHfIndexFromVisualIndex(visualIndex) {
    const indexesSequence = _classPrivateFieldGet20(_indexMapper, this).getIndexesSequence();
    const notTrimmedIndexes = _classPrivateFieldGet20(_indexMapper, this).getNotTrimmedIndexes();
    return indexesSequence.indexOf(notTrimmedIndexes[visualIndex], visualIndex);
  }
  /**
   * Synchronizes moves done on HOT to HF engine (based on previously calculated positions).
   *
   * @private
   * @param {Array<{from: number, to: number}>} moves Calculated HF's move positions.
   */
  syncMoves(moves) {
    const NUMBER_OF_MOVED_INDEXES = 1;
    const SYNC_MOVE_METHOD_NAME = `move${toUpperCaseFirst(_classPrivateFieldGet20(_axis, this))}s`;
    _classPrivateFieldGet20(_indexSyncer, this).getEngine().batch(() => {
      moves.forEach((move) => {
        const moveToTheSamePosition = move.from !== move.to;
        const anotherMoveWithoutEffect = move.from + 1 !== move.to;
        if (moveToTheSamePosition && anotherMoveWithoutEffect) {
          _classPrivateFieldGet20(_indexSyncer, this).getEngine()[SYNC_MOVE_METHOD_NAME](_classPrivateFieldGet20(_indexSyncer, this).getSheetId(), move.from, NUMBER_OF_MOVED_INDEXES, move.to);
        }
      });
    });
  }
  /**
   * Stores information about performed HOT moves for purpose of calculating where to move HF elements.
   *
   * @param {Array<number>} movedVisualIndexes Sequence of moved visual indexes for certain axis.
   * @param {number} visualFinalIndex Final visual place where to move HOT indexes.
   * @param {boolean} movePossible Indicates if it's possible to move HOT indexes to the desired position.
   */
  storeMovesInformation(movedVisualIndexes, visualFinalIndex, movePossible) {
    if (movePossible === false) {
      return;
    }
    _classPrivateFieldSet18(_movedIndexes, this, movedVisualIndexes.map((index) => this.getHfIndexFromVisualIndex(index)));
    _classPrivateFieldSet18(_finalIndex, this, this.getHfIndexFromVisualIndex(visualFinalIndex));
  }
  /**
   * Calculating where to move HF elements and performing already calculated moves.
   *
   * @param {boolean} movePossible Indicates if it was possible to move HOT indexes to the desired position.
   * @param {boolean} orderChanged Indicates if order of HOT indexes was changed by move.
   */
  calculateAndSyncMoves(movePossible, orderChanged) {
    if (_classPrivateFieldGet20(_indexSyncer, this).isPerformingUndoRedo()) {
      return;
    }
    if (movePossible === false || orderChanged === false) {
      return;
    }
    const calculatedMoves = getMoves(_classPrivateFieldGet20(_movedIndexes, this), _classPrivateFieldGet20(_finalIndex, this), _classPrivateFieldGet20(_indexMapper, this).getNumberOfIndexes());
    if (_classPrivateFieldGet20(_indexSyncer, this).getSheetId() === null) {
      _classPrivateFieldGet20(_indexSyncer, this).getPostponeAction(() => this.syncMoves(calculatedMoves));
    } else {
      this.syncMoves(calculatedMoves);
    }
  }
  /**
   * Gets callback for hook triggered after performing change of indexes order.
   *
   * @returns {Function}
   */
  getIndexesChangeSyncMethod() {
    const SYNC_ORDER_CHANGE_METHOD_NAME = `set${toUpperCaseFirst(_classPrivateFieldGet20(_axis, this))}Order`;
    return (source) => {
      if (_classPrivateFieldGet20(_indexSyncer, this).isPerformingUndoRedo()) {
        return;
      }
      const newSequence = _classPrivateFieldGet20(_indexMapper, this).getIndexesSequence();
      if (source === "update" && newSequence.length > 0) {
        const relativeTransformation = _classPrivateFieldGet20(_indexesSequence, this).map((index) => newSequence.indexOf(index));
        const sheetDimensions = _classPrivateFieldGet20(_indexSyncer, this).getEngine().getSheetDimensions(_classPrivateFieldGet20(_indexSyncer, this).getSheetId());
        let sizeForAxis;
        if (_classPrivateFieldGet20(_axis, this) === "row") {
          sizeForAxis = sheetDimensions.height;
        } else {
          sizeForAxis = sheetDimensions.width;
        }
        const numberOfReorganisedIndexes = relativeTransformation.length;
        for (let i = numberOfReorganisedIndexes; i < sizeForAxis; i += 1) {
          relativeTransformation.push(i);
        }
        _classPrivateFieldGet20(_indexSyncer, this).getEngine()[SYNC_ORDER_CHANGE_METHOD_NAME](_classPrivateFieldGet20(_indexSyncer, this).getSheetId(), relativeTransformation);
      }
      _classPrivateFieldSet18(_indexesSequence, this, newSequence);
    };
  }
  /**
   * Initialize the AxisSyncer.
   */
  init() {
    _classPrivateFieldSet18(_indexesSequence, this, _classPrivateFieldGet20(_indexMapper, this).getIndexesSequence());
  }
};
var axisSyncer_default = AxisSyncer;

// node_modules/handsontable/plugins/formulas/indexSyncer/index.mjs
function _classPrivateFieldInitSpec21(e, t, a) {
  _checkPrivateRedeclaration35(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration35(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldGet21(s, a) {
  return s.get(_assertClassBrand35(s, a));
}
function _classPrivateFieldSet19(s, a, r) {
  return s.set(_assertClassBrand35(s, a), r), r;
}
function _assertClassBrand35(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _rowIndexSyncer = /* @__PURE__ */ new WeakMap();
var _columnIndexSyncer = /* @__PURE__ */ new WeakMap();
var _postponeAction = /* @__PURE__ */ new WeakMap();
var _isPerformingUndo = /* @__PURE__ */ new WeakMap();
var _isPerformingRedo = /* @__PURE__ */ new WeakMap();
var _engine = /* @__PURE__ */ new WeakMap();
var _sheetId = /* @__PURE__ */ new WeakMap();
var IndexSyncer = class {
  constructor(rowIndexMapper, columnIndexMapper, postponeAction) {
    _classPrivateFieldInitSpec21(this, _rowIndexSyncer, void 0);
    _classPrivateFieldInitSpec21(this, _columnIndexSyncer, void 0);
    _classPrivateFieldInitSpec21(this, _postponeAction, void 0);
    _classPrivateFieldInitSpec21(this, _isPerformingUndo, false);
    _classPrivateFieldInitSpec21(this, _isPerformingRedo, false);
    _classPrivateFieldInitSpec21(this, _engine, null);
    _classPrivateFieldInitSpec21(this, _sheetId, null);
    _classPrivateFieldSet19(_rowIndexSyncer, this, new axisSyncer_default("row", rowIndexMapper, this));
    _classPrivateFieldSet19(_columnIndexSyncer, this, new axisSyncer_default("column", columnIndexMapper, this));
    _classPrivateFieldSet19(_postponeAction, this, postponeAction);
  }
  /**
   * Gets index synchronizer for a particular axis.
   *
   * @param {'row'|'column'} indexType Type of indexes.
   * @returns {AxisSyncer}
   */
  getForAxis(indexType) {
    if (indexType === "row") {
      return _classPrivateFieldGet21(_rowIndexSyncer, this);
    }
    return _classPrivateFieldGet21(_columnIndexSyncer, this);
  }
  /**
   * Sets flag informing whether an undo action is already performed (we don't execute synchronization in such case).
   *
   * @param {boolean} flagValue Boolean value for the flag.
   */
  setPerformUndo(flagValue) {
    _classPrivateFieldSet19(_isPerformingUndo, this, flagValue);
  }
  /**
   * Sets flag informing whether a redo action is already performed (we don't execute synchronization in such case).
   *
   * @param {boolean} flagValue Boolean value for the flag.
   */
  setPerformRedo(flagValue) {
    _classPrivateFieldSet19(_isPerformingRedo, this, flagValue);
  }
  /**
   * Gets information whether redo or undo action is already performed (we don't execute synchronization in such case).
   *
   * @private
   * @returns {boolean}
   */
  isPerformingUndoRedo() {
    return _classPrivateFieldGet21(_isPerformingUndo, this) || _classPrivateFieldGet21(_isPerformingRedo, this);
  }
  /**
   * Gets HyperFormula's sheet id.
   *
   * @returns {string|null}
   */
  getSheetId() {
    return _classPrivateFieldGet21(_sheetId, this);
  }
  /**
   * Gets engine instance that will be used for handled instance of Handsontable.
   *
   * @type {HyperFormula|null}
   */
  getEngine() {
    return _classPrivateFieldGet21(_engine, this);
  }
  /**
   * Gets method which will postpone execution of some action (needed when synchronization endpoint isn't setup yet).
   *
   * @returns {Function}
   */
  getPostponeAction() {
    return _classPrivateFieldGet21(_postponeAction, this);
  }
  /**
   * Setups a synchronization endpoint.
   *
   * @param {HyperFormula|null} engine The HF's engine instance which will be synced.
   * @param {string|null} sheetId HyperFormula's sheet name.
   */
  setupSyncEndpoint(engine, sheetId) {
    _classPrivateFieldSet19(_engine, this, engine);
    _classPrivateFieldSet19(_sheetId, this, sheetId);
    _classPrivateFieldGet21(_rowIndexSyncer, this).init();
    _classPrivateFieldGet21(_columnIndexSyncer, this).init();
  }
};
var indexSyncer_default = IndexSyncer;

// node_modules/handsontable/plugins/formulas/formulas.mjs
function _classPrivateMethodInitSpec29(e, a) {
  _checkPrivateRedeclaration36(e, a), a.add(e);
}
function _defineProperty39(e, r, t) {
  return (r = _toPropertyKey39(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey39(t) {
  var i = _toPrimitive39(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive39(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _classPrivateFieldInitSpec22(e, t, a) {
  _checkPrivateRedeclaration36(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration36(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldSet20(s, a, r) {
  return s.set(_assertClassBrand36(s, a), r), r;
}
function _classPrivateFieldGet22(s, a) {
  return s.get(_assertClassBrand36(s, a));
}
function _assertClassBrand36(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var PLUGIN_KEY17 = "formulas";
var SETTING_KEYS4 = ["maxRows", "maxColumns", "language"];
var PLUGIN_PRIORITY16 = 260;
Hooks.getSingleton().register("afterNamedExpressionAdded");
Hooks.getSingleton().register("afterNamedExpressionRemoved");
Hooks.getSingleton().register("afterSheetAdded");
Hooks.getSingleton().register("afterSheetRemoved");
Hooks.getSingleton().register("afterSheetRenamed");
Hooks.getSingleton().register("afterFormulasValuesUpdate");
var isBlockedSource = (source) => source === "UndoRedo.undo" || source === "UndoRedo.redo" || source === "auto";
var _internalOperationPending = /* @__PURE__ */ new WeakMap();
var _hotWasInitializedWithEmptyData = /* @__PURE__ */ new WeakMap();
var _engineListeners = /* @__PURE__ */ new WeakMap();
var _Formulas_brand = /* @__PURE__ */ new WeakSet();
var Formulas = class extends BasePlugin {
  constructor() {
    var _this;
    super(...arguments);
    _this = this;
    _classPrivateMethodInitSpec29(this, _Formulas_brand);
    _classPrivateFieldInitSpec22(this, _internalOperationPending, false);
    _classPrivateFieldInitSpec22(this, _hotWasInitializedWithEmptyData, false);
    _classPrivateFieldInitSpec22(this, _engineListeners, [["valuesUpdated", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _assertClassBrand36(_Formulas_brand, _this, _onEngineValuesUpdated).call(_this, ...args);
    }], ["namedExpressionAdded", function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _assertClassBrand36(_Formulas_brand, _this, _onEngineNamedExpressionsAdded).call(_this, ...args);
    }], ["namedExpressionRemoved", function() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return _assertClassBrand36(_Formulas_brand, _this, _onEngineNamedExpressionsRemoved).call(_this, ...args);
    }], ["sheetAdded", function() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return _assertClassBrand36(_Formulas_brand, _this, _onEngineSheetAdded).call(_this, ...args);
    }], ["sheetRenamed", function() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }
      return _assertClassBrand36(_Formulas_brand, _this, _onEngineSheetRenamed).call(_this, ...args);
    }], ["sheetRemoved", function() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      return _assertClassBrand36(_Formulas_brand, _this, _onEngineSheetRemoved).call(_this, ...args);
    }]]);
    _defineProperty39(this, "staticRegister", staticRegister("formulas"));
    _defineProperty39(this, "engine", null);
    _defineProperty39(this, "sheetId", null);
    _defineProperty39(this, "sheetName", null);
    _defineProperty39(this, "indexSyncer", null);
    _defineProperty39(this, "rowAxisSyncer", null);
    _defineProperty39(this, "columnAxisSyncer", null);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY17;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY16;
  }
  static get SETTING_KEYS() {
    return [PLUGIN_KEY17, ...SETTING_KEYS4];
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link Formulas#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return this.hot.getSettings()[PLUGIN_KEY17] ? true : false;
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _setupEngine, _this2 = this;
    if (this.enabled) {
      return;
    }
    this.engine = (_setupEngine = setupEngine(this.hot)) !== null && _setupEngine !== void 0 ? _setupEngine : this.engine;
    if (!this.engine) {
      warn("Missing the required `engine` key in the Formulas settings. Please fill it with either an engine class or an engine instance.");
      return;
    }
    if (this.sheetName !== null && !this.engine.doesSheetExist(this.sheetName)) {
      const newSheetName = this.addSheet(this.sheetName, this.hot.getSourceDataArray());
      if (newSheetName !== false) {
        _assertClassBrand36(_Formulas_brand, this, _updateSheetNameAndSheetId).call(this, newSheetName);
      }
    }
    this.addHook("beforeLoadData", function() {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onBeforeLoadData).call(_this2, ...args);
    });
    this.addHook("afterLoadData", function() {
      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onAfterLoadData5).call(_this2, ...args);
    });
    this.addHook("beforeUpdateData", function() {
      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        args[_key9] = arguments[_key9];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onBeforeLoadData).call(_this2, ...args);
    });
    this.addHook("afterUpdateData", function() {
      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        args[_key10] = arguments[_key10];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onAfterLoadData5).call(_this2, ...args);
    });
    this.addHook("modifyData", function() {
      for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
        args[_key11] = arguments[_key11];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onModifyData).call(_this2, ...args);
    });
    this.addHook("modifySourceData", function() {
      for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
        args[_key12] = arguments[_key12];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onModifySourceData).call(_this2, ...args);
    });
    this.addHook("beforeValidate", function() {
      for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
        args[_key13] = arguments[_key13];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onBeforeValidate).call(_this2, ...args);
    });
    this.addHook("afterSetSourceDataAtCell", function() {
      for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
        args[_key14] = arguments[_key14];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onAfterSetSourceDataAtCell).call(_this2, ...args);
    });
    this.addHook("afterSetDataAtCell", function() {
      for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
        args[_key15] = arguments[_key15];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onAfterSetDataAtCell).call(_this2, ...args);
    });
    this.addHook("afterSetDataAtRowProp", function() {
      for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
        args[_key16] = arguments[_key16];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onAfterSetDataAtCell).call(_this2, ...args);
    });
    this.addHook("beforeCreateRow", function() {
      for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {
        args[_key17] = arguments[_key17];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onBeforeCreateRow).call(_this2, ...args);
    });
    this.addHook("beforeCreateCol", function() {
      for (var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {
        args[_key18] = arguments[_key18];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onBeforeCreateCol).call(_this2, ...args);
    });
    this.addHook("afterCreateRow", function() {
      for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {
        args[_key19] = arguments[_key19];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onAfterCreateRow).call(_this2, ...args);
    });
    this.addHook("afterCreateCol", function() {
      for (var _len20 = arguments.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {
        args[_key20] = arguments[_key20];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onAfterCreateCol).call(_this2, ...args);
    });
    this.addHook("beforeRemoveRow", function() {
      for (var _len21 = arguments.length, args = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {
        args[_key21] = arguments[_key21];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onBeforeRemoveRow).call(_this2, ...args);
    });
    this.addHook("beforeRemoveCol", function() {
      for (var _len22 = arguments.length, args = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {
        args[_key22] = arguments[_key22];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onBeforeRemoveCol).call(_this2, ...args);
    });
    this.addHook("afterRemoveRow", function() {
      for (var _len23 = arguments.length, args = new Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {
        args[_key23] = arguments[_key23];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onAfterRemoveRow).call(_this2, ...args);
    });
    this.addHook("afterRemoveCol", function() {
      for (var _len24 = arguments.length, args = new Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {
        args[_key24] = arguments[_key24];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onAfterRemoveCol).call(_this2, ...args);
    });
    this.indexSyncer = new indexSyncer_default(this.hot.rowIndexMapper, this.hot.columnIndexMapper, (postponedAction) => {
      this.hot.addHookOnce("init", () => {
        postponedAction();
      });
    });
    this.rowAxisSyncer = this.indexSyncer.getForAxis("row");
    this.columnAxisSyncer = this.indexSyncer.getForAxis("column");
    this.hot.addHook("afterRowSequenceChange", this.rowAxisSyncer.getIndexesChangeSyncMethod());
    this.hot.addHook("afterColumnSequenceChange", this.columnAxisSyncer.getIndexesChangeSyncMethod());
    this.hot.addHook("beforeRowMove", (movedRows, finalIndex, _, movePossible) => {
      this.rowAxisSyncer.storeMovesInformation(movedRows, finalIndex, movePossible);
    });
    this.hot.addHook("beforeColumnMove", (movedColumns, finalIndex, _, movePossible) => {
      this.columnAxisSyncer.storeMovesInformation(movedColumns, finalIndex, movePossible);
    });
    this.hot.addHook("afterRowMove", (movedRows, finalIndex, dropIndex, movePossible, orderChanged) => {
      this.rowAxisSyncer.calculateAndSyncMoves(movePossible, orderChanged);
    });
    this.hot.addHook("afterColumnMove", (movedColumns, finalIndex, dropIndex, movePossible, orderChanged) => {
      this.columnAxisSyncer.calculateAndSyncMoves(movePossible, orderChanged);
    });
    this.hot.addHook("beforeColumnFreeze", (column, freezePerformed) => {
      this.columnAxisSyncer.storeMovesInformation([column], this.hot.getSettings().fixedColumnsStart, freezePerformed);
    });
    this.hot.addHook("afterColumnFreeze", (_, freezePerformed) => {
      this.columnAxisSyncer.calculateAndSyncMoves(freezePerformed, freezePerformed);
    });
    this.hot.addHook("beforeColumnUnfreeze", (column, unfreezePerformed) => {
      this.columnAxisSyncer.storeMovesInformation([column], this.hot.getSettings().fixedColumnsStart - 1, unfreezePerformed);
    });
    this.hot.addHook("afterColumnUnfreeze", (_, unfreezePerformed) => {
      this.columnAxisSyncer.calculateAndSyncMoves(unfreezePerformed, unfreezePerformed);
    });
    this.addHook("afterCellMetaReset", function() {
      for (var _len25 = arguments.length, args = new Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {
        args[_key25] = arguments[_key25];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onAfterCellMetaReset).call(_this2, ...args);
    });
    this.addHook("beforeUndo", () => {
      this.indexSyncer.setPerformUndo(true);
      this.engine.undo();
    });
    this.addHook("beforeRedo", () => {
      this.indexSyncer.setPerformRedo(true);
      this.engine.redo();
    });
    this.addHook("afterUndo", () => {
      this.indexSyncer.setPerformUndo(false);
    });
    this.addHook("afterUndo", () => {
      this.indexSyncer.setPerformRedo(false);
    });
    this.addHook("afterDetachChild", function() {
      for (var _len26 = arguments.length, args = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {
        args[_key26] = arguments[_key26];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onAfterDetachChild).call(_this2, ...args);
    });
    this.addHook("beforeAutofill", function() {
      for (var _len27 = arguments.length, args = new Array(_len27), _key27 = 0; _key27 < _len27; _key27++) {
        args[_key27] = arguments[_key27];
      }
      return _assertClassBrand36(_Formulas_brand, _this2, _onBeforeAutofill).call(_this2, ...args);
    });
    _classPrivateFieldGet22(_engineListeners, this).forEach((_ref) => {
      let [eventName, listener] = _ref;
      return this.engine.on(eventName, listener);
    });
    super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    _classPrivateFieldGet22(_engineListeners, this).forEach((_ref2) => {
      let [eventName, listener] = _ref2;
      return this.engine.off(eventName, listener);
    });
    unregisterEngine(this.engine, this.hot);
    this.engine = null;
    super.disablePlugin();
  }
  /**
   * Triggered on `updateSettings`.
   *
   * @private
   * @param {object} newSettings New set of settings passed to the `updateSettings` method.
   */
  updatePlugin(newSettings) {
    const newEngineSettings = getEngineSettingsWithOverrides(this.hot.getSettings());
    if (haveEngineSettingsChanged(this.engine.getConfig(), newEngineSettings)) {
      this.engine.updateConfig(newEngineSettings);
    }
    const pluginSettings = this.hot.getSettings()[PLUGIN_KEY17];
    if (isDefined(pluginSettings) && isDefined(pluginSettings.sheetName) && pluginSettings.sheetName !== this.sheetName) {
      this.switchSheet(pluginSettings.sheetName);
    }
    if (!newSettings.data && this.sheetName === null) {
      const sheetName = this.hot.getSettings()[PLUGIN_KEY17].sheetName;
      if (sheetName && this.engine.doesSheetExist(sheetName)) {
        this.switchSheet(this.sheetName);
      } else {
        const newSheetName = this.addSheet(sheetName !== null && sheetName !== void 0 ? sheetName : void 0, this.hot.getSourceDataArray());
        _assertClassBrand36(_Formulas_brand, this, _updateSheetNameAndSheetId).call(this, newSheetName);
      }
    }
    super.updatePlugin(newSettings);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    _classPrivateFieldGet22(_engineListeners, this).forEach((_ref3) => {
      var _this$engine;
      let [eventName, listener] = _ref3;
      return (_this$engine = this.engine) === null || _this$engine === void 0 ? void 0 : _this$engine.off(eventName, listener);
    });
    _classPrivateFieldSet20(_engineListeners, this, null);
    unregisterEngine(this.engine, this.hot);
    this.engine = null;
    super.destroy();
  }
  /**
   * Add a sheet to the shared HyperFormula instance.
   *
   * @param {string|null} [sheetName] The new sheet name. If not provided (or a null is passed), will be
   * auto-generated by HyperFormula.
   * @param {Array} [sheetData] Data passed to the shared HyperFormula instance. Has to be declared as an array of
   * arrays - array of objects is not supported in this scenario.
   * @returns {boolean|string} `false` if the data format is unusable or it is impossible to add a new sheet to the
   * engine, the created sheet name otherwise.
   */
  addSheet(sheetName, sheetData) {
    if (isDefined(sheetData) && !isArrayOfArrays(sheetData)) {
      warn("The provided data should be an array of arrays.");
      return false;
    }
    if (sheetName !== void 0 && sheetName !== null && this.engine.doesSheetExist(sheetName)) {
      warn("Sheet with the provided name already exists.");
      return false;
    }
    try {
      const actualSheetName = this.engine.addSheet(sheetName !== null && sheetName !== void 0 ? sheetName : void 0);
      if (sheetData) {
        this.engine.setSheetContent(this.engine.getSheetId(actualSheetName), sheetData);
      }
      return actualSheetName;
    } catch (e) {
      warn(e.message);
      return false;
    }
  }
  /**
   * Switch the sheet used as data in the Handsontable instance (it loads the data from the shared HyperFormula
   * instance).
   *
   * @param {string} sheetName Sheet name used in the shared HyperFormula instance.
   */
  switchSheet(sheetName) {
    if (!this.engine.doesSheetExist(sheetName)) {
      error(`The sheet named \`${sheetName}\` does not exist, switch aborted.`);
      return;
    }
    _assertClassBrand36(_Formulas_brand, this, _updateSheetNameAndSheetId).call(this, sheetName);
    const serialized = this.engine.getSheetSerialized(this.sheetId);
    if (serialized.length > 0) {
      this.hot.loadData(serialized, `${toUpperCaseFirst(PLUGIN_KEY17)}.switchSheet`);
    }
  }
  /**
   * Get the cell type under specified visual coordinates.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {number} [sheet] The target sheet id, defaults to the current sheet.
   * @returns {string} Possible values: 'FORMULA' | 'VALUE' | 'ARRAYFORMULA' | 'EMPTY'.
   */
  getCellType(row, column) {
    let sheet = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.sheetId;
    const physicalRow = this.hot.toPhysicalRow(row);
    const physicalColumn = this.hot.toPhysicalColumn(column);
    if (physicalRow !== null && physicalColumn !== null) {
      return this.engine.getCellType({
        sheet,
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(row),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(column)
      });
    } else {
      return "EMPTY";
    }
  }
  /**
   * Returns `true` if under specified visual coordinates is formula.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {number} [sheet] The target sheet id, defaults to the current sheet.
   * @returns {boolean}
   */
  isFormulaCellType(row, column) {
    let sheet = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.sheetId;
    return this.engine.doesCellHaveFormula({
      sheet,
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(row),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(column)
    });
  }
  /**
   * Renders dependent sheets (handsontable instances) based on the changes - list of the
   * recalculated dependent cells.
   *
   * @private
   * @param {object[]} dependentCells The values and location of applied changes within HF engine.
   * @param {boolean} [renderSelf] `true` if it's supposed to render itself, `false` otherwise.
   */
  renderDependentSheets(dependentCells) {
    let renderSelf = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    const affectedSheetIds = /* @__PURE__ */ new Set();
    dependentCells.forEach((change) => {
      var _change$address;
      const sheetId = change === null || change === void 0 || (_change$address = change.address) === null || _change$address === void 0 ? void 0 : _change$address.sheet;
      if (sheetId !== void 0) {
        if (!affectedSheetIds.has(sheetId)) {
          affectedSheetIds.add(sheetId);
        }
      }
    });
    getRegisteredHotInstances(this.engine).forEach((relatedHot, sheetId) => {
      if ((renderSelf || sheetId !== this.sheetId) && affectedSheetIds.has(sheetId)) {
        var _relatedHot$view;
        relatedHot.render();
        (_relatedHot$view = relatedHot.view) === null || _relatedHot$view === void 0 || _relatedHot$view.adjustElementsSize();
      }
    });
  }
  /**
   * Validates dependent cells based on the cells that are modified by the change.
   *
   * @private
   * @param {object[]} dependentCells The values and location of applied changes within HF engine.
   * @param {object[]} [changedCells] The values and location of applied changes by developer (through API or UI).
   */
  validateDependentCells(dependentCells) {
    let changedCells = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    const stringifyAddress = (change) => {
      var _change$address2;
      const {
        row,
        col,
        sheet
      } = (_change$address2 = change === null || change === void 0 ? void 0 : change.address) !== null && _change$address2 !== void 0 ? _change$address2 : {};
      return isDefined(sheet) ? `${sheet}:${row}x${col}` : "";
    };
    const changedCellsSet = new Set(changedCells.map((change) => stringifyAddress(change)));
    dependentCells.forEach((change) => {
      var _change$address3, _change$address4;
      const {
        row,
        col
      } = (_change$address3 = change.address) !== null && _change$address3 !== void 0 ? _change$address3 : {};
      if (isDefined(row) === false || isDefined(col) === false || row >= this.hot.countRows() || col >= this.hot.countCols()) {
        return;
      }
      const sheetId = change === null || change === void 0 || (_change$address4 = change.address) === null || _change$address4 === void 0 ? void 0 : _change$address4.sheet;
      const addressId = stringifyAddress(change);
      if (sheetId !== void 0 && !changedCellsSet.has(addressId)) {
        const boundHot = getRegisteredHotInstances(this.engine).get(sheetId);
        if (!boundHot) {
          return;
        }
        boundHot.validateCell(boundHot.getDataAtCell(row, col), boundHot.getCellMeta(row, col), () => {
        });
      }
    });
  }
  /**
   * Sync a change from the change-related hooks with the engine.
   *
   * @private
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {Handsontable.CellValue} newValue New value.
   * @returns {Array} Array of changes exported from the engine.
   */
  syncChangeWithEngine(row, column, newValue) {
    const address = {
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(row),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(column),
      sheet: this.sheetId
    };
    if (!this.engine.isItPossibleToSetCellContents(address)) {
      warn(`Not possible to set cell data at ${JSON.stringify(address)}`);
      return;
    }
    const cellMeta = this.hot.getCellMeta(row, column);
    if (isDate2(newValue, cellMeta.type)) {
      if (isDateValid(newValue, cellMeta.dateFormat)) {
        newValue = getDateInHfFormat(newValue, cellMeta.dateFormat);
      } else if (isFormula(newValue) === false) {
        newValue = `'${newValue}`;
      }
    }
    return this.engine.setCellContents(address, newValue);
  }
  /**
   * The hook allows to translate the formula value to calculated value before it goes to the
   * validator function.
   *
   * @param {*} value The cell value to validate.
   * @param {number} visualRow The visual row index.
   * @param {number|string} prop The visual column index or property name of the column.
   * @returns {*} Returns value to validate.
   */
};
function _updateSheetNameAndSheetId(sheetName) {
  this.sheetName = sheetName;
  this.sheetId = this.engine.getSheetId(this.sheetName);
}
function _onBeforeValidate(value, visualRow, prop) {
  const visualColumn = this.hot.propToCol(prop);
  if (this.isFormulaCellType(visualRow, visualColumn)) {
    const address = {
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(visualRow),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(visualColumn),
      sheet: this.sheetId
    };
    const cellMeta = this.hot.getCellMeta(visualRow, visualColumn);
    let cellValue = this.engine.getCellValue(address);
    if (cellMeta.type === "date" && isNumeric(cellValue)) {
      cellValue = getDateFromExcelDate(cellValue, cellMeta.dateFormat);
    }
    return typeof cellValue === "object" && cellValue !== null ? cellValue.value : cellValue;
  }
  return value;
}
function _onBeforeAutofill(fillData, sourceRange, targetRange) {
  const {
    row: sourceTopStartRow,
    col: sourceTopStartColumn
  } = sourceRange.getTopStartCorner();
  const {
    row: sourceBottomEndRow,
    col: sourceBottomEndColumn
  } = sourceRange.getBottomEndCorner();
  const {
    row: targetTopStartRow,
    col: targetTopStartColumn
  } = targetRange.getTopStartCorner();
  const {
    row: targetBottomEndRow,
    col: targetBottomEndColumn
  } = targetRange.getBottomEndCorner();
  const engineSourceRange = {
    start: {
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(sourceTopStartRow),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(sourceTopStartColumn),
      sheet: this.sheetId
    },
    end: {
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(sourceBottomEndRow),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(sourceBottomEndColumn),
      sheet: this.sheetId
    }
  };
  const engineTargetRange = {
    start: {
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(targetTopStartRow),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(targetTopStartColumn),
      sheet: this.sheetId
    },
    end: {
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(targetBottomEndRow),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(targetBottomEndColumn),
      sheet: this.sheetId
    }
  };
  if (this.engine.isItPossibleToSetCellContents(engineTargetRange) === false) {
    return false;
  }
  const fillRangeData = this.engine.getFillRangeData(engineSourceRange, engineTargetRange);
  const {
    row: sourceStartRow,
    col: sourceStartColumn
  } = engineSourceRange.start;
  const {
    row: sourceEndRow,
    col: sourceEndColumn
  } = engineSourceRange.end;
  const populationRowLength = sourceEndRow - sourceStartRow + 1;
  const populationColumnLength = sourceEndColumn - sourceStartColumn + 1;
  for (let populatedRowIndex = 0; populatedRowIndex < fillRangeData.length; populatedRowIndex += 1) {
    for (let populatedColumnIndex = 0; populatedColumnIndex < fillRangeData[populatedRowIndex].length; populatedColumnIndex += 1) {
      const populatedValue = fillRangeData[populatedRowIndex][populatedColumnIndex];
      const sourceRow = sourceStartRow + populatedRowIndex % populationRowLength;
      const sourceColumn = sourceStartColumn + populatedColumnIndex % populationColumnLength;
      const sourceCellMeta = this.hot.getCellMeta(sourceRow, sourceColumn);
      if (isDate2(populatedValue, sourceCellMeta.type)) {
        if (populatedValue.startsWith("'")) {
          fillRangeData[populatedRowIndex][populatedColumnIndex] = populatedValue.slice(1);
        } else if (this.isFormulaCellType(sourceRow, sourceColumn, this.sheetId) === false) {
          fillRangeData[populatedRowIndex][populatedColumnIndex] = getDateInHotFormat(populatedValue, sourceCellMeta.dateFormat);
        }
      }
    }
  }
  return fillRangeData;
}
function _onBeforeLoadData(sourceData, initialLoad) {
  let source = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
  if (source.includes(toUpperCaseFirst(PLUGIN_KEY17))) {
    return;
  }
  _classPrivateFieldSet20(_hotWasInitializedWithEmptyData, this, isUndefined(this.hot.getSettings().data));
}
function _onAfterCellMetaReset() {
  if (_classPrivateFieldGet22(_hotWasInitializedWithEmptyData, this)) {
    this.switchSheet(this.sheetName);
    return;
  }
  const sourceDataArray = this.hot.getSourceDataArray();
  sourceDataArray.forEach((rowData, rowIndex) => {
    rowData.forEach((cellValue, columnIndex) => {
      const cellMeta = this.hot.getCellMeta(rowIndex, columnIndex, {
        skipMetaExtension: true
      });
      const dateFormat = cellMeta.dateFormat;
      if (isDate2(cellValue, cellMeta.type)) {
        if (isDateValid(cellValue, dateFormat)) {
          sourceDataArray[rowIndex][columnIndex] = getDateInHfFormat(cellValue, dateFormat);
        } else if (!cellValue.startsWith("=")) {
          sourceDataArray[rowIndex][columnIndex] = `'${cellValue}`;
        }
      }
    });
  });
  _classPrivateFieldSet20(_internalOperationPending, this, true);
  const dependentCells = this.engine.setSheetContent(this.sheetId, sourceDataArray);
  this.indexSyncer.setupSyncEndpoint(this.engine, this.sheetId);
  this.renderDependentSheets(dependentCells);
  _classPrivateFieldSet20(_internalOperationPending, this, false);
}
function _onAfterLoadData5(sourceData, initialLoad) {
  let source = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
  if (source.includes(toUpperCaseFirst(PLUGIN_KEY17))) {
    return;
  }
  const sheetName = setupSheet(this.engine, this.hot.getSettings()[PLUGIN_KEY17].sheetName);
  _assertClassBrand36(_Formulas_brand, this, _updateSheetNameAndSheetId).call(this, sheetName);
  if (source === "updateSettings") {
    return;
  }
  if (!_classPrivateFieldGet22(_hotWasInitializedWithEmptyData, this)) {
    const sourceDataArray = this.hot.getSourceDataArray();
    if (this.engine.isItPossibleToReplaceSheetContent(this.sheetId, sourceDataArray)) {
      _classPrivateFieldSet20(_internalOperationPending, this, true);
      const dependentCells = this.engine.setSheetContent(this.sheetId, sourceDataArray);
      this.indexSyncer.setupSyncEndpoint(this.engine, this.sheetId);
      this.renderDependentSheets(dependentCells);
      _classPrivateFieldSet20(_internalOperationPending, this, false);
    }
  } else {
    this.switchSheet(this.sheetName);
  }
}
function _onModifyData(physicalRow, visualColumn, valueHolder, ioMode) {
  if (ioMode !== "get" || _classPrivateFieldGet22(_internalOperationPending, this) || this.sheetName === null || !this.engine.doesSheetExist(this.sheetName)) {
    return;
  }
  const visualRow = this.hot.toVisualRow(physicalRow);
  if (visualRow === null || visualColumn === null) {
    return;
  }
  const cellType = this.getCellType(visualRow, visualColumn);
  if (cellType === "VALUE" || cellType === "EMPTY") {
    valueHolder.value = unescapeFormulaExpression(valueHolder.value);
    return;
  }
  const address = {
    row: this.rowAxisSyncer.getHfIndexFromVisualIndex(visualRow),
    col: this.columnAxisSyncer.getHfIndexFromVisualIndex(visualColumn),
    sheet: this.sheetId
  };
  let cellValue = this.engine.getCellValue(address);
  const cellMeta = this.hot.getCellMeta(visualRow, visualColumn, {
    skipMetaExtension: true
  });
  if (cellMeta.type === "date" && isNumeric(cellValue)) {
    cellValue = getDateFromExcelDate(cellValue, cellMeta.dateFormat);
  }
  valueHolder.value = typeof cellValue === "object" && cellValue !== null ? cellValue.value : cellValue;
}
function _onModifySourceData(row, columnOrProp, valueHolder, ioMode) {
  if (ioMode !== "get" || _classPrivateFieldGet22(_internalOperationPending, this) || this.sheetName === null || !this.engine.doesSheetExist(this.sheetName)) {
    return;
  }
  const visualRow = this.hot.toVisualRow(row);
  const visualColumn = this.hot.propToCol(columnOrProp);
  if (visualRow === null || visualColumn === null) {
    return;
  }
  const cellType = this.getCellType(visualRow, visualColumn);
  if (cellType === "VALUE" || cellType === "EMPTY") {
    return;
  }
  const dimensions = this.engine.getSheetDimensions(this.engine.getSheetId(this.sheetName));
  if (dimensions.width === 0 && dimensions.height === 0) {
    return;
  }
  const address = {
    row: this.rowAxisSyncer.getHfIndexFromVisualIndex(visualRow),
    col: this.columnAxisSyncer.getHfIndexFromVisualIndex(visualColumn),
    sheet: this.sheetId
  };
  valueHolder.value = this.engine.getCellSerialized(address);
}
function _onAfterSetDataAtCell(changes, source) {
  if (isBlockedSource(source)) {
    return;
  }
  const outOfBoundsChanges = [];
  const changedCells = [];
  const dependentCells = this.engine.batch(() => {
    changes.forEach((_ref4) => {
      let [visualRow, prop, , newValue] = _ref4;
      const visualColumn = this.hot.propToCol(prop);
      const physicalRow = this.hot.toPhysicalRow(visualRow);
      const physicalColumn = this.hot.toPhysicalColumn(visualColumn);
      const address = {
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(visualRow),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(visualColumn),
        sheet: this.sheetId
      };
      if (physicalRow !== null && physicalColumn !== null) {
        this.syncChangeWithEngine(visualRow, visualColumn, newValue);
      } else {
        outOfBoundsChanges.push([visualRow, visualColumn, newValue]);
      }
      changedCells.push({
        address
      });
    });
  });
  if (outOfBoundsChanges.length) {
    this.hot.addHookOnce("afterChange", () => {
      const outOfBoundsDependentCells = this.engine.batch(() => {
        outOfBoundsChanges.forEach((_ref5) => {
          let [row, column, newValue] = _ref5;
          this.syncChangeWithEngine(row, column, newValue);
        });
      });
      this.renderDependentSheets(outOfBoundsDependentCells, true);
    });
  }
  this.renderDependentSheets(dependentCells);
  this.validateDependentCells(dependentCells, changedCells);
}
function _onAfterSetSourceDataAtCell(changes, source) {
  if (isBlockedSource(source)) {
    return;
  }
  const dependentCells = [];
  const changedCells = [];
  changes.forEach((_ref6) => {
    let [visualRow, prop, , newValue] = _ref6;
    const visualColumn = this.hot.propToCol(prop);
    if (!isNumeric(visualColumn)) {
      return;
    }
    const address = {
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(visualRow),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(visualColumn),
      sheet: this.sheetId
    };
    if (!this.engine.isItPossibleToSetCellContents(address)) {
      warn(`Not possible to set source cell data at ${JSON.stringify(address)}`);
      return;
    }
    changedCells.push({
      address
    });
    dependentCells.push(...this.engine.setCellContents(address, newValue));
  });
  this.renderDependentSheets(dependentCells);
  this.validateDependentCells(dependentCells, changedCells);
}
function _onBeforeCreateRow(visualRow, amount) {
  let hfRowIndex = this.rowAxisSyncer.getHfIndexFromVisualIndex(visualRow);
  if (visualRow >= this.hot.countRows()) {
    hfRowIndex = visualRow;
  }
  if (this.sheetId === null || !this.engine.doesSheetExist(this.sheetName) || !this.engine.isItPossibleToAddRows(this.sheetId, [hfRowIndex, amount])) {
    return false;
  }
}
function _onBeforeCreateCol(visualColumn, amount) {
  let hfColumnIndex = this.columnAxisSyncer.getHfIndexFromVisualIndex(visualColumn);
  if (visualColumn >= this.hot.countCols()) {
    hfColumnIndex = visualColumn;
  }
  if (this.sheetId === null || !this.engine.doesSheetExist(this.sheetName) || !this.engine.isItPossibleToAddColumns(this.sheetId, [hfColumnIndex, amount])) {
    return false;
  }
}
function _onBeforeRemoveRow(row, amount, physicalRows) {
  const hfRows = this.rowAxisSyncer.setRemovedHfIndexes(physicalRows);
  const possible = hfRows.every((hfRow) => {
    return this.engine.isItPossibleToRemoveRows(this.sheetId, [hfRow, 1]);
  });
  return possible === false ? false : void 0;
}
function _onBeforeRemoveCol(col, amount, physicalColumns) {
  const hfColumns = this.columnAxisSyncer.setRemovedHfIndexes(physicalColumns);
  const possible = hfColumns.every((hfColumn) => {
    return this.engine.isItPossibleToRemoveColumns(this.sheetId, [hfColumn, 1]);
  });
  return possible === false ? false : void 0;
}
function _onAfterCreateRow(visualRow, amount, source) {
  if (isBlockedSource(source)) {
    return;
  }
  const changes = this.engine.addRows(this.sheetId, [this.rowAxisSyncer.getHfIndexFromVisualIndex(visualRow), amount]);
  this.renderDependentSheets(changes);
}
function _onAfterCreateCol(visualColumn, amount, source) {
  if (isBlockedSource(source)) {
    return;
  }
  const changes = this.engine.addColumns(this.sheetId, [this.columnAxisSyncer.getHfIndexFromVisualIndex(visualColumn), amount]);
  this.renderDependentSheets(changes);
}
function _onAfterRemoveRow(row, amount, physicalRows, source) {
  if (isBlockedSource(source)) {
    return;
  }
  const descendingHfRows = this.rowAxisSyncer.getRemovedHfIndexes().sort((a, b) => b - a);
  const changes = this.engine.batch(() => {
    descendingHfRows.forEach((hfRow) => {
      this.engine.removeRows(this.sheetId, [hfRow, 1]);
    });
  });
  this.renderDependentSheets(changes);
}
function _onAfterRemoveCol(col, amount, physicalColumns, source) {
  if (isBlockedSource(source)) {
    return;
  }
  const descendingHfColumns = this.columnAxisSyncer.getRemovedHfIndexes().sort((a, b) => b - a);
  const changes = this.engine.batch(() => {
    descendingHfColumns.forEach((hfColumn) => {
      this.engine.removeColumns(this.sheetId, [hfColumn, 1]);
    });
  });
  this.renderDependentSheets(changes);
}
function _onAfterDetachChild(parent, element, finalElementRowIndex) {
  var _element$__children;
  _classPrivateFieldSet20(_internalOperationPending, this, true);
  const rowsData = this.hot.getSourceDataArray(finalElementRowIndex, 0, finalElementRowIndex + (((_element$__children = element.__children) === null || _element$__children === void 0 ? void 0 : _element$__children.length) || 0), this.hot.countSourceCols());
  _classPrivateFieldSet20(_internalOperationPending, this, false);
  rowsData.forEach((row, relativeRowIndex) => {
    row.forEach((value, colIndex) => {
      this.engine.setCellContents({
        col: colIndex,
        row: finalElementRowIndex + relativeRowIndex,
        sheet: this.sheetId
      }, [[value]]);
    });
  });
}
function _onEngineValuesUpdated(changes) {
  this.hot.runHooks("afterFormulasValuesUpdate", changes);
}
function _onEngineNamedExpressionsAdded(namedExpressionName, changes) {
  this.hot.runHooks("afterNamedExpressionAdded", namedExpressionName, changes);
}
function _onEngineNamedExpressionsRemoved(namedExpressionName, changes) {
  this.hot.runHooks("afterNamedExpressionRemoved", namedExpressionName, changes);
}
function _onEngineSheetAdded(addedSheetDisplayName) {
  this.hot.runHooks("afterSheetAdded", addedSheetDisplayName);
}
function _onEngineSheetRenamed(oldDisplayName, newDisplayName) {
  _assertClassBrand36(_Formulas_brand, this, _updateSheetNameAndSheetId).call(this, newDisplayName);
  this.hot.runHooks("afterSheetRenamed", oldDisplayName, newDisplayName);
}
function _onEngineSheetRemoved(removedSheetDisplayName, changes) {
  this.hot.runHooks("afterSheetRemoved", removedSheetDisplayName, changes);
}

// node_modules/handsontable/plugins/hiddenColumns/contextMenuItem/hideColumn.mjs
function hideColumnItem(hiddenColumnsPlugin) {
  return {
    key: "hidden_columns_hide",
    name() {
      const selection = this.getSelectedLast();
      let pluralForm = 0;
      if (Array.isArray(selection)) {
        const [, fromColumn, , toColumn] = selection;
        if (fromColumn - toColumn !== 0) {
          pluralForm = 1;
        }
      }
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_HIDE_COLUMN, pluralForm);
    },
    callback() {
      const {
        from,
        to
      } = this.getSelectedRangeLast();
      const start = Math.max(Math.min(from.col, to.col), 0);
      const end = Math.max(from.col, to.col);
      const columnsToHide = [];
      for (let visualColumn = start; visualColumn <= end; visualColumn += 1) {
        columnsToHide.push(visualColumn);
      }
      hiddenColumnsPlugin.hideColumns(columnsToHide);
      const lastHiddenColumn = columnsToHide[columnsToHide.length - 1];
      const columnToSelect = this.columnIndexMapper.getNearestNotHiddenIndex(lastHiddenColumn, 1, true);
      if (Number.isInteger(columnToSelect) && columnToSelect >= 0) {
        this.selectColumns(columnToSelect);
      } else {
        this.deselectCell();
      }
      this.render();
      this.view.adjustElementsSize();
    },
    disabled: false,
    hidden() {
      return !(this.selection.isSelectedByColumnHeader() || this.selection.isSelectedByCorner());
    }
  };
}

// node_modules/handsontable/plugins/hiddenColumns/contextMenuItem/showColumn.mjs
function showColumnItem(hiddenColumnsPlugin) {
  const columns = [];
  return {
    key: "hidden_columns_show",
    name() {
      const pluralForm = columns.length > 1 ? 1 : 0;
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_SHOW_COLUMN, pluralForm);
    },
    callback() {
      var _this$columnIndexMapp, _this$columnIndexMapp2;
      if (columns.length === 0) {
        return;
      }
      let startVisualColumn = columns[0];
      let endVisualColumn = columns[columns.length - 1];
      startVisualColumn = (_this$columnIndexMapp = this.columnIndexMapper.getNearestNotHiddenIndex(startVisualColumn - 1, -1)) !== null && _this$columnIndexMapp !== void 0 ? _this$columnIndexMapp : 0;
      endVisualColumn = (_this$columnIndexMapp2 = this.columnIndexMapper.getNearestNotHiddenIndex(endVisualColumn + 1, 1)) !== null && _this$columnIndexMapp2 !== void 0 ? _this$columnIndexMapp2 : this.countCols() - 1;
      hiddenColumnsPlugin.showColumns(columns);
      this.render();
      this.view.adjustElementsSize();
      const allColumnsSelected = endVisualColumn - startVisualColumn + 1 === this.countCols();
      if (!allColumnsSelected) {
        this.selectColumns(startVisualColumn, endVisualColumn);
      }
    },
    disabled: false,
    hidden() {
      const hiddenPhysicalColumns = arrayMap(hiddenColumnsPlugin.getHiddenColumns(), (visualColumnIndex) => {
        return this.toPhysicalColumn(visualColumnIndex);
      });
      if (!(this.selection.isSelectedByColumnHeader() || this.selection.isSelectedByCorner()) || hiddenPhysicalColumns.length < 1) {
        return true;
      }
      columns.length = 0;
      const selectedRangeLast = this.getSelectedRangeLast();
      const visualStartColumn = selectedRangeLast.getTopStartCorner().col;
      const visualEndColumn = selectedRangeLast.getBottomEndCorner().col;
      const columnIndexMapper = this.columnIndexMapper;
      const renderableStartColumn = columnIndexMapper.getRenderableFromVisualIndex(visualStartColumn);
      const renderableEndColumn = columnIndexMapper.getRenderableFromVisualIndex(visualEndColumn);
      const notTrimmedColumnIndexes = columnIndexMapper.getNotTrimmedIndexes();
      const physicalColumnIndexes = [];
      if (visualStartColumn !== visualEndColumn) {
        const visualColumnsInRange = visualEndColumn - visualStartColumn + 1;
        const renderedColumnsInRange = renderableEndColumn - renderableStartColumn + 1;
        if (visualColumnsInRange > renderedColumnsInRange) {
          const physicalIndexesInRange = notTrimmedColumnIndexes.slice(visualStartColumn, visualEndColumn + 1);
          physicalColumnIndexes.push(...physicalIndexesInRange.filter((physicalIndex) => hiddenPhysicalColumns.includes(physicalIndex)));
        }
      } else if (renderableStartColumn === 0 && renderableStartColumn < visualStartColumn) {
        physicalColumnIndexes.push(...notTrimmedColumnIndexes.slice(0, visualStartColumn));
      } else if (renderableStartColumn === null) {
        physicalColumnIndexes.push(...notTrimmedColumnIndexes.slice(0, this.countCols()));
      } else {
        const lastVisualIndex = this.countCols() - 1;
        const lastRenderableIndex = columnIndexMapper.getRenderableFromVisualIndex(columnIndexMapper.getNearestNotHiddenIndex(lastVisualIndex, -1));
        if (renderableEndColumn === lastRenderableIndex && lastVisualIndex > visualEndColumn) {
          physicalColumnIndexes.push(...notTrimmedColumnIndexes.slice(visualEndColumn + 1));
        }
      }
      arrayEach(physicalColumnIndexes, (physicalColumnIndex) => {
        columns.push(this.toVisualColumn(physicalColumnIndex));
      });
      return columns.length === 0;
    }
  };
}

// node_modules/handsontable/plugins/hiddenColumns/hiddenColumns.mjs
function _classPrivateMethodInitSpec30(e, a) {
  _checkPrivateRedeclaration37(e, a), a.add(e);
}
function _classPrivateFieldInitSpec23(e, t, a) {
  _checkPrivateRedeclaration37(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration37(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldGet23(s, a) {
  return s.get(_assertClassBrand37(s, a));
}
function _classPrivateFieldSet21(s, a, r) {
  return s.set(_assertClassBrand37(s, a), r), r;
}
function _assertClassBrand37(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
Hooks.getSingleton().register("beforeHideColumns");
Hooks.getSingleton().register("afterHideColumns");
Hooks.getSingleton().register("beforeUnhideColumns");
Hooks.getSingleton().register("afterUnhideColumns");
var PLUGIN_KEY18 = "hiddenColumns";
var PLUGIN_PRIORITY17 = 310;
var _hiddenColumnsMap = /* @__PURE__ */ new WeakMap();
var _HiddenColumns_brand = /* @__PURE__ */ new WeakSet();
var HiddenColumns = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec30(this, _HiddenColumns_brand);
    _classPrivateFieldInitSpec23(this, _hiddenColumnsMap, null);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY18;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY17;
  }
  static get DEFAULT_SETTINGS() {
    return {
      copyPasteEnabled: true,
      indicators: false,
      columns: []
    };
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link HiddenColumns#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[PLUGIN_KEY18];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _this = this;
    if (this.enabled) {
      return;
    }
    _classPrivateFieldSet21(_hiddenColumnsMap, this, new HidingMap());
    _classPrivateFieldGet23(_hiddenColumnsMap, this).addLocalHook("init", () => _assertClassBrand37(_HiddenColumns_brand, this, _onMapInit).call(this));
    this.hot.columnIndexMapper.registerMap(this.pluginName, _classPrivateFieldGet23(_hiddenColumnsMap, this));
    this.addHook("afterContextMenuDefaultOptions", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _assertClassBrand37(_HiddenColumns_brand, _this, _onAfterContextMenuDefaultOptions3).call(_this, ...args);
    });
    this.addHook("afterGetCellMeta", (row, col, cellProperties) => _assertClassBrand37(_HiddenColumns_brand, this, _onAfterGetCellMeta).call(this, row, col, cellProperties));
    this.addHook("modifyColWidth", (width, col) => _assertClassBrand37(_HiddenColumns_brand, this, _onModifyColWidth).call(this, width, col), 2);
    this.addHook("afterGetColHeader", function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _assertClassBrand37(_HiddenColumns_brand, _this, _onAfterGetColHeader5).call(_this, ...args);
    });
    this.addHook("modifyCopyableRange", (ranges) => _assertClassBrand37(_HiddenColumns_brand, this, _onModifyCopyableRange).call(this, ranges));
    super.enablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`hiddenColumns`](@/api/options.md#hiddencolumns)
   */
  updatePlugin() {
    this.disablePlugin();
    this.enablePlugin();
    super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    super.disablePlugin();
    this.hot.columnIndexMapper.unregisterMap(this.pluginName);
    this.resetCellsMeta();
  }
  /**
   * Shows the provided columns.
   *
   * @param {number[]} columns Array of visual column indexes.
   */
  showColumns(columns) {
    const currentHideConfig = this.getHiddenColumns();
    const isValidConfig = this.isValidConfig(columns);
    let destinationHideConfig = currentHideConfig;
    const hidingMapValues = _classPrivateFieldGet23(_hiddenColumnsMap, this).getValues().slice();
    const isAnyColumnShowed = columns.length > 0;
    if (isValidConfig && isAnyColumnShowed) {
      const physicalColumns = columns.map((visualColumn) => this.hot.toPhysicalColumn(visualColumn));
      arrayEach(physicalColumns, (physicalColumn) => {
        hidingMapValues[physicalColumn] = false;
      });
      destinationHideConfig = arrayReduce(hidingMapValues, (hiddenIndexes, isHidden, physicalIndex) => {
        if (isHidden) {
          hiddenIndexes.push(this.hot.toVisualColumn(physicalIndex));
        }
        return hiddenIndexes;
      }, []);
    }
    const continueHiding = this.hot.runHooks("beforeUnhideColumns", currentHideConfig, destinationHideConfig, isValidConfig && isAnyColumnShowed);
    if (continueHiding === false) {
      return;
    }
    if (isValidConfig && isAnyColumnShowed) {
      _classPrivateFieldGet23(_hiddenColumnsMap, this).setValues(hidingMapValues);
    }
    this.hot.view.adjustElementsSize();
    this.hot.runHooks("afterUnhideColumns", currentHideConfig, destinationHideConfig, isValidConfig && isAnyColumnShowed, isValidConfig && destinationHideConfig.length < currentHideConfig.length);
  }
  /**
   * Shows a single column.
   *
   * @param {...number} column Visual column index.
   */
  showColumn() {
    for (var _len3 = arguments.length, column = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      column[_key3] = arguments[_key3];
    }
    this.showColumns(column);
  }
  /**
   * Hides the columns provided in the array.
   *
   * @param {number[]} columns Array of visual column indexes.
   */
  hideColumns(columns) {
    const currentHideConfig = this.getHiddenColumns();
    const isConfigValid = this.isValidConfig(columns);
    let destinationHideConfig = currentHideConfig;
    if (isConfigValid) {
      destinationHideConfig = Array.from(new Set(currentHideConfig.concat(columns)));
    }
    const continueHiding = this.hot.runHooks("beforeHideColumns", currentHideConfig, destinationHideConfig, isConfigValid);
    if (continueHiding === false) {
      return;
    }
    if (isConfigValid) {
      this.hot.batchExecution(() => {
        arrayEach(columns, (visualColumn) => {
          _classPrivateFieldGet23(_hiddenColumnsMap, this).setValueAtIndex(this.hot.toPhysicalColumn(visualColumn), true);
        });
      }, true);
    }
    this.hot.runHooks("afterHideColumns", currentHideConfig, destinationHideConfig, isConfigValid, isConfigValid && destinationHideConfig.length > currentHideConfig.length);
  }
  /**
   * Hides a single column.
   *
   * @param {...number} column Visual column index.
   */
  hideColumn() {
    for (var _len4 = arguments.length, column = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      column[_key4] = arguments[_key4];
    }
    this.hideColumns(column);
  }
  /**
   * Returns an array of visual indexes of hidden columns.
   *
   * @returns {number[]}
   */
  getHiddenColumns() {
    return arrayMap(_classPrivateFieldGet23(_hiddenColumnsMap, this).getHiddenIndexes(), (physicalColumnIndex) => {
      return this.hot.toVisualColumn(physicalColumnIndex);
    });
  }
  /**
   * Checks if the provided column is hidden.
   *
   * @param {number} column Visual column index.
   * @returns {boolean}
   */
  isHidden(column) {
    return _classPrivateFieldGet23(_hiddenColumnsMap, this).getValueAtIndex(this.hot.toPhysicalColumn(column)) || false;
  }
  /**
   * Get if trim config is valid. Check whether all of the provided column indexes are within the bounds of the table.
   *
   * @param {Array} hiddenColumns List of hidden column indexes.
   * @returns {boolean}
   */
  isValidConfig(hiddenColumns) {
    const nrOfColumns = this.hot.countCols();
    if (Array.isArray(hiddenColumns) && hiddenColumns.length > 0) {
      return hiddenColumns.every((visualColumn) => Number.isInteger(visualColumn) && visualColumn >= 0 && visualColumn < nrOfColumns);
    }
    return false;
  }
  /**
   * Reset all rendered cells meta.
   *
   * @private
   */
  resetCellsMeta() {
    arrayEach(this.hot.getCellsMeta(), (meta) => {
      meta.skipColumnOnPaste = false;
    });
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    _classPrivateFieldSet21(_hiddenColumnsMap, this, null);
    super.destroy();
  }
};
function _onModifyColWidth(width, column) {
  if (this.isHidden(column)) {
    return 0;
  }
  if (this.getSetting("indicators") && (this.isHidden(column + 1) || this.isHidden(column - 1))) {
    if (typeof width === "number" && this.hot.hasColHeaders()) {
      return width + 15;
    }
  }
}
function _onAfterGetCellMeta(row, column, cellProperties) {
  if (this.getSetting("copyPasteEnabled") === false && this.isHidden(column)) {
    cellProperties.skipColumnOnPaste = true;
  }
  if (this.isHidden(column - 1)) {
    cellProperties.className = cellProperties.className || "";
    if (cellProperties.className.indexOf("afterHiddenColumn") === -1) {
      cellProperties.className += " afterHiddenColumn";
    }
  } else if (cellProperties.className) {
    const classArr = cellProperties.className.split(" ");
    if (classArr.length > 0) {
      const containAfterHiddenColumn = classArr.indexOf("afterHiddenColumn");
      if (containAfterHiddenColumn > -1) {
        classArr.splice(containAfterHiddenColumn, 1);
      }
      cellProperties.className = classArr.join(" ");
    }
  }
}
function _onModifyCopyableRange(ranges) {
  if (this.getSetting("copyPasteEnabled")) {
    return ranges;
  }
  const newRanges = [];
  const pushRange = (startRow, endRow, startCol, endCol) => {
    newRanges.push({
      startRow,
      endRow,
      startCol,
      endCol
    });
  };
  arrayEach(ranges, (range) => {
    let isHidden = true;
    let rangeStart = 0;
    rangeEach(range.startCol, range.endCol, (visualColumn) => {
      if (this.isHidden(visualColumn)) {
        if (!isHidden) {
          pushRange(range.startRow, range.endRow, rangeStart, visualColumn - 1);
        }
        isHidden = true;
      } else {
        if (isHidden) {
          rangeStart = visualColumn;
        }
        if (visualColumn === range.endCol) {
          pushRange(range.startRow, range.endRow, rangeStart, visualColumn);
        }
        isHidden = false;
      }
    });
  });
  return newRanges;
}
function _onAfterGetColHeader5(column, TH) {
  if (!this.getSetting("indicators") || column < 0) {
    return;
  }
  const classList = [];
  if (column >= 1 && this.isHidden(column - 1)) {
    classList.push("afterHiddenColumn");
  }
  if (column < this.hot.countCols() - 1 && this.isHidden(column + 1)) {
    classList.push("beforeHiddenColumn");
  }
  addClass(TH, classList);
}
function _onAfterContextMenuDefaultOptions3(options) {
  options.items.push({
    name: KEY
  }, hideColumnItem(this), showColumnItem(this));
}
function _onMapInit() {
  const columns = this.getSetting("columns");
  if (Array.isArray(columns)) {
    this.hideColumns(columns);
  }
}

// node_modules/handsontable/plugins/hiddenRows/contextMenuItem/hideRow.mjs
function hideRowItem(hiddenRowsPlugin) {
  return {
    key: "hidden_rows_hide",
    name() {
      const selection = this.getSelectedLast();
      let pluralForm = 0;
      if (Array.isArray(selection)) {
        const [fromRow, , toRow] = selection;
        if (fromRow - toRow !== 0) {
          pluralForm = 1;
        }
      }
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_HIDE_ROW, pluralForm);
    },
    callback() {
      const {
        from,
        to
      } = this.getSelectedRangeLast();
      const start = Math.max(Math.min(from.row, to.row), 0);
      const end = Math.max(from.row, to.row);
      const rowsToHide = [];
      for (let visualRow = start; visualRow <= end; visualRow += 1) {
        rowsToHide.push(visualRow);
      }
      hiddenRowsPlugin.hideRows(rowsToHide);
      const lastHiddenRow = rowsToHide[rowsToHide.length - 1];
      const rowToSelect = this.rowIndexMapper.getNearestNotHiddenIndex(lastHiddenRow, 1, true);
      if (Number.isInteger(rowToSelect) && rowToSelect >= 0) {
        this.selectRows(rowToSelect);
      } else {
        this.deselectCell();
      }
      this.render();
      this.view.adjustElementsSize();
    },
    disabled: false,
    hidden() {
      return !(this.selection.isSelectedByRowHeader() || this.selection.isSelectedByCorner());
    }
  };
}

// node_modules/handsontable/plugins/hiddenRows/contextMenuItem/showRow.mjs
function showRowItem(hiddenRowsPlugin) {
  const rows = [];
  return {
    key: "hidden_rows_show",
    name() {
      const pluralForm = rows.length > 1 ? 1 : 0;
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_SHOW_ROW, pluralForm);
    },
    callback() {
      var _this$rowIndexMapper$, _this$rowIndexMapper$2;
      if (rows.length === 0) {
        return;
      }
      let startVisualRow = rows[0];
      let endVisualRow = rows[rows.length - 1];
      startVisualRow = (_this$rowIndexMapper$ = this.rowIndexMapper.getNearestNotHiddenIndex(startVisualRow - 1, -1)) !== null && _this$rowIndexMapper$ !== void 0 ? _this$rowIndexMapper$ : 0;
      endVisualRow = (_this$rowIndexMapper$2 = this.rowIndexMapper.getNearestNotHiddenIndex(endVisualRow + 1, 1)) !== null && _this$rowIndexMapper$2 !== void 0 ? _this$rowIndexMapper$2 : this.countRows() - 1;
      hiddenRowsPlugin.showRows(rows);
      this.render();
      this.view.adjustElementsSize();
      const allRowsSelected = endVisualRow - startVisualRow + 1 === this.countRows();
      if (!allRowsSelected) {
        this.selectRows(startVisualRow, endVisualRow);
      }
    },
    disabled: false,
    hidden() {
      const hiddenPhysicalRows = arrayMap(hiddenRowsPlugin.getHiddenRows(), (visualRowIndex) => {
        return this.toPhysicalRow(visualRowIndex);
      });
      if (!(this.selection.isSelectedByRowHeader() || this.selection.isSelectedByCorner()) || hiddenPhysicalRows.length < 1) {
        return true;
      }
      rows.length = 0;
      const selectedRangeLast = this.getSelectedRangeLast();
      const visualStartRow = selectedRangeLast.getTopStartCorner().row;
      const visualEndRow = selectedRangeLast.getBottomEndCorner().row;
      const rowIndexMapper = this.rowIndexMapper;
      const renderableStartRow = rowIndexMapper.getRenderableFromVisualIndex(visualStartRow);
      const renderableEndRow = rowIndexMapper.getRenderableFromVisualIndex(visualEndRow);
      const notTrimmedRowIndexes = rowIndexMapper.getNotTrimmedIndexes();
      const physicalRowIndexes = [];
      if (visualStartRow !== visualEndRow) {
        const visualRowsInRange = visualEndRow - visualStartRow + 1;
        const renderedRowsInRange = renderableEndRow - renderableStartRow + 1;
        if (visualRowsInRange > renderedRowsInRange) {
          const physicalIndexesInRange = notTrimmedRowIndexes.slice(visualStartRow, visualEndRow + 1);
          physicalRowIndexes.push(...physicalIndexesInRange.filter((physicalIndex) => hiddenPhysicalRows.includes(physicalIndex)));
        }
      } else if (renderableStartRow === 0 && renderableStartRow < visualStartRow) {
        physicalRowIndexes.push(...notTrimmedRowIndexes.slice(0, visualStartRow));
      } else if (renderableStartRow === null) {
        physicalRowIndexes.push(...notTrimmedRowIndexes.slice(0, this.countRows()));
      } else {
        const lastVisualIndex = this.countRows() - 1;
        const lastRenderableIndex = rowIndexMapper.getRenderableFromVisualIndex(rowIndexMapper.getNearestNotHiddenIndex(lastVisualIndex, -1));
        if (renderableEndRow === lastRenderableIndex && lastVisualIndex > visualEndRow) {
          physicalRowIndexes.push(...notTrimmedRowIndexes.slice(visualEndRow + 1));
        }
      }
      arrayEach(physicalRowIndexes, (physicalRowIndex) => {
        rows.push(this.toVisualRow(physicalRowIndex));
      });
      return rows.length === 0;
    }
  };
}

// node_modules/handsontable/plugins/hiddenRows/hiddenRows.mjs
function _classPrivateMethodInitSpec31(e, a) {
  _checkPrivateRedeclaration38(e, a), a.add(e);
}
function _classPrivateFieldInitSpec24(e, t, a) {
  _checkPrivateRedeclaration38(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration38(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldGet24(s, a) {
  return s.get(_assertClassBrand38(s, a));
}
function _classPrivateFieldSet22(s, a, r) {
  return s.set(_assertClassBrand38(s, a), r), r;
}
function _assertClassBrand38(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
Hooks.getSingleton().register("beforeHideRows");
Hooks.getSingleton().register("afterHideRows");
Hooks.getSingleton().register("beforeUnhideRows");
Hooks.getSingleton().register("afterUnhideRows");
var PLUGIN_KEY19 = "hiddenRows";
var PLUGIN_PRIORITY18 = 320;
var _hiddenRowsMap = /* @__PURE__ */ new WeakMap();
var _HiddenRows_brand = /* @__PURE__ */ new WeakSet();
var HiddenRows = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec31(this, _HiddenRows_brand);
    _classPrivateFieldInitSpec24(this, _hiddenRowsMap, null);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY19;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY18;
  }
  static get DEFAULT_SETTINGS() {
    return {
      copyPasteEnabled: true,
      indicators: false,
      rows: []
    };
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link HiddenRows#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[PLUGIN_KEY19];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _this = this;
    if (this.enabled) {
      return;
    }
    _classPrivateFieldSet22(_hiddenRowsMap, this, new HidingMap());
    _classPrivateFieldGet24(_hiddenRowsMap, this).addLocalHook("init", () => _assertClassBrand38(_HiddenRows_brand, this, _onMapInit2).call(this));
    this.hot.rowIndexMapper.registerMap(this.pluginName, _classPrivateFieldGet24(_hiddenRowsMap, this));
    this.addHook("afterContextMenuDefaultOptions", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _assertClassBrand38(_HiddenRows_brand, _this, _onAfterContextMenuDefaultOptions4).call(_this, ...args);
    });
    this.addHook("afterGetCellMeta", (row, col, cellProperties) => _assertClassBrand38(_HiddenRows_brand, this, _onAfterGetCellMeta2).call(this, row, col, cellProperties));
    this.addHook("modifyRowHeight", (height, row) => _assertClassBrand38(_HiddenRows_brand, this, _onModifyRowHeight).call(this, height, row));
    this.addHook("afterGetRowHeader", function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _assertClassBrand38(_HiddenRows_brand, _this, _onAfterGetRowHeader).call(_this, ...args);
    });
    this.addHook("modifyCopyableRange", (ranges) => _assertClassBrand38(_HiddenRows_brand, this, _onModifyCopyableRange2).call(this, ranges));
    super.enablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`hiddenRows`](@/api/options.md#hiddenrows)
   */
  updatePlugin() {
    this.disablePlugin();
    this.enablePlugin();
    super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    super.disablePlugin();
    this.hot.rowIndexMapper.unregisterMap(this.pluginName);
    this.resetCellsMeta();
  }
  /**
   * Shows the rows provided in the array.
   *
   * @param {number[]} rows Array of visual row indexes.
   */
  showRows(rows) {
    const currentHideConfig = this.getHiddenRows();
    const isValidConfig = this.isValidConfig(rows);
    let destinationHideConfig = currentHideConfig;
    const hidingMapValues = _classPrivateFieldGet24(_hiddenRowsMap, this).getValues().slice();
    const isAnyRowShowed = rows.length > 0;
    if (isValidConfig && isAnyRowShowed) {
      const physicalRows = rows.map((visualRow) => this.hot.toPhysicalRow(visualRow));
      arrayEach(physicalRows, (physicalRow) => {
        hidingMapValues[physicalRow] = false;
      });
      destinationHideConfig = arrayReduce(hidingMapValues, (hiddenIndexes, isHidden, physicalIndex) => {
        if (isHidden) {
          hiddenIndexes.push(this.hot.toVisualRow(physicalIndex));
        }
        return hiddenIndexes;
      }, []);
    }
    const continueHiding = this.hot.runHooks("beforeUnhideRows", currentHideConfig, destinationHideConfig, isValidConfig && isAnyRowShowed);
    if (continueHiding === false) {
      return;
    }
    if (isValidConfig && isAnyRowShowed) {
      _classPrivateFieldGet24(_hiddenRowsMap, this).setValues(hidingMapValues);
    }
    this.hot.runHooks("afterUnhideRows", currentHideConfig, destinationHideConfig, isValidConfig && isAnyRowShowed, isValidConfig && destinationHideConfig.length < currentHideConfig.length);
  }
  /**
   * Shows the row provided as row index (counting from 0).
   *
   * @param {...number} row Visual row index.
   */
  showRow() {
    for (var _len3 = arguments.length, row = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      row[_key3] = arguments[_key3];
    }
    this.showRows(row);
  }
  /**
   * Hides the rows provided in the array.
   *
   * @param {number[]} rows Array of visual row indexes.
   */
  hideRows(rows) {
    const currentHideConfig = this.getHiddenRows();
    const isConfigValid = this.isValidConfig(rows);
    let destinationHideConfig = currentHideConfig;
    if (isConfigValid) {
      destinationHideConfig = Array.from(new Set(currentHideConfig.concat(rows)));
    }
    const continueHiding = this.hot.runHooks("beforeHideRows", currentHideConfig, destinationHideConfig, isConfigValid);
    if (continueHiding === false) {
      return;
    }
    if (isConfigValid) {
      this.hot.batchExecution(() => {
        arrayEach(rows, (visualRow) => {
          _classPrivateFieldGet24(_hiddenRowsMap, this).setValueAtIndex(this.hot.toPhysicalRow(visualRow), true);
        });
      }, true);
    }
    this.hot.runHooks("afterHideRows", currentHideConfig, destinationHideConfig, isConfigValid, isConfigValid && destinationHideConfig.length > currentHideConfig.length);
  }
  /**
   * Hides the row provided as row index (counting from 0).
   *
   * @param {...number} row Visual row index.
   */
  hideRow() {
    for (var _len4 = arguments.length, row = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      row[_key4] = arguments[_key4];
    }
    this.hideRows(row);
  }
  /**
   * Returns an array of visual indexes of hidden rows.
   *
   * @returns {number[]}
   */
  getHiddenRows() {
    return arrayMap(_classPrivateFieldGet24(_hiddenRowsMap, this).getHiddenIndexes(), (physicalRowIndex) => {
      return this.hot.toVisualRow(physicalRowIndex);
    });
  }
  /**
   * Checks if the provided row is hidden.
   *
   * @param {number} row Visual row index.
   * @returns {boolean}
   */
  isHidden(row) {
    return _classPrivateFieldGet24(_hiddenRowsMap, this).getValueAtIndex(this.hot.toPhysicalRow(row)) || false;
  }
  /**
   * Checks whether all of the provided row indexes are within the bounds of the table.
   *
   * @param {Array} hiddenRows List of hidden visual row indexes.
   * @returns {boolean}
   */
  isValidConfig(hiddenRows) {
    const nrOfRows = this.hot.countRows();
    if (Array.isArray(hiddenRows) && hiddenRows.length > 0) {
      return hiddenRows.every((visualRow) => Number.isInteger(visualRow) && visualRow >= 0 && visualRow < nrOfRows);
    }
    return false;
  }
  /**
   * Resets all rendered cells meta.
   *
   * @private
   */
  resetCellsMeta() {
    arrayEach(this.hot.getCellsMeta(), (meta) => {
      meta.skipRowOnPaste = false;
    });
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    _classPrivateFieldSet22(_hiddenRowsMap, this, null);
    super.destroy();
  }
};
function _onModifyRowHeight(height, row) {
  if (this.isHidden(row)) {
    return 0;
  }
  return height;
}
function _onAfterGetCellMeta2(row, column, cellProperties) {
  if (this.getSetting("copyPasteEnabled") === false && this.isHidden(row)) {
    cellProperties.skipRowOnPaste = true;
  }
  if (this.isHidden(row - 1)) {
    cellProperties.className = cellProperties.className || "";
    if (cellProperties.className.indexOf("afterHiddenRow") === -1) {
      cellProperties.className += " afterHiddenRow";
    }
  } else if (cellProperties.className) {
    const classArr = cellProperties.className.split(" ");
    if (classArr.length > 0) {
      const containAfterHiddenRow = classArr.indexOf("afterHiddenRow");
      if (containAfterHiddenRow > -1) {
        classArr.splice(containAfterHiddenRow, 1);
      }
      cellProperties.className = classArr.join(" ");
    }
  }
}
function _onModifyCopyableRange2(ranges) {
  if (this.getSetting("copyPasteEnabled")) {
    return ranges;
  }
  const newRanges = [];
  const pushRange = (startRow, endRow, startCol, endCol) => {
    newRanges.push({
      startRow,
      endRow,
      startCol,
      endCol
    });
  };
  arrayEach(ranges, (range) => {
    let isHidden = true;
    let rangeStart = 0;
    rangeEach(range.startRow, range.endRow, (visualRow) => {
      if (this.isHidden(visualRow)) {
        if (!isHidden) {
          pushRange(rangeStart, visualRow - 1, range.startCol, range.endCol);
        }
        isHidden = true;
      } else {
        if (isHidden) {
          rangeStart = visualRow;
        }
        if (visualRow === range.endRow) {
          pushRange(rangeStart, visualRow, range.startCol, range.endCol);
        }
        isHidden = false;
      }
    });
  });
  return newRanges;
}
function _onAfterGetRowHeader(row, TH) {
  if (!this.getSetting("indicators") || row < 0) {
    return;
  }
  const classList = [];
  if (row >= 1 && this.isHidden(row - 1)) {
    classList.push("afterHiddenRow");
  }
  if (row < this.hot.countRows() - 1 && this.isHidden(row + 1)) {
    classList.push("beforeHiddenRow");
  }
  addClass(TH, classList);
}
function _onAfterContextMenuDefaultOptions4(options) {
  options.items.push({
    name: KEY
  }, hideRowItem(this), showRowItem(this));
}
function _onMapInit2() {
  const rows = this.getSetting("rows");
  if (Array.isArray(rows)) {
    this.hideRows(rows);
  }
}

// node_modules/handsontable/plugins/manualColumnFreeze/contextMenuItem/freezeColumn.mjs
function freezeColumnItem(manualColumnFreezePlugin) {
  return {
    key: "freeze_column",
    name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_FREEZE_COLUMN);
    },
    callback(key, selected) {
      const [{
        start: {
          col: selectedColumn
        }
      }] = selected;
      manualColumnFreezePlugin.freezeColumn(selectedColumn);
      this.render();
      this.view.adjustElementsSize();
    },
    hidden() {
      const selection = this.getSelectedRange();
      let hide = false;
      if (selection === void 0) {
        hide = true;
      } else if (selection.length > 1) {
        hide = true;
      } else if (selection[0].from.col !== selection[0].to.col || selection[0].from.col <= this.getSettings().fixedColumnsStart - 1) {
        hide = true;
      }
      return hide;
    }
  };
}

// node_modules/handsontable/plugins/manualColumnFreeze/contextMenuItem/unfreezeColumn.mjs
function unfreezeColumnItem(manualColumnFreezePlugin) {
  return {
    key: "unfreeze_column",
    name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_UNFREEZE_COLUMN);
    },
    callback(key, selected) {
      const [{
        start: {
          col: selectedColumn
        }
      }] = selected;
      manualColumnFreezePlugin.unfreezeColumn(selectedColumn);
      this.render();
      this.view.adjustElementsSize();
    },
    hidden() {
      const selection = this.getSelectedRange();
      let hide = false;
      if (selection === void 0) {
        hide = true;
      } else if (selection.length > 1) {
        hide = true;
      } else if (selection[0].from.col !== selection[0].to.col || selection[0].from.col >= this.getSettings().fixedColumnsStart) {
        hide = true;
      }
      return hide;
    }
  };
}

// node_modules/handsontable/plugins/manualColumnFreeze/manualColumnFreeze.mjs
function _classPrivateMethodInitSpec32(e, a) {
  _checkPrivateRedeclaration39(e, a), a.add(e);
}
function _classPrivateFieldInitSpec25(e, t, a) {
  _checkPrivateRedeclaration39(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration39(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldGet25(s, a) {
  return s.get(_assertClassBrand39(s, a));
}
function _classPrivateFieldSet23(s, a, r) {
  return s.set(_assertClassBrand39(s, a), r), r;
}
function _assertClassBrand39(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
Hooks.getSingleton().register("beforeColumnFreeze");
Hooks.getSingleton().register("afterColumnFreeze");
Hooks.getSingleton().register("beforeColumnUnfreeze");
Hooks.getSingleton().register("afterColumnUnfreeze");
var PLUGIN_KEY20 = "manualColumnFreeze";
var PLUGIN_PRIORITY19 = 110;
var _afterFirstUse = /* @__PURE__ */ new WeakMap();
var _ManualColumnFreeze_brand = /* @__PURE__ */ new WeakSet();
var ManualColumnFreeze = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec32(this, _ManualColumnFreeze_brand);
    _classPrivateFieldInitSpec25(this, _afterFirstUse, false);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY20;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY19;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ManualColumnFreeze#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[PLUGIN_KEY20];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    if (this.enabled) {
      return;
    }
    this.addHook("afterContextMenuDefaultOptions", (options) => _assertClassBrand39(_ManualColumnFreeze_brand, this, _addContextMenuEntry).call(this, options));
    this.addHook("beforeColumnMove", (columns, finalIndex) => _assertClassBrand39(_ManualColumnFreeze_brand, this, _onBeforeColumnMove).call(this, columns, finalIndex));
    super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    _classPrivateFieldSet23(_afterFirstUse, this, false);
    super.disablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`manualColumnFreeze`](@/api/options.md#manualcolumnfreeze)
   */
  updatePlugin() {
    this.disablePlugin();
    this.enablePlugin();
    super.updatePlugin();
  }
  /**
   * Freezes the specified column (adds it to fixed columns).
   *
   * `freezeColumn()` doesn't re-render the table,
   * so you need to call the `render()` method afterward.
   *
   * @param {number} column Visual column index.
   */
  freezeColumn(column) {
    const settings = this.hot.getSettings();
    const freezePerformed = settings.fixedColumnsStart < this.hot.countCols() && column > settings.fixedColumnsStart - 1;
    if (!_classPrivateFieldGet25(_afterFirstUse, this)) {
      _classPrivateFieldSet23(_afterFirstUse, this, true);
    }
    const beforeColumnFreezeHook = this.hot.runHooks("beforeColumnFreeze", column, freezePerformed);
    if (beforeColumnFreezeHook === false) {
      return;
    }
    if (freezePerformed) {
      this.hot.columnIndexMapper.moveIndexes(column, settings.fixedColumnsStart);
      settings._fixedColumnsStart += 1;
    }
    this.hot.runHooks("afterColumnFreeze", column, freezePerformed);
  }
  /**
   * Unfreezes the given column (remove it from fixed columns and bring to it's previous position).
   *
   * @param {number} column Visual column index.
   */
  unfreezeColumn(column) {
    const settings = this.hot.getSettings();
    const unfreezePerformed = settings.fixedColumnsStart > 0 && column <= settings.fixedColumnsStart - 1;
    if (!_classPrivateFieldGet25(_afterFirstUse, this)) {
      _classPrivateFieldSet23(_afterFirstUse, this, true);
    }
    const beforeColumnUnfreezeHook = this.hot.runHooks("beforeColumnUnfreeze", column, unfreezePerformed);
    if (beforeColumnUnfreezeHook === false) {
      return;
    }
    if (unfreezePerformed) {
      settings._fixedColumnsStart -= 1;
      this.hot.columnIndexMapper.moveIndexes(column, settings.fixedColumnsStart);
    }
    this.hot.runHooks("afterColumnUnfreeze", column, unfreezePerformed);
  }
};
function _addContextMenuEntry(options) {
  options.items.push({
    name: "---------"
  }, freezeColumnItem(this), unfreezeColumnItem(this));
}
function _onBeforeColumnMove(columns, finalIndex) {
  if (_classPrivateFieldGet25(_afterFirstUse, this)) {
    const freezeLine = this.hot.getSettings().fixedColumnsStart;
    if (finalIndex < freezeLine) {
      return false;
    }
    if (columns.some((column) => column < freezeLine)) {
      return false;
    }
  }
}

// node_modules/handsontable/plugins/manualColumnMove/ui/_base.mjs
function _defineProperty40(e, r, t) {
  return (r = _toPropertyKey40(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey40(t) {
  var i = _toPrimitive40(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive40(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var STATE_INITIALIZED = 0;
var STATE_BUILT2 = 1;
var STATE_APPENDED = 2;
var UNIT = "px";
var BaseUI2 = class {
  constructor(hotInstance) {
    _defineProperty40(this, "hot", void 0);
    _defineProperty40(this, "_element", null);
    _defineProperty40(this, "state", STATE_INITIALIZED);
    _defineProperty40(this, "inlineProperty", void 0);
    this.hot = hotInstance;
    this.inlineProperty = hotInstance.isRtl() ? "right" : "left";
  }
  /**
   * Add created UI elements to table.
   *
   * @param {HTMLElement} wrapper Element which are parent for our UI element.
   */
  appendTo(wrapper) {
    wrapper.appendChild(this._element);
    this.state = STATE_APPENDED;
  }
  /**
   * Method for create UI element. Only create, without append to table.
   */
  build() {
    if (this.state !== STATE_INITIALIZED) {
      return;
    }
    this._element = this.hot.rootDocument.createElement("div");
    this.state = STATE_BUILT2;
  }
  /**
   * Method for remove UI element.
   */
  destroy() {
    if (this.isAppended()) {
      this._element.parentElement.removeChild(this._element);
    }
    this._element = null;
    this.state = STATE_INITIALIZED;
  }
  /**
   * Check if UI element are appended.
   *
   * @returns {boolean}
   */
  isAppended() {
    return this.state === STATE_APPENDED;
  }
  /**
   * Check if UI element are built.
   *
   * @returns {boolean}
   */
  isBuilt() {
    return this.state >= STATE_BUILT2;
  }
  /**
   * Setter for position.
   *
   * @param {number} top New top position of the element.
   * @param {number} inlinePosition New left/right (depends on LTR/RTL document mode) position of the element.
   */
  setPosition(top2, inlinePosition) {
    if (isNumeric(top2)) {
      this._element.style.top = top2 + UNIT;
    }
    if (isNumeric(inlinePosition)) {
      this._element.style[this.inlineProperty] = inlinePosition + UNIT;
    }
  }
  /**
   * Getter for the element position.
   *
   * @returns {object} Object contains left and top position of the element.
   */
  getPosition() {
    const style = this._element.style;
    return {
      top: style.top ? parseInt(style.top, 10) : 0,
      start: style[this.inlineProperty] ? parseInt(style[this.inlineProperty], 10) : 0
    };
  }
  /**
   * Setter for the element size.
   *
   * @param {number} width New width of the element.
   * @param {number} height New height of the element.
   */
  setSize(width, height) {
    if (isNumeric(width)) {
      this._element.style.width = width + UNIT;
    }
    if (isNumeric(height)) {
      this._element.style.height = height + UNIT;
    }
  }
  /**
   * Getter for the element position.
   *
   * @returns {object} Object contains height and width of the element.
   */
  getSize() {
    return {
      width: this._element.style.width ? parseInt(this._element.style.width, 10) : 0,
      height: this._element.style.height ? parseInt(this._element.style.height, 10) : 0
    };
  }
  /**
   * Setter for the element offset. Offset means marginTop and marginLeft of the element.
   *
   * @param {number} top New margin top of the element.
   * @param {number} inlineOffset New margin left/right (depends on LTR/RTL document mode) of the element.
   */
  setOffset(top2, inlineOffset) {
    if (isNumeric(top2)) {
      this._element.style.marginTop = top2 + UNIT;
    }
    if (isNumeric(inlineOffset)) {
      this._element.style[`margin${toUpperCaseFirst(this.inlineProperty)}`] = inlineOffset + UNIT;
    }
  }
  /**
   * Getter for the element offset.
   *
   * @returns {object} Object contains top and left offset of the element.
   */
  getOffset() {
    const style = this._element.style;
    const inlineProp = `margin${toUpperCaseFirst(this.inlineProperty)}`;
    return {
      top: style.marginTop ? parseInt(style.marginTop, 10) : 0,
      start: style[inlineProp] ? parseInt(style[inlineProp], 10) : 0
    };
  }
};
var base_default3 = BaseUI2;

// node_modules/handsontable/plugins/manualColumnMove/ui/backlight.mjs
var CSS_CLASSNAME = "ht__manualColumnMove--backlight";
var BacklightUI = class extends base_default3 {
  /**
   * Custom className on build process.
   */
  build() {
    super.build();
    addClass(this._element, CSS_CLASSNAME);
  }
};
var backlight_default = BacklightUI;

// node_modules/handsontable/plugins/manualColumnMove/ui/guideline.mjs
var CSS_CLASSNAME2 = "ht__manualColumnMove--guideline";
var GuidelineUI = class extends base_default3 {
  /**
   * Custom className on build process.
   */
  build() {
    super.build();
    addClass(this._element, CSS_CLASSNAME2);
  }
};
var guideline_default = GuidelineUI;

// node_modules/handsontable/plugins/manualColumnMove/manualColumnMove.mjs
function _classPrivateMethodInitSpec33(e, a) {
  _checkPrivateRedeclaration40(e, a), a.add(e);
}
function _classPrivateFieldInitSpec26(e, t, a) {
  _checkPrivateRedeclaration40(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration40(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldSet24(s, a, r) {
  return s.set(_assertClassBrand40(s, a), r), r;
}
function _classPrivateFieldGet26(s, a) {
  return s.get(_assertClassBrand40(s, a));
}
function _assertClassBrand40(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
Hooks.getSingleton().register("beforeColumnMove");
Hooks.getSingleton().register("afterColumnMove");
var PLUGIN_KEY21 = "manualColumnMove";
var PLUGIN_PRIORITY20 = 120;
var CSS_PLUGIN = "ht__manualColumnMove";
var CSS_SHOW_UI = "show-ui";
var CSS_ON_MOVING = "on-moving--columns";
var CSS_AFTER_SELECTION = "after-selection--columns";
var _backlight = /* @__PURE__ */ new WeakMap();
var _guideline = /* @__PURE__ */ new WeakMap();
var _columnsToMove = /* @__PURE__ */ new WeakMap();
var _countCols = /* @__PURE__ */ new WeakMap();
var _pressed = /* @__PURE__ */ new WeakMap();
var _target = /* @__PURE__ */ new WeakMap();
var _cachedDropIndex = /* @__PURE__ */ new WeakMap();
var _hoveredColumn = /* @__PURE__ */ new WeakMap();
var _rootElementOffset = /* @__PURE__ */ new WeakMap();
var _hasRowHeaders = /* @__PURE__ */ new WeakMap();
var _fixedColumnsStart = /* @__PURE__ */ new WeakMap();
var _ManualColumnMove_brand = /* @__PURE__ */ new WeakSet();
var ManualColumnMove = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec33(this, _ManualColumnMove_brand);
    _classPrivateFieldInitSpec26(this, _backlight, new backlight_default(this.hot));
    _classPrivateFieldInitSpec26(this, _guideline, new guideline_default(this.hot));
    _classPrivateFieldInitSpec26(this, _columnsToMove, []);
    _classPrivateFieldInitSpec26(this, _countCols, 0);
    _classPrivateFieldInitSpec26(this, _pressed, false);
    _classPrivateFieldInitSpec26(this, _target, {});
    _classPrivateFieldInitSpec26(this, _cachedDropIndex, void 0);
    _classPrivateFieldInitSpec26(this, _hoveredColumn, void 0);
    _classPrivateFieldInitSpec26(this, _rootElementOffset, void 0);
    _classPrivateFieldInitSpec26(this, _hasRowHeaders, void 0);
    _classPrivateFieldInitSpec26(this, _fixedColumnsStart, void 0);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY21;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY20;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ManualColumnMove#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[PLUGIN_KEY21];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _this = this;
    if (this.enabled) {
      return;
    }
    this.addHook("beforeOnCellMouseDown", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _assertClassBrand40(_ManualColumnMove_brand, _this, _onBeforeOnCellMouseDown4).call(_this, ...args);
    });
    this.addHook("beforeOnCellMouseOver", function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _assertClassBrand40(_ManualColumnMove_brand, _this, _onBeforeOnCellMouseOver).call(_this, ...args);
    });
    this.addHook("afterScrollVertically", () => _assertClassBrand40(_ManualColumnMove_brand, this, _onAfterScrollVertically).call(this));
    this.addHook("afterLoadData", function() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return _assertClassBrand40(_ManualColumnMove_brand, _this, _onAfterLoadData6).call(_this, ...args);
    });
    this.buildPluginUI();
    this.registerEvents();
    addClass(this.hot.rootElement, CSS_PLUGIN);
    super.enablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`manualColumnMove`](@/api/options.md#manualcolumnmove)
   */
  updatePlugin() {
    this.disablePlugin();
    this.enablePlugin();
    this.moveBySettingsOrLoad();
    super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    removeClass(this.hot.rootElement, CSS_PLUGIN);
    this.unregisterEvents();
    _classPrivateFieldGet26(_backlight, this).destroy();
    _classPrivateFieldGet26(_guideline, this).destroy();
    super.disablePlugin();
  }
  /**
   * Moves a single column.
   *
   * @param {number} column Visual column index to be moved.
   * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
   * @fires Hooks#beforeColumnMove
   * @fires Hooks#afterColumnMove
   * @returns {boolean}
   */
  moveColumn(column, finalIndex) {
    return this.moveColumns([column], finalIndex);
  }
  /**
   * Moves a multiple columns.
   *
   * @param {Array} columns Array of visual column indexes to be moved.
   * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
   * @fires Hooks#beforeColumnMove
   * @fires Hooks#afterColumnMove
   * @returns {boolean}
   */
  moveColumns(columns, finalIndex) {
    const dropIndex = _classPrivateFieldGet26(_cachedDropIndex, this);
    const movePossible = this.isMovePossible(columns, finalIndex);
    const beforeMoveHook = this.hot.runHooks("beforeColumnMove", columns, finalIndex, dropIndex, movePossible);
    _classPrivateFieldSet24(_cachedDropIndex, this, void 0);
    if (beforeMoveHook === false) {
      return;
    }
    if (movePossible) {
      this.hot.columnIndexMapper.moveIndexes(columns, finalIndex);
    }
    const movePerformed = movePossible && this.isColumnOrderChanged(columns, finalIndex);
    this.hot.runHooks("afterColumnMove", columns, finalIndex, dropIndex, movePossible, movePerformed);
    return movePerformed;
  }
  /**
   * Drag a single column to drop index position.
   *
   * @param {number} column Visual column index to be dragged.
   * @param {number} dropIndex Visual column index, being a drop index for the moved columns. Points to where we are going to drop the moved elements.
   * To check visualization of drop index please take a look at [documentation](@/guides/columns/column-moving/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
   * @fires Hooks#beforeColumnMove
   * @fires Hooks#afterColumnMove
   * @returns {boolean}
   */
  dragColumn(column, dropIndex) {
    return this.dragColumns([column], dropIndex);
  }
  /**
   * Drag multiple columns to drop index position.
   *
   * @param {Array} columns Array of visual column indexes to be dragged.
   * @param {number} dropIndex Visual column index, being a drop index for the moved columns. Points to where we are going to drop the moved elements.
   * To check visualization of drop index please take a look at [documentation](@/guides/columns/column-moving/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
   * @fires Hooks#beforeColumnMove
   * @fires Hooks#afterColumnMove
   * @returns {boolean}
   */
  dragColumns(columns, dropIndex) {
    const finalIndex = this.countFinalIndex(columns, dropIndex);
    _classPrivateFieldSet24(_cachedDropIndex, this, dropIndex);
    return this.moveColumns(columns, finalIndex);
  }
  /**
   * Indicates if it's possible to move columns to the desired position. Some of the actions aren't
   * possible, i.e. You can’t move more than one element to the last position.
   *
   * @param {Array} movedColumns Array of visual column indexes to be moved.
   * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
   * @returns {boolean}
   */
  isMovePossible(movedColumns, finalIndex) {
    const length = this.hot.columnIndexMapper.getNotTrimmedIndexesLength();
    const tooHighDestinationIndex = movedColumns.length + finalIndex > length;
    const tooLowDestinationIndex = finalIndex < 0;
    const tooLowMovedColumnIndex = movedColumns.some((movedColumn) => movedColumn < 0);
    const tooHighMovedColumnIndex = movedColumns.some((movedColumn) => movedColumn >= length);
    if (tooHighDestinationIndex || tooLowDestinationIndex || tooLowMovedColumnIndex || tooHighMovedColumnIndex) {
      return false;
    }
    return true;
  }
  /**
   * Indicates if order of columns was changed.
   *
   * @private
   * @param {Array} movedColumns Array of visual column indexes to be moved.
   * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
   * @returns {boolean}
   */
  isColumnOrderChanged(movedColumns, finalIndex) {
    return movedColumns.some((column, nrOfMovedElement) => column - nrOfMovedElement !== finalIndex);
  }
  /**
   * Count the final column index from the drop index.
   *
   * @private
   * @param {Array} movedColumns Array of visual column indexes to be moved.
   * @param {number} dropIndex Visual column index, being a drop index for the moved columns.
   * @returns {number} Visual column index, being a start index for the moved columns.
   */
  countFinalIndex(movedColumns, dropIndex) {
    const numberOfColumnsLowerThanDropIndex = arrayReduce(movedColumns, (numberOfColumns, currentColumnIndex) => {
      if (currentColumnIndex < dropIndex) {
        numberOfColumns += 1;
      }
      return numberOfColumns;
    }, 0);
    return dropIndex - numberOfColumnsLowerThanDropIndex;
  }
  /**
   * Gets the sum of the widths of columns in the provided range.
   *
   * @private
   * @param {number} fromColumn Visual column index.
   * @param {number} toColumn Visual column index.
   * @returns {number}
   */
  getColumnsWidth(fromColumn, toColumn) {
    const columnMapper = this.hot.columnIndexMapper;
    let columnsWidth = 0;
    for (let visualColumnIndex = fromColumn; visualColumnIndex <= toColumn; visualColumnIndex += 1) {
      const renderableIndex = columnMapper.getRenderableFromVisualIndex(visualColumnIndex);
      if (visualColumnIndex < 0) {
        columnsWidth += this.hot.view._wt.wtViewport.getRowHeaderWidth() || 0;
      } else if (renderableIndex !== null) {
        columnsWidth += this.hot.view._wt.wtTable.getColumnWidth(renderableIndex) || 0;
      }
    }
    return columnsWidth;
  }
  /**
   * Loads initial settings when persistent state is saved or when plugin was initialized as an array.
   *
   * @private
   */
  moveBySettingsOrLoad() {
    const pluginSettings = this.hot.getSettings()[PLUGIN_KEY21];
    if (Array.isArray(pluginSettings)) {
      this.moveColumns(pluginSettings, 0);
    } else if (pluginSettings !== void 0) {
      const persistentState = this.persistentStateLoad();
      if (persistentState.length) {
        this.moveColumns(persistentState, 0);
      }
    }
  }
  /**
   * Checks if the provided column is in the fixedColumnsTop section.
   *
   * @private
   * @param {number} column Visual column index to check.
   * @returns {boolean}
   */
  isFixedColumnsStart(column) {
    return column < this.hot.getSettings().fixedColumnsStart;
  }
  /**
   * Saves the manual column positions to the persistent state (the {@link Options#persistentState} option has to be enabled).
   *
   * @private
   * @fires Hooks#persistentStateSave
   */
  persistentStateSave() {
    this.hot.runHooks("persistentStateSave", "manualColumnMove", this.hot.columnIndexMapper.getIndexesSequence());
  }
  /**
   * Loads the manual column positions from the persistent state (the {@link Options#persistentState} option has to be enabled).
   *
   * @private
   * @fires Hooks#persistentStateLoad
   * @returns {Array} Stored state.
   */
  persistentStateLoad() {
    const storedState = {};
    this.hot.runHooks("persistentStateLoad", "manualColumnMove", storedState);
    return storedState.value ? storedState.value : [];
  }
  /**
   * Prepares an array of indexes based on actual selection.
   *
   * @private
   * @param {number} start The start index.
   * @param {number} end The end index.
   * @returns {Array}
   */
  prepareColumnsToMoving(start, end) {
    const selectedColumns = [];
    rangeEach(start, end, (i) => {
      selectedColumns.push(i);
    });
    return selectedColumns;
  }
  /**
   * Update the UI visual position.
   *
   * @private
   */
  refreshPositions() {
    const firstVisible = this.hot.view.getFirstFullyVisibleColumn();
    if (this.isFixedColumnsStart(_classPrivateFieldGet26(_hoveredColumn, this)) && firstVisible > 0) {
      this.hot.scrollViewportTo({
        col: this.hot.columnIndexMapper.getNearestNotHiddenIndex(firstVisible - 1, -1)
      });
    }
    const wtTable = this.hot.view._wt.wtTable;
    const scrollableElement = this.hot.view._wt.wtOverlays.scrollableElement;
    const scrollStart = typeof scrollableElement.scrollX === "number" ? scrollableElement.scrollX : scrollableElement.scrollLeft;
    let tdOffsetStart = this.hot.view.THEAD.offsetLeft + this.getColumnsWidth(0, _classPrivateFieldGet26(_hoveredColumn, this) - 1);
    const hiderWidth = wtTable.hider.offsetWidth;
    const tbodyOffsetLeft = wtTable.TBODY.offsetLeft;
    const backlightElemMarginStart = _classPrivateFieldGet26(_backlight, this).getOffset().start;
    const backlightElemWidth = _classPrivateFieldGet26(_backlight, this).getSize().width;
    let rowHeaderWidth = 0;
    let mouseOffsetStart = 0;
    if (this.hot.isRtl()) {
      const rootWindow = this.hot.rootWindow;
      const containerWidth = outerWidth(this.hot.rootElement);
      const gridMostRightPos = rootWindow.innerWidth - _classPrivateFieldGet26(_rootElementOffset, this) - containerWidth;
      mouseOffsetStart = rootWindow.innerWidth - _classPrivateFieldGet26(_target, this).eventPageX - gridMostRightPos - (scrollableElement.scrollX === void 0 ? scrollStart : 0);
    } else {
      mouseOffsetStart = _classPrivateFieldGet26(_target, this).eventPageX - (_classPrivateFieldGet26(_rootElementOffset, this) - (scrollableElement.scrollX === void 0 ? scrollStart : 0));
    }
    if (_classPrivateFieldGet26(_hasRowHeaders, this)) {
      rowHeaderWidth = this.hot.view._wt.wtOverlays.inlineStartOverlay.clone.wtTable.getColumnHeader(-1).offsetWidth;
    }
    if (this.isFixedColumnsStart(_classPrivateFieldGet26(_hoveredColumn, this))) {
      tdOffsetStart += scrollStart;
    }
    tdOffsetStart += rowHeaderWidth;
    if (_classPrivateFieldGet26(_hoveredColumn, this) < 0) {
      if (_classPrivateFieldGet26(_fixedColumnsStart, this) > 0) {
        _classPrivateFieldGet26(_target, this).col = 0;
      } else {
        _classPrivateFieldGet26(_target, this).col = firstVisible > 0 ? firstVisible - 1 : firstVisible;
      }
    } else if (_classPrivateFieldGet26(_target, this).TD.offsetWidth / 2 + tdOffsetStart <= mouseOffsetStart) {
      const newCoordsCol = _classPrivateFieldGet26(_hoveredColumn, this) >= _classPrivateFieldGet26(_countCols, this) ? _classPrivateFieldGet26(_countCols, this) - 1 : _classPrivateFieldGet26(_hoveredColumn, this);
      _classPrivateFieldGet26(_target, this).col = newCoordsCol + 1;
      tdOffsetStart += _classPrivateFieldGet26(_target, this).TD.offsetWidth;
    } else {
      _classPrivateFieldGet26(_target, this).col = _classPrivateFieldGet26(_hoveredColumn, this);
    }
    let backlightStart = mouseOffsetStart;
    let guidelineStart = tdOffsetStart;
    if (mouseOffsetStart + backlightElemWidth + backlightElemMarginStart >= hiderWidth) {
      backlightStart = hiderWidth - backlightElemWidth - backlightElemMarginStart;
    } else if (mouseOffsetStart + backlightElemMarginStart < tbodyOffsetLeft + rowHeaderWidth) {
      backlightStart = tbodyOffsetLeft + rowHeaderWidth + Math.abs(backlightElemMarginStart);
    }
    if (tdOffsetStart >= hiderWidth - 1) {
      guidelineStart = hiderWidth - 1;
    } else if (guidelineStart === 0) {
      guidelineStart = 1;
    } else if (scrollableElement.scrollX !== void 0 && _classPrivateFieldGet26(_hoveredColumn, this) < _classPrivateFieldGet26(_fixedColumnsStart, this)) {
      guidelineStart -= _classPrivateFieldGet26(_rootElementOffset, this) <= scrollableElement.scrollX ? _classPrivateFieldGet26(_rootElementOffset, this) : 0;
    }
    _classPrivateFieldGet26(_backlight, this).setPosition(null, backlightStart);
    _classPrivateFieldGet26(_guideline, this).setPosition(null, guidelineStart);
  }
  /**
   * Binds the events used by the plugin.
   *
   * @private
   */
  registerEvents() {
    const {
      documentElement
    } = this.hot.rootDocument;
    this.eventManager.addEventListener(documentElement, "mousemove", (event) => _assertClassBrand40(_ManualColumnMove_brand, this, _onMouseMove2).call(this, event));
    this.eventManager.addEventListener(documentElement, "mouseup", () => _assertClassBrand40(_ManualColumnMove_brand, this, _onMouseUp3).call(this));
  }
  /**
   * Unbinds the events used by the plugin.
   *
   * @private
   */
  unregisterEvents() {
    this.eventManager.clear();
  }
  /**
   * Builds the plugin's UI.
   *
   * @private
   */
  buildPluginUI() {
    _classPrivateFieldGet26(_backlight, this).build();
    _classPrivateFieldGet26(_guideline, this).build();
  }
  /**
   * Callback for the `afterLoadData` hook.
   *
   * @private
   */
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    _classPrivateFieldGet26(_backlight, this).destroy();
    _classPrivateFieldGet26(_guideline, this).destroy();
    super.destroy();
  }
};
function _onBeforeOnCellMouseDown4(event, coords, TD, controller) {
  const wtTable = this.hot.view._wt.wtTable;
  const isHeaderSelection = this.hot.selection.isSelectedByColumnHeader();
  const selection = this.hot.getSelectedRangeLast();
  const isSortingElement = hasClass(event.target, "sortAction");
  if (!selection || !isHeaderSelection || _classPrivateFieldGet26(_pressed, this) || event.button !== 0 || isSortingElement) {
    _classPrivateFieldSet24(_pressed, this, false);
    _classPrivateFieldGet26(_columnsToMove, this).length = 0;
    removeClass(this.hot.rootElement, [CSS_ON_MOVING, CSS_SHOW_UI]);
    return;
  }
  const guidelineIsNotReady = _classPrivateFieldGet26(_guideline, this).isBuilt() && !_classPrivateFieldGet26(_guideline, this).isAppended();
  const backlightIsNotReady = _classPrivateFieldGet26(_backlight, this).isBuilt() && !_classPrivateFieldGet26(_backlight, this).isAppended();
  if (guidelineIsNotReady && backlightIsNotReady) {
    _classPrivateFieldGet26(_guideline, this).appendTo(wtTable.hider);
    _classPrivateFieldGet26(_backlight, this).appendTo(wtTable.hider);
  }
  const {
    from,
    to
  } = selection;
  const start = Math.min(from.col, to.col);
  const end = Math.max(from.col, to.col);
  if (coords.row < 0 && coords.col >= start && coords.col <= end) {
    controller.column = true;
    _classPrivateFieldSet24(_pressed, this, true);
    const eventOffsetX = TD.firstChild ? offsetRelativeTo(event, TD.firstChild).x : event.offsetX;
    _classPrivateFieldGet26(_target, this).eventPageX = event.pageX;
    _classPrivateFieldSet24(_hoveredColumn, this, coords.col);
    _classPrivateFieldGet26(_target, this).TD = TD;
    _classPrivateFieldGet26(_target, this).col = coords.col;
    _classPrivateFieldSet24(_columnsToMove, this, this.prepareColumnsToMoving(start, end));
    _classPrivateFieldSet24(_hasRowHeaders, this, !!this.hot.getSettings().rowHeaders);
    _classPrivateFieldSet24(_countCols, this, this.hot.countCols());
    _classPrivateFieldSet24(_fixedColumnsStart, this, this.hot.getSettings().fixedColumnsStart);
    _classPrivateFieldSet24(_rootElementOffset, this, offset(this.hot.rootElement).left);
    const countColumnsFrom = _classPrivateFieldGet26(_hasRowHeaders, this) ? -1 : 0;
    const topPos = wtTable.holder.scrollTop + wtTable.getColumnHeaderHeight(0) + 1;
    const fixedColumnsStart = coords.col < _classPrivateFieldGet26(_fixedColumnsStart, this);
    const horizontalScrollPosition = this.hot.view._wt.wtOverlays.inlineStartOverlay.getOverlayOffset();
    const offsetX = Math.abs(eventOffsetX - (this.hot.isRtl() ? TD.offsetWidth : 0));
    const inlineOffset = this.getColumnsWidth(start, coords.col - 1) + offsetX;
    const inlinePos = this.getColumnsWidth(countColumnsFrom, start - 1) + (fixedColumnsStart ? horizontalScrollPosition : 0) + inlineOffset;
    _classPrivateFieldGet26(_backlight, this).setPosition(topPos, inlinePos);
    _classPrivateFieldGet26(_backlight, this).setSize(this.getColumnsWidth(start, end), wtTable.hider.offsetHeight - topPos);
    _classPrivateFieldGet26(_backlight, this).setOffset(null, -inlineOffset);
    addClass(this.hot.rootElement, CSS_ON_MOVING);
  } else {
    removeClass(this.hot.rootElement, CSS_AFTER_SELECTION);
    _classPrivateFieldSet24(_pressed, this, false);
    _classPrivateFieldGet26(_columnsToMove, this).length = 0;
  }
}
function _onMouseMove2(event) {
  if (!_classPrivateFieldGet26(_pressed, this)) {
    return;
  }
  _classPrivateFieldGet26(_target, this).eventPageX = event.pageX;
  this.refreshPositions();
}
function _onBeforeOnCellMouseOver(event, coords, TD, controller) {
  const selectedRange = this.hot.getSelectedRangeLast();
  if (!selectedRange || !_classPrivateFieldGet26(_pressed, this)) {
    return;
  }
  if (_classPrivateFieldGet26(_columnsToMove, this).indexOf(coords.col) > -1) {
    removeClass(this.hot.rootElement, CSS_SHOW_UI);
  } else {
    addClass(this.hot.rootElement, CSS_SHOW_UI);
  }
  controller.row = true;
  controller.column = true;
  controller.cell = true;
  _classPrivateFieldSet24(_hoveredColumn, this, coords.col);
  _classPrivateFieldGet26(_target, this).TD = TD;
}
function _onMouseUp3() {
  const target = _classPrivateFieldGet26(_target, this).col;
  const columnsLen = _classPrivateFieldGet26(_columnsToMove, this).length;
  _classPrivateFieldSet24(_hoveredColumn, this, void 0);
  _classPrivateFieldSet24(_pressed, this, false);
  removeClass(this.hot.rootElement, [CSS_ON_MOVING, CSS_SHOW_UI, CSS_AFTER_SELECTION]);
  if (this.hot.selection.isSelectedByColumnHeader()) {
    addClass(this.hot.rootElement, CSS_AFTER_SELECTION);
  }
  if (columnsLen < 1 || target === void 0) {
    return;
  }
  const firstMovedVisualColumn = _classPrivateFieldGet26(_columnsToMove, this)[0];
  const firstMovedPhysicalColumn = this.hot.toPhysicalColumn(firstMovedVisualColumn);
  const movePerformed = this.dragColumns(_classPrivateFieldGet26(_columnsToMove, this), target);
  _classPrivateFieldGet26(_columnsToMove, this).length = 0;
  if (movePerformed === true) {
    this.persistentStateSave();
    this.hot.render();
    this.hot.view.adjustElementsSize();
    const selectionStart = this.hot.toVisualColumn(firstMovedPhysicalColumn);
    const selectionEnd = selectionStart + columnsLen - 1;
    this.hot.selectColumns(selectionStart, selectionEnd);
  }
}
function _onAfterScrollVertically() {
  const wtTable = this.hot.view._wt.wtTable;
  const headerHeight = wtTable.getColumnHeaderHeight(0) + 1;
  const scrollTop = wtTable.holder.scrollTop;
  const posTop = headerHeight + scrollTop;
  _classPrivateFieldGet26(_backlight, this).setPosition(posTop);
  _classPrivateFieldGet26(_backlight, this).setSize(null, wtTable.hider.offsetHeight - posTop);
}
function _onAfterLoadData6() {
  this.moveBySettingsOrLoad();
}

// node_modules/handsontable/plugins/manualColumnResize/manualColumnResize.mjs
function _classPrivateMethodInitSpec34(e, a) {
  _checkPrivateRedeclaration41(e, a), a.add(e);
}
function _classPrivateFieldInitSpec27(e, t, a) {
  _checkPrivateRedeclaration41(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration41(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldSet25(s, a, r) {
  return s.set(_assertClassBrand41(s, a), r), r;
}
function _classPrivateFieldGet27(s, a) {
  return s.get(_assertClassBrand41(s, a));
}
function _assertClassBrand41(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var PLUGIN_KEY22 = "manualColumnResize";
var PLUGIN_PRIORITY21 = 130;
var PERSISTENT_STATE_KEY = "manualColumnWidths";
var _currentTH = /* @__PURE__ */ new WeakMap();
var _currentCol = /* @__PURE__ */ new WeakMap();
var _selectedCols = /* @__PURE__ */ new WeakMap();
var _currentWidth = /* @__PURE__ */ new WeakMap();
var _newSize = /* @__PURE__ */ new WeakMap();
var _startY = /* @__PURE__ */ new WeakMap();
var _startWidth = /* @__PURE__ */ new WeakMap();
var _startOffset = /* @__PURE__ */ new WeakMap();
var _handle = /* @__PURE__ */ new WeakMap();
var _guide = /* @__PURE__ */ new WeakMap();
var _pressed2 = /* @__PURE__ */ new WeakMap();
var _isTriggeredByRMB = /* @__PURE__ */ new WeakMap();
var _dblclick = /* @__PURE__ */ new WeakMap();
var _autoresizeTimeout = /* @__PURE__ */ new WeakMap();
var _columnWidthsMap = /* @__PURE__ */ new WeakMap();
var _config = /* @__PURE__ */ new WeakMap();
var _ManualColumnResize_brand = /* @__PURE__ */ new WeakSet();
var ManualColumnResize = class extends BasePlugin {
  static get PLUGIN_KEY() {
    return PLUGIN_KEY22;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY21;
  }
  /**
   * @type {HTMLTableHeaderCellElement}
   */
  constructor(hotInstance) {
    super(hotInstance);
    _classPrivateMethodInitSpec34(this, _ManualColumnResize_brand);
    _classPrivateFieldInitSpec27(this, _currentTH, null);
    _classPrivateFieldInitSpec27(this, _currentCol, null);
    _classPrivateFieldInitSpec27(this, _selectedCols, []);
    _classPrivateFieldInitSpec27(this, _currentWidth, null);
    _classPrivateFieldInitSpec27(this, _newSize, null);
    _classPrivateFieldInitSpec27(this, _startY, null);
    _classPrivateFieldInitSpec27(this, _startWidth, null);
    _classPrivateFieldInitSpec27(this, _startOffset, null);
    _classPrivateFieldInitSpec27(this, _handle, this.hot.rootDocument.createElement("DIV"));
    _classPrivateFieldInitSpec27(this, _guide, this.hot.rootDocument.createElement("DIV"));
    _classPrivateFieldInitSpec27(this, _pressed2, null);
    _classPrivateFieldInitSpec27(this, _isTriggeredByRMB, false);
    _classPrivateFieldInitSpec27(this, _dblclick, 0);
    _classPrivateFieldInitSpec27(this, _autoresizeTimeout, null);
    _classPrivateFieldInitSpec27(this, _columnWidthsMap, void 0);
    _classPrivateFieldInitSpec27(this, _config, void 0);
    addClass(_classPrivateFieldGet27(_handle, this), "manualColumnResizer");
    addClass(_classPrivateFieldGet27(_guide, this), "manualColumnResizerGuide");
  }
  /**
   * @private
   * @returns {string}
   */
  get inlineDir() {
    return this.hot.isRtl() ? "right" : "left";
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ManualColumnResize#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return this.hot.getSettings()[PLUGIN_KEY22];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _this = this;
    if (this.enabled) {
      return;
    }
    _classPrivateFieldSet25(_columnWidthsMap, this, new PhysicalIndexToValueMap());
    _classPrivateFieldGet27(_columnWidthsMap, this).addLocalHook("init", () => _assertClassBrand41(_ManualColumnResize_brand, this, _onMapInit3).call(this));
    this.hot.columnIndexMapper.registerMap(this.pluginName, _classPrivateFieldGet27(_columnWidthsMap, this));
    this.addHook("modifyColWidth", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _assertClassBrand41(_ManualColumnResize_brand, _this, _onModifyColWidth2).call(_this, ...args);
    }, 1);
    this.addHook("beforeStretchingColumnWidth", function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _assertClassBrand41(_ManualColumnResize_brand, _this, _onBeforeStretchingColumnWidth).call(_this, ...args);
    }, 1);
    this.addHook("beforeColumnResize", function() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return _assertClassBrand41(_ManualColumnResize_brand, _this, _onBeforeColumnResize2).call(_this, ...args);
    });
    this.bindEvents();
    super.enablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`manualColumnResize`](@/api/options.md#manualcolumnresize)
   */
  updatePlugin() {
    this.disablePlugin();
    this.enablePlugin();
    super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    _classPrivateFieldSet25(_config, this, _classPrivateFieldGet27(_columnWidthsMap, this).getValues());
    this.hot.columnIndexMapper.unregisterMap(this.pluginName);
    super.disablePlugin();
  }
  /**
   * Saves the current sizes using the persistentState plugin (the {@link Options#persistentState} option has to be enabled).
   *
   * @fires Hooks#persistentStateSave
   */
  saveManualColumnWidths() {
    this.hot.runHooks("persistentStateSave", PERSISTENT_STATE_KEY, _classPrivateFieldGet27(_columnWidthsMap, this).getValues());
  }
  /**
   * Loads the previously saved sizes using the persistentState plugin (the {@link Options#persistentState} option has to be enabled).
   *
   * @returns {Array}
   * @fires Hooks#persistentStateLoad
   */
  loadManualColumnWidths() {
    const storedState = {};
    this.hot.runHooks("persistentStateLoad", PERSISTENT_STATE_KEY, storedState);
    return storedState.value;
  }
  /**
   * Sets the new width for specified column index.
   *
   * @param {number} column Visual column index.
   * @param {number} width Column width (no less than 20px).
   * @returns {number} Returns new width.
   */
  setManualSize(column, width) {
    const newWidth = Math.max(width, 20);
    const physicalColumn = this.hot.toPhysicalColumn(column);
    _classPrivateFieldGet27(_columnWidthsMap, this).setValueAtIndex(physicalColumn, newWidth);
    return newWidth;
  }
  /**
   * Clears the cache for the specified column index.
   *
   * @param {number} column Visual column index.
   */
  clearManualSize(column) {
    const physicalColumn = this.hot.toPhysicalColumn(column);
    _classPrivateFieldGet27(_columnWidthsMap, this).setValueAtIndex(physicalColumn, null);
  }
  /**
   * Set the resize handle position.
   *
   * @private
   * @param {HTMLCellElement} TH TH HTML element.
   */
  setupHandlePosition(TH) {
    if (!TH.parentNode) {
      return;
    }
    _classPrivateFieldSet25(_currentTH, this, TH);
    const {
      _wt: wt
    } = this.hot.view;
    const cellCoords = wt.wtTable.getCoords(_classPrivateFieldGet27(_currentTH, this));
    const col = cellCoords.col;
    if (col < 0) {
      return;
    }
    const headerHeight = outerHeight(_classPrivateFieldGet27(_currentTH, this));
    const box = _classPrivateFieldGet27(_currentTH, this).getBoundingClientRect();
    const fixedColumn = col < wt.getSetting("fixedColumnsStart");
    let relativeHeaderPosition;
    if (fixedColumn) {
      relativeHeaderPosition = wt.wtOverlays.topInlineStartCornerOverlay.getRelativeCellPosition(_classPrivateFieldGet27(_currentTH, this), cellCoords.row, cellCoords.col);
    }
    if (!relativeHeaderPosition) {
      relativeHeaderPosition = wt.wtOverlays.topOverlay.getRelativeCellPosition(_classPrivateFieldGet27(_currentTH, this), cellCoords.row, cellCoords.col);
    }
    _classPrivateFieldSet25(_currentCol, this, this.hot.columnIndexMapper.getVisualFromRenderableIndex(col));
    _classPrivateFieldSet25(_selectedCols, this, []);
    const isFullColumnSelected = this.hot.selection.isSelectedByCorner() || this.hot.selection.isSelectedByColumnHeader();
    if (this.hot.selection.isSelected() && isFullColumnSelected) {
      const selectionRanges = this.hot.getSelectedRange();
      arrayEach(selectionRanges, (selectionRange) => {
        const fromColumn = selectionRange.getTopStartCorner().col;
        const toColumn = selectionRange.getBottomEndCorner().col;
        rangeEach(fromColumn, toColumn, (columnIndex) => {
          if (!_classPrivateFieldGet27(_selectedCols, this).includes(columnIndex)) {
            _classPrivateFieldGet27(_selectedCols, this).push(columnIndex);
          }
        });
      });
    }
    if (!_classPrivateFieldGet27(_selectedCols, this).includes(_classPrivateFieldGet27(_currentCol, this))) {
      _classPrivateFieldSet25(_selectedCols, this, [_classPrivateFieldGet27(_currentCol, this)]);
    }
    _classPrivateFieldSet25(_startOffset, this, relativeHeaderPosition.start - 6);
    _classPrivateFieldSet25(_startWidth, this, parseInt(box.width, 10));
    _classPrivateFieldGet27(_handle, this).style.top = `${relativeHeaderPosition.top}px`;
    _classPrivateFieldGet27(_handle, this).style[this.inlineDir] = `${_classPrivateFieldGet27(_startOffset, this) + _classPrivateFieldGet27(_startWidth, this)}px`;
    _classPrivateFieldGet27(_handle, this).style.height = `${headerHeight}px`;
    this.hot.rootElement.appendChild(_classPrivateFieldGet27(_handle, this));
  }
  /**
   * Refresh the resize handle position.
   *
   * @private
   */
  refreshHandlePosition() {
    _classPrivateFieldGet27(_handle, this).style[this.inlineDir] = `${_classPrivateFieldGet27(_startOffset, this) + _classPrivateFieldGet27(_currentWidth, this)}px`;
  }
  /**
   * Sets the resize guide position.
   *
   * @private
   */
  setupGuidePosition() {
    const handleHeight = parseInt(outerHeight(_classPrivateFieldGet27(_handle, this)), 10);
    const handleBottomPosition = parseInt(_classPrivateFieldGet27(_handle, this).style.top, 10) + handleHeight;
    const tableHeight = this.hot.view.getTableHeight();
    addClass(_classPrivateFieldGet27(_handle, this), "active");
    addClass(_classPrivateFieldGet27(_guide, this), "active");
    _classPrivateFieldGet27(_guide, this).style.top = `${handleBottomPosition}px`;
    this.refreshGuidePosition();
    _classPrivateFieldGet27(_guide, this).style.height = `${tableHeight - handleHeight}px`;
    this.hot.rootElement.appendChild(_classPrivateFieldGet27(_guide, this));
  }
  /**
   * Refresh the resize guide position.
   *
   * @private
   */
  refreshGuidePosition() {
    _classPrivateFieldGet27(_guide, this).style[this.inlineDir] = _classPrivateFieldGet27(_handle, this).style[this.inlineDir];
  }
  /**
   * Hides both the resize handle and resize guide.
   *
   * @private
   */
  hideHandleAndGuide() {
    removeClass(_classPrivateFieldGet27(_handle, this), "active");
    removeClass(_classPrivateFieldGet27(_guide, this), "active");
  }
  /**
   * Checks if provided element is considered a column header.
   *
   * @private
   * @param {HTMLElement} element HTML element.
   * @returns {boolean}
   */
  checkIfColumnHeader(element) {
    const thead = closest(element, ["THEAD"], this.hot.rootElement);
    const {
      topOverlay,
      topInlineStartCornerOverlay
    } = this.hot.view._wt.wtOverlays;
    return [topOverlay.clone.wtTable.THEAD, topInlineStartCornerOverlay.clone.wtTable.THEAD].includes(thead);
  }
  /**
   * Gets the TH element from the provided element.
   *
   * @private
   * @param {HTMLElement} element HTML element.
   * @returns {HTMLElement}
   */
  getClosestTHParent(element) {
    if (element.tagName !== "TABLE") {
      if (element.tagName === "TH") {
        return element;
      }
      return this.getClosestTHParent(element.parentNode);
    }
    return null;
  }
  /**
   * 'mouseover' event callback - set the handle position.
   *
   * @param {MouseEvent} event The mouse event.
   */
  /**
   * Auto-size row after doubleclick - callback.
   *
   * @private
   * @fires Hooks#beforeColumnResize
   * @fires Hooks#afterColumnResize
   */
  afterMouseDownTimeout() {
    const render = () => {
      this.hot.render();
      this.hot.view.adjustElementsSize();
    };
    const resize = (column, forceRender) => {
      const hookNewSize = this.hot.runHooks("beforeColumnResize", _classPrivateFieldGet27(_newSize, this), column, true);
      if (hookNewSize !== void 0) {
        _classPrivateFieldSet25(_newSize, this, hookNewSize);
      }
      this.setManualSize(column, _classPrivateFieldGet27(_newSize, this));
      this.saveManualColumnWidths();
      this.hot.runHooks("afterColumnResize", _classPrivateFieldGet27(_newSize, this), column, true);
      if (forceRender) {
        render();
      }
    };
    if (_classPrivateFieldGet27(_dblclick, this) >= 2) {
      const selectedColsLength = _classPrivateFieldGet27(_selectedCols, this).length;
      if (selectedColsLength > 1) {
        arrayEach(_classPrivateFieldGet27(_selectedCols, this), (selectedCol) => {
          resize(selectedCol);
        });
        render();
      } else {
        arrayEach(_classPrivateFieldGet27(_selectedCols, this), (selectedCol) => {
          resize(selectedCol, true);
        });
      }
    }
    _classPrivateFieldSet25(_dblclick, this, 0);
    _classPrivateFieldSet25(_autoresizeTimeout, this, null);
  }
  /**
   * 'mousedown' event callback.
   *
   * @param {MouseEvent} event The mouse event.
   */
  /**
   * Binds the mouse events.
   *
   * @private
   */
  bindEvents() {
    const {
      rootWindow,
      rootElement
    } = this.hot;
    this.eventManager.addEventListener(rootElement, "mouseover", (e) => _assertClassBrand41(_ManualColumnResize_brand, this, _onMouseOver2).call(this, e));
    this.eventManager.addEventListener(rootElement, "mousedown", (e) => _assertClassBrand41(_ManualColumnResize_brand, this, _onMouseDown2).call(this, e));
    this.eventManager.addEventListener(rootWindow, "mousemove", (e) => _assertClassBrand41(_ManualColumnResize_brand, this, _onMouseMove3).call(this, e));
    this.eventManager.addEventListener(rootWindow, "mouseup", () => _assertClassBrand41(_ManualColumnResize_brand, this, _onMouseUp4).call(this));
    this.eventManager.addEventListener(_classPrivateFieldGet27(_handle, this), "contextmenu", () => _assertClassBrand41(_ManualColumnResize_brand, this, _onContextMenu).call(this));
  }
  /**
   * Modifies the provided column width, based on the plugin settings.
   *
   * @param {number} width Column width.
   * @param {number} column Visual column index.
   * @returns {number}
   */
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
};
function _onMapInit3() {
  const initialSetting = this.hot.getSettings()[PLUGIN_KEY22];
  const loadedManualColumnWidths = this.loadManualColumnWidths();
  if (typeof loadedManualColumnWidths !== "undefined") {
    this.hot.batchExecution(() => {
      loadedManualColumnWidths.forEach((width, physicalIndex) => {
        _classPrivateFieldGet27(_columnWidthsMap, this).setValueAtIndex(physicalIndex, width);
      });
    }, true);
  } else if (Array.isArray(initialSetting)) {
    this.hot.batchExecution(() => {
      initialSetting.forEach((width, physicalIndex) => {
        _classPrivateFieldGet27(_columnWidthsMap, this).setValueAtIndex(physicalIndex, width);
      });
    }, true);
    _classPrivateFieldSet25(_config, this, initialSetting);
  } else if (initialSetting === true && Array.isArray(_classPrivateFieldGet27(_config, this))) {
    this.hot.batchExecution(() => {
      _classPrivateFieldGet27(_config, this).forEach((width, physicalIndex) => {
        _classPrivateFieldGet27(_columnWidthsMap, this).setValueAtIndex(physicalIndex, width);
      });
    }, true);
  }
}
function _onMouseOver2(event) {
  if (isDetached(event.target)) {
    return;
  }
  if (_classPrivateFieldGet27(_isTriggeredByRMB, this) === true) {
    return;
  }
  if (this.checkIfColumnHeader(event.target)) {
    const th = this.getClosestTHParent(event.target);
    if (!th) {
      return;
    }
    const colspan = th.getAttribute("colspan");
    if (th && (colspan === null || colspan === "1")) {
      if (!_classPrivateFieldGet27(_pressed2, this)) {
        this.setupHandlePosition(th);
      }
    }
  }
}
function _onMouseDown2(event) {
  if (event.target.parentNode !== this.hot.rootElement) {
    return;
  }
  if (hasClass(event.target, "manualColumnResizer")) {
    this.setupHandlePosition(_classPrivateFieldGet27(_currentTH, this));
    this.setupGuidePosition();
    _classPrivateFieldSet25(_pressed2, this, true);
    if (_classPrivateFieldGet27(_autoresizeTimeout, this) === null) {
      _classPrivateFieldSet25(_autoresizeTimeout, this, setTimeout(() => this.afterMouseDownTimeout(), 500));
      this.hot._registerTimeout(_classPrivateFieldGet27(_autoresizeTimeout, this));
    }
    _classPrivateFieldSet25(_dblclick, this, _classPrivateFieldGet27(_dblclick, this) + 1);
    this.startX = event.pageX;
    _classPrivateFieldSet25(_newSize, this, _classPrivateFieldGet27(_startWidth, this));
  }
}
function _onMouseMove3(event) {
  if (_classPrivateFieldGet27(_pressed2, this)) {
    const change = (event.pageX - this.startX) * this.hot.getDirectionFactor();
    _classPrivateFieldSet25(_currentWidth, this, _classPrivateFieldGet27(_startWidth, this) + change);
    arrayEach(_classPrivateFieldGet27(_selectedCols, this), (selectedCol) => {
      _classPrivateFieldSet25(_newSize, this, this.setManualSize(selectedCol, _classPrivateFieldGet27(_currentWidth, this)));
    });
    this.refreshHandlePosition();
    this.refreshGuidePosition();
  }
}
function _onMouseUp4() {
  const render = () => {
    this.hot.render();
    this.hot.view.adjustElementsSize();
  };
  const resize = (column, forceRender) => {
    this.hot.runHooks("beforeColumnResize", _classPrivateFieldGet27(_newSize, this), column, false);
    if (forceRender) {
      render();
    }
    this.saveManualColumnWidths();
    this.hot.runHooks("afterColumnResize", _classPrivateFieldGet27(_newSize, this), column, false);
  };
  if (_classPrivateFieldGet27(_pressed2, this)) {
    this.hideHandleAndGuide();
    _classPrivateFieldSet25(_pressed2, this, false);
    if (_classPrivateFieldGet27(_newSize, this) !== _classPrivateFieldGet27(_startWidth, this)) {
      const selectedColsLength = _classPrivateFieldGet27(_selectedCols, this).length;
      if (selectedColsLength > 1) {
        arrayEach(_classPrivateFieldGet27(_selectedCols, this), (selectedCol) => {
          resize(selectedCol);
        });
        render();
      } else {
        arrayEach(_classPrivateFieldGet27(_selectedCols, this), (selectedCol) => {
          resize(selectedCol, true);
        });
      }
    }
    this.setupHandlePosition(_classPrivateFieldGet27(_currentTH, this));
  }
}
function _onContextMenu() {
  this.hideHandleAndGuide();
  this.hot.rootElement.removeChild(_classPrivateFieldGet27(_handle, this));
  this.hot.rootElement.removeChild(_classPrivateFieldGet27(_guide, this));
  _classPrivateFieldSet25(_pressed2, this, false);
  _classPrivateFieldSet25(_isTriggeredByRMB, this, true);
  this.hot._registerImmediate(() => {
    _classPrivateFieldSet25(_isTriggeredByRMB, this, false);
  });
}
function _onModifyColWidth2(width, column) {
  let newWidth = width;
  if (this.enabled) {
    const physicalColumn = this.hot.toPhysicalColumn(column);
    const columnWidth = _classPrivateFieldGet27(_columnWidthsMap, this).getValueAtIndex(physicalColumn);
    if (this.hot.getSettings()[PLUGIN_KEY22] && columnWidth) {
      newWidth = columnWidth;
    }
  }
  return newWidth;
}
function _onBeforeStretchingColumnWidth(stretchedWidth, column) {
  const width = _classPrivateFieldGet27(_columnWidthsMap, this).getValueAtIndex(this.hot.toPhysicalColumn(column));
  if (typeof width === "number") {
    return width;
  }
  return stretchedWidth;
}
function _onBeforeColumnResize2() {
  this.hot.view._wt.wtViewport.resetHasOversizedColumnHeadersMarked();
}

// node_modules/handsontable/plugins/manualRowMove/ui/_base.mjs
function _defineProperty41(e, r, t) {
  return (r = _toPropertyKey41(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey41(t) {
  var i = _toPrimitive41(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive41(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var STATE_INITIALIZED2 = 0;
var STATE_BUILT3 = 1;
var STATE_APPENDED2 = 2;
var UNIT2 = "px";
var BaseUI3 = class {
  constructor(hotInstance) {
    _defineProperty41(this, "hot", void 0);
    _defineProperty41(this, "_element", null);
    _defineProperty41(this, "state", STATE_INITIALIZED2);
    this.hot = hotInstance;
  }
  /**
   * Add created UI elements to table.
   *
   * @param {HTMLElement} wrapper Element which are parent for our UI element.
   */
  appendTo(wrapper) {
    wrapper.appendChild(this._element);
    this.state = STATE_APPENDED2;
  }
  /**
   * Method for create UI element. Only create, without append to table.
   */
  build() {
    if (this.state !== STATE_INITIALIZED2) {
      return;
    }
    this._element = this.hot.rootDocument.createElement("div");
    this.state = STATE_BUILT3;
  }
  /**
   * Method for remove UI element.
   */
  destroy() {
    if (this.isAppended()) {
      this._element.parentElement.removeChild(this._element);
    }
    this._element = null;
    this.state = STATE_INITIALIZED2;
  }
  /**
   * Check if UI element are appended.
   *
   * @returns {boolean}
   */
  isAppended() {
    return this.state === STATE_APPENDED2;
  }
  /**
   * Check if UI element are built.
   *
   * @returns {boolean}
   */
  isBuilt() {
    return this.state >= STATE_BUILT3;
  }
  /**
   * Setter for position.
   *
   * @param {number} top New top position of the element.
   * @param {number} left New left position of the element.
   */
  setPosition(top2, left2) {
    if (top2 !== void 0) {
      this._element.style.top = top2 + UNIT2;
    }
    if (left2 !== void 0) {
      this._element.style.left = left2 + UNIT2;
    }
  }
  /**
   * Getter for the element position.
   *
   * @returns {object} Object contains left and top position of the element.
   */
  getPosition() {
    return {
      top: this._element.style.top ? parseInt(this._element.style.top, 10) : 0,
      left: this._element.style.left ? parseInt(this._element.style.left, 10) : 0
    };
  }
  /**
   * Setter for the element size.
   *
   * @param {number} width New width of the element.
   * @param {number} height New height of the element.
   */
  setSize(width, height) {
    if (width) {
      this._element.style.width = width + UNIT2;
    }
    if (height) {
      this._element.style.height = height + UNIT2;
    }
  }
  /**
   * Getter for the element position.
   *
   * @returns {object} Object contains height and width of the element.
   */
  getSize() {
    return {
      width: this._element.style.width ? parseInt(this._element.style.width, 10) : 0,
      height: this._element.style.height ? parseInt(this._element.style.height, 10) : 0
    };
  }
  /**
   * Setter for the element offset. Offset means marginTop and marginLeft of the element.
   *
   * @param {number} top New margin top of the element.
   * @param {number} left New margin left of the element.
   */
  setOffset(top2, left2) {
    if (top2) {
      this._element.style.marginTop = top2 + UNIT2;
    }
    if (left2) {
      this._element.style.marginLeft = left2 + UNIT2;
    }
  }
  /**
   * Getter for the element offset.
   *
   * @returns {object} Object contains top and left offset of the element.
   */
  getOffset() {
    return {
      top: this._element.style.marginTop ? parseInt(this._element.style.marginTop, 10) : 0,
      left: this._element.style.marginLeft ? parseInt(this._element.style.marginLeft, 10) : 0
    };
  }
};
var base_default4 = BaseUI3;

// node_modules/handsontable/plugins/manualRowMove/ui/backlight.mjs
var CSS_CLASSNAME3 = "ht__manualRowMove--backlight";
var BacklightUI2 = class extends base_default4 {
  /**
   * Custom className on build process.
   */
  build() {
    super.build();
    addClass(this._element, CSS_CLASSNAME3);
  }
};
var backlight_default2 = BacklightUI2;

// node_modules/handsontable/plugins/manualRowMove/ui/guideline.mjs
var CSS_CLASSNAME4 = "ht__manualRowMove--guideline";
var GuidelineUI2 = class extends base_default4 {
  /**
   * Custom className on build process.
   */
  build() {
    super.build();
    addClass(this._element, CSS_CLASSNAME4);
  }
};
var guideline_default2 = GuidelineUI2;

// node_modules/handsontable/plugins/manualRowMove/manualRowMove.mjs
function _classPrivateMethodInitSpec35(e, a) {
  _checkPrivateRedeclaration42(e, a), a.add(e);
}
function _classPrivateFieldInitSpec28(e, t, a) {
  _checkPrivateRedeclaration42(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration42(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldSet26(s, a, r) {
  return s.set(_assertClassBrand42(s, a), r), r;
}
function _classPrivateFieldGet28(s, a) {
  return s.get(_assertClassBrand42(s, a));
}
function _assertClassBrand42(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
Hooks.getSingleton().register("beforeRowMove");
Hooks.getSingleton().register("afterRowMove");
var PLUGIN_KEY23 = "manualRowMove";
var PLUGIN_PRIORITY22 = 140;
var CSS_PLUGIN2 = "ht__manualRowMove";
var CSS_SHOW_UI2 = "show-ui";
var CSS_ON_MOVING2 = "on-moving--rows";
var CSS_AFTER_SELECTION2 = "after-selection--rows";
var _backlight2 = /* @__PURE__ */ new WeakMap();
var _guideline2 = /* @__PURE__ */ new WeakMap();
var _rowsToMove = /* @__PURE__ */ new WeakMap();
var _pressed3 = /* @__PURE__ */ new WeakMap();
var _target2 = /* @__PURE__ */ new WeakMap();
var _cachedDropIndex2 = /* @__PURE__ */ new WeakMap();
var _ManualRowMove_brand = /* @__PURE__ */ new WeakSet();
var ManualRowMove = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec35(this, _ManualRowMove_brand);
    _classPrivateFieldInitSpec28(this, _backlight2, new backlight_default2(this.hot));
    _classPrivateFieldInitSpec28(this, _guideline2, new guideline_default2(this.hot));
    _classPrivateFieldInitSpec28(this, _rowsToMove, []);
    _classPrivateFieldInitSpec28(this, _pressed3, void 0);
    _classPrivateFieldInitSpec28(this, _target2, {});
    _classPrivateFieldInitSpec28(this, _cachedDropIndex2, void 0);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY23;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY22;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ManualRowMove#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[PLUGIN_KEY23];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _this = this;
    if (this.enabled) {
      return;
    }
    this.addHook("beforeOnCellMouseDown", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _assertClassBrand42(_ManualRowMove_brand, _this, _onBeforeOnCellMouseDown5).call(_this, ...args);
    });
    this.addHook("beforeOnCellMouseOver", function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _assertClassBrand42(_ManualRowMove_brand, _this, _onBeforeOnCellMouseOver2).call(_this, ...args);
    });
    this.addHook("afterScrollHorizontally", () => _assertClassBrand42(_ManualRowMove_brand, this, _onAfterScrollHorizontally).call(this));
    this.addHook("afterLoadData", function() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return _assertClassBrand42(_ManualRowMove_brand, _this, _onAfterLoadData7).call(_this, ...args);
    });
    this.buildPluginUI();
    this.registerEvents();
    addClass(this.hot.rootElement, CSS_PLUGIN2);
    super.enablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`manualRowMove`](@/api/options.md#manualrowmove)
   */
  updatePlugin() {
    this.disablePlugin();
    this.enablePlugin();
    this.moveBySettingsOrLoad();
    super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    removeClass(this.hot.rootElement, CSS_PLUGIN2);
    this.unregisterEvents();
    _classPrivateFieldGet28(_backlight2, this).destroy();
    _classPrivateFieldGet28(_guideline2, this).destroy();
    super.disablePlugin();
  }
  /**
   * Moves a single row.
   *
   * To see the outcome, rerender your grid by calling [`render()`](@/api/core.md#render).
   *
   * @param {number} row Visual row index to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
   * @fires Hooks#beforeRowMove
   * @fires Hooks#afterRowMove
   * @returns {boolean}
   */
  moveRow(row, finalIndex) {
    return this.moveRows([row], finalIndex);
  }
  /**
   * Moves multiple rows.
   *
   * To see the outcome, rerender your grid by calling [`render()`](@/api/core.md#render).
   *
   * @param {Array} rows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
   * @fires Hooks#beforeRowMove
   * @fires Hooks#afterRowMove
   * @returns {boolean}
   */
  moveRows(rows, finalIndex) {
    const dropIndex = _classPrivateFieldGet28(_cachedDropIndex2, this);
    const movePossible = this.isMovePossible(rows, finalIndex);
    const beforeMoveHook = this.hot.runHooks("beforeRowMove", rows, finalIndex, dropIndex, movePossible);
    _classPrivateFieldSet26(_cachedDropIndex2, this, void 0);
    if (beforeMoveHook === false) {
      return;
    }
    if (movePossible) {
      this.hot.rowIndexMapper.moveIndexes(rows, finalIndex);
    }
    const movePerformed = movePossible && this.isRowOrderChanged(rows, finalIndex);
    this.hot.runHooks("afterRowMove", rows, finalIndex, dropIndex, movePossible, movePerformed);
    return movePerformed;
  }
  /**
   * Drag a single row to drop index position.
   *
   * @param {number} row Visual row index to be dragged.
   * @param {number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we are going to drop the moved elements.
   * To check visualization of drop index please take a look at [documentation](@/guides/rows/row-moving/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
   * @fires Hooks#beforeRowMove
   * @fires Hooks#afterRowMove
   * @returns {boolean}
   */
  dragRow(row, dropIndex) {
    return this.dragRows([row], dropIndex);
  }
  /**
   * Drag multiple rows to drop index position.
   *
   * @param {Array} rows Array of visual row indexes to be dragged.
   * @param {number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we are going to drop the moved elements.
   * To check visualization of drop index please take a look at [documentation](@/guides/rows/row-moving/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
   * @fires Hooks#beforeRowMove
   * @fires Hooks#afterRowMove
   * @returns {boolean}
   */
  dragRows(rows, dropIndex) {
    const finalIndex = this.countFinalIndex(rows, dropIndex);
    _classPrivateFieldSet26(_cachedDropIndex2, this, dropIndex);
    return this.moveRows(rows, finalIndex);
  }
  /**
   * Indicates if it's possible to move rows to the desired position. Some of the actions aren't possible, i.e. You can’t move more than one element to the last position.
   *
   * @param {Array} movedRows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
   * @returns {boolean}
   */
  isMovePossible(movedRows, finalIndex) {
    const length = this.hot.rowIndexMapper.getNotTrimmedIndexesLength();
    const tooHighDestinationIndex = movedRows.length + finalIndex > length;
    const tooLowDestinationIndex = finalIndex < 0;
    const tooLowMovedRowIndex = movedRows.some((movedRow) => movedRow < 0);
    const tooHighMovedRowIndex = movedRows.some((movedRow) => movedRow >= length);
    if (tooHighDestinationIndex || tooLowDestinationIndex || tooLowMovedRowIndex || tooHighMovedRowIndex) {
      return false;
    }
    return true;
  }
  /**
   * Indicates if order of rows was changed.
   *
   * @private
   * @param {Array} movedRows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
   * @returns {boolean}
   */
  isRowOrderChanged(movedRows, finalIndex) {
    return movedRows.some((row, nrOfMovedElement) => row - nrOfMovedElement !== finalIndex);
  }
  /**
   * Count the final row index from the drop index.
   *
   * @private
   * @param {Array} movedRows Array of visual row indexes to be moved.
   * @param {number} dropIndex Visual row index, being a drop index for the moved rows.
   * @returns {number} Visual row index, being a start index for the moved rows.
   */
  countFinalIndex(movedRows, dropIndex) {
    const numberOfRowsLowerThanDropIndex = arrayReduce(movedRows, (numberOfRows, currentRowIndex) => {
      if (currentRowIndex < dropIndex) {
        numberOfRows += 1;
      }
      return numberOfRows;
    }, 0);
    return dropIndex - numberOfRowsLowerThanDropIndex;
  }
  /**
   * Gets the sum of the heights of rows in the provided range.
   *
   * @private
   * @param {number} fromRow Visual row index.
   * @param {number} toRow Visual row index.
   * @returns {number}
   */
  getRowsHeight(fromRow, toRow) {
    const rowMapper = this.hot.rowIndexMapper;
    let rowsHeight = 0;
    for (let visualRowIndex = fromRow; visualRowIndex <= toRow; visualRowIndex++) {
      const renderableIndex = rowMapper.getRenderableFromVisualIndex(visualRowIndex);
      if (renderableIndex !== null) {
        rowsHeight += this.hot.view._wt.wtTable.getRowHeight(renderableIndex) || this.hot.view.getDefaultRowHeight();
      }
    }
    return rowsHeight;
  }
  /**
   * Loads initial settings when persistent state is saved or when plugin was initialized as an array.
   *
   * @private
   */
  moveBySettingsOrLoad() {
    const pluginSettings = this.hot.getSettings()[PLUGIN_KEY23];
    if (Array.isArray(pluginSettings)) {
      this.moveRows(pluginSettings, 0);
    } else if (pluginSettings !== void 0) {
      const persistentState = this.persistentStateLoad();
      if (persistentState.length) {
        this.moveRows(persistentState, 0);
      }
    }
  }
  /**
   * Checks if the provided row is in the fixedRowsTop section.
   *
   * @private
   * @param {number} row Visual row index to check.
   * @returns {boolean}
   */
  isFixedRowTop(row) {
    return row < this.hot.getSettings().fixedRowsTop;
  }
  /**
   * Checks if the provided row is in the fixedRowsBottom section.
   *
   * @private
   * @param {number} row Visual row index to check.
   * @returns {boolean}
   */
  isFixedRowBottom(row) {
    return row > this.hot.countRows() - 1 - this.hot.getSettings().fixedRowsBottom;
  }
  /**
   * Saves the manual row positions to the persistent state (the {@link Options#persistentState} option has to be enabled).
   *
   * @private
   * @fires Hooks#persistentStateSave
   */
  persistentStateSave() {
    this.hot.runHooks("persistentStateSave", "manualRowMove", this.hot.rowIndexMapper.getIndexesSequence());
  }
  /**
   * Loads the manual row positions from the persistent state (the {@link Options#persistentState} option has to be enabled).
   *
   * @private
   * @fires Hooks#persistentStateLoad
   * @returns {Array} Stored state.
   */
  persistentStateLoad() {
    const storedState = {};
    this.hot.runHooks("persistentStateLoad", "manualRowMove", storedState);
    return storedState.value ? storedState.value : [];
  }
  /**
   * Prepares an array of indexes based on actual selection.
   *
   * @private
   * @returns {Array}
   */
  prepareRowsToMoving() {
    const selection = this.hot.getSelectedRangeLast();
    const selectedRows = [];
    if (!selection) {
      return selectedRows;
    }
    const {
      from,
      to
    } = selection;
    const start = Math.min(from.row, to.row);
    const end = Math.max(from.row, to.row);
    rangeEach(start, end, (i) => {
      selectedRows.push(i);
    });
    return selectedRows;
  }
  /**
   * Update the UI visual position.
   *
   * @private
   */
  refreshPositions() {
    const coords = _classPrivateFieldGet28(_target2, this).coords;
    const firstVisible = this.hot.getFirstFullyVisibleRow();
    const lastVisible = this.hot.getLastFullyVisibleRow();
    const countRows = this.hot.countRows();
    if (this.isFixedRowTop(coords.row) && firstVisible > 0) {
      this.hot.scrollViewportTo(this.hot.rowIndexMapper.getNearestNotHiddenIndex(firstVisible - 1, -1));
    }
    if (this.isFixedRowBottom(coords.row) && lastVisible < countRows) {
      this.hot.scrollViewportTo(this.hot.rowIndexMapper.getNearestNotHiddenIndex(lastVisible + 1, 1), void 0, true);
    }
    const wtTable = this.hot.view._wt.wtTable;
    const TD = _classPrivateFieldGet28(_target2, this).TD;
    const rootElement = this.hot.rootElement;
    const rootElementOffset = offset(rootElement);
    const trimmingContainer = getTrimmingContainer(rootElement);
    const tableScroll = wtTable.holder.scrollTop;
    const trimmingContainerScroll = this.hot.rootWindow !== trimmingContainer ? trimmingContainer.scrollTop : 0;
    const pixelsAbove = rootElementOffset.top - trimmingContainerScroll;
    const pixelsRelToTableStart = _classPrivateFieldGet28(_target2, this).eventPageY - pixelsAbove + tableScroll;
    const hiderHeight = wtTable.hider.offsetHeight;
    const tbodyOffsetTop = wtTable.TBODY.offsetTop;
    const backlightElemMarginTop = _classPrivateFieldGet28(_backlight2, this).getOffset().top;
    const backlightElemHeight = _classPrivateFieldGet28(_backlight2, this).getSize().height;
    const tdMiddle = TD.offsetHeight / 2;
    const tdHeight = TD.offsetHeight;
    let tdStartPixel = this.hot.view.THEAD.offsetHeight + this.getRowsHeight(0, coords.row - 1);
    const isBelowTable = pixelsRelToTableStart >= tdStartPixel + tdMiddle;
    if (this.isFixedRowTop(coords.row)) {
      tdStartPixel += this.hot.view._wt.wtOverlays.topOverlay.getOverlayOffset();
    }
    if (coords.row < 0) {
      _classPrivateFieldGet28(_target2, this).row = firstVisible > 0 ? firstVisible - 1 : firstVisible;
    } else if (isBelowTable) {
      _classPrivateFieldGet28(_target2, this).row = coords.row + 1;
      tdStartPixel += coords.row === 0 ? tdHeight - 1 : tdHeight;
    } else {
      _classPrivateFieldGet28(_target2, this).row = coords.row;
    }
    let backlightTop = pixelsRelToTableStart;
    let guidelineTop = tdStartPixel;
    if (pixelsRelToTableStart + backlightElemHeight + backlightElemMarginTop >= hiderHeight) {
      backlightTop = hiderHeight - backlightElemHeight - backlightElemMarginTop;
    } else if (pixelsRelToTableStart + backlightElemMarginTop < tbodyOffsetTop) {
      backlightTop = tbodyOffsetTop + Math.abs(backlightElemMarginTop);
    }
    if (tdStartPixel >= hiderHeight - 1) {
      guidelineTop = hiderHeight - 1;
    }
    _classPrivateFieldGet28(_backlight2, this).setPosition(backlightTop);
    _classPrivateFieldGet28(_guideline2, this).setPosition(guidelineTop);
  }
  /**
   * Binds the events used by the plugin.
   *
   * @private
   */
  registerEvents() {
    const {
      documentElement
    } = this.hot.rootDocument;
    this.eventManager.addEventListener(documentElement, "mousemove", (event) => _assertClassBrand42(_ManualRowMove_brand, this, _onMouseMove4).call(this, event));
    this.eventManager.addEventListener(documentElement, "mouseup", () => _assertClassBrand42(_ManualRowMove_brand, this, _onMouseUp5).call(this));
  }
  /**
   * Unbinds the events used by the plugin.
   *
   * @private
   */
  unregisterEvents() {
    this.eventManager.clear();
  }
  /**
   * Builds the plugin's UI.
   *
   * @private
   */
  buildPluginUI() {
    _classPrivateFieldGet28(_backlight2, this).build();
    _classPrivateFieldGet28(_guideline2, this).build();
  }
  /**
   * Callback for the `afterLoadData` hook.
   */
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    _classPrivateFieldGet28(_backlight2, this).destroy();
    _classPrivateFieldGet28(_guideline2, this).destroy();
    super.destroy();
  }
};
function _onBeforeOnCellMouseDown5(event, coords, TD, controller) {
  const {
    wtTable,
    wtViewport
  } = this.hot.view._wt;
  const isHeaderSelection = this.hot.selection.isSelectedByRowHeader();
  const selection = this.hot.getSelectedRangeLast();
  if (!selection || !isHeaderSelection || _classPrivateFieldGet28(_pressed3, this) || event.button !== 0) {
    _classPrivateFieldSet26(_pressed3, this, false);
    _classPrivateFieldGet28(_rowsToMove, this).length = 0;
    removeClass(this.hot.rootElement, [CSS_ON_MOVING2, CSS_SHOW_UI2]);
    return;
  }
  const guidelineIsNotReady = _classPrivateFieldGet28(_guideline2, this).isBuilt() && !_classPrivateFieldGet28(_guideline2, this).isAppended();
  const backlightIsNotReady = _classPrivateFieldGet28(_backlight2, this).isBuilt() && !_classPrivateFieldGet28(_backlight2, this).isAppended();
  if (guidelineIsNotReady && backlightIsNotReady) {
    _classPrivateFieldGet28(_guideline2, this).appendTo(wtTable.hider);
    _classPrivateFieldGet28(_backlight2, this).appendTo(wtTable.hider);
  }
  const {
    from,
    to
  } = selection;
  const start = Math.min(from.row, to.row);
  const end = Math.max(from.row, to.row);
  if (coords.col < 0 && coords.row >= start && coords.row <= end) {
    controller.row = true;
    _classPrivateFieldSet26(_pressed3, this, true);
    _classPrivateFieldGet28(_target2, this).eventPageY = event.pageY;
    _classPrivateFieldGet28(_target2, this).coords = coords;
    _classPrivateFieldGet28(_target2, this).TD = TD;
    _classPrivateFieldSet26(_rowsToMove, this, this.prepareRowsToMoving());
    const leftPos = wtTable.holder.scrollLeft + wtViewport.getRowHeaderWidth();
    const topOffset = this.getRowsHeight(start, coords.row - 1) + (event.clientY - TD.getBoundingClientRect().top);
    _classPrivateFieldGet28(_backlight2, this).setPosition(null, leftPos);
    _classPrivateFieldGet28(_backlight2, this).setSize(wtTable.hider.offsetWidth - leftPos, this.getRowsHeight(start, end));
    _classPrivateFieldGet28(_backlight2, this).setOffset(-topOffset, null);
    addClass(this.hot.rootElement, CSS_ON_MOVING2);
    this.refreshPositions();
  } else {
    removeClass(this.hot.rootElement, CSS_AFTER_SELECTION2);
    _classPrivateFieldSet26(_pressed3, this, false);
    _classPrivateFieldGet28(_rowsToMove, this).length = 0;
  }
}
function _onMouseMove4(event) {
  if (!_classPrivateFieldGet28(_pressed3, this)) {
    return;
  }
  _classPrivateFieldGet28(_target2, this).eventPageY = event.pageY;
  this.refreshPositions();
}
function _onBeforeOnCellMouseOver2(event, coords, TD, controller) {
  const selectedRange = this.hot.getSelectedRangeLast();
  if (!selectedRange || !_classPrivateFieldGet28(_pressed3, this)) {
    return;
  }
  if (_classPrivateFieldGet28(_rowsToMove, this).indexOf(coords.row) > -1) {
    removeClass(this.hot.rootElement, CSS_SHOW_UI2);
  } else {
    addClass(this.hot.rootElement, CSS_SHOW_UI2);
  }
  controller.row = true;
  controller.column = true;
  controller.cell = true;
  _classPrivateFieldGet28(_target2, this).coords = coords;
  _classPrivateFieldGet28(_target2, this).TD = TD;
}
function _onMouseUp5() {
  const target = _classPrivateFieldGet28(_target2, this).row;
  const rowsLen = _classPrivateFieldGet28(_rowsToMove, this).length;
  _classPrivateFieldSet26(_pressed3, this, false);
  removeClass(this.hot.rootElement, [CSS_ON_MOVING2, CSS_SHOW_UI2, CSS_AFTER_SELECTION2]);
  if (this.hot.selection.isSelectedByRowHeader()) {
    addClass(this.hot.rootElement, CSS_AFTER_SELECTION2);
  }
  if (rowsLen < 1 || target === void 0) {
    return;
  }
  const firstMovedVisualRow = _classPrivateFieldGet28(_rowsToMove, this)[0];
  const firstMovedPhysicalRow = this.hot.toPhysicalRow(firstMovedVisualRow);
  const movePerformed = this.dragRows(_classPrivateFieldGet28(_rowsToMove, this), target);
  _classPrivateFieldGet28(_rowsToMove, this).length = 0;
  if (movePerformed === true) {
    this.persistentStateSave();
    this.hot.render();
    this.hot.view.adjustElementsSize();
    const selectionStart = this.hot.toVisualRow(firstMovedPhysicalRow);
    const selectionEnd = selectionStart + rowsLen - 1;
    this.hot.selectRows(selectionStart, selectionEnd);
  }
}
function _onAfterScrollHorizontally() {
  const wtTable = this.hot.view._wt.wtTable;
  const headerWidth = this.hot.view._wt.wtViewport.getRowHeaderWidth();
  const scrollLeft = wtTable.holder.scrollLeft;
  const posLeft = headerWidth + scrollLeft;
  _classPrivateFieldGet28(_backlight2, this).setPosition(null, posLeft);
  _classPrivateFieldGet28(_backlight2, this).setSize(wtTable.hider.offsetWidth - posLeft);
}
function _onAfterLoadData7() {
  this.moveBySettingsOrLoad();
}

// node_modules/handsontable/plugins/manualRowResize/manualRowResize.mjs
function _classPrivateMethodInitSpec36(e, a) {
  _checkPrivateRedeclaration43(e, a), a.add(e);
}
function _classPrivateFieldInitSpec29(e, t, a) {
  _checkPrivateRedeclaration43(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration43(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldSet27(s, a, r) {
  return s.set(_assertClassBrand43(s, a), r), r;
}
function _classPrivateFieldGet29(s, a) {
  return s.get(_assertClassBrand43(s, a));
}
function _assertClassBrand43(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var PLUGIN_KEY24 = "manualRowResize";
var PLUGIN_PRIORITY23 = 30;
var PERSISTENT_STATE_KEY2 = "manualRowHeights";
var _currentTH2 = /* @__PURE__ */ new WeakMap();
var _currentRow = /* @__PURE__ */ new WeakMap();
var _selectedRows = /* @__PURE__ */ new WeakMap();
var _currentHeight = /* @__PURE__ */ new WeakMap();
var _newSize2 = /* @__PURE__ */ new WeakMap();
var _startY2 = /* @__PURE__ */ new WeakMap();
var _startHeight = /* @__PURE__ */ new WeakMap();
var _startOffset2 = /* @__PURE__ */ new WeakMap();
var _handle2 = /* @__PURE__ */ new WeakMap();
var _guide2 = /* @__PURE__ */ new WeakMap();
var _pressed4 = /* @__PURE__ */ new WeakMap();
var _isTriggeredByRMB2 = /* @__PURE__ */ new WeakMap();
var _dblclick2 = /* @__PURE__ */ new WeakMap();
var _autoresizeTimeout2 = /* @__PURE__ */ new WeakMap();
var _rowHeightsMap = /* @__PURE__ */ new WeakMap();
var _config2 = /* @__PURE__ */ new WeakMap();
var _ManualRowResize_brand = /* @__PURE__ */ new WeakSet();
var ManualRowResize = class extends BasePlugin {
  static get PLUGIN_KEY() {
    return PLUGIN_KEY24;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY23;
  }
  /**
   * @type {HTMLTableCellElement}
   */
  constructor(hotInstance) {
    super(hotInstance);
    _classPrivateMethodInitSpec36(this, _ManualRowResize_brand);
    _classPrivateFieldInitSpec29(this, _currentTH2, null);
    _classPrivateFieldInitSpec29(this, _currentRow, null);
    _classPrivateFieldInitSpec29(this, _selectedRows, []);
    _classPrivateFieldInitSpec29(this, _currentHeight, null);
    _classPrivateFieldInitSpec29(this, _newSize2, null);
    _classPrivateFieldInitSpec29(this, _startY2, null);
    _classPrivateFieldInitSpec29(this, _startHeight, null);
    _classPrivateFieldInitSpec29(this, _startOffset2, null);
    _classPrivateFieldInitSpec29(this, _handle2, this.hot.rootDocument.createElement("DIV"));
    _classPrivateFieldInitSpec29(this, _guide2, this.hot.rootDocument.createElement("DIV"));
    _classPrivateFieldInitSpec29(this, _pressed4, false);
    _classPrivateFieldInitSpec29(this, _isTriggeredByRMB2, false);
    _classPrivateFieldInitSpec29(this, _dblclick2, 0);
    _classPrivateFieldInitSpec29(this, _autoresizeTimeout2, null);
    _classPrivateFieldInitSpec29(this, _rowHeightsMap, void 0);
    _classPrivateFieldInitSpec29(this, _config2, void 0);
    addClass(_classPrivateFieldGet29(_handle2, this), "manualRowResizer");
    addClass(_classPrivateFieldGet29(_guide2, this), "manualRowResizerGuide");
  }
  /**
   * @private
   * @returns {string}
   */
  get inlineDir() {
    return this.hot.isRtl() ? "right" : "left";
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ManualRowResize#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return this.hot.getSettings()[PLUGIN_KEY24];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    if (this.enabled) {
      return;
    }
    _classPrivateFieldSet27(_rowHeightsMap, this, new PhysicalIndexToValueMap());
    _classPrivateFieldGet29(_rowHeightsMap, this).addLocalHook("init", () => _assertClassBrand43(_ManualRowResize_brand, this, _onMapInit4).call(this));
    this.hot.rowIndexMapper.registerMap(this.pluginName, _classPrivateFieldGet29(_rowHeightsMap, this));
    this.addHook("modifyRowHeight", (height, row) => _assertClassBrand43(_ManualRowResize_brand, this, _onModifyRowHeight2).call(this, height, row));
    this.bindEvents();
    super.enablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`manualRowResize`](@/api/options.md#manualrowresize)
   */
  updatePlugin() {
    this.disablePlugin();
    this.enablePlugin();
    super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    _classPrivateFieldSet27(_config2, this, _classPrivateFieldGet29(_rowHeightsMap, this).getValues());
    this.hot.rowIndexMapper.unregisterMap(this.pluginName);
    super.disablePlugin();
  }
  /**
   * Saves the current sizes using the persistentState plugin (the {@link Options#persistentState} option has to be
   * enabled).
   *
   * @fires Hooks#persistentStateSave
   */
  saveManualRowHeights() {
    this.hot.runHooks("persistentStateSave", PERSISTENT_STATE_KEY2, _classPrivateFieldGet29(_rowHeightsMap, this).getValues());
  }
  /**
   * Loads the previously saved sizes using the persistentState plugin (the {@link Options#persistentState} option
   * has be enabled).
   *
   * @returns {Array}
   * @fires Hooks#persistentStateLoad
   */
  loadManualRowHeights() {
    const storedState = {};
    this.hot.runHooks("persistentStateLoad", PERSISTENT_STATE_KEY2, storedState);
    return storedState.value;
  }
  /**
   * Sets the new height for specified row index.
   *
   * @param {number} row Visual row index.
   * @param {number} height Row height.
   * @returns {number} Returns new height.
   */
  setManualSize(row, height) {
    const physicalRow = this.hot.toPhysicalRow(row);
    const newHeight = Math.max(height, this.hot.view.getDefaultRowHeight());
    _classPrivateFieldGet29(_rowHeightsMap, this).setValueAtIndex(physicalRow, newHeight);
    return newHeight;
  }
  /**
   * Returns the last desired row height set manually with the resize handle.
   *
   * @returns {number} The last desired row height.
   */
  getLastDesiredRowHeight() {
    return _classPrivateFieldGet29(_currentHeight, this);
  }
  /**
   * Sets the resize handle position.
   *
   * @private
   * @param {HTMLCellElement} TH TH HTML element.
   */
  setupHandlePosition(TH) {
    _classPrivateFieldSet27(_currentTH2, this, TH);
    const {
      view
    } = this.hot;
    const {
      _wt: wt
    } = view;
    const cellCoords = wt.wtTable.getCoords(_classPrivateFieldGet29(_currentTH2, this));
    const row = cellCoords.row;
    if (row < 0) {
      return;
    }
    const headerWidth = outerWidth(_classPrivateFieldGet29(_currentTH2, this));
    const box = _classPrivateFieldGet29(_currentTH2, this).getBoundingClientRect();
    const fixedRowTop = row < wt.getSetting("fixedRowsTop");
    const fixedRowBottom = row >= view.countNotHiddenRowIndexes(0, 1) - wt.getSetting("fixedRowsBottom");
    let relativeHeaderPosition;
    if (fixedRowTop) {
      relativeHeaderPosition = wt.wtOverlays.topInlineStartCornerOverlay.getRelativeCellPosition(_classPrivateFieldGet29(_currentTH2, this), cellCoords.row, cellCoords.col);
    } else if (fixedRowBottom) {
      relativeHeaderPosition = wt.wtOverlays.bottomInlineStartCornerOverlay.getRelativeCellPosition(_classPrivateFieldGet29(_currentTH2, this), cellCoords.row, cellCoords.col);
    }
    if (!relativeHeaderPosition) {
      relativeHeaderPosition = wt.wtOverlays.inlineStartOverlay.getRelativeCellPosition(_classPrivateFieldGet29(_currentTH2, this), cellCoords.row, cellCoords.col);
    }
    _classPrivateFieldSet27(_currentRow, this, this.hot.rowIndexMapper.getVisualFromRenderableIndex(row));
    _classPrivateFieldSet27(_selectedRows, this, []);
    const isFullRowSelected = this.hot.selection.isSelectedByCorner() || this.hot.selection.isSelectedByRowHeader();
    if (this.hot.selection.isSelected() && isFullRowSelected) {
      const selectionRanges = this.hot.getSelectedRange();
      arrayEach(selectionRanges, (selectionRange) => {
        const fromRow = selectionRange.getTopStartCorner().row;
        const toRow = selectionRange.getBottomStartCorner().row;
        rangeEach(fromRow, toRow, (rowIndex) => {
          if (!_classPrivateFieldGet29(_selectedRows, this).includes(rowIndex)) {
            _classPrivateFieldGet29(_selectedRows, this).push(rowIndex);
          }
        });
      });
    }
    if (!_classPrivateFieldGet29(_selectedRows, this).includes(_classPrivateFieldGet29(_currentRow, this))) {
      _classPrivateFieldSet27(_selectedRows, this, [_classPrivateFieldGet29(_currentRow, this)]);
    }
    _classPrivateFieldSet27(_startOffset2, this, relativeHeaderPosition.top - 6);
    _classPrivateFieldSet27(_startHeight, this, parseInt(box.height, 10));
    _classPrivateFieldGet29(_handle2, this).style.top = `${_classPrivateFieldGet29(_startOffset2, this) + _classPrivateFieldGet29(_startHeight, this)}px`;
    _classPrivateFieldGet29(_handle2, this).style[this.inlineDir] = `${relativeHeaderPosition.start}px`;
    _classPrivateFieldGet29(_handle2, this).style.width = `${headerWidth}px`;
    this.hot.rootElement.appendChild(_classPrivateFieldGet29(_handle2, this));
  }
  /**
   * Refresh the resize handle position.
   *
   * @private
   */
  refreshHandlePosition() {
    _classPrivateFieldGet29(_handle2, this).style.top = `${_classPrivateFieldGet29(_startOffset2, this) + _classPrivateFieldGet29(_currentHeight, this)}px`;
  }
  /**
   * Sets the resize guide position.
   *
   * @private
   */
  setupGuidePosition() {
    const handleWidth = parseInt(outerWidth(_classPrivateFieldGet29(_handle2, this)), 10);
    const handleEndPosition = parseInt(_classPrivateFieldGet29(_handle2, this).style[this.inlineDir], 10) + handleWidth;
    const tableWidth = this.hot.view.getTableWidth();
    addClass(_classPrivateFieldGet29(_handle2, this), "active");
    addClass(_classPrivateFieldGet29(_guide2, this), "active");
    _classPrivateFieldGet29(_guide2, this).style.top = _classPrivateFieldGet29(_handle2, this).style.top;
    _classPrivateFieldGet29(_guide2, this).style[this.inlineDir] = `${handleEndPosition}px`;
    _classPrivateFieldGet29(_guide2, this).style.width = `${tableWidth - handleWidth}px`;
    this.hot.rootElement.appendChild(_classPrivateFieldGet29(_guide2, this));
  }
  /**
   * Refresh the resize guide position.
   *
   * @private
   */
  refreshGuidePosition() {
    _classPrivateFieldGet29(_guide2, this).style.top = _classPrivateFieldGet29(_handle2, this).style.top;
  }
  /**
   * Hides both the resize handle and resize guide.
   *
   * @private
   */
  hideHandleAndGuide() {
    removeClass(_classPrivateFieldGet29(_handle2, this), "active");
    removeClass(_classPrivateFieldGet29(_guide2, this), "active");
  }
  /**
   * Checks if provided element is considered as a row header.
   *
   * @private
   * @param {HTMLElement} element HTML element.
   * @returns {boolean}
   */
  checkIfRowHeader(element) {
    const tbody = closest(element, ["TBODY"], this.hot.rootElement);
    const {
      inlineStartOverlay,
      topInlineStartCornerOverlay,
      bottomInlineStartCornerOverlay
    } = this.hot.view._wt.wtOverlays;
    return [inlineStartOverlay.clone.wtTable.TBODY, topInlineStartCornerOverlay.clone.wtTable.TBODY, bottomInlineStartCornerOverlay.clone.wtTable.TBODY].includes(tbody);
  }
  /**
   * Gets the TH element from the provided element.
   *
   * @private
   * @param {HTMLElement} element HTML element.
   * @returns {HTMLElement}
   */
  getClosestTHParent(element) {
    if (element.tagName !== "TABLE") {
      if (element.tagName === "TH") {
        return element;
      }
      return this.getClosestTHParent(element.parentNode);
    }
    return null;
  }
  /**
   * Returns the actual height for the provided row index.
   *
   * @private
   * @param {number} row Visual row index.
   * @returns {number} Actual row height.
   */
  getActualRowHeight(row) {
    const walkontableHeight = this.hot.view._wt.wtTable.getRowHeight(row);
    if (walkontableHeight !== void 0 && _classPrivateFieldGet29(_newSize2, this) < walkontableHeight) {
      return walkontableHeight;
    }
    return _classPrivateFieldGet29(_newSize2, this);
  }
  /**
   * Auto-size row after doubleclick - callback.
   *
   * @private
   * @fires Hooks#beforeRowResize
   * @fires Hooks#afterRowResize
   */
  afterMouseDownTimeout() {
    const render = () => {
      this.hot.render();
      this.hot.view.adjustElementsSize();
    };
    const resize = (row, forceRender) => {
      const hookNewSize = this.hot.runHooks("beforeRowResize", this.getActualRowHeight(row), row, true);
      if (hookNewSize !== void 0) {
        _classPrivateFieldSet27(_newSize2, this, hookNewSize);
      }
      this.setManualSize(row, _classPrivateFieldGet29(_newSize2, this));
      this.hot.runHooks("afterRowResize", this.getActualRowHeight(row), row, true);
      if (forceRender) {
        render();
      }
    };
    if (_classPrivateFieldGet29(_dblclick2, this) >= 2) {
      const selectedRowsLength = _classPrivateFieldGet29(_selectedRows, this).length;
      if (selectedRowsLength > 1) {
        arrayEach(_classPrivateFieldGet29(_selectedRows, this), (selectedRow) => {
          resize(selectedRow);
        });
        render();
      } else {
        arrayEach(_classPrivateFieldGet29(_selectedRows, this), (selectedRow) => {
          resize(selectedRow, true);
        });
      }
    }
    _classPrivateFieldSet27(_dblclick2, this, 0);
    _classPrivateFieldSet27(_autoresizeTimeout2, this, null);
  }
  /**
   * 'mousedown' event callback.
   *
   * @param {MouseEvent} event The mouse event.
   */
  /**
   * Binds the mouse events.
   *
   * @private
   */
  bindEvents() {
    const {
      rootElement,
      rootWindow
    } = this.hot;
    this.eventManager.addEventListener(rootElement, "mouseover", (e) => _assertClassBrand43(_ManualRowResize_brand, this, _onMouseOver3).call(this, e));
    this.eventManager.addEventListener(rootElement, "mousedown", (e) => _assertClassBrand43(_ManualRowResize_brand, this, _onMouseDown3).call(this, e));
    this.eventManager.addEventListener(rootWindow, "mousemove", (e) => _assertClassBrand43(_ManualRowResize_brand, this, _onMouseMove5).call(this, e));
    this.eventManager.addEventListener(rootWindow, "mouseup", () => _assertClassBrand43(_ManualRowResize_brand, this, _onMouseUp6).call(this));
    this.eventManager.addEventListener(_classPrivateFieldGet29(_handle2, this), "contextmenu", () => _assertClassBrand43(_ManualRowResize_brand, this, _onContextMenu2).call(this));
  }
  /**
   * Modifies the provided row height, based on the plugin settings.
   *
   * @param {number} height Row height.
   * @param {number} row Visual row index.
   * @returns {number}
   */
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
};
function _onMouseOver3(event) {
  if (isDetached(event.target)) {
    return;
  }
  if (_classPrivateFieldGet29(_isTriggeredByRMB2, this) === true) {
    return;
  }
  if (this.checkIfRowHeader(event.target)) {
    const th = this.getClosestTHParent(event.target);
    if (th) {
      if (!_classPrivateFieldGet29(_pressed4, this)) {
        this.setupHandlePosition(th);
      }
    }
  }
}
function _onMouseDown3(event) {
  if (hasClass(event.target, "manualRowResizer")) {
    this.setupHandlePosition(_classPrivateFieldGet29(_currentTH2, this));
    this.setupGuidePosition();
    _classPrivateFieldSet27(_pressed4, this, true);
    if (_classPrivateFieldGet29(_autoresizeTimeout2, this) === null) {
      _classPrivateFieldSet27(_autoresizeTimeout2, this, setTimeout(() => this.afterMouseDownTimeout(), 500));
      this.hot._registerTimeout(_classPrivateFieldGet29(_autoresizeTimeout2, this));
    }
    _classPrivateFieldSet27(_dblclick2, this, _classPrivateFieldGet29(_dblclick2, this) + 1);
    _classPrivateFieldSet27(_startY2, this, event.pageY);
    _classPrivateFieldSet27(_newSize2, this, _classPrivateFieldGet29(_startHeight, this));
  }
}
function _onMouseMove5(event) {
  if (_classPrivateFieldGet29(_pressed4, this)) {
    _classPrivateFieldSet27(_currentHeight, this, _classPrivateFieldGet29(_startHeight, this) + (event.pageY - _classPrivateFieldGet29(_startY2, this)));
    arrayEach(_classPrivateFieldGet29(_selectedRows, this), (selectedRow) => {
      _classPrivateFieldSet27(_newSize2, this, this.setManualSize(selectedRow, _classPrivateFieldGet29(_currentHeight, this)));
    });
    this.refreshHandlePosition();
    this.refreshGuidePosition();
  }
}
function _onMouseUp6() {
  const render = () => {
    this.hot.render();
    this.hot.view.adjustElementsSize();
  };
  const runHooks = (row, forceRender) => {
    this.hot.runHooks("beforeRowResize", this.getActualRowHeight(row), row, false);
    if (forceRender) {
      render();
    }
    this.saveManualRowHeights();
    this.hot.runHooks("afterRowResize", this.getActualRowHeight(row), row, false);
  };
  if (_classPrivateFieldGet29(_pressed4, this)) {
    this.hideHandleAndGuide();
    _classPrivateFieldSet27(_pressed4, this, false);
    if (_classPrivateFieldGet29(_newSize2, this) !== _classPrivateFieldGet29(_startHeight, this)) {
      const selectedRowsLength = _classPrivateFieldGet29(_selectedRows, this).length;
      if (selectedRowsLength > 1) {
        arrayEach(_classPrivateFieldGet29(_selectedRows, this), (selectedRow) => {
          runHooks(selectedRow);
        });
        render();
      } else {
        arrayEach(_classPrivateFieldGet29(_selectedRows, this), (selectedRow) => {
          runHooks(selectedRow, true);
        });
      }
    }
    this.setupHandlePosition(_classPrivateFieldGet29(_currentTH2, this));
  }
}
function _onContextMenu2() {
  this.hideHandleAndGuide();
  this.hot.rootElement.removeChild(_classPrivateFieldGet29(_handle2, this));
  this.hot.rootElement.removeChild(_classPrivateFieldGet29(_guide2, this));
  _classPrivateFieldSet27(_pressed4, this, false);
  _classPrivateFieldSet27(_isTriggeredByRMB2, this, true);
  this.hot._registerImmediate(() => {
    _classPrivateFieldSet27(_isTriggeredByRMB2, this, false);
  });
}
function _onModifyRowHeight2(height, row) {
  let newHeight = height;
  if (this.enabled) {
    const physicalRow = this.hot.toPhysicalRow(row);
    const rowHeight = _classPrivateFieldGet29(_rowHeightsMap, this).getValueAtIndex(physicalRow);
    if (this.hot.getSettings()[PLUGIN_KEY24] && rowHeight) {
      newHeight = rowHeight;
    }
  }
  return newHeight;
}
function _onMapInit4() {
  const initialSetting = this.hot.getSettings()[PLUGIN_KEY24];
  const loadedManualRowHeights = this.loadManualRowHeights();
  this.hot.batchExecution(() => {
    if (typeof loadedManualRowHeights !== "undefined") {
      loadedManualRowHeights.forEach((height, index) => {
        _classPrivateFieldGet29(_rowHeightsMap, this).setValueAtIndex(index, height);
      });
    } else if (Array.isArray(initialSetting)) {
      initialSetting.forEach((height, index) => {
        _classPrivateFieldGet29(_rowHeightsMap, this).setValueAtIndex(index, height);
      });
      _classPrivateFieldSet27(_config2, this, initialSetting);
    } else if (initialSetting === true && Array.isArray(_classPrivateFieldGet29(_config2, this))) {
      _classPrivateFieldGet29(_config2, this).forEach((height, index) => {
        _classPrivateFieldGet29(_rowHeightsMap, this).setValueAtIndex(index, height);
      });
    }
  }, true);
}

// node_modules/core-js/modules/es.array.unscopables.flat-map.js
var addToUnscopables = require_add_to_unscopables();
addToUnscopables("flatMap");

// node_modules/core-js/modules/esnext.iterator.flat-map.js
require_es_iterator_flat_map();

// node_modules/handsontable/plugins/mergeCells/cellCoords.mjs
function _classPrivateFieldInitSpec30(e, t, a) {
  _checkPrivateRedeclaration44(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration44(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty42(e, r, t) {
  return (r = _toPropertyKey42(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey42(t) {
  var i = _toPrimitive42(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive42(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _classPrivateFieldGet30(s, a) {
  return s.get(_assertClassBrand44(s, a));
}
function _classPrivateFieldSet28(s, a, r) {
  return s.set(_assertClassBrand44(s, a), r), r;
}
function _assertClassBrand44(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _cellRange = /* @__PURE__ */ new WeakMap();
var MergedCellCoords = class {
  constructor(row, column, rowspan, colspan, cellCoordsFactory, cellRangeFactory) {
    _defineProperty42(this, "row", void 0);
    _defineProperty42(this, "col", void 0);
    _defineProperty42(this, "rowspan", void 0);
    _defineProperty42(this, "colspan", void 0);
    _defineProperty42(this, "removed", false);
    _defineProperty42(this, "cellCoordsFactory", void 0);
    _defineProperty42(this, "cellRangeFactory", void 0);
    _classPrivateFieldInitSpec30(this, _cellRange, null);
    this.row = row;
    this.col = column;
    this.rowspan = rowspan;
    this.colspan = colspan;
    this.cellCoordsFactory = cellCoordsFactory;
    this.cellRangeFactory = cellRangeFactory;
  }
  /**
   * Get a warning message for when the declared merged cell data contains negative values.
   *
   * @param {{ row: number, col: number, rowspan: number, colspan: number }} mergedCell Object containing information
   * about the merged cells that was about to be added.
   * @returns {string}
   */
  static NEGATIVE_VALUES_WARNING(_ref) {
    let {
      row,
      col,
      rowspan,
      colspan
    } = _ref;
    return toSingleLine`The merged cell declared with {row: ${row}, col: ${col},\x20
      rowspan: ${rowspan}, colspan: ${colspan}} contains negative values, which is\x20
      not supported. It will not be added to the collection.`;
  }
  /**
   * Get a warning message for when the declared merged cell data contains values exceeding the table limits.
   *
   * @param {{ row: number, col: number, rowspan: number, colspan: number }} mergedCell Object containing information
   * about the merged cells that was about to be added.
   * @returns {string}
   */
  static IS_OUT_OF_BOUNDS_WARNING(_ref2) {
    let {
      row,
      col
    } = _ref2;
    return toSingleLine`The merged cell declared at [${row}, ${col}] is positioned\x20
      (or positioned partially) outside of the table range. It was not added to the table, please fix your setup.`;
  }
  /**
   * Get a warning message for when the declared merged cell data represents a single cell.
   *
   * @param {{ row: number, col: number, rowspan: number, colspan: number }} mergedCell Object containing information
   * about the merged cells that was about to be added.
   * @returns {string}
   */
  static IS_SINGLE_CELL(_ref3) {
    let {
      row,
      col
    } = _ref3;
    return toSingleLine`The merged cell declared at [${row}, ${col}] has both "rowspan"\x20
      and "colspan" declared as "1", which makes it a single cell. It cannot be added to the collection.`;
  }
  /**
   * Get a warning message for when the declared merged cell data contains "colspan" or "rowspan", that equals 0.
   *
   * @param {{ row: number, col: number, rowspan: number, colspan: number }} mergedCell Object containing information
   * about the merged cells that was about to be added.
   * @returns {string}
   */
  static ZERO_SPAN_WARNING(_ref4) {
    let {
      row,
      col
    } = _ref4;
    return toSingleLine`The merged cell declared at [${row}, ${col}] has "rowspan"\x20
      or "colspan" declared as "0", which is not supported. It cannot be added to the collection.`;
  }
  /**
   * Check whether the values provided for a merged cell contain any negative values.
   *
   * @param {{ row: number, col: number, rowspan: number, colspan: number }} mergedCell Object containing information
   * about the merged cells that was about to be added.
   * @returns {boolean}
   */
  static containsNegativeValues(_ref5) {
    let {
      row,
      col,
      rowspan,
      colspan
    } = _ref5;
    return row < 0 || col < 0 || rowspan < 0 || colspan < 0;
  }
  /**
   * Check whether the provided merged cell information object represents a single cell.
   *
   * @private
   * @param {{ row: number, col: number, rowspan: number, colspan: number }} mergedCell Object containing information
   * about the merged cells that was about to be added.
   * @returns {boolean}
   */
  static isSingleCell(_ref6) {
    let {
      rowspan,
      colspan
    } = _ref6;
    return colspan === 1 && rowspan === 1;
  }
  /**
   * Check whether the provided merged cell information object contains a rowspan or colspan of 0.
   *
   * @private
   * @param {{ row: number, col: number, rowspan: number, colspan: number }} mergedCell Object containing information
   * about the merged cells that was about to be added.
   * @returns {boolean}
   */
  static containsZeroSpan(_ref7) {
    let {
      rowspan,
      colspan
    } = _ref7;
    return colspan === 0 || rowspan === 0;
  }
  /**
   * Check whether the provided merged cell object is to be declared out of bounds of the table.
   *
   * @param {object} mergeCell Object containing the `row`, `col`, `rowspan` and `colspan` properties.
   * @param {number} rowCount Number of rows in the table.
   * @param {number} columnCount Number of rows in the table.
   * @returns {boolean}
   */
  static isOutOfBounds(mergeCell, rowCount, columnCount) {
    return mergeCell.row < 0 || mergeCell.col < 0 || mergeCell.row >= rowCount || mergeCell.row + mergeCell.rowspan - 1 >= rowCount || mergeCell.col >= columnCount || mergeCell.col + mergeCell.colspan - 1 >= columnCount;
  }
  /**
   * Sanitize (prevent from going outside the boundaries) the merged cell.
   *
   * @param {Core} hotInstance The Handsontable instance.
   */
  normalize(hotInstance) {
    const totalRows = hotInstance.countRows();
    const totalColumns = hotInstance.countCols();
    if (this.row < 0) {
      this.row = 0;
    } else if (this.row > totalRows - 1) {
      this.row = totalRows - 1;
    }
    if (this.col < 0) {
      this.col = 0;
    } else if (this.col > totalColumns - 1) {
      this.col = totalColumns - 1;
    }
    if (this.row + this.rowspan > totalRows - 1) {
      this.rowspan = totalRows - this.row;
    }
    if (this.col + this.colspan > totalColumns - 1) {
      this.colspan = totalColumns - this.col;
    }
    _classPrivateFieldSet28(_cellRange, this, null);
  }
  /**
   * Returns `true` if the provided coordinates are inside the merged cell.
   *
   * @param {number} row The row index.
   * @param {number} column The column index.
   * @returns {boolean}
   */
  includes(row, column) {
    return this.row <= row && this.col <= column && this.row + this.rowspan - 1 >= row && this.col + this.colspan - 1 >= column;
  }
  /**
   * Returns `true` if the provided `column` property is within the column span of the merged cell.
   *
   * @param {number} column The column index.
   * @returns {boolean}
   */
  includesHorizontally(column) {
    return this.col <= column && this.col + this.colspan - 1 >= column;
  }
  /**
   * Returns `true` if the provided `row` property is within the row span of the merged cell.
   *
   * @param {number} row Row index.
   * @returns {boolean}
   */
  includesVertically(row) {
    return this.row <= row && this.row + this.rowspan - 1 >= row;
  }
  /**
   * Shift (and possibly resize, if needed) the merged cell.
   *
   * @param {Array} shiftVector 2-element array containing the information on the shifting in the `x` and `y` axis.
   * @param {number} indexOfChange Index of the preceding change.
   * @returns {boolean} Returns `false` if the whole merged cell was removed.
   */
  shift(shiftVector, indexOfChange) {
    const shiftValue = shiftVector[0] || shiftVector[1];
    const shiftedIndex = indexOfChange + Math.abs(shiftVector[0] || shiftVector[1]) - 1;
    const span = shiftVector[0] ? "colspan" : "rowspan";
    const index = shiftVector[0] ? "col" : "row";
    const changeStart = Math.min(indexOfChange, shiftedIndex);
    const changeEnd = Math.max(indexOfChange, shiftedIndex);
    const mergeStart = this[index];
    const mergeEnd = this[index] + this[span] - 1;
    if (mergeStart >= indexOfChange) {
      this[index] += shiftValue;
    }
    if (shiftValue > 0) {
      if (indexOfChange <= mergeEnd && indexOfChange > mergeStart) {
        this[span] += shiftValue;
      }
    } else if (shiftValue < 0) {
      if (changeStart <= mergeStart && changeEnd >= mergeEnd) {
        this.removed = true;
        _classPrivateFieldSet28(_cellRange, this, null);
        return false;
      } else if (mergeStart >= changeStart && mergeStart <= changeEnd) {
        const removedOffset = changeEnd - mergeStart + 1;
        const preRemovedOffset = Math.abs(shiftValue) - removedOffset;
        this[index] -= preRemovedOffset + shiftValue;
        this[span] -= removedOffset;
      } else if (mergeStart <= changeStart && mergeEnd >= changeEnd) {
        this[span] += shiftValue;
      } else if (mergeStart <= changeStart && mergeEnd >= changeStart && mergeEnd < changeEnd) {
        const removedPart = mergeEnd - changeStart + 1;
        this[span] -= removedPart;
      }
    }
    _classPrivateFieldSet28(_cellRange, this, null);
    return true;
  }
  /**
   * Check if the second provided merged cell is "farther" in the provided direction.
   *
   * @param {MergedCellCoords} mergedCell The merged cell to check.
   * @param {string} direction Drag direction.
   * @returns {boolean|null} `true` if the second provided merged cell is "farther".
   */
  isFarther(mergedCell, direction) {
    if (!mergedCell) {
      return true;
    }
    if (direction === "down") {
      return mergedCell.row + mergedCell.rowspan - 1 < this.row + this.rowspan - 1;
    } else if (direction === "up") {
      return mergedCell.row > this.row;
    } else if (direction === "right") {
      return mergedCell.col + mergedCell.colspan - 1 < this.col + this.colspan - 1;
    } else if (direction === "left") {
      return mergedCell.col > this.col;
    }
    return null;
  }
  /**
   * Get the bottom row index of the merged cell.
   *
   * @returns {number}
   */
  getLastRow() {
    return this.row + this.rowspan - 1;
  }
  /**
   * Get the rightmost column index of the merged cell.
   *
   * @returns {number}
   */
  getLastColumn() {
    return this.col + this.colspan - 1;
  }
  /**
   * Get the range coordinates of the merged cell.
   *
   * @returns {CellRange}
   */
  getRange() {
    if (!_classPrivateFieldGet30(_cellRange, this)) {
      _classPrivateFieldSet28(_cellRange, this, this.cellRangeFactory(this.cellCoordsFactory(this.row, this.col), this.cellCoordsFactory(this.row, this.col), this.cellCoordsFactory(this.getLastRow(), this.getLastColumn())));
    }
    return _classPrivateFieldGet30(_cellRange, this);
  }
};
var cellCoords_default = MergedCellCoords;

// node_modules/handsontable/plugins/mergeCells/cellsCollection.mjs
function _classPrivateMethodInitSpec37(e, a) {
  _checkPrivateRedeclaration45(e, a), a.add(e);
}
function _checkPrivateRedeclaration45(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty43(e, r, t) {
  return (r = _toPropertyKey43(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey43(t) {
  var i = _toPrimitive43(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive43(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _assertClassBrand45(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _MergedCellsCollection_brand = /* @__PURE__ */ new WeakSet();
var MergedCellsCollection = class _MergedCellsCollection {
  constructor(mergeCellsPlugin) {
    _classPrivateMethodInitSpec37(this, _MergedCellsCollection_brand);
    _defineProperty43(this, "plugin", void 0);
    _defineProperty43(this, "mergedCells", []);
    _defineProperty43(this, "mergedCellsMatrix", /* @__PURE__ */ new Map());
    _defineProperty43(this, "hot", void 0);
    this.plugin = mergeCellsPlugin;
    this.hot = mergeCellsPlugin.hot;
  }
  /**
   * Get a warning message for when the declared merged cell data overlaps already existing merged cells.
   *
   * @param {{ row: number, col: number, rowspan: number, colspan: number }} mergedCell Object containing information
   * about the merged cells that was about to be added.
   * @returns {string}
   */
  static IS_OVERLAPPING_WARNING(_ref) {
    let {
      row,
      col
    } = _ref;
    return toSingleLine`The merged cell declared at [${row}, ${col}], overlaps\x20
      with the other declared merged cell. The overlapping merged cell was not added to the table, please\x20
      fix your setup.`;
  }
  /**
   * Get a merged cell from the container, based on the provided arguments. You can provide either the "starting coordinates"
   * of a merged cell, or any coordinates from the body of the merged cell.
   *
   * @param {number} row Row index.
   * @param {number} column Column index.
   * @returns {MergedCellCoords|boolean} Returns a wanted merged cell on success and `false` on failure.
   */
  get(row, column) {
    var _this$mergedCellsMatr;
    if (!this.mergedCellsMatrix.has(row)) {
      return false;
    }
    return (_this$mergedCellsMatr = this.mergedCellsMatrix.get(row).get(column)) !== null && _this$mergedCellsMatr !== void 0 ? _this$mergedCellsMatr : false;
  }
  /**
   * Get the first-found merged cell containing the provided range.
   *
   * @param {CellRange} range The range to search merged cells for.
   * @returns {MergedCellCoords | false}
   */
  getByRange(range) {
    const {
      row: rowStart,
      col: columnStart
    } = range.getTopStartCorner();
    const {
      row: rowEnd,
      col: columnEnd
    } = range.getBottomEndCorner();
    const mergedCellsLength = this.mergedCells.length;
    let result = false;
    for (let i = 0; i < mergedCellsLength; i++) {
      const mergedCell = this.mergedCells[i];
      const {
        row,
        col,
        rowspan,
        colspan
      } = mergedCell;
      if (row >= rowStart && row + rowspan - 1 <= rowEnd && col >= columnStart && col + colspan - 1 <= columnEnd) {
        result = mergedCell;
        break;
      }
    }
    return result;
  }
  /**
   * Filters merge cells objects provided by users from overlapping cells.
   *
   * @param {{ row: number, col: number, rowspan: number, colspan: number }} mergedCellsInfo The merged cell information object.
   * Has to contain `row`, `col`, `colspan` and `rowspan` properties.
   * @returns {Array<{ row: number, col: number, rowspan: number, colspan: number }>}
   */
  filterOverlappingMergeCells(mergedCellsInfo) {
    const occupiedCells = /* @__PURE__ */ new Set();
    this.mergedCells.forEach((mergedCell) => {
      const {
        row,
        col,
        colspan,
        rowspan
      } = mergedCell;
      for (let r = row; r < row + rowspan; r++) {
        for (let c = col; c < col + colspan; c++) {
          occupiedCells.add(`r${r},c${c}`);
        }
      }
    });
    const filteredMergeCells = mergedCellsInfo.filter((mergedCell) => {
      const {
        row,
        col,
        colspan,
        rowspan
      } = mergedCell;
      const localOccupiedCells = /* @__PURE__ */ new Set();
      let isOverlapping = false;
      for (let r = row; r < row + rowspan; r++) {
        for (let c = col; c < col + colspan; c++) {
          const cellId = `r${r},c${c}`;
          if (occupiedCells.has(cellId)) {
            warn(_MergedCellsCollection.IS_OVERLAPPING_WARNING(mergedCell));
            isOverlapping = true;
            break;
          }
          localOccupiedCells.add(cellId);
        }
        if (isOverlapping) {
          break;
        }
      }
      if (!isOverlapping) {
        occupiedCells.add(...localOccupiedCells);
      }
      return !isOverlapping;
    });
    return filteredMergeCells;
  }
  /**
   * Get a merged cell contained in the provided range.
   *
   * @param {CellRange} range The range to search merged cells in.
   * @param {boolean} [countPartials=false] If set to `true`, all the merged cells overlapping the range will be taken into calculation.
   * @returns {MergedCellCoords[]} Array of found merged cells.
   */
  getWithinRange(range) {
    let countPartials = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    const {
      row: rowStart,
      col: columnStart
    } = range.getTopStartCorner();
    const {
      row: rowEnd,
      col: columnEnd
    } = range.getBottomEndCorner();
    const result = [];
    for (let row = rowStart; row <= rowEnd; row++) {
      for (let column = columnStart; column <= columnEnd; column++) {
        const mergedCell = this.get(row, column);
        if (mergedCell && (countPartials || !countPartials && mergedCell.row === row && mergedCell.col === column)) {
          result.push(mergedCell);
        }
      }
    }
    return result;
  }
  /**
   * Add a merged cell to the container.
   *
   * @param {object} mergedCellInfo The merged cell information object. Has to contain `row`, `col`, `colspan` and `rowspan` properties.
   * @param {boolean} [auto=false] `true` if called internally by the plugin (usually in batch).
   * @returns {MergedCellCoords|boolean} Returns the new merged cell on success and `false` on failure.
   */
  add(mergedCellInfo) {
    let auto = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    const row = mergedCellInfo.row;
    const column = mergedCellInfo.col;
    const rowspan = mergedCellInfo.rowspan;
    const colspan = mergedCellInfo.colspan;
    const newMergedCell = new cellCoords_default(row, column, rowspan, colspan, this.hot._createCellCoords, this.hot._createCellRange);
    const alreadyExists = this.get(row, column);
    const isOverlapping = auto ? false : this.isOverlapping(newMergedCell);
    if (!alreadyExists && !isOverlapping) {
      if (this.hot) {
        newMergedCell.normalize(this.hot);
      }
      this.mergedCells.push(newMergedCell);
      _assertClassBrand45(_MergedCellsCollection_brand, this, _addMergedCellToMatrix).call(this, newMergedCell);
      return newMergedCell;
    }
    if (isOverlapping) {
      warn(_MergedCellsCollection.IS_OVERLAPPING_WARNING(newMergedCell));
    }
    return false;
  }
  /**
   * Remove a merged cell from the container. You can provide either the "starting coordinates"
   * of a merged cell, or any coordinates from the body of the merged cell.
   *
   * @param {number} row Row index.
   * @param {number} column Column index.
   * @returns {MergedCellCoords|boolean} Returns the removed merged cell on success and `false` on failure.
   */
  remove(row, column) {
    const mergedCell = this.get(row, column);
    const mergedCellIndex = mergedCell ? this.mergedCells.indexOf(mergedCell) : -1;
    if (mergedCell && mergedCellIndex !== -1) {
      this.mergedCells.splice(mergedCellIndex, 1);
      _assertClassBrand45(_MergedCellsCollection_brand, this, _removeMergedCellFromMatrix).call(this, mergedCell);
      return mergedCell;
    }
    return false;
  }
  /**
   * Clear all the merged cells.
   */
  clear() {
    arrayEach(this.mergedCells, (_ref2) => {
      let {
        row,
        col,
        rowspan,
        colspan
      } = _ref2;
      rangeEach(row, row + rowspan, (r) => {
        rangeEach(col, col + colspan, (c) => {
          const TD = this.hot.getCell(r, c);
          if (TD) {
            TD.removeAttribute("rowspan");
            TD.removeAttribute("colspan");
            TD.style.display = "";
          }
        });
      });
    });
    this.mergedCells.length = 0;
    this.mergedCellsMatrix = /* @__PURE__ */ new Map();
  }
  /**
   * Check if the provided merged cell overlaps with the others already added.
   *
   * @param {MergedCellCoords} mergedCell The merged cell to check against all others in the container.
   * @returns {boolean} `true` if the provided merged cell overlaps with the others, `false` otherwise.
   */
  isOverlapping(mergedCell) {
    const mergedCellRange = mergedCell.getRange();
    for (let i = 0; i < this.mergedCells.length; i++) {
      const otherMergedCell = this.mergedCells[i];
      const otherMergedCellRange = otherMergedCell.getRange();
      if (otherMergedCellRange.overlaps(mergedCellRange)) {
        return true;
      }
    }
    return false;
  }
  /**
   * Check whether the provided row/col coordinates direct to a first not hidden cell within merge area.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @returns {boolean}
   */
  isFirstRenderableMergedCell(row, column) {
    const mergeParent = this.get(row, column);
    if (!mergeParent) {
      return false;
    }
    const {
      row: mergeRow,
      col: mergeColumn,
      rowspan,
      colspan
    } = mergeParent;
    const overlayName = this.hot.view.getActiveOverlayName();
    const firstRenderedRow = ["top", "top_inline_start_corner"].includes(overlayName) ? 0 : this.hot.getFirstRenderedVisibleRow();
    const firstRenderedColumn = ["inline_start", "top_inline_start_corner", "bottom_inline_start_corner"].includes(overlayName) ? 0 : this.hot.getFirstRenderedVisibleColumn();
    const mergeCellsTopRow = clamp(firstRenderedRow, mergeRow, mergeRow + rowspan - 1);
    const mergeCellsStartColumn = clamp(firstRenderedColumn, mergeColumn, mergeColumn + colspan - 1);
    return this.hot.rowIndexMapper.getNearestNotHiddenIndex(mergeCellsTopRow, 1) === row && this.hot.columnIndexMapper.getNearestNotHiddenIndex(mergeCellsStartColumn, 1) === column;
  }
  /**
   * Get the first renderable coords of the merged cell at the provided coordinates.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @returns {CellCoords} A `CellCoords` object with the coordinates to the first renderable cell within the
   *                        merged cell.
   */
  getFirstRenderableCoords(row, column) {
    const mergeParent = this.get(row, column);
    if (!mergeParent || this.isFirstRenderableMergedCell(row, column)) {
      return this.hot._createCellCoords(row, column);
    }
    const firstRenderableRow = this.hot.rowIndexMapper.getNearestNotHiddenIndex(mergeParent.row, 1);
    const firstRenderableColumn = this.hot.columnIndexMapper.getNearestNotHiddenIndex(mergeParent.col, 1);
    return this.hot._createCellCoords(firstRenderableRow, firstRenderableColumn);
  }
  /**
   * Gets the start-most visual column index that do not intersect with other merged cells within the provided range.
   *
   * @param {CellRange} range The range to search within.
   * @param {number} visualColumnIndex The visual column index to start the search from.
   * @returns {number}
   */
  getStartMostColumnIndex(range, visualColumnIndex) {
    const indexes = _assertClassBrand45(_MergedCellsCollection_brand, this, _getNonIntersectingIndexes).call(this, range, "col", -1);
    let startMostIndex = visualColumnIndex;
    for (let i = 0; i < indexes.length; i++) {
      if (indexes[i] <= visualColumnIndex) {
        startMostIndex = indexes[i];
        break;
      }
    }
    return startMostIndex;
  }
  /**
   * Gets the end-most visual column index that do not intersect with other merged cells within the provided range.
   *
   * @param {CellRange} range The range to search within.
   * @param {number} visualColumnIndex The visual column index to start the search from.
   * @returns {number}
   */
  getEndMostColumnIndex(range, visualColumnIndex) {
    const indexes = _assertClassBrand45(_MergedCellsCollection_brand, this, _getNonIntersectingIndexes).call(this, range, "col", 1);
    let endMostIndex = visualColumnIndex;
    for (let i = 0; i < indexes.length; i++) {
      if (indexes[i] >= visualColumnIndex) {
        endMostIndex = indexes[i];
        break;
      }
    }
    return endMostIndex;
  }
  /**
   * Gets the top-most visual row index that do not intersect with other merged cells within the provided range.
   *
   * @param {CellRange} range The range to search within.
   * @param {number} visualRowIndex The visual row index to start the search from.
   * @returns {number}
   */
  getTopMostRowIndex(range, visualRowIndex) {
    const indexes = _assertClassBrand45(_MergedCellsCollection_brand, this, _getNonIntersectingIndexes).call(this, range, "row", -1);
    let topMostIndex = visualRowIndex;
    for (let i = 0; i < indexes.length; i++) {
      if (indexes[i] <= visualRowIndex) {
        topMostIndex = indexes[i];
        break;
      }
    }
    return topMostIndex;
  }
  /**
   * Gets the bottom-most visual row index that do not intersect with other merged cells within the provided range.
   *
   * @param {CellRange} range The range to search within.
   * @param {number} visualRowIndex The visual row index to start the search from.
   * @returns {number}
   */
  getBottomMostRowIndex(range, visualRowIndex) {
    const indexes = _assertClassBrand45(_MergedCellsCollection_brand, this, _getNonIntersectingIndexes).call(this, range, "row", 1);
    let bottomMostIndex = visualRowIndex;
    for (let i = 0; i < indexes.length; i++) {
      if (indexes[i] >= visualRowIndex) {
        bottomMostIndex = indexes[i];
        break;
      }
    }
    return bottomMostIndex;
  }
  /**
   * Shift the merged cell in the direction and by an offset defined in the arguments.
   *
   * @param {string} direction `right`, `left`, `up` or `down`.
   * @param {number} index Index where the change, which caused the shifting took place.
   * @param {number} count Number of rows/columns added/removed in the preceding action.
   */
  shiftCollections(direction, index, count) {
    const shiftVector = [0, 0];
    switch (direction) {
      case "right":
        shiftVector[0] += count;
        break;
      case "left":
        shiftVector[0] -= count;
        break;
      case "down":
        shiftVector[1] += count;
        break;
      case "up":
        shiftVector[1] -= count;
        break;
      default:
    }
    const removedMergedCells = [];
    this.mergedCells.forEach((currentMerge) => {
      currentMerge.shift(shiftVector, index);
      if (currentMerge.removed) {
        removedMergedCells.push(currentMerge);
      }
    });
    removedMergedCells.forEach((removedMerge) => {
      this.mergedCells.splice(this.mergedCells.indexOf(removedMerge), 1);
    });
    this.mergedCellsMatrix.clear();
    this.mergedCells.forEach((currentMerge) => {
      _assertClassBrand45(_MergedCellsCollection_brand, this, _addMergedCellToMatrix).call(this, currentMerge);
    });
  }
  /**
   * Adds a merged cell to the matrix.
   *
   * @param {MergedCellCoords} mergedCell The merged cell to add.
   */
};
function _getNonIntersectingIndexes(range, axis) {
  let scanDirection = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
  const indexes = /* @__PURE__ */ new Map();
  const from = scanDirection === 1 ? range.getTopStartCorner() : range.getBottomEndCorner();
  const to = scanDirection === 1 ? range.getBottomEndCorner() : range.getTopStartCorner();
  for (let row = from.row; scanDirection === 1 ? row <= to.row : row >= to.row; row += scanDirection) {
    for (let column = from.col; scanDirection === 1 ? column <= to.col : column >= to.col; column += scanDirection) {
      const index = axis === "row" ? row : column;
      const mergedCell = this.get(row, column);
      let lastIndex = index;
      if (mergedCell) {
        lastIndex = scanDirection === 1 ? mergedCell[axis] + mergedCell[`${axis}span`] - 1 : mergedCell[axis];
      }
      if (!indexes.has(index)) {
        indexes.set(index, /* @__PURE__ */ new Set());
      }
      indexes.get(index).add(lastIndex);
    }
  }
  return Array.from(new Set(Array.from(indexes.entries()).filter((_ref3) => {
    let [, set2] = _ref3;
    return set2.size === 1;
  }).flatMap((_ref4) => {
    let [, set2] = _ref4;
    return Array.from(set2);
  })));
}
function _addMergedCellToMatrix(mergedCell) {
  for (let row = mergedCell.row; row < mergedCell.row + mergedCell.rowspan; row++) {
    for (let col = mergedCell.col; col < mergedCell.col + mergedCell.colspan; col++) {
      if (!this.mergedCellsMatrix.has(row)) {
        this.mergedCellsMatrix.set(row, /* @__PURE__ */ new Map());
      }
      this.mergedCellsMatrix.get(row).set(col, mergedCell);
    }
  }
}
function _removeMergedCellFromMatrix(mergedCell) {
  for (let row = mergedCell.row; row < mergedCell.row + mergedCell.rowspan; row++) {
    for (let col = mergedCell.col; col < mergedCell.col + mergedCell.colspan; col++) {
      this.mergedCellsMatrix.get(row).delete(col);
    }
  }
}
var cellsCollection_default = MergedCellsCollection;

// node_modules/handsontable/plugins/mergeCells/calculations/autofill.mjs
function _defineProperty44(e, r, t) {
  return (r = _toPropertyKey44(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey44(t) {
  var i = _toPrimitive44(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive44(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var AutofillCalculations = class {
  constructor(plugin) {
    _defineProperty44(this, "plugin", void 0);
    _defineProperty44(this, "mergedCellsCollection", void 0);
    _defineProperty44(this, "currentFillData", null);
    this.plugin = plugin;
    this.mergedCellsCollection = this.plugin.mergedCellsCollection;
  }
  /**
   * Get the direction of the autofill process.
   *
   * @param {Array} baseArea The selection area.
   * @param {Array} fullArea The final area (base + drag).
   * @returns {string} `up`, `down`, `left` or `right`.
   */
  getDirection(baseArea, fullArea) {
    let direction = null;
    if (fullArea[0] === baseArea[0] && fullArea[1] === baseArea[1] && fullArea[3] === baseArea[3]) {
      direction = "down";
    } else if (fullArea[2] === baseArea[2] && fullArea[1] === baseArea[1] && fullArea[3] === baseArea[3]) {
      direction = "up";
    } else if (fullArea[1] === baseArea[1] && fullArea[2] === baseArea[2]) {
      direction = "right";
    } else {
      direction = "left";
    }
    return direction;
  }
  /**
   * Snap the drag area to the farthest merged cell, so it won't clip any of the merged cells.
   *
   * @param {Array} baseArea The base selected area.
   * @param {Array} fullArea The drag area.
   * @param {string} dragDirection The autofill drag direction.
   * @param {Array} foundMergedCells MergeCellCoords found in the base selection area.
   * @returns {Array} The new drag area.
   */
  snapDragArea(baseArea, fullArea, dragDirection, foundMergedCells) {
    const newDragArea = fullArea.slice(0);
    const fillSize = this.getAutofillSize(baseArea, fullArea, dragDirection);
    const [baseAreaStartRow, baseAreaStartColumn, baseAreaEndRow, baseAreaEndColumn] = baseArea;
    const verticalDirection = ["up", "down"].indexOf(dragDirection) > -1;
    const fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;
    const fulls = Math.floor(fillSize / fullCycle) * fullCycle;
    const partials = fillSize - fulls;
    const farthestCollection = this.getFarthestCollection(baseArea, fullArea, dragDirection, foundMergedCells);
    if (farthestCollection) {
      if (dragDirection === "down") {
        const fill = farthestCollection.row + farthestCollection.rowspan - baseAreaStartRow - partials;
        const newLimit = newDragArea[2] + fill;
        if (newLimit >= this.plugin.hot.countRows()) {
          newDragArea[2] -= partials;
        } else {
          newDragArea[2] += partials ? fill : 0;
        }
      } else if (dragDirection === "right") {
        const fill = farthestCollection.col + farthestCollection.colspan - baseAreaStartColumn - partials;
        const newLimit = newDragArea[3] + fill;
        if (newLimit >= this.plugin.hot.countCols()) {
          newDragArea[3] -= partials;
        } else {
          newDragArea[3] += partials ? fill : 0;
        }
      } else if (dragDirection === "up") {
        const fill = baseAreaEndRow - partials - farthestCollection.row + 1;
        const newLimit = newDragArea[0] + fill;
        if (newLimit < 0) {
          newDragArea[0] += partials;
        } else {
          newDragArea[0] -= partials ? fill : 0;
        }
      } else if (dragDirection === "left") {
        const fill = baseAreaEndColumn - partials - farthestCollection.col + 1;
        const newLimit = newDragArea[1] + fill;
        if (newLimit < 0) {
          newDragArea[1] += partials;
        } else {
          newDragArea[1] -= partials ? fill : 0;
        }
      }
    }
    this.updateCurrentFillCache({
      baseArea,
      dragDirection,
      foundMergedCells,
      fillSize,
      dragArea: newDragArea,
      cycleLength: fullCycle
    });
    return newDragArea;
  }
  /**
   * Update the current fill cache with the provided object.
   *
   * @private
   * @param {object} updateObject The current filled object cache.
   */
  updateCurrentFillCache(updateObject) {
    if (!this.currentFillData) {
      this.currentFillData = {};
    }
    extend(this.currentFillData, updateObject);
  }
  /**
   * Get the "length" of the drag area.
   *
   * @private
   * @param {Array} baseArea The base selection area.
   * @param {Array} fullArea The drag area (containing the base area).
   * @param {string} direction The drag direction.
   * @returns {number|null} The "length" (height or width, depending on the direction) of the drag.
   */
  getAutofillSize(baseArea, fullArea, direction) {
    const [baseAreaStartRow, baseAreaStartColumn, baseAreaEndRow, baseAreaEndColumn] = baseArea;
    const [dragAreaStartRow, dragAreaStartColumn, dragAreaEndRow, dragAreaEndColumn] = fullArea;
    switch (direction) {
      case "up":
        return baseAreaStartRow - dragAreaStartRow;
      case "down":
        return dragAreaEndRow - baseAreaEndRow;
      case "left":
        return baseAreaStartColumn - dragAreaStartColumn;
      case "right":
        return dragAreaEndColumn - baseAreaEndColumn;
      default:
        return null;
    }
  }
  /**
   * Trim the default drag area (containing the selection area) to the drag-only area.
   *
   * @private
   * @param {Array} baseArea The base selection area.
   * @param {Array} fullArea The base selection area extended by the drag area.
   * @param {string} direction Drag direction.
   * @returns {Array|null} Array representing the drag area coordinates.
   */
  getDragArea(baseArea, fullArea, direction) {
    const [baseAreaStartRow, baseAreaStartColumn, baseAreaEndRow, baseAreaEndColumn] = baseArea;
    const [fullAreaStartRow, fullAreaStartColumn, fullAreaEndRow, fullAreaEndColumn] = fullArea;
    switch (direction) {
      case "up":
        return [fullAreaStartRow, fullAreaStartColumn, baseAreaStartRow - 1, baseAreaEndColumn];
      case "down": {
        const mergedCell = this.mergedCellsCollection.get(fullAreaEndRow, baseAreaEndColumn);
        const rowShift = mergedCell ? mergedCell.rowspan - 1 : 0;
        return [baseAreaEndRow + 1, baseAreaStartColumn, fullAreaEndRow + rowShift, baseAreaEndColumn];
      }
      case "left":
        return [fullAreaStartRow, fullAreaStartColumn, baseAreaEndRow, baseAreaStartColumn - 1];
      case "right": {
        const mergedCell = this.mergedCellsCollection.get(fullAreaEndRow, baseAreaEndColumn);
        const columnShift = mergedCell ? mergedCell.colspan - 1 : 0;
        return [baseAreaStartRow, baseAreaEndColumn + columnShift, fullAreaEndRow, fullAreaEndColumn];
      }
      default:
        return null;
    }
  }
  /**
   * Get the to-be-farthest merged cell in the newly filled area.
   *
   * @private
   * @param {Array} baseArea The base selection area.
   * @param {Array} fullArea The drag area (containing the base area).
   * @param {string} direction The drag direction.
   * @param {Array} mergedCellArray Array of the merged cells found in the base area.
   * @returns {MergedCellCoords|null}
   */
  getFarthestCollection(baseArea, fullArea, direction, mergedCellArray) {
    const [baseAreaStartRow, baseAreaStartColumn, baseAreaEndRow, baseAreaEndColumn] = baseArea;
    const verticalDirection = ["up", "down"].indexOf(direction) > -1;
    const baseEnd = verticalDirection ? baseAreaEndRow : baseAreaEndColumn;
    const baseStart = verticalDirection ? baseAreaStartRow : baseAreaStartColumn;
    const fillSize = this.getAutofillSize(baseArea, fullArea, direction);
    const fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;
    const fulls = Math.floor(fillSize / fullCycle) * fullCycle;
    const partials = fillSize - fulls;
    let inclusionFunctionName = null;
    let farthestCollection = null;
    let endOfDragRecreationIndex = null;
    switch (direction) {
      case "up":
        inclusionFunctionName = "includesVertically";
        endOfDragRecreationIndex = baseEnd - partials + 1;
        break;
      case "left":
        inclusionFunctionName = "includesHorizontally";
        endOfDragRecreationIndex = baseEnd - partials + 1;
        break;
      case "down":
        inclusionFunctionName = "includesVertically";
        endOfDragRecreationIndex = baseStart + partials - 1;
        break;
      case "right":
        inclusionFunctionName = "includesHorizontally";
        endOfDragRecreationIndex = baseStart + partials - 1;
        break;
      default:
    }
    arrayEach(mergedCellArray, (currentCollection) => {
      if (currentCollection[inclusionFunctionName](endOfDragRecreationIndex) && currentCollection.isFarther(farthestCollection, direction)) {
        farthestCollection = currentCollection;
      }
    });
    return farthestCollection;
  }
  /**
   * Recreate the merged cells after the autofill process.
   *
   * @param {Array} changes Changes made.
   */
  recreateAfterDataPopulation(changes) {
    if (!this.currentFillData) {
      return;
    }
    const fillRange = this.getRangeFromChanges(changes);
    const foundMergedCells = this.currentFillData.foundMergedCells;
    const dragDirection = this.currentFillData.dragDirection;
    const inBounds = (current2, offset2) => {
      switch (dragDirection) {
        case "up":
          return current2.row - offset2 >= fillRange.from.row;
        case "down":
          return current2.row + current2.rowspan - 1 + offset2 <= fillRange.to.row;
        case "left":
          return current2.col - offset2 >= fillRange.from.column;
        case "right":
          return current2.col + current2.colspan - 1 + offset2 <= fillRange.to.column;
        default:
          return null;
      }
    };
    let fillOffset = 0;
    let current = null;
    let multiplier = 1;
    do {
      for (let j = 0; j < foundMergedCells.length; j += 1) {
        current = foundMergedCells[j];
        fillOffset = multiplier * this.currentFillData.cycleLength;
        if (inBounds(current, fillOffset)) {
          switch (dragDirection) {
            case "up":
              this.plugin.mergedCellsCollection.add({
                row: current.row - fillOffset,
                rowspan: current.rowspan,
                col: current.col,
                colspan: current.colspan
              }, true);
              break;
            case "down":
              this.plugin.mergedCellsCollection.add({
                row: current.row + fillOffset,
                rowspan: current.rowspan,
                col: current.col,
                colspan: current.colspan
              }, true);
              break;
            case "left":
              this.plugin.mergedCellsCollection.add({
                row: current.row,
                rowspan: current.rowspan,
                col: current.col - fillOffset,
                colspan: current.colspan
              }, true);
              break;
            case "right":
              this.plugin.mergedCellsCollection.add({
                row: current.row,
                rowspan: current.rowspan,
                col: current.col + fillOffset,
                colspan: current.colspan
              }, true);
              break;
            default:
          }
        }
        if (j === foundMergedCells.length - 1) {
          multiplier += 1;
        }
      }
    } while (inBounds(current, fillOffset));
    this.currentFillData = null;
    this.plugin.hot.render();
    if (foundMergedCells.length > 0) {
      this.plugin.ifChromeForceRepaint();
    }
  }
  /**
   * Get the drag range from the changes made.
   *
   * @private
   * @param {Array} changes The changes made.
   * @returns {object} Object with `from` and `to` properties, both containing `row` and `column` keys.
   */
  getRangeFromChanges(changes) {
    const rows = {
      min: null,
      max: null
    };
    const columns = {
      min: null,
      max: null
    };
    arrayEach(changes, (change) => {
      const rowIndex = change[0];
      const columnIndex = this.plugin.hot.propToCol(change[1]);
      if (rows.min === null || rowIndex < rows.min) {
        rows.min = rowIndex;
      }
      if (rows.max === null || rowIndex > rows.max) {
        rows.max = rowIndex;
      }
      if (columns.min === null || columnIndex < columns.min) {
        columns.min = columnIndex;
      }
      if (columns.max === null || columnIndex > columns.max) {
        columns.max = columnIndex;
      }
    });
    return {
      from: {
        row: rows.min,
        column: columns.min
      },
      to: {
        row: rows.max,
        column: columns.max
      }
    };
  }
  /**
   * Check if the drag area contains any merged cells.
   *
   * @param {Array} baseArea The base selection area.
   * @param {Array} fullArea The base area extended by the drag area.
   * @param {string} direction Drag direction.
   * @returns {boolean}
   */
  dragAreaOverlapsCollections(baseArea, fullArea, direction) {
    const dragArea = this.getDragArea(baseArea, fullArea, direction);
    const [dragAreaStartRow, dragAreaStartColumn, dragAreaEndRow, dragAreaEndColumn] = dragArea;
    const topLeft = this.plugin.hot._createCellCoords(dragAreaStartRow, dragAreaStartColumn);
    const bottomRight = this.plugin.hot._createCellCoords(dragAreaEndRow, dragAreaEndColumn);
    const dragRange = this.plugin.hot._createCellRange(topLeft, topLeft, bottomRight);
    const mergedCellsWithPartials = this.mergedCellsCollection.getWithinRange(dragRange, true);
    if (mergedCellsWithPartials.length === 0) {
      return false;
    }
    const mergedCellsWithoutPartials = this.mergedCellsCollection.getWithinRange(dragRange, false);
    if (mergedCellsWithoutPartials.length === 0) {
      return true;
    }
    if (direction === "up" || direction === "down") {
      return !mergedCellsWithoutPartials.every((_ref) => {
        let {
          colspan
        } = _ref;
        return colspan === dragRange.getWidth();
      });
    }
    return !mergedCellsWithoutPartials.every((_ref2) => {
      let {
        rowspan
      } = _ref2;
      return rowspan === dragRange.getHeight();
    });
  }
};
var autofill_default = AutofillCalculations;

// node_modules/handsontable/plugins/mergeCells/calculations/selection.mjs
function _defineProperty45(e, r, t) {
  return (r = _toPropertyKey45(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey45(t) {
  var i = _toPrimitive45(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive45(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var SelectionCalculations = class {
  constructor(plugin) {
    _defineProperty45(this, "plugin", void 0);
    _defineProperty45(this, "hot", void 0);
    _defineProperty45(this, "fullySelectedMergedCellClassName", "fullySelectedMergedCell");
    this.plugin = plugin;
    this.hot = plugin.hot;
  }
  /**
   * Generate an additional class name for the entirely-selected merged cells.
   *
   * @param {number} currentRow Visual row index of the currently processed cell.
   * @param {number} currentColumn Visual column index of the currently cell.
   * @param {Array} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow, endColumn]`.
   * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.
   * @returns {string|undefined} A `String`, which will act as an additional `className` to be added to the currently processed cell.
   */
  getSelectedMergedCellClassName(currentRow, currentColumn, cornersOfSelection, layerLevel) {
    const startRow = Math.min(cornersOfSelection[0], cornersOfSelection[2]);
    const startColumn = Math.min(cornersOfSelection[1], cornersOfSelection[3]);
    const endRow = Math.max(cornersOfSelection[0], cornersOfSelection[2]);
    const endColumn = Math.max(cornersOfSelection[1], cornersOfSelection[3]);
    if (layerLevel === void 0) {
      return;
    }
    const isFirstRenderableMergedCell = this.plugin.mergedCellsCollection.isFirstRenderableMergedCell(currentRow, currentColumn);
    if (!isFirstRenderableMergedCell) {
      return;
    }
    const mergedCell = this.plugin.mergedCellsCollection.get(currentRow, currentColumn);
    if (!mergedCell) {
      return;
    }
    const mergeRowEnd = mergedCell.getLastRow();
    const mergeColumnEnd = mergedCell.getLastColumn();
    const fullMergeAreaWithinSelection = startRow <= mergedCell.row && startColumn <= mergedCell.col && endRow >= mergeRowEnd && endColumn >= mergeColumnEnd;
    if (fullMergeAreaWithinSelection) {
      return `${this.fullySelectedMergedCellClassName}-${layerLevel}`;
    } else if (this.isMergeCellFullySelected(mergedCell, this.plugin.hot.getSelectedRange())) {
      return `${this.fullySelectedMergedCellClassName}-multiple`;
    }
  }
  /**
   * Check if the provided merged cell is fully selected (by one or many layers of selection).
   *
   * @param {MergedCellCoords} mergedCell The merged cell to be processed.
   * @param {CellRange[]} selectionRangesArray Array of selection ranges.
   * @returns {boolean}
   */
  isMergeCellFullySelected(mergedCell, selectionRangesArray) {
    const mergedCellIndividualCoords = [];
    if (!selectionRangesArray || !mergedCell) {
      return false;
    }
    for (let r = 0; r < mergedCell.rowspan; r += 1) {
      for (let c = 0; c < mergedCell.colspan; c += 1) {
        mergedCellIndividualCoords.push(this.hot._createCellCoords(mergedCell.row + r, mergedCell.col + c));
      }
    }
    for (let i = 0; i < mergedCellIndividualCoords.length; i += 1) {
      const insideSelections = [];
      for (let s = 0; s < selectionRangesArray.length; s += 1) {
        insideSelections[s] = selectionRangesArray[s].includes(mergedCellIndividualCoords[i]);
      }
      if (!insideSelections.includes(true)) {
        return false;
      }
    }
    return true;
  }
  /**
   * Generate an array of the entirely-selected merged cells' class names.
   *
   * @returns {string[]} An `Array` of `String`s. Each of these strings will act like class names to be removed from all the cells in the table.
   */
  getSelectedMergedCellClassNameToRemove() {
    const classNames = [];
    for (let i = 0; i <= 7; i += 1) {
      classNames.push(`${this.fullySelectedMergedCellClassName}-${i}`);
    }
    classNames.push(`${this.fullySelectedMergedCellClassName}-multiple`);
    return classNames;
  }
};
var selection_default = SelectionCalculations;

// node_modules/handsontable/plugins/mergeCells/contextMenuItem/toggleMerge.mjs
function toggleMergeItem(plugin) {
  return {
    key: "mergeCells",
    name() {
      const sel = this.getSelectedLast();
      if (sel) {
        const info = plugin.mergedCellsCollection.get(sel[0], sel[1]);
        if (info.row === sel[0] && info.col === sel[1] && info.row + info.rowspan - 1 === sel[2] && info.col + info.colspan - 1 === sel[3]) {
          return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_UNMERGE_CELLS);
        }
      }
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_MERGE_CELLS);
    },
    callback() {
      const currentRange = this.getSelectedRangeLast();
      if (!currentRange) {
        return;
      }
      currentRange.setDirection(this.isRtl() ? "NE-SW" : "NW-SE");
      const {
        from,
        to
      } = currentRange;
      plugin.toggleMerge(currentRange);
      this.selectCell(from.row, from.col, to.row, to.col, false);
    },
    disabled() {
      const sel = this.getSelectedLast();
      if (!sel) {
        return true;
      }
      const isSingleCell = cellCoords_default.isSingleCell({
        row: sel[0],
        col: sel[1],
        rowspan: sel[2] - sel[0] + 1,
        colspan: sel[3] - sel[1] + 1
      });
      return isSingleCell || this.selection.isSelectedByCorner();
    },
    hidden: false
  };
}

// node_modules/handsontable/utils/dataStructures/linkedList.mjs
function _defineProperty46(e, r, t) {
  return (r = _toPropertyKey46(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey46(t) {
  var i = _toPrimitive46(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive46(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var NodeStructure = class {
  constructor(data) {
    _defineProperty46(this, "data", void 0);
    _defineProperty46(this, "next", null);
    _defineProperty46(this, "prev", null);
    this.data = data;
  }
};
var LinkedList = class {
  constructor() {
    _defineProperty46(this, "first", null);
    _defineProperty46(this, "last", null);
  }
  /**
   * Add data to the end of linked list.
   *
   * @param {object} data Data which should be added.
   * @returns {NodeStructure} Returns the node which has been added.
   */
  push(data) {
    const node = new NodeStructure(data);
    if (this.first === null) {
      this.first = node;
      this.last = node;
    } else {
      const temp = this.last;
      this.last = node;
      node.prev = temp;
      temp.next = node;
    }
    return node;
  }
  /**
   * Add data to the beginning of linked list.
   *
   * @param {object} data Data which should be added.
   */
  unshift(data) {
    const node = new NodeStructure(data);
    if (this.first === null) {
      this.first = node;
      this.last = node;
    } else {
      const temp = this.first;
      this.first = node;
      node.next = temp;
      temp.prev = node;
    }
  }
  /**
   * In order traversal of the linked list.
   *
   * @param {Function} callback Callback which should be executed on each node.
   */
  inorder(callback) {
    let temp = this.first;
    while (temp) {
      const interrupt = callback(temp);
      if (temp === this.last || interrupt === true) {
        break;
      }
      temp = temp.next;
    }
  }
  /**
   * Remove data from the linked list.
   *
   * @param {object} data Data which should be removed.
   * @returns {boolean} Returns true if data has been removed.
   */
  remove(data) {
    if (this.first === null) {
      return false;
    }
    let temp = this.first;
    let next;
    let prev;
    while (temp) {
      if (temp.data === data) {
        next = temp.next;
        prev = temp.prev;
        if (next) {
          next.prev = prev;
        }
        if (prev) {
          prev.next = next;
        }
        if (temp === this.first) {
          this.first = next;
        }
        if (temp === this.last) {
          this.last = prev;
        }
        return true;
      }
      temp = temp.next;
    }
    return false;
  }
  /**
   * Check if linked list contains cycle.
   *
   * @returns {boolean} Returns true if linked list contains cycle.
   */
  hasCycle() {
    let fast = this.first;
    let slow = this.first;
    while (true) {
      if (fast === null) {
        return false;
      }
      fast = fast.next;
      if (fast === null) {
        return false;
      }
      fast = fast.next;
      slow = slow.next;
      if (fast === slow) {
        return true;
      }
    }
  }
  /**
   * Return last node from the linked list.
   *
   * @returns {NodeStructure} Last node.
   */
  pop() {
    if (this.last === null) {
      return null;
    }
    const temp = this.last;
    this.last = this.last.prev;
    return temp;
  }
  /**
   * Return first node from the linked list.
   *
   * @returns {NodeStructure} First node.
   */
  shift() {
    if (this.first === null) {
      return null;
    }
    const temp = this.first;
    this.first = this.first.next;
    return temp;
  }
  /**
   * Reverses the linked list recursively.
   */
  recursiveReverse() {
    function inverse(current, next) {
      if (!next) {
        return;
      }
      inverse(next, next.next);
      next.next = current;
    }
    if (!this.first) {
      return;
    }
    inverse(this.first, this.first.next);
    this.first.next = null;
    const temp = this.first;
    this.first = this.last;
    this.last = temp;
  }
  /**
   * Reverses the linked list iteratively.
   */
  reverse() {
    if (!this.first || !this.first.next) {
      return;
    }
    let current = this.first.next;
    let prev = this.first;
    let temp;
    while (current) {
      temp = current.next;
      current.next = prev;
      prev.prev = current;
      prev = current;
      current = temp;
    }
    this.first.next = null;
    this.last.prev = null;
    temp = this.first;
    this.first = prev;
    this.last = temp;
  }
};
var linkedList_default = LinkedList;

// node_modules/handsontable/plugins/mergeCells/focusOrder.mjs
function _classPrivateMethodInitSpec38(e, a) {
  _checkPrivateRedeclaration46(e, a), a.add(e);
}
function _classPrivateFieldInitSpec31(e, t, a) {
  _checkPrivateRedeclaration46(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration46(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldGet31(s, a) {
  return s.get(_assertClassBrand46(s, a));
}
function _classPrivateFieldSet29(s, a, r) {
  return s.set(_assertClassBrand46(s, a), r), r;
}
function _assertClassBrand46(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _cellsHorizontalOrder = /* @__PURE__ */ new WeakMap();
var _cellsVerticalOrder = /* @__PURE__ */ new WeakMap();
var _currentHorizontalLinkedNode = /* @__PURE__ */ new WeakMap();
var _currentVerticalLinkedNode = /* @__PURE__ */ new WeakMap();
var _mergedCellsGetter = /* @__PURE__ */ new WeakMap();
var _rowIndexMapper = /* @__PURE__ */ new WeakMap();
var _columnIndexMapper = /* @__PURE__ */ new WeakMap();
var _FocusOrder_brand = /* @__PURE__ */ new WeakSet();
var FocusOrder = class {
  constructor(_ref) {
    let {
      mergedCellsGetter,
      rowIndexMapper,
      columnIndexMapper
    } = _ref;
    _classPrivateMethodInitSpec38(this, _FocusOrder_brand);
    _classPrivateFieldInitSpec31(this, _cellsHorizontalOrder, new linkedList_default());
    _classPrivateFieldInitSpec31(this, _cellsVerticalOrder, new linkedList_default());
    _classPrivateFieldInitSpec31(this, _currentHorizontalLinkedNode, null);
    _classPrivateFieldInitSpec31(this, _currentVerticalLinkedNode, null);
    _classPrivateFieldInitSpec31(this, _mergedCellsGetter, null);
    _classPrivateFieldInitSpec31(this, _rowIndexMapper, null);
    _classPrivateFieldInitSpec31(this, _columnIndexMapper, null);
    _classPrivateFieldSet29(_mergedCellsGetter, this, mergedCellsGetter);
    _classPrivateFieldSet29(_rowIndexMapper, this, rowIndexMapper);
    _classPrivateFieldSet29(_columnIndexMapper, this, columnIndexMapper);
  }
  /**
   * Gets the currently selected node data from the vertical focus order list.
   *
   * @returns {NodeStructure}
   */
  getCurrentVerticalNode() {
    return _classPrivateFieldGet31(_currentVerticalLinkedNode, this).data;
  }
  /**
   * Gets the first node data from the vertical focus order list.
   *
   * @returns {NodeStructure}
   */
  getFirstVerticalNode() {
    return _classPrivateFieldGet31(_cellsVerticalOrder, this).first.data;
  }
  /**
   * Gets the next selected node data from the vertical focus order list.
   *
   * @returns {NodeStructure}
   */
  getNextVerticalNode() {
    return _classPrivateFieldGet31(_currentVerticalLinkedNode, this).next.data;
  }
  /**
   * Gets the previous selected node data from the vertical focus order list.
   *
   * @returns {NodeStructure}
   */
  getPrevVerticalNode() {
    return _classPrivateFieldGet31(_currentVerticalLinkedNode, this).prev.data;
  }
  /**
   * Gets the currently selected node data from the horizontal focus order list.
   *
   * @returns {NodeStructure}
   */
  getCurrentHorizontalNode() {
    return _classPrivateFieldGet31(_currentHorizontalLinkedNode, this).data;
  }
  /**
   * Gets the first node data from the horizontal focus order list.
   *
   * @returns {NodeStructure}
   */
  getFirstHorizontalNode() {
    return _classPrivateFieldGet31(_cellsHorizontalOrder, this).first.data;
  }
  /**
   * Gets the next selected node data from the horizontal focus order list.
   *
   * @returns {NodeStructure}
   */
  getNextHorizontalNode() {
    return _classPrivateFieldGet31(_currentHorizontalLinkedNode, this).next.data;
  }
  /**
   * Gets the previous selected node data from the horizontal focus order list.
   *
   * @returns {NodeStructure}
   */
  getPrevHorizontalNode() {
    return _classPrivateFieldGet31(_currentHorizontalLinkedNode, this).prev.data;
  }
  /**
   * Sets the previous node from the vertical focus order list as active.
   */
  setPrevNodeAsActive() {
    _classPrivateFieldSet29(_currentVerticalLinkedNode, this, _classPrivateFieldGet31(_currentVerticalLinkedNode, this).prev);
    _classPrivateFieldSet29(_currentHorizontalLinkedNode, this, _classPrivateFieldGet31(_currentHorizontalLinkedNode, this).prev);
  }
  /**
   * Sets the previous node from the horizontal focus order list as active.
   */
  setNextNodeAsActive() {
    _classPrivateFieldSet29(_currentVerticalLinkedNode, this, _classPrivateFieldGet31(_currentVerticalLinkedNode, this).next);
    _classPrivateFieldSet29(_currentHorizontalLinkedNode, this, _classPrivateFieldGet31(_currentHorizontalLinkedNode, this).next);
  }
  /**
   * Rebuilds the focus order list based on the provided selection.
   *
   * @param {CellRange} selectedRange The selected range to build the focus order for.
   */
  buildFocusOrder(selectedRange) {
    const topStart = selectedRange.getTopStartCorner();
    const bottomEnd = selectedRange.getBottomEndCorner();
    const visitedHorizontalCells = /* @__PURE__ */ new WeakSet();
    _classPrivateFieldSet29(_cellsHorizontalOrder, this, new linkedList_default());
    for (let r = topStart.row; r <= bottomEnd.row; r++) {
      if (_classPrivateFieldGet31(_rowIndexMapper, this).isHidden(r)) {
        continue;
      }
      for (let c = topStart.col; c <= bottomEnd.col; c++) {
        if (_classPrivateFieldGet31(_columnIndexMapper, this).isHidden(c)) {
          continue;
        }
        const node = _assertClassBrand46(_FocusOrder_brand, this, _pushOrderNode).call(this, selectedRange, _classPrivateFieldGet31(_cellsHorizontalOrder, this), visitedHorizontalCells, r, c);
        if (node) {
          _classPrivateFieldSet29(_currentHorizontalLinkedNode, this, node);
        }
      }
    }
    if (_classPrivateFieldGet31(_cellsHorizontalOrder, this).first) {
      _classPrivateFieldGet31(_cellsHorizontalOrder, this).first.prev = _classPrivateFieldGet31(_cellsHorizontalOrder, this).last;
      _classPrivateFieldGet31(_cellsHorizontalOrder, this).last.next = _classPrivateFieldGet31(_cellsHorizontalOrder, this).first;
    }
    const visitedVerticalCells = /* @__PURE__ */ new WeakSet();
    _classPrivateFieldSet29(_cellsVerticalOrder, this, new linkedList_default());
    for (let c = topStart.col; c <= bottomEnd.col; c++) {
      if (_classPrivateFieldGet31(_columnIndexMapper, this).isHidden(c)) {
        continue;
      }
      for (let r = topStart.row; r <= bottomEnd.row; r++) {
        if (_classPrivateFieldGet31(_rowIndexMapper, this).isHidden(r)) {
          continue;
        }
        const node = _assertClassBrand46(_FocusOrder_brand, this, _pushOrderNode).call(this, selectedRange, _classPrivateFieldGet31(_cellsVerticalOrder, this), visitedVerticalCells, r, c);
        if (node) {
          _classPrivateFieldSet29(_currentVerticalLinkedNode, this, node);
        }
      }
    }
    if (_classPrivateFieldGet31(_cellsVerticalOrder, this).first) {
      _classPrivateFieldGet31(_cellsVerticalOrder, this).first.prev = _classPrivateFieldGet31(_cellsVerticalOrder, this).last;
      _classPrivateFieldGet31(_cellsVerticalOrder, this).last.next = _classPrivateFieldGet31(_cellsVerticalOrder, this).first;
    }
  }
  /**
   * Sets the active node based on the provided row and column.
   *
   * @param {number} row The visual row index.
   * @param {number} column The visual column index.
   * @returns {FocusOrder}
   */
  setActiveNode(row, column) {
    _classPrivateFieldGet31(_cellsHorizontalOrder, this).inorder((node) => {
      const {
        rowStart,
        rowEnd,
        colStart,
        colEnd
      } = node.data;
      if (row >= rowStart && row <= rowEnd && column >= colStart && column <= colEnd) {
        _classPrivateFieldSet29(_currentHorizontalLinkedNode, this, node);
        return false;
      }
    });
    _classPrivateFieldGet31(_cellsVerticalOrder, this).inorder((node) => {
      const {
        rowStart,
        rowEnd,
        colStart,
        colEnd
      } = node.data;
      if (row >= rowStart && row <= rowEnd && column >= colStart && column <= colEnd) {
        _classPrivateFieldSet29(_currentVerticalLinkedNode, this, node);
        return false;
      }
    });
    return this;
  }
};
function _pushOrderNode(selectedRange, listOrder, mergeCellsVisitor, row, column) {
  const topStart = selectedRange.getTopStartCorner();
  const bottomEnd = selectedRange.getBottomEndCorner();
  const highlight = selectedRange.highlight.clone().normalize();
  const mergeParent = _classPrivateFieldGet31(_mergedCellsGetter, this).call(this, row, column);
  if (mergeParent && mergeCellsVisitor.has(mergeParent)) {
    return null;
  }
  const node = {
    colStart: column,
    colEnd: column,
    rowStart: row,
    rowEnd: row
  };
  if (mergeParent) {
    mergeCellsVisitor.add(mergeParent);
    if (mergeParent.row < topStart.row || mergeParent.row + mergeParent.rowspan - 1 > bottomEnd.row || mergeParent.col < topStart.col || mergeParent.col + mergeParent.colspan - 1 > bottomEnd.col) {
      return null;
    }
    node.colStart = mergeParent.col;
    node.colEnd = mergeParent.col + mergeParent.colspan - 1;
    node.rowStart = mergeParent.row;
    node.rowEnd = mergeParent.row + mergeParent.rowspan - 1;
  }
  const linkedNode = listOrder.push(node);
  if (row === highlight.row && column === highlight.col || mergeParent && highlight.row >= mergeParent.row && highlight.row <= mergeParent.row + mergeParent.rowspan - 1 && highlight.col >= mergeParent.col && highlight.col <= mergeParent.col + mergeParent.colspan - 1) {
    return linkedNode;
  }
  return null;
}

// node_modules/handsontable/plugins/mergeCells/utils.mjs
function sumCellsHeights(hotInstance, row, rowspan) {
  const {
    view,
    rowIndexMapper
  } = hotInstance;
  const stylesHandler = view.getStylesHandler();
  const defaultHeight = view.getDefaultRowHeight();
  let height = 0;
  for (let i = row; i < row + rowspan; i++) {
    if (!rowIndexMapper.isHidden(i)) {
      var _hotInstance$getRowHe;
      height += (_hotInstance$getRowHe = hotInstance.getRowHeight(i)) !== null && _hotInstance$getRowHe !== void 0 ? _hotInstance$getRowHe : defaultHeight;
      if (i === 0 && !stylesHandler.isClassicTheme()) {
        height += 1;
      }
    }
  }
  return height;
}

// node_modules/handsontable/plugins/mergeCells/renderer.mjs
function createMergeCellRenderer(plugin) {
  const {
    hot
  } = plugin;
  const {
    rowIndexMapper: rowMapper,
    columnIndexMapper: columnMapper
  } = hot;
  const updateNextCellsHeight = /* @__PURE__ */ new Map();
  function before() {
  }
  function after(TD, row, col) {
    const mergedCell = plugin.mergedCellsCollection.get(row, col);
    if (!isObject(mergedCell)) {
      TD.removeAttribute("rowspan");
      TD.removeAttribute("colspan");
      if (isSafari() && updateNextCellsHeight.has(row) && !hot.getSettings().rowHeaders) {
        TD.style.height = `${updateNextCellsHeight.get(row)}px`;
        updateNextCellsHeight.delete(row);
      }
      TD.style.display = "";
      return;
    }
    const {
      row: origRow,
      col: origColumn,
      colspan: origColspan,
      rowspan: origRowspan
    } = mergedCell;
    const [lastMergedRowIndex, lastMergedColumnIndex] = plugin.translateMergedCellToRenderable(origRow, origRowspan, origColumn, origColspan);
    const isVirtualRenderingEnabled = plugin.getSetting("virtualized");
    if (isSafari() && origColumn === 0 && !hot.getSettings().rowHeaders) {
      const height = sumCellsHeights(hot, origRow, origRowspan);
      updateNextCellsHeight.set(row, height / origRowspan);
    }
    const renderedRowIndex = rowMapper.getRenderableFromVisualIndex(row);
    const renderedColumnIndex = columnMapper.getRenderableFromVisualIndex(col);
    const maxRowSpan = lastMergedRowIndex - renderedRowIndex + 1;
    const maxColSpan = lastMergedColumnIndex - renderedColumnIndex + 1;
    let notHiddenRow = rowMapper.getNearestNotHiddenIndex(origRow, 1);
    let notHiddenColumn = columnMapper.getNearestNotHiddenIndex(origColumn, 1);
    if (isVirtualRenderingEnabled) {
      const overlayName = hot.view.getActiveOverlayName();
      if (!["top", "top_inline_start_corner"].includes(overlayName)) {
        notHiddenRow = Math.max(notHiddenRow, hot.getFirstRenderedVisibleRow());
      }
      if (!["inline_start", "top_inline_start_corner", "bottom_inline_start_corner"].includes(overlayName)) {
        notHiddenColumn = Math.max(notHiddenColumn, hot.getFirstRenderedVisibleColumn());
      }
    }
    const notHiddenRowspan = Math.min(origRowspan, maxRowSpan);
    const notHiddenColspan = Math.min(origColspan, maxColSpan);
    if (notHiddenRow === row && notHiddenColumn === col) {
      TD.setAttribute("rowspan", notHiddenRowspan);
      TD.setAttribute("colspan", notHiddenColspan);
    } else {
      TD.removeAttribute("rowspan");
      TD.removeAttribute("colspan");
      TD.style.display = "none";
    }
  }
  return {
    before,
    after
  };
}

// node_modules/handsontable/plugins/mergeCells/mergeCells.mjs
function _classPrivateMethodInitSpec39(e, a) {
  _checkPrivateRedeclaration47(e, a), a.add(e);
}
function _classPrivateFieldInitSpec32(e, t, a) {
  _checkPrivateRedeclaration47(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration47(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty47(e, r, t) {
  return (r = _toPropertyKey47(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey47(t) {
  var i = _toPrimitive47(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive47(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _classPrivateFieldSet30(s, a, r) {
  return s.set(_assertClassBrand47(s, a), r), r;
}
function _classPrivateFieldGet32(s, a) {
  return s.get(_assertClassBrand47(s, a));
}
function _assertClassBrand47(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
Hooks.getSingleton().register("beforeMergeCells");
Hooks.getSingleton().register("afterMergeCells");
Hooks.getSingleton().register("beforeUnmergeCells");
Hooks.getSingleton().register("afterUnmergeCells");
var PLUGIN_KEY25 = "mergeCells";
var PLUGIN_PRIORITY24 = 150;
var SHORTCUTS_GROUP12 = PLUGIN_KEY25;
var _lastSelectedFocus = /* @__PURE__ */ new WeakMap();
var _lastFocusDelta = /* @__PURE__ */ new WeakMap();
var _focusOrder = /* @__PURE__ */ new WeakMap();
var _cellRenderer = /* @__PURE__ */ new WeakMap();
var _MergeCells_brand = /* @__PURE__ */ new WeakSet();
var MergeCells = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec39(this, _MergeCells_brand);
    _defineProperty47(this, "mergedCellsCollection", null);
    _defineProperty47(this, "autofillCalculations", null);
    _defineProperty47(this, "selectionCalculations", null);
    _classPrivateFieldInitSpec32(this, _lastSelectedFocus, null);
    _classPrivateFieldInitSpec32(this, _lastFocusDelta, {
      row: 0,
      col: 0
    });
    _classPrivateFieldInitSpec32(this, _focusOrder, new FocusOrder({
      mergedCellsGetter: (row, column) => this.mergedCellsCollection.get(row, column),
      rowIndexMapper: this.hot.rowIndexMapper,
      columnIndexMapper: this.hot.columnIndexMapper
    }));
    _classPrivateFieldInitSpec32(this, _cellRenderer, createMergeCellRenderer(this));
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY25;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY24;
  }
  static get DEFAULT_SETTINGS() {
    return {
      [defaultMainSettingSymbol]: "cells",
      virtualized: false,
      cells: []
    };
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link MergeCells#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[PLUGIN_KEY25];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _this = this;
    if (this.enabled) {
      return;
    }
    this.mergedCellsCollection = new cellsCollection_default(this);
    this.autofillCalculations = new autofill_default(this);
    this.selectionCalculations = new selection_default(this);
    this.addHook("afterInit", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onAfterInit3).call(_this, ...args);
    });
    this.addHook("modifyTransformFocus", function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onModifyTransformFocus).call(_this, ...args);
    });
    this.addHook("modifyTransformStart", function() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onModifyTransformStart).call(_this, ...args);
    });
    this.addHook("modifyTransformEnd", function() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onModifyTransformEnd).call(_this, ...args);
    });
    this.addHook("beforeSelectionHighlightSet", function() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onBeforeSelectionHighlightSet).call(_this, ...args);
    });
    this.addHook("beforeSetRangeStart", function() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onBeforeSetRangeStart).call(_this, ...args);
    });
    this.addHook("beforeSetRangeStartOnly", function() {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onBeforeSetRangeStart).call(_this, ...args);
    });
    this.addHook("beforeSelectionFocusSet", function() {
      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onBeforeSelectionFocusSet).call(_this, ...args);
    });
    this.addHook("afterSelectionFocusSet", function() {
      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        args[_key9] = arguments[_key9];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onAfterSelectionFocusSet).call(_this, ...args);
    });
    this.addHook("afterSelectionEnd", function() {
      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        args[_key10] = arguments[_key10];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onAfterSelectionEnd2).call(_this, ...args);
    });
    this.addHook("modifyGetCellCoords", function() {
      for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
        args[_key11] = arguments[_key11];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onModifyGetCellCoords).call(_this, ...args);
    });
    this.addHook("modifyGetCoordsElement", function() {
      for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
        args[_key12] = arguments[_key12];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onModifyGetCellCoords).call(_this, ...args);
    });
    this.addHook("afterIsMultipleSelection", function() {
      for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
        args[_key13] = arguments[_key13];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onAfterIsMultipleSelection).call(_this, ...args);
    });
    this.addHook("afterRenderer", function() {
      return _classPrivateFieldGet32(_cellRenderer, _this).after(...arguments);
    });
    this.addHook("afterContextMenuDefaultOptions", function() {
      for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
        args[_key14] = arguments[_key14];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _addMergeActionsToContextMenu).call(_this, ...args);
    });
    this.addHook("afterGetCellMeta", function() {
      for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
        args[_key15] = arguments[_key15];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onAfterGetCellMeta3).call(_this, ...args);
    });
    this.addHook("afterViewportRowCalculatorOverride", function() {
      for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
        args[_key16] = arguments[_key16];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onAfterViewportRowCalculatorOverride).call(_this, ...args);
    });
    this.addHook("afterViewportColumnCalculatorOverride", function() {
      for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {
        args[_key17] = arguments[_key17];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onAfterViewportColumnCalculatorOverride).call(_this, ...args);
    });
    this.addHook("modifyAutofillRange", function() {
      for (var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {
        args[_key18] = arguments[_key18];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onModifyAutofillRange).call(_this, ...args);
    });
    this.addHook("afterCreateCol", function() {
      for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {
        args[_key19] = arguments[_key19];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onAfterCreateCol2).call(_this, ...args);
    });
    this.addHook("afterRemoveCol", function() {
      for (var _len20 = arguments.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {
        args[_key20] = arguments[_key20];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onAfterRemoveCol2).call(_this, ...args);
    });
    this.addHook("afterCreateRow", function() {
      for (var _len21 = arguments.length, args = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {
        args[_key21] = arguments[_key21];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onAfterCreateRow2).call(_this, ...args);
    });
    this.addHook("afterRemoveRow", function() {
      for (var _len22 = arguments.length, args = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {
        args[_key22] = arguments[_key22];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onAfterRemoveRow2).call(_this, ...args);
    });
    this.addHook("afterChange", function() {
      for (var _len23 = arguments.length, args = new Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {
        args[_key23] = arguments[_key23];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onAfterChange3).call(_this, ...args);
    });
    this.addHook("beforeDrawBorders", function() {
      for (var _len24 = arguments.length, args = new Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {
        args[_key24] = arguments[_key24];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onBeforeDrawAreaBorders).call(_this, ...args);
    });
    this.addHook("afterDrawSelection", function() {
      for (var _len25 = arguments.length, args = new Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {
        args[_key25] = arguments[_key25];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onAfterDrawSelection).call(_this, ...args);
    });
    this.addHook("beforeRemoveCellClassNames", function() {
      for (var _len26 = arguments.length, args = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {
        args[_key26] = arguments[_key26];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onBeforeRemoveCellClassNames).call(_this, ...args);
    });
    this.addHook("beforeBeginEditing", function() {
      for (var _len27 = arguments.length, args = new Array(_len27), _key27 = 0; _key27 < _len27; _key27++) {
        args[_key27] = arguments[_key27];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onBeforeBeginEditing).call(_this, ...args);
    });
    this.addHook("modifyRowHeightByOverlayName", function() {
      for (var _len28 = arguments.length, args = new Array(_len28), _key28 = 0; _key28 < _len28; _key28++) {
        args[_key28] = arguments[_key28];
      }
      return _assertClassBrand47(_MergeCells_brand, _this, _onModifyRowHeightByOverlayName).call(_this, ...args);
    });
    this.addHook("beforeUndoStackChange", (action, source) => {
      if (source === "MergeCells") {
        return false;
      }
    });
    this.registerShortcuts();
    super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.clearCollections();
    this.unregisterShortcuts();
    this.hot.render();
    super.disablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the
   * following configuration options:
   *  - [`mergeCells`](@/api/options.md#mergecells)
   */
  updatePlugin() {
    this.disablePlugin();
    this.enablePlugin();
    this.generateFromSettings();
    super.updatePlugin();
  }
  /**
   * If the browser is recognized as Chrome, force an additional repaint to prevent showing the effects of a Chrome bug.
   *
   * Issue described in https://github.com/handsontable/dev-handsontable/issues/521.
   *
   * @private
   */
  ifChromeForceRepaint() {
    if (!isChrome()) {
      return;
    }
    const rowsToRefresh = [];
    let rowIndexesToRefresh = [];
    this.mergedCellsCollection.mergedCells.forEach((mergedCell) => {
      const {
        row,
        rowspan
      } = mergedCell;
      for (let r = row + 1; r < row + rowspan; r++) {
        rowIndexesToRefresh.push(r);
      }
    });
    rowIndexesToRefresh = [...new Set(rowIndexesToRefresh)];
    rowIndexesToRefresh.forEach((rowIndex) => {
      const renderableRowIndex = this.hot.rowIndexMapper.getRenderableFromVisualIndex(rowIndex);
      this.hot.view._wt.wtOverlays.getOverlays(true).map((overlay) => (overlay === null || overlay === void 0 ? void 0 : overlay.name) === "master" ? overlay : overlay.clone.wtTable).forEach((wtTableRef) => {
        const rowToRefresh = wtTableRef.getRow(renderableRowIndex);
        if (rowToRefresh) {
          rowToRefresh.style.background = getStyle(rowToRefresh, "backgroundColor").replace(")", ", 0.99)");
          rowsToRefresh.push(rowToRefresh);
        }
      });
    });
    this.hot._registerTimeout(() => {
      rowsToRefresh.forEach((rowElement) => {
        var _getStyle;
        rowElement.style.background = (_getStyle = getStyle(rowElement, "backgroundColor")) === null || _getStyle === void 0 ? void 0 : _getStyle.replace(", 0.99)", ")");
      });
    }, 1);
  }
  /**
   * Validates a single setting object, represented by a single merged cell information object.
   *
   * @private
   * @param {object} setting An object with `row`, `col`, `rowspan` and `colspan` properties.
   * @returns {boolean}
   */
  validateSetting(setting) {
    if (!setting) {
      return false;
    }
    if (cellCoords_default.containsNegativeValues(setting)) {
      warn(cellCoords_default.NEGATIVE_VALUES_WARNING(setting));
      return false;
    }
    if (cellCoords_default.isOutOfBounds(setting, this.hot.countRows(), this.hot.countCols())) {
      warn(cellCoords_default.IS_OUT_OF_BOUNDS_WARNING(setting));
      return false;
    }
    if (cellCoords_default.isSingleCell(setting)) {
      warn(cellCoords_default.IS_SINGLE_CELL(setting));
      return false;
    }
    if (cellCoords_default.containsZeroSpan(setting)) {
      warn(cellCoords_default.ZERO_SPAN_WARNING(setting));
      return false;
    }
    return true;
  }
  /**
   * Generates the merged cells from the settings provided to the plugin.
   *
   * @private
   */
  generateFromSettings() {
    const validSettings = this.getSetting("cells").filter((mergeCellInfo) => this.validateSetting(mergeCellInfo));
    const nonOverlappingSettings = this.mergedCellsCollection.filterOverlappingMergeCells(validSettings);
    const populatedNulls = [];
    nonOverlappingSettings.forEach((mergeCellInfo) => {
      const {
        row,
        col,
        rowspan,
        colspan
      } = mergeCellInfo;
      const from = this.hot._createCellCoords(row, col);
      const to = this.hot._createCellCoords(row + rowspan - 1, col + colspan - 1);
      const mergeRange = this.hot._createCellRange(from, from, to);
      this.mergeRange(mergeRange, true, true);
      for (let r = row; r < row + rowspan; r++) {
        for (let c = col; c < col + colspan; c++) {
          if (r !== row || c !== col) {
            populatedNulls.push([r, c, null]);
          }
        }
      }
    });
    if (populatedNulls.length === 0) {
      return;
    }
    this.hot.setDataAtCell(populatedNulls, void 0, void 0, this.pluginName);
  }
  /**
   * Clears the merged cells from the merged cell container.
   */
  clearCollections() {
    this.mergedCellsCollection.clear();
  }
  /**
   * Returns `true` if a range is mergeable.
   *
   * @private
   * @param {object} newMergedCellInfo Merged cell information object to test.
   * @param {boolean} [auto=false] `true` if triggered at initialization.
   * @returns {boolean}
   */
  canMergeRange(newMergedCellInfo) {
    let auto = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    return auto ? true : this.validateSetting(newMergedCellInfo);
  }
  /**
   * Merges the selection provided as a cell range.
   *
   * @param {CellRange} [cellRange] Selection cell range.
   */
  mergeSelection() {
    let cellRange = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.hot.getSelectedRangeLast();
    if (!cellRange) {
      return;
    }
    cellRange.setDirection(this.hot.isRtl() ? "NE-SW" : "NW-SE");
    const {
      from,
      to
    } = cellRange;
    this.unmergeRange(cellRange, true);
    this.mergeRange(cellRange);
    this.hot.selectCell(from.row, from.col, to.row, to.col, false);
  }
  /**
   * Unmerges the selection provided as a cell range.
   *
   * @param {CellRange} [cellRange] Selection cell range.
   */
  unmergeSelection() {
    let cellRange = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.hot.getSelectedRangeLast();
    if (!cellRange) {
      return;
    }
    const {
      from,
      to
    } = cellRange;
    this.unmergeRange(cellRange, true);
    this.hot.selectCell(from.row, from.col, to.row, to.col, false);
  }
  /**
   * Merges cells in the provided cell range.
   *
   * @private
   * @param {CellRange} cellRange Cell range to merge.
   * @param {boolean} [auto=false] `true` if is called automatically, e.g. At initialization.
   * @param {boolean} [preventPopulation=false] `true`, if the method should not run `populateFromArray` at the end,
   *   but rather return its arguments.
   * @returns {Array|boolean} Returns an array of [row, column, dataUnderCollection] if preventPopulation is set to
   *   true. If the the merging process went successful, it returns `true`, otherwise - `false`.
   * @fires Hooks#beforeMergeCells
   * @fires Hooks#afterMergeCells
   */
  mergeRange(cellRange) {
    let auto = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    let preventPopulation = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    const topStart = cellRange.getTopStartCorner();
    const bottomEnd = cellRange.getBottomEndCorner();
    const mergeParent = {
      row: topStart.row,
      col: topStart.col,
      rowspan: bottomEnd.row - topStart.row + 1,
      colspan: bottomEnd.col - topStart.col + 1
    };
    const clearedData = [];
    let populationInfo = null;
    if (!this.canMergeRange(mergeParent, auto)) {
      return false;
    }
    this.hot.runHooks("beforeMergeCells", cellRange, auto);
    rangeEach(0, mergeParent.rowspan - 1, (i) => {
      rangeEach(0, mergeParent.colspan - 1, (j) => {
        let clearedValue = null;
        if (!clearedData[i]) {
          clearedData[i] = [];
        }
        if (i === 0 && j === 0) {
          clearedValue = this.hot.getSourceDataAtCell(this.hot.toPhysicalRow(mergeParent.row), this.hot.toPhysicalColumn(mergeParent.col));
        } else {
          this.hot.setCellMeta(mergeParent.row + i, mergeParent.col + j, "hidden", true);
        }
        clearedData[i][j] = clearedValue;
      });
    });
    this.hot.setCellMeta(mergeParent.row, mergeParent.col, "spanned", true);
    const mergedCellAdded = this.mergedCellsCollection.add(mergeParent, auto);
    if (mergedCellAdded) {
      if (preventPopulation) {
        populationInfo = [mergeParent.row, mergeParent.col, clearedData];
      } else {
        this.hot.populateFromArray(mergeParent.row, mergeParent.col, clearedData, void 0, void 0, this.pluginName);
      }
      if (!auto) {
        this.ifChromeForceRepaint();
      }
      this.hot.runHooks("afterMergeCells", cellRange, mergeParent, auto);
      return populationInfo;
    }
    return true;
  }
  /**
   * Unmerges the selection provided as a cell range. If no cell range is provided, it uses the current selection.
   *
   * @private
   * @param {CellRange} cellRange Selection cell range.
   * @param {boolean} [auto=false] `true` if called automatically by the plugin.
   *
   * @fires Hooks#beforeUnmergeCells
   * @fires Hooks#afterUnmergeCells
   */
  unmergeRange(cellRange) {
    let auto = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    const mergedCells = this.mergedCellsCollection.getWithinRange(cellRange);
    if (mergedCells.length === 0) {
      return;
    }
    this.hot.runHooks("beforeUnmergeCells", cellRange, auto);
    arrayEach(mergedCells, (currentCollection) => {
      this.mergedCellsCollection.remove(currentCollection.row, currentCollection.col);
      rangeEach(0, currentCollection.rowspan - 1, (i) => {
        rangeEach(0, currentCollection.colspan - 1, (j) => {
          this.hot.removeCellMeta(currentCollection.row + i, currentCollection.col + j, "hidden");
          this.hot.removeCellMeta(currentCollection.row + i, currentCollection.col + j, "copyable");
        });
      });
      this.hot.removeCellMeta(currentCollection.row, currentCollection.col, "spanned");
    });
    this.hot.runHooks("afterUnmergeCells", cellRange, auto);
    this.hot.render();
  }
  /**
   * Merges or unmerges, based on the cell range provided as `cellRange`.
   *
   * @private
   * @param {CellRange} cellRange The cell range to merge or unmerged.
   */
  toggleMerge(cellRange) {
    const {
      from,
      to
    } = cellRange.clone().normalize();
    const mergedCell = this.mergedCellsCollection.get(from.row, from.col);
    const mergedCellCoversWholeRange = mergedCell.row === from.row && mergedCell.col === from.col && mergedCell.row + mergedCell.rowspan - 1 === to.row && mergedCell.col + mergedCell.colspan - 1 === to.col;
    if (mergedCellCoversWholeRange) {
      this.unmergeRange(cellRange);
    } else {
      this.mergeSelection(cellRange);
    }
  }
  /**
   * Merges the specified range.
   *
   * @param {number} startRow Start row of the merged cell.
   * @param {number} startColumn Start column of the merged cell.
   * @param {number} endRow End row of the merged cell.
   * @param {number} endColumn End column of the merged cell.
   * @fires Hooks#beforeMergeCells
   * @fires Hooks#afterMergeCells
   */
  merge(startRow, startColumn, endRow, endColumn) {
    const start = this.hot._createCellCoords(startRow, startColumn);
    const end = this.hot._createCellCoords(endRow, endColumn);
    this.mergeRange(this.hot._createCellRange(start, start, end));
  }
  /**
   * Unmerges the merged cell in the provided range.
   *
   * @param {number} startRow Start row of the merged cell.
   * @param {number} startColumn Start column of the merged cell.
   * @param {number} endRow End row of the merged cell.
   * @param {number} endColumn End column of the merged cell.
   * @fires Hooks#beforeUnmergeCells
   * @fires Hooks#afterUnmergeCells
   */
  unmerge(startRow, startColumn, endRow, endColumn) {
    const start = this.hot._createCellCoords(startRow, startColumn);
    const end = this.hot._createCellCoords(endRow, endColumn);
    this.unmergeRange(this.hot._createCellRange(start, start, end));
  }
  /**
   * Register shortcuts responsible for toggling a merge.
   *
   * @private
   */
  registerShortcuts() {
    const shortcutManager = this.hot.getShortcutManager();
    const gridContext = shortcutManager.getContext("grid");
    gridContext.addShortcut({
      keys: [["Control", "m"]],
      callback: () => {
        const range = this.hot.getSelectedRangeLast();
        if (range && !range.isSingleHeader()) {
          this.toggleMerge(range);
          this.hot.render();
        }
      },
      runOnlyIf: (event) => !event.altKey,
      // right ALT in some systems triggers ALT+CTRL
      group: SHORTCUTS_GROUP12
    });
  }
  /**
   * Unregister shortcuts responsible for toggling a merge.
   *
   * @private
   */
  unregisterShortcuts() {
    const shortcutManager = this.hot.getShortcutManager();
    const gridContext = shortcutManager.getContext("grid");
    gridContext.removeShortcutsByGroup(SHORTCUTS_GROUP12);
  }
  /**
   * Modifies the information on whether the current selection contains multiple cells. The `afterIsMultipleSelection`
   * hook callback.
   *
   * @param {boolean} isMultiple Determines whether the current selection contains multiple cells.
   * @returns {boolean}
   */
  /**
   * Modify viewport start when needed. We extend viewport when merged cells aren't fully visible.
   *
   * @private
   * @param {object} calc The row calculator object.
   * @param {number} nrOfColumns Number of visual columns.
   */
  modifyViewportRowStart(calc, nrOfColumns) {
    const rowMapper = this.hot.rowIndexMapper;
    const visualStartRow = rowMapper.getVisualFromRenderableIndex(calc.startRow);
    for (let visualColumnIndex = 0; visualColumnIndex < nrOfColumns; visualColumnIndex += 1) {
      const mergeParentForViewportStart = this.mergedCellsCollection.get(visualStartRow, visualColumnIndex);
      if (isObject(mergeParentForViewportStart)) {
        const renderableIndexAtMergeStart = rowMapper.getRenderableFromVisualIndex(rowMapper.getNearestNotHiddenIndex(mergeParentForViewportStart.row, 1));
        if (renderableIndexAtMergeStart < calc.startRow) {
          calc.startRow = renderableIndexAtMergeStart;
          this.modifyViewportRowStart(calc, nrOfColumns);
          return;
        }
      }
    }
  }
  /**
   *  Modify viewport end when needed. We extend viewport when merged cells aren't fully visible.
   *
   * @private
   * @param {object} calc The row calculator object.
   * @param {number} nrOfColumns Number of visual columns.
   */
  modifyViewportRowEnd(calc, nrOfColumns) {
    const rowMapper = this.hot.rowIndexMapper;
    const visualEndRow = rowMapper.getVisualFromRenderableIndex(calc.endRow);
    for (let visualColumnIndex = 0; visualColumnIndex < nrOfColumns; visualColumnIndex += 1) {
      const mergeParentForViewportEnd = this.mergedCellsCollection.get(visualEndRow, visualColumnIndex);
      if (isObject(mergeParentForViewportEnd)) {
        const mergeEnd = mergeParentForViewportEnd.row + mergeParentForViewportEnd.rowspan - 1;
        const renderableIndexAtMergeEnd = rowMapper.getRenderableFromVisualIndex(rowMapper.getNearestNotHiddenIndex(mergeEnd, -1));
        if (renderableIndexAtMergeEnd > calc.endRow) {
          calc.endRow = renderableIndexAtMergeEnd;
          this.modifyViewportRowEnd(calc, nrOfColumns);
          return;
        }
      }
    }
  }
  /**
   * `afterViewportColumnCalculatorOverride` hook callback.
   *
   * @param {object} calc The column calculator object.
   */
  /**
   * Modify viewport start when needed. We extend viewport when merged cells aren't fully visible.
   *
   * @private
   * @param {object} calc The column calculator object.
   * @param {number} nrOfRows Number of visual rows.
   */
  modifyViewportColumnStart(calc, nrOfRows) {
    const columnMapper = this.hot.columnIndexMapper;
    const visualStartCol = columnMapper.getVisualFromRenderableIndex(calc.startColumn);
    for (let visualRowIndex = 0; visualRowIndex < nrOfRows; visualRowIndex += 1) {
      const mergeParentForViewportStart = this.mergedCellsCollection.get(visualRowIndex, visualStartCol);
      if (isObject(mergeParentForViewportStart)) {
        const renderableIndexAtMergeStart = columnMapper.getRenderableFromVisualIndex(columnMapper.getNearestNotHiddenIndex(mergeParentForViewportStart.col, 1));
        if (renderableIndexAtMergeStart < calc.startColumn) {
          calc.startColumn = renderableIndexAtMergeStart;
          this.modifyViewportColumnStart(calc, nrOfRows);
          return;
        }
      }
    }
  }
  /**
   *  Modify viewport end when needed. We extend viewport when merged cells aren't fully visible.
   *
   * @private
   * @param {object} calc The column calculator object.
   * @param {number} nrOfRows Number of visual rows.
   */
  modifyViewportColumnEnd(calc, nrOfRows) {
    const columnMapper = this.hot.columnIndexMapper;
    const visualEndCol = columnMapper.getVisualFromRenderableIndex(calc.endColumn);
    for (let visualRowIndex = 0; visualRowIndex < nrOfRows; visualRowIndex += 1) {
      const mergeParentForViewportEnd = this.mergedCellsCollection.get(visualRowIndex, visualEndCol);
      if (isObject(mergeParentForViewportEnd)) {
        const mergeEnd = mergeParentForViewportEnd.col + mergeParentForViewportEnd.colspan - 1;
        const renderableIndexAtMergeEnd = columnMapper.getRenderableFromVisualIndex(columnMapper.getNearestNotHiddenIndex(mergeEnd, -1));
        if (renderableIndexAtMergeEnd > calc.endColumn) {
          calc.endColumn = renderableIndexAtMergeEnd;
          this.modifyViewportColumnEnd(calc, nrOfRows);
          return;
        }
      }
    }
  }
  /**
   * Translates merged cell coordinates to renderable indexes.
   *
   * @private
   * @param {number} parentRow Visual row index.
   * @param {number} rowspan Rowspan which describes shift which will be applied to parent row
   *                         to calculate renderable index which points to the most bottom
   *                         index position. Pass rowspan as `0` to calculate the most top
   *                         index position.
   * @param {number} parentColumn Visual column index.
   * @param {number} colspan Colspan which describes shift which will be applied to parent column
   *                         to calculate renderable index which points to the most right
   *                         index position. Pass colspan as `0` to calculate the most left
   *                         index position.
   * @returns {number[]}
   */
  translateMergedCellToRenderable(parentRow, rowspan, parentColumn, colspan) {
    const {
      rowIndexMapper: rowMapper,
      columnIndexMapper: columnMapper
    } = this.hot;
    let firstNonHiddenRow;
    let firstNonHiddenColumn;
    if (rowspan === 0) {
      firstNonHiddenRow = rowMapper.getNearestNotHiddenIndex(parentRow, 1);
    } else {
      firstNonHiddenRow = rowMapper.getNearestNotHiddenIndex(parentRow + rowspan - 1, -1);
    }
    if (colspan === 0) {
      firstNonHiddenColumn = columnMapper.getNearestNotHiddenIndex(parentColumn, 1);
    } else {
      firstNonHiddenColumn = columnMapper.getNearestNotHiddenIndex(parentColumn + colspan - 1, -1);
    }
    const renderableRow = parentRow >= 0 ? rowMapper.getRenderableFromVisualIndex(firstNonHiddenRow) : parentRow;
    const renderableColumn = parentColumn >= 0 ? columnMapper.getRenderableFromVisualIndex(firstNonHiddenColumn) : parentColumn;
    return [renderableRow, renderableColumn];
  }
  /**
   * The `modifyAutofillRange` hook callback.
   *
   * @param {Array} fullArea The drag + base area coordinates.
   * @param {Array} baseArea The selection information.
   * @returns {Array} The new drag area.
   */
};
function _onAfterInit3() {
  this.generateFromSettings();
  this.hot.render();
}
function _onAfterIsMultipleSelection(isMultiple) {
  if (isMultiple) {
    const mergedCells = this.mergedCellsCollection.mergedCells;
    const selectionRange = this.hot.getSelectedRangeLast();
    const topStartCoords = selectionRange.getTopStartCorner();
    const bottomEndCoords = selectionRange.getBottomEndCorner();
    for (let group = 0; group < mergedCells.length; group += 1) {
      if (topStartCoords.row === mergedCells[group].row && topStartCoords.col === mergedCells[group].col && bottomEndCoords.row === mergedCells[group].row + mergedCells[group].rowspan - 1 && bottomEndCoords.col === mergedCells[group].col + mergedCells[group].colspan - 1) {
        return false;
      }
    }
  }
  return isMultiple;
}
function _onModifyTransformFocus(delta) {
  _classPrivateFieldGet32(_lastFocusDelta, this).row = delta.row;
  _classPrivateFieldGet32(_lastFocusDelta, this).col = delta.col;
}
function _onModifyTransformStart(delta) {
  const selectedRange = this.hot.getSelectedRangeLast();
  const {
    highlight
  } = selectedRange;
  const {
    columnIndexMapper,
    rowIndexMapper
  } = this.hot;
  if (_classPrivateFieldGet32(_lastSelectedFocus, this)) {
    if (rowIndexMapper.getRenderableFromVisualIndex(_classPrivateFieldGet32(_lastSelectedFocus, this).row) !== null) {
      highlight.row = _classPrivateFieldGet32(_lastSelectedFocus, this).row;
    }
    if (columnIndexMapper.getRenderableFromVisualIndex(_classPrivateFieldGet32(_lastSelectedFocus, this).col) !== null) {
      highlight.col = _classPrivateFieldGet32(_lastSelectedFocus, this).col;
    }
    _classPrivateFieldSet30(_lastSelectedFocus, this, null);
  }
  const mergedParent = this.mergedCellsCollection.get(highlight.row, highlight.col);
  if (!mergedParent) {
    return;
  }
  const visualColumnIndexStart = mergedParent.col;
  const visualColumnIndexEnd = mergedParent.col + mergedParent.colspan - 1;
  if (delta.col < 0) {
    const nextColumn = highlight.col >= visualColumnIndexStart && highlight.col <= visualColumnIndexEnd ? visualColumnIndexStart - 1 : visualColumnIndexEnd;
    const notHiddenColumnIndex = columnIndexMapper.getNearestNotHiddenIndex(nextColumn, -1);
    if (notHiddenColumnIndex === null) {
      delta.col = -this.hot.view.countRenderableColumnsInRange(0, highlight.col);
    } else {
      delta.col = -Math.max(this.hot.view.countRenderableColumnsInRange(notHiddenColumnIndex, highlight.col) - 1, 1);
    }
  } else if (delta.col > 0) {
    const nextColumn = highlight.col >= visualColumnIndexStart && highlight.col <= visualColumnIndexEnd ? visualColumnIndexEnd + 1 : visualColumnIndexStart;
    const notHiddenColumnIndex = columnIndexMapper.getNearestNotHiddenIndex(nextColumn, 1);
    if (notHiddenColumnIndex === null) {
      delta.col = this.hot.view.countRenderableColumnsInRange(highlight.col, this.hot.countCols());
    } else {
      delta.col = Math.max(this.hot.view.countRenderableColumnsInRange(highlight.col, notHiddenColumnIndex) - 1, 1);
    }
  }
  const visualRowIndexStart = mergedParent.row;
  const visualRowIndexEnd = mergedParent.row + mergedParent.rowspan - 1;
  if (delta.row < 0) {
    const nextRow = highlight.row >= visualRowIndexStart && highlight.row <= visualRowIndexEnd ? visualRowIndexStart - 1 : visualRowIndexEnd;
    const notHiddenRowIndex = rowIndexMapper.getNearestNotHiddenIndex(nextRow, -1);
    if (notHiddenRowIndex === null) {
      delta.row = -this.hot.view.countRenderableRowsInRange(0, highlight.row);
    } else {
      delta.row = -Math.max(this.hot.view.countRenderableRowsInRange(notHiddenRowIndex, highlight.row) - 1, 1);
    }
  } else if (delta.row > 0) {
    const nextRow = highlight.row >= visualRowIndexStart && highlight.row <= visualRowIndexEnd ? visualRowIndexEnd + 1 : visualRowIndexStart;
    const notHiddenRowIndex = rowIndexMapper.getNearestNotHiddenIndex(nextRow, 1);
    if (notHiddenRowIndex === null) {
      delta.row = this.hot.view.countRenderableRowsInRange(highlight.row, this.hot.countRows());
    } else {
      delta.row = Math.max(this.hot.view.countRenderableRowsInRange(highlight.row, notHiddenRowIndex) - 1, 1);
    }
  }
}
function _onModifyTransformEnd(delta) {
  const selectedRange = this.hot.getSelectedRangeLast();
  const cloneRange = selectedRange.clone();
  const {
    to
  } = selectedRange;
  const {
    columnIndexMapper,
    rowIndexMapper
  } = this.hot;
  const expandCloneRange = (row, col) => {
    cloneRange.expand(this.hot._createCellCoords(row, col));
    for (let i = 0; i < this.mergedCellsCollection.mergedCells.length; i += 1) {
      cloneRange.expandByRange(this.mergedCellsCollection.mergedCells[i].getRange());
    }
  };
  if (delta.col < 0) {
    let nextColumn = this.mergedCellsCollection.getStartMostColumnIndex(selectedRange, to.col) + delta.col;
    expandCloneRange(to.row, nextColumn);
    if (selectedRange.getHorizontalDirection() === "E-W" && cloneRange.getHorizontalDirection() === "E-W") {
      nextColumn = cloneRange.getTopStartCorner().col;
    }
    const notHiddenColumnIndex = columnIndexMapper.getNearestNotHiddenIndex(nextColumn, 1);
    if (notHiddenColumnIndex !== null) {
      delta.col = -Math.max(this.hot.view.countRenderableColumnsInRange(notHiddenColumnIndex, to.col) - 1, 1);
    }
  } else if (delta.col > 0) {
    let nextColumn = this.mergedCellsCollection.getEndMostColumnIndex(selectedRange, to.col) + delta.col;
    expandCloneRange(to.row, nextColumn);
    if (selectedRange.getHorizontalDirection() === "W-E" && cloneRange.getHorizontalDirection() === "W-E") {
      nextColumn = cloneRange.getBottomEndCorner().col;
    }
    const notHiddenColumnIndex = columnIndexMapper.getNearestNotHiddenIndex(nextColumn, -1);
    if (notHiddenColumnIndex !== null) {
      delta.col = Math.max(this.hot.view.countRenderableColumnsInRange(to.col, notHiddenColumnIndex) - 1, 1);
    }
  }
  if (delta.row < 0) {
    let nextRow = this.mergedCellsCollection.getTopMostRowIndex(selectedRange, to.row) + delta.row;
    expandCloneRange(nextRow, to.col);
    if (selectedRange.getVerticalDirection() === "S-N" && cloneRange.getVerticalDirection() === "S-N") {
      nextRow = cloneRange.getTopStartCorner().row;
    }
    const notHiddenRowIndex = rowIndexMapper.getNearestNotHiddenIndex(nextRow, 1);
    if (notHiddenRowIndex !== null) {
      delta.row = -Math.max(this.hot.view.countRenderableRowsInRange(notHiddenRowIndex, to.row) - 1, 1);
    }
  } else if (delta.row > 0) {
    let nextRow = this.mergedCellsCollection.getBottomMostRowIndex(selectedRange, to.row) + delta.row;
    expandCloneRange(nextRow, to.col);
    if (selectedRange.getVerticalDirection() === "N-S" && cloneRange.getVerticalDirection() === "N-S") {
      nextRow = cloneRange.getBottomStartCorner().row;
    }
    const notHiddenRowIndex = rowIndexMapper.getNearestNotHiddenIndex(nextRow, -1);
    if (notHiddenRowIndex !== null) {
      delta.row = Math.max(this.hot.view.countRenderableRowsInRange(to.row, notHiddenRowIndex) - 1, 1);
    }
  }
}
function _onBeforeSelectionHighlightSet() {
  const selectedRange = this.hot.getSelectedRangeLast();
  const {
    highlight
  } = selectedRange;
  if (this.hot.selection.isSelectedByColumnHeader() || this.hot.selection.isSelectedByRowHeader()) {
    _classPrivateFieldSet30(_lastSelectedFocus, this, highlight.clone());
    return;
  }
  for (let i = 0; i < this.mergedCellsCollection.mergedCells.length; i += 1) {
    selectedRange.expandByRange(this.mergedCellsCollection.mergedCells[i].getRange(), false);
  }
  for (let i = 0; i < this.mergedCellsCollection.mergedCells.length; i += 1) {
    selectedRange.expandByRange(this.mergedCellsCollection.mergedCells[i].getRange(), false);
  }
  const mergedParent = this.mergedCellsCollection.get(highlight.row, highlight.col);
  _classPrivateFieldSet30(_lastSelectedFocus, this, highlight.clone());
  if (mergedParent) {
    highlight.assign(mergedParent);
  }
}
function _onModifyGetCellCoords(row, column, topmost, source) {
  if (row < 0 || column < 0) {
    return;
  }
  const mergeParent = this.mergedCellsCollection.get(row, column);
  if (!mergeParent) {
    return;
  }
  const {
    row: mergeRow,
    col: mergeColumn,
    colspan,
    rowspan
  } = mergeParent;
  const topStartRow = mergeRow;
  const topStartColumn = mergeColumn;
  const bottomEndRow = mergeRow + rowspan - 1;
  const bottomEndColumn = mergeColumn + colspan - 1;
  if (source === "render" && this.getSetting("virtualized")) {
    const overlayName = this.hot.view.getActiveOverlayName();
    const firstRenderedRow = ["top", "top_inline_start_corner"].includes(overlayName) ? 0 : this.hot.getFirstRenderedVisibleRow();
    const firstRenderedColumn = ["inline_start", "top_inline_start_corner", "bottom_inline_start_corner"].includes(overlayName) ? 0 : this.hot.getFirstRenderedVisibleColumn();
    return [clamp(firstRenderedRow, topStartRow, bottomEndRow), clamp(firstRenderedColumn, topStartColumn, bottomEndColumn), clamp(this.hot.getLastRenderedVisibleRow(), topStartRow, bottomEndRow), clamp(this.hot.getLastRenderedVisibleColumn(), topStartColumn, bottomEndColumn)];
  }
  return [topStartRow, topStartColumn, bottomEndRow, bottomEndColumn];
}
function _addMergeActionsToContextMenu(defaultOptions2) {
  defaultOptions2.items.push({
    name: "---------"
  }, toggleMergeItem(this));
}
function _onBeforeSetRangeStart() {
  _classPrivateFieldSet30(_lastSelectedFocus, this, null);
}
function _onBeforeSelectionFocusSet() {
  if (_classPrivateFieldGet32(_lastSelectedFocus, this).isCell()) {
    return;
  }
  const selectedRange = this.hot.getSelectedRangeLast();
  const verticalDir = selectedRange.getVerticalDirection();
  const horizontalDir = selectedRange.getHorizontalDirection();
  const focusCoords = _classPrivateFieldGet32(_lastSelectedFocus, this).clone().normalize();
  _classPrivateFieldGet32(_focusOrder, this).setActiveNode(focusCoords.row, focusCoords.col);
  if (_classPrivateFieldGet32(_lastFocusDelta, this).row > 0 || _classPrivateFieldGet32(_lastFocusDelta, this).col > 0) {
    _classPrivateFieldGet32(_focusOrder, this).setPrevNodeAsActive();
  } else if (horizontalDir === "E-W" && _classPrivateFieldGet32(_lastFocusDelta, this).col < 0 || verticalDir === "S-N" && _classPrivateFieldGet32(_lastFocusDelta, this).row < 0) {
    _classPrivateFieldGet32(_focusOrder, this).setNextNodeAsActive();
  }
}
function _onAfterSelectionFocusSet(row, column) {
  const selectedRange = this.hot.getSelectedRangeLast();
  const {
    columnIndexMapper,
    rowIndexMapper
  } = this.hot;
  let notHiddenRowIndex = null;
  let notHiddenColumnIndex = null;
  if (_classPrivateFieldGet32(_lastFocusDelta, this).col < 0) {
    const {
      rowEnd,
      colEnd
    } = _classPrivateFieldGet32(_focusOrder, this).getPrevHorizontalNode();
    notHiddenColumnIndex = columnIndexMapper.getNearestNotHiddenIndex(colEnd, -1);
    notHiddenRowIndex = rowIndexMapper.getNearestNotHiddenIndex(rowEnd, -1);
  } else if (_classPrivateFieldGet32(_lastFocusDelta, this).col > 0) {
    const {
      rowStart,
      colStart
    } = _classPrivateFieldGet32(_focusOrder, this).getNextHorizontalNode();
    notHiddenColumnIndex = columnIndexMapper.getNearestNotHiddenIndex(colStart, 1);
    notHiddenRowIndex = rowIndexMapper.getNearestNotHiddenIndex(rowStart, 1);
  } else if (_classPrivateFieldGet32(_lastFocusDelta, this).row < 0) {
    const {
      rowEnd,
      colEnd
    } = _classPrivateFieldGet32(_focusOrder, this).getPrevVerticalNode();
    notHiddenColumnIndex = columnIndexMapper.getNearestNotHiddenIndex(colEnd, -1);
    notHiddenRowIndex = rowIndexMapper.getNearestNotHiddenIndex(rowEnd, -1);
  } else if (_classPrivateFieldGet32(_lastFocusDelta, this).row > 0) {
    const {
      rowStart,
      colStart
    } = _classPrivateFieldGet32(_focusOrder, this).getNextVerticalNode();
    notHiddenColumnIndex = columnIndexMapper.getNearestNotHiddenIndex(colStart, 1);
    notHiddenRowIndex = rowIndexMapper.getNearestNotHiddenIndex(rowStart, 1);
  }
  if (notHiddenRowIndex !== null || notHiddenColumnIndex !== null) {
    const coords = this.hot._createCellCoords(notHiddenRowIndex, notHiddenColumnIndex);
    const mergeParent = this.mergedCellsCollection.get(coords.row, coords.col);
    const focusHighlight = this.hot.selection.highlight.getFocus();
    row = coords.row;
    column = coords.col;
    if (mergeParent) {
      selectedRange.highlight.assign({
        row: this.hot.rowIndexMapper.getNearestNotHiddenIndex(mergeParent.row, 1),
        col: this.hot.columnIndexMapper.getNearestNotHiddenIndex(mergeParent.col, 1)
      });
    } else {
      selectedRange.highlight.assign(coords);
    }
    focusHighlight.clear();
    focusHighlight.add(coords).commit();
  }
  _classPrivateFieldGet32(_focusOrder, this).setActiveNode(row, column);
  _classPrivateFieldSet30(_lastFocusDelta, this, {
    row: 0,
    col: 0
  });
}
function _onAfterSelectionEnd2() {
  const selection = this.hot.getSelectedRangeLast();
  if (!selection.isHeader()) {
    _classPrivateFieldGet32(_focusOrder, this).buildFocusOrder(this.hot.getSelectedRangeLast());
  }
}
function _onAfterGetCellMeta3(row, col, cellProperties) {
  const mergeParent = this.mergedCellsCollection.get(row, col);
  if (mergeParent) {
    if (mergeParent.row !== row || mergeParent.col !== col) {
      cellProperties.copyable = false;
    } else {
      cellProperties.rowspan = mergeParent.rowspan;
      cellProperties.colspan = mergeParent.colspan;
    }
  }
}
function _onAfterViewportRowCalculatorOverride(calc) {
  if (this.getSetting("virtualized")) {
    return;
  }
  const nrOfColumns = this.hot.countCols();
  this.modifyViewportRowStart(calc, nrOfColumns);
  this.modifyViewportRowEnd(calc, nrOfColumns);
}
function _onAfterViewportColumnCalculatorOverride(calc) {
  if (this.getSetting("virtualized")) {
    return;
  }
  const nrOfRows = this.hot.countRows();
  this.modifyViewportColumnStart(calc, nrOfRows);
  this.modifyViewportColumnEnd(calc, nrOfRows);
}
function _onModifyAutofillRange(fullArea, baseArea) {
  const dragDirection = this.autofillCalculations.getDirection(baseArea, fullArea);
  if (this.autofillCalculations.dragAreaOverlapsCollections(baseArea, fullArea, dragDirection)) {
    return baseArea;
  }
  const from = this.hot._createCellCoords(baseArea[0], baseArea[1]);
  const to = this.hot._createCellCoords(baseArea[2], baseArea[3]);
  const range = this.hot._createCellRange(from, from, to);
  const mergedCellsWithinSelectionArea = this.mergedCellsCollection.getWithinRange(range);
  if (mergedCellsWithinSelectionArea.length === 0) {
    return fullArea;
  }
  return this.autofillCalculations.snapDragArea(baseArea, fullArea, dragDirection, mergedCellsWithinSelectionArea);
}
function _onAfterCreateCol2(column, count) {
  this.mergedCellsCollection.shiftCollections("right", column, count);
}
function _onAfterRemoveCol2(column, count) {
  this.mergedCellsCollection.shiftCollections("left", column, count);
}
function _onAfterCreateRow2(row, count, source) {
  if (source === "auto") {
    return;
  }
  this.mergedCellsCollection.shiftCollections("down", row, count);
}
function _onAfterRemoveRow2(row, count) {
  this.mergedCellsCollection.shiftCollections("up", row, count);
}
function _onAfterChange3(changes, source) {
  if (source !== "Autofill.fill") {
    return;
  }
  this.autofillCalculations.recreateAfterDataPopulation(changes);
}
function _onBeforeDrawAreaBorders(corners, className) {
  if (className && className === "area") {
    const selectedRange = this.hot.getSelectedRangeLast();
    const mergedCellsWithinRange = this.mergedCellsCollection.getWithinRange(selectedRange);
    arrayEach(mergedCellsWithinRange, (mergedCell) => {
      if (selectedRange.getBottomEndCorner().row === mergedCell.getLastRow() && selectedRange.getBottomEndCorner().col === mergedCell.getLastColumn()) {
        corners[2] = mergedCell.row;
        corners[3] = mergedCell.col;
      }
    });
  }
}
function _onAfterDrawSelection(currentRow, currentColumn, cornersOfSelection, layerLevel) {
  if (!cornersOfSelection) {
    return;
  }
  return this.selectionCalculations.getSelectedMergedCellClassName(currentRow, currentColumn, cornersOfSelection, layerLevel);
}
function _onBeforeRemoveCellClassNames() {
  return this.selectionCalculations.getSelectedMergedCellClassNameToRemove();
}
function _onBeforeBeginEditing(row, column, initialValue, event) {
  if (!(event instanceof MouseEvent)) {
    return;
  }
  const selection = this.hot.getSelectedRangeLast();
  const mergeCell = this.mergedCellsCollection.getByRange(selection);
  if (!mergeCell) {
    return;
  }
  const from = this.hot._createCellCoords(mergeCell.row, mergeCell.col);
  const to = this.hot._createCellCoords(mergeCell.row + mergeCell.rowspan - 1, mergeCell.col + mergeCell.colspan - 1);
  return this.hot.selection.getLayerLevel() === 0 && selection.isEqual(this.hot._createCellRange(from, from, to));
}
function _onModifyRowHeightByOverlayName(height, row, overlayType) {
  if (this.hot.getSettings().rowHeaders || // merged cells do not work with the bottom overlays
  overlayType === "bottom" || overlayType === "bottom_inline_start_corner") {
    return height;
  }
  let firstColumn;
  let lastColumn;
  if (overlayType === "master") {
    firstColumn = this.hot.getFirstRenderedVisibleColumn();
    lastColumn = this.hot.getLastRenderedVisibleColumn();
  } else {
    const activeOverlay = this.hot.view.getOverlayByName(overlayType);
    firstColumn = this.hot.columnIndexMapper.getVisualFromRenderableIndex(activeOverlay.clone.wtTable.getFirstRenderedColumn());
    lastColumn = this.hot.columnIndexMapper.getVisualFromRenderableIndex(activeOverlay.clone.wtTable.getLastRenderedColumn());
  }
  const firstMergedCellInRow = this.mergedCellsCollection.get(row, firstColumn);
  if (!firstMergedCellInRow) {
    return height;
  }
  const from = this.hot._createCellCoords(row, firstColumn);
  const to = this.hot._createCellCoords(row, lastColumn);
  const viewportRange = this.hot._createCellRange(from, from, to);
  const mergedCellsWithinRange = this.mergedCellsCollection.getWithinRange(viewportRange, true);
  const maxRowspan = mergedCellsWithinRange.reduce((acc, _ref) => {
    let {
      rowspan
    } = _ref;
    return Math.max(acc, rowspan);
  }, 1);
  let rowspanCorrection = 0;
  if (mergedCellsWithinRange.length > 1 && mergedCellsWithinRange[0].rowspan < maxRowspan) {
    rowspanCorrection = maxRowspan - mergedCellsWithinRange[0].rowspan;
  }
  mergedCellsWithinRange.forEach((_ref2) => {
    let {
      rowspan
    } = _ref2;
    let rowspanAfterCorrection = 0;
    if (overlayType === "top" || overlayType === "top_inline_start_corner") {
      rowspanAfterCorrection = Math.min(maxRowspan, this.hot.view.countNotHiddenFixedRowsTop() - row);
    } else {
      rowspanAfterCorrection = rowspan - rowspanCorrection;
    }
    height = Math.max(height !== null && height !== void 0 ? height : 0, sumCellsHeights(this.hot, row, rowspanAfterCorrection));
  });
  return height;
}

// node_modules/handsontable/plugins/multiColumnSorting/rootComparator.mjs
function rootComparator2(sortingOrders, columnMetas) {
  return function(rowIndexWithValues, nextRowIndexWithValues) {
    const [, ...values] = rowIndexWithValues;
    const [, ...nextValues] = nextRowIndexWithValues;
    return function getCompareResult(column) {
      const sortingOrder = sortingOrders[column];
      const columnMeta = columnMetas[column];
      const value = values[column];
      const nextValue = nextValues[column];
      const pluginSettings = columnMeta.multiColumnSorting;
      const compareFunctionFactory6 = pluginSettings.compareFunctionFactory ? pluginSettings.compareFunctionFactory : getCompareFunctionFactory(columnMeta.type);
      const compareResult = compareFunctionFactory6(sortingOrder, columnMeta, pluginSettings)(value, nextValue);
      if (compareResult === DO_NOT_SWAP) {
        const nextSortedColumn = column + 1;
        if (typeof columnMetas[nextSortedColumn] !== "undefined") {
          return getCompareResult(nextSortedColumn);
        }
      }
      return compareResult;
    }(0);
  };
}

// node_modules/handsontable/plugins/multiColumnSorting/domHelpers.mjs
var COLUMN_ORDER_PREFIX = "sort";
function getClassesToAdd2(columnStatesManager, column, showSortIndicator) {
  const cssClasses = [];
  if (showSortIndicator === false) {
    return cssClasses;
  }
  if (columnStatesManager.isColumnSorted(column) && columnStatesManager.getNumberOfSortedColumns() > 1) {
    cssClasses.push(`${COLUMN_ORDER_PREFIX}-${columnStatesManager.getIndexOfColumnInSortQueue(column) + 1}`);
  }
  return cssClasses;
}
function getClassesToRemove2(htmlElement) {
  const cssClasses = htmlElement.className.split(" ");
  const sortSequenceRegExp = new RegExp(`^${COLUMN_ORDER_PREFIX}-[0-9]{1,2}$`);
  return cssClasses.filter((cssClass) => sortSequenceRegExp.test(cssClass));
}

// node_modules/handsontable/plugins/multiColumnSorting/multiColumnSorting.mjs
function _defineProperty48(e, r, t) {
  return (r = _toPropertyKey48(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey48(t) {
  var i = _toPrimitive48(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive48(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var PLUGIN_KEY26 = "multiColumnSorting";
var PLUGIN_PRIORITY25 = 170;
var SHORTCUTS_GROUP13 = PLUGIN_KEY26;
registerRootComparator(PLUGIN_KEY26, rootComparator2);
var MultiColumnSorting = class extends ColumnSorting {
  constructor() {
    super(...arguments);
    _defineProperty48(this, "pluginKey", PLUGIN_KEY26);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY26;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY25;
  }
  /**
   * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link MultiColumnSorting#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[this.pluginKey];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    super.disablePlugin();
  }
  /**
   * Register shortcuts responsible for toggling column sorting functionality.
   *
   * @private
   */
  registerShortcuts() {
    super.registerShortcuts();
    this.hot.getShortcutManager().getContext("grid").addShortcut({
      keys: [["Shift", "Enter"]],
      callback: () => {
        const {
          highlight
        } = this.hot.getSelectedRangeLast();
        if (highlight.row === -1 && highlight.col >= 0) {
          this.sort(this.getNextSortConfig(highlight.col, APPEND_COLUMN_CONFIG_STRATEGY));
        }
        return false;
      },
      runOnlyIf: () => {
        var _this$hot$getSelected, _this$hot$getSelected2;
        const highlight = (_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight;
        return highlight && ((_this$hot$getSelected2 = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected2 === void 0 ? void 0 : _this$hot$getSelected2.isSingle()) && this.hot.selection.isCellVisible(highlight) && highlight.isHeader();
      },
      relativeToGroup: EDITOR_EDIT_GROUP,
      position: "before",
      group: SHORTCUTS_GROUP13
    });
  }
  /**
   * Unregister shortcuts responsible for toggling column sorting functionality.
   *
   * @private
   */
  unregisterShortcuts() {
    super.unregisterShortcuts();
    this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(SHORTCUTS_GROUP13);
  }
  /**
   * Sorts the table by chosen columns and orders.
   *
   * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).
   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
   * sort order (`asc` for ascending, `desc` for descending).
   *
   * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.
   *
   * @example
   * ```js
   * // sort ascending first visual column
   * hot.getPlugin('multiColumnSorting').sort({ column: 0, sortOrder: 'asc' });
   *
   * // sort first two visual column in the defined sequence
   * hot.getPlugin('multiColumnSorting').sort([{
   *   column: 1, sortOrder: 'asc'
   * }, {
   *   column: 0, sortOrder: 'desc'
   * }]);
   * ```
   *
   * @fires Hooks#beforeColumnSort
   * @fires Hooks#afterColumnSort
   */
  sort(sortConfig) {
    super.sort(sortConfig);
  }
  /**
   * Clear the sort performed on the table.
   */
  clearSort() {
    super.clearSort();
  }
  /**
   * Checks if the table is sorted (any column have to be sorted).
   *
   * @returns {boolean}
   */
  isSorted() {
    return super.isSorted();
  }
  /**
   * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.
   *
   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.
   *
   * @param {number} [column] Visual column index.
   * @returns {undefined|object|Array}
   */
  getSortConfig(column) {
    return super.getSortConfig(column);
  }
  /**
   * @description
   * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.
   * Note: Please keep in mind that this method doesn't re-render the table.
   *
   * @example
   * ```js
   * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {
   *   const columnSortPlugin = this.getPlugin('multiColumnSorting');
   *
   *   columnSortPlugin.setSortConfig(destinationSortConfigs);
   *
   *   // const newData = ... // Calculated data set, ie. from an AJAX call.
   *
   *   this.loadData(newData); // Load new data set and re-render the table.
   *
   *   return false; // The blockade for the default sort action.
   * }
   * ```
   *
   * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).
   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
   * sort order (`asc` for ascending, `desc` for descending).
   */
  setSortConfig(sortConfig) {
    super.setSortConfig(sortConfig);
  }
  /**
   * Get normalized sort configs.
   *
   * @private
   * @param {object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).
   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
   * sort order (`asc` for ascending, `desc` for descending).
   * @returns {Array}
   */
  getNormalizedSortConfigs() {
    let sortConfig = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    if (Array.isArray(sortConfig)) {
      return sortConfig;
    }
    return [sortConfig];
  }
  /**
   * Update header classes.
   *
   * @private
   * @param {HTMLElement} headerSpanElement Header span element.
   * @param {...*} args Extra arguments for helpers.
   */
  updateHeaderClasses(headerSpanElement) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    super.updateHeaderClasses(headerSpanElement, ...args);
    removeClass(headerSpanElement, getClassesToRemove2(headerSpanElement));
    if (this.enabled !== false) {
      addClass(headerSpanElement, getClassesToAdd2(...args));
    }
  }
  /**
   * Callback for the `onAfterOnCellMouseDown` hook.
   *
   * @private
   * @param {Event} event Event which are provided by hook.
   * @param {CellCoords} coords Visual coords of the selected cell.
   */
  onAfterOnCellMouseDown(event, coords) {
    if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {
      return;
    }
    if (this.wasClickableHeaderClicked(event, coords.col)) {
      if (this.hot.getShortcutManager().isCtrlPressed()) {
        this.hot.deselectCell();
        this.hot.selectColumns(coords.col);
        this.sort(this.getNextSortConfig(coords.col, APPEND_COLUMN_CONFIG_STRATEGY));
      } else {
        this.sort(this.getColumnNextConfig(coords.col));
      }
    }
  }
};

// node_modules/handsontable/plugins/multipleSelectionHandles/multipleSelectionHandles.mjs
function _defineProperty49(e, r, t) {
  return (r = _toPropertyKey49(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey49(t) {
  var i = _toPrimitive49(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive49(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var PLUGIN_KEY27 = "multipleSelectionHandles";
var PLUGIN_PRIORITY26 = 160;
var MultipleSelectionHandles = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _defineProperty49(this, "dragged", []);
    _defineProperty49(this, "lastSetCell", null);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY27;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY26;
  }
  /**
   * Check if the plugin is enabled in the handsontable settings.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return isMobileBrowser();
  }
  /**
   * Enable plugin for this Handsontable instance.
   */
  enablePlugin() {
    if (this.enabled) {
      return;
    }
    this.registerListeners();
    super.enablePlugin();
  }
  /**
   * Bind the touch events.
   *
   * @private
   */
  registerListeners() {
    const _this = this;
    const {
      rootElement
    } = this.hot;
    function removeFromDragged(query) {
      if (_this.dragged.length === 1) {
        _this.dragged.splice(0, _this.dragged.length);
        return true;
      }
      const entryPosition = _this.dragged.indexOf(query);
      if (entryPosition === -1) {
        return false;
      } else if (entryPosition === 0) {
        _this.dragged = _this.dragged.slice(0, 1);
      } else if (entryPosition === 1) {
        _this.dragged = _this.dragged.slice(-1);
      }
    }
    this.eventManager.addEventListener(rootElement, "touchstart", (event) => {
      let selectedRange;
      if (hasClass(event.target, "topSelectionHandle-HitArea")) {
        selectedRange = _this.hot.getSelectedRangeLast();
        _this.dragged.push("top");
        _this.touchStartRange = {
          width: selectedRange.getWidth(),
          height: selectedRange.getHeight(),
          direction: selectedRange.getDirection()
        };
        event.preventDefault();
        return false;
      } else if (hasClass(event.target, "bottomSelectionHandle-HitArea")) {
        selectedRange = _this.hot.getSelectedRangeLast();
        _this.dragged.push("bottom");
        _this.touchStartRange = {
          width: selectedRange.getWidth(),
          height: selectedRange.getHeight(),
          direction: selectedRange.getDirection()
        };
        event.preventDefault();
        return false;
      }
    });
    this.eventManager.addEventListener(rootElement, "touchend", (event) => {
      if (hasClass(event.target, "topSelectionHandle-HitArea")) {
        removeFromDragged.call(_this, "top");
        _this.touchStartRange = void 0;
        event.preventDefault();
        return false;
      } else if (hasClass(event.target, "bottomSelectionHandle-HitArea")) {
        removeFromDragged.call(_this, "bottom");
        _this.touchStartRange = void 0;
        event.preventDefault();
        return false;
      }
    });
    this.eventManager.addEventListener(rootElement, "touchmove", (event) => {
      const {
        rootDocument
      } = this.hot;
      let targetCoords;
      let selectedRange;
      let rangeWidth;
      let rangeHeight;
      let rangeDirection;
      let newRangeCoords;
      if (_this.dragged.length === 0) {
        return;
      }
      const endTarget = rootDocument.elementFromPoint(event.touches[0].clientX, event.touches[0].clientY);
      if (!endTarget || endTarget === _this.lastSetCell) {
        return;
      }
      if (endTarget.nodeName === "TD" || endTarget.nodeName === "TH") {
        targetCoords = _this.hot.getCoords(endTarget);
        if (targetCoords.col === -1) {
          targetCoords.col = 0;
        }
        selectedRange = _this.hot.getSelectedRangeLast();
        rangeWidth = selectedRange.getWidth();
        rangeHeight = selectedRange.getHeight();
        rangeDirection = selectedRange.getDirection();
        if (rangeWidth === 1 && rangeHeight === 1) {
          _this.hot.selection.setRangeEnd(targetCoords);
        }
        newRangeCoords = _this.getCurrentRangeCoords(selectedRange, targetCoords, _this.touchStartRange.direction, rangeDirection, _this.dragged[0]);
        if (newRangeCoords.start !== null) {
          _this.hot.selection.setRangeStart(newRangeCoords.start);
        }
        _this.hot.selection.setRangeEnd(newRangeCoords.end);
        _this.lastSetCell = endTarget;
      }
      event.preventDefault();
    });
  }
  getCurrentRangeCoords(selectedRange, currentTouch, touchStartDirection, currentDirection, draggedHandle) {
    const topStartCorner = selectedRange.getTopStartCorner();
    const bottomEndCorner = selectedRange.getBottomEndCorner();
    const bottomStartCorner = selectedRange.getBottomStartCorner();
    const topEndCorner = selectedRange.getTopEndCorner();
    let newCoords = {
      start: null,
      end: null
    };
    switch (touchStartDirection) {
      case "NE-SW":
        switch (currentDirection) {
          case "NE-SW":
          case "NW-SE":
            if (draggedHandle === "top") {
              newCoords = {
                start: this.hot._createCellCoords(currentTouch.row, selectedRange.highlight.col),
                end: this.hot._createCellCoords(bottomStartCorner.row, currentTouch.col)
              };
            } else {
              newCoords = {
                start: this.hot._createCellCoords(selectedRange.highlight.row, currentTouch.col),
                end: this.hot._createCellCoords(currentTouch.row, topStartCorner.col)
              };
            }
            break;
          case "SE-NW":
            if (draggedHandle === "bottom") {
              newCoords = {
                start: this.hot._createCellCoords(bottomEndCorner.row, currentTouch.col),
                end: this.hot._createCellCoords(currentTouch.row, topStartCorner.col)
              };
            }
            break;
          default:
            break;
        }
        break;
      case "NW-SE":
        switch (currentDirection) {
          case "NE-SW":
            if (draggedHandle === "top") {
              newCoords = {
                start: currentTouch,
                end: bottomStartCorner
              };
            } else {
              newCoords.end = currentTouch;
            }
            break;
          case "NW-SE":
            if (draggedHandle === "top") {
              newCoords = {
                start: currentTouch,
                end: bottomEndCorner
              };
            } else {
              newCoords.end = currentTouch;
            }
            break;
          case "SE-NW":
            if (draggedHandle === "top") {
              newCoords = {
                start: currentTouch,
                end: topStartCorner
              };
            } else {
              newCoords.end = currentTouch;
            }
            break;
          case "SW-NE":
            if (draggedHandle === "top") {
              newCoords = {
                start: currentTouch,
                end: topEndCorner
              };
            } else {
              newCoords.end = currentTouch;
            }
            break;
          default:
            break;
        }
        break;
      case "SW-NE":
        switch (currentDirection) {
          case "NW-SE":
            if (draggedHandle === "bottom") {
              newCoords = {
                start: this.hot._createCellCoords(currentTouch.row, topStartCorner.col),
                end: this.hot._createCellCoords(bottomStartCorner.row, currentTouch.col)
              };
            } else {
              newCoords = {
                start: this.hot._createCellCoords(topStartCorner.row, currentTouch.col),
                end: this.hot._createCellCoords(currentTouch.row, bottomEndCorner.col)
              };
            }
            break;
          case "SW-NE":
            if (draggedHandle === "top") {
              newCoords = {
                start: this.hot._createCellCoords(selectedRange.highlight.row, currentTouch.col),
                end: this.hot._createCellCoords(currentTouch.row, bottomEndCorner.col)
              };
            } else {
              newCoords = {
                start: this.hot._createCellCoords(currentTouch.row, topStartCorner.col),
                end: this.hot._createCellCoords(topStartCorner.row, currentTouch.col)
              };
            }
            break;
          case "SE-NW":
            if (draggedHandle === "bottom") {
              newCoords = {
                start: this.hot._createCellCoords(currentTouch.row, topEndCorner.col),
                end: this.hot._createCellCoords(topStartCorner.row, currentTouch.col)
              };
            } else if (draggedHandle === "top") {
              newCoords = {
                start: bottomStartCorner,
                end: currentTouch
              };
            }
            break;
          default:
            break;
        }
        break;
      case "SE-NW":
        switch (currentDirection) {
          case "NW-SE":
          case "NE-SW":
          case "SW-NE":
            if (draggedHandle === "top") {
              newCoords.end = currentTouch;
            }
            break;
          case "SE-NW":
            if (draggedHandle === "top") {
              newCoords.end = currentTouch;
            } else {
              newCoords = {
                start: currentTouch,
                end: topStartCorner
              };
            }
            break;
          default:
            break;
        }
        break;
      default:
        break;
    }
    return newCoords;
  }
  /**
   * Check if user is currently dragging the handle.
   *
   * @returns {boolean} Dragging state.
   */
  isDragged() {
    return this.dragged.length > 0;
  }
};

// node_modules/handsontable/plugins/nestedHeaders/stateManager/utils.mjs
function createDefaultHeaderSettings() {
  let {
    label = "",
    colspan = 1,
    origColspan = 1,
    collapsible = false,
    crossHiddenColumns = [],
    isCollapsed = false,
    isHidden = false,
    isRoot = false,
    isPlaceholder = false,
    headerClassNames = []
  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return {
    label,
    colspan,
    origColspan,
    collapsible,
    isCollapsed,
    crossHiddenColumns,
    isHidden,
    isRoot,
    isPlaceholder,
    headerClassNames
  };
}
function createPlaceholderHeaderSettings() {
  return {
    label: "",
    isPlaceholder: true
  };
}

// node_modules/handsontable/plugins/nestedHeaders/stateManager/settingsNormalizer.mjs
function normalizeSettings(sourceSettings) {
  let columnsLimit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Infinity;
  const normalizedSettings = [];
  if (columnsLimit === 0) {
    return normalizedSettings;
  }
  arrayEach(sourceSettings, (headersSettings) => {
    const columns = [];
    let columnIndex = 0;
    normalizedSettings.push(columns);
    arrayEach(headersSettings, (sourceHeaderSettings) => {
      const headerSettings = createDefaultHeaderSettings();
      if (isObject(sourceHeaderSettings)) {
        const {
          label,
          colspan,
          headerClassName
        } = sourceHeaderSettings;
        headerSettings.label = stringify(label);
        if (typeof colspan === "number" && colspan > 1) {
          headerSettings.colspan = colspan;
          headerSettings.origColspan = colspan;
        }
        if (typeof headerClassName === "string") {
          headerSettings.headerClassNames = [...headerClassName.split(" ")];
        }
      } else {
        headerSettings.label = stringify(sourceHeaderSettings);
      }
      columnIndex += headerSettings.origColspan;
      let cancelProcessing = false;
      if (columnIndex >= columnsLimit) {
        headerSettings.colspan = headerSettings.origColspan - (columnIndex - columnsLimit);
        headerSettings.origColspan = headerSettings.colspan;
        cancelProcessing = true;
      }
      columns.push(headerSettings);
      if (headerSettings.colspan > 1) {
        for (let i = 0; i < headerSettings.colspan - 1; i++) {
          columns.push(createPlaceholderHeaderSettings());
        }
      }
      return !cancelProcessing;
    });
  });
  const columnsLength = Math.max(...arrayMap(normalizedSettings, (headersSettings) => headersSettings.length));
  arrayEach(normalizedSettings, (headersSettings) => {
    if (headersSettings.length < columnsLength) {
      const defaultSettings = arrayMap(new Array(columnsLength - headersSettings.length), () => createDefaultHeaderSettings());
      headersSettings.splice(headersSettings.length, 0, ...defaultSettings);
    }
  });
  return normalizedSettings;
}

// node_modules/handsontable/plugins/nestedHeaders/stateManager/sourceSettings.mjs
function _classPrivateFieldInitSpec33(e, t, a) {
  _checkPrivateRedeclaration48(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration48(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldGet33(s, a) {
  return s.get(_assertClassBrand48(s, a));
}
function _classPrivateFieldSet31(s, a, r) {
  return s.set(_assertClassBrand48(s, a), r), r;
}
function _assertClassBrand48(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var HEADER_CONFIGURABLE_PROPS = ["label", "collapsible"];
var _data = /* @__PURE__ */ new WeakMap();
var _dataLength = /* @__PURE__ */ new WeakMap();
var _columnsLimit2 = /* @__PURE__ */ new WeakMap();
var SourceSettings = class {
  constructor() {
    _classPrivateFieldInitSpec33(this, _data, []);
    _classPrivateFieldInitSpec33(this, _dataLength, 0);
    _classPrivateFieldInitSpec33(this, _columnsLimit2, Infinity);
  }
  /**
   * Sets columns limit to the source settings will be trimmed. All headers which
   * overlap the column limit will be reduced to keep the structure solid.
   *
   * @param {number} columnsCount The number of columns to limit to.
   */
  setColumnsLimit(columnsCount) {
    _classPrivateFieldSet31(_columnsLimit2, this, columnsCount);
  }
  /**
   * Sets a new nested header configuration.
   *
   * @param {Array[]} [nestedHeadersSettings=[]] The user-defined nested headers settings.
   */
  setData() {
    let nestedHeadersSettings = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    _classPrivateFieldSet31(_data, this, normalizeSettings(nestedHeadersSettings, _classPrivateFieldGet33(_columnsLimit2, this)));
    _classPrivateFieldSet31(_dataLength, this, _classPrivateFieldGet33(_data, this).length);
  }
  /**
   * Gets normalized source settings.
   *
   * @returns {Array[]}
   */
  getData() {
    return _classPrivateFieldGet33(_data, this);
  }
  /**
   * Merges settings with current source settings.
   *
   * @param {object[]} additionalSettings An array of objects with `row`, `col` and additional
   *                                      properties to merge with current source settings.
   */
  mergeWith(additionalSettings) {
    arrayEach(additionalSettings, (_ref) => {
      let {
        row,
        col,
        ...rest
      } = _ref;
      const headerSettings = this.getHeaderSettings(row, col);
      if (headerSettings !== null) {
        extend(headerSettings, rest, HEADER_CONFIGURABLE_PROPS);
      }
    });
  }
  /**
   * Maps the current state with a callback. For each source settings the callback function
   * is called. If the function returns value that value is merged with the source settings.
   *
   * @param {Function} callback A function that is called for every header settings.
   *                            Each time the callback is called, the returned value extends
   *                            header settings.
   */
  map(callback) {
    arrayEach(_classPrivateFieldGet33(_data, this), (header) => {
      arrayEach(header, (headerSettings) => {
        const propsToExtend = callback({
          ...headerSettings
        });
        if (isObject(propsToExtend)) {
          extend(headerSettings, propsToExtend, HEADER_CONFIGURABLE_PROPS);
        }
      });
    });
  }
  /**
   * Gets source column header settings for a specified header. The returned
   * object contains information about the header label, its colspan length,
   * or if it is hidden in the header renderers.
   *
   * @param {number} headerLevel Header level (0 = most distant to the table).
   * @param {number} columnIndex A visual column index.
   * @returns {object|null}
   */
  getHeaderSettings(headerLevel, columnIndex) {
    var _headersSettings$colu;
    if (headerLevel >= _classPrivateFieldGet33(_dataLength, this) || headerLevel < 0) {
      return null;
    }
    const headersSettings = _classPrivateFieldGet33(_data, this)[headerLevel];
    if (Array.isArray(headersSettings) === false || columnIndex >= headersSettings.length) {
      return null;
    }
    return (_headersSettings$colu = headersSettings[columnIndex]) !== null && _headersSettings$colu !== void 0 ? _headersSettings$colu : null;
  }
  /**
   * Gets source of column headers settings for specified headers. If the retrieved column
   * settings overlap the range "box" determined by "columnIndex" and "columnsLength"
   * the exception will be thrown.
   *
   * @param {number} headerLevel Header level (0 = most distant to the table).
   * @param {number} columnIndex A visual column index from which the settings will be extracted.
   * @param {number} [columnsLength=1] The number of columns involved in the extraction of settings.
   * @returns {object}
   */
  getHeadersSettings(headerLevel, columnIndex) {
    let columnsLength = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
    const headersSettingsChunks = [];
    if (headerLevel >= _classPrivateFieldGet33(_dataLength, this) || headerLevel < 0) {
      return headersSettingsChunks;
    }
    const headersSettings = _classPrivateFieldGet33(_data, this)[headerLevel];
    let currentLength = 0;
    for (let i = columnIndex; i < headersSettings.length; i++) {
      const headerSettings = headersSettings[i];
      if (headerSettings.isPlaceholder) {
        throw new Error("The first column settings cannot overlap the other header layers");
      }
      currentLength += headerSettings.colspan;
      headersSettingsChunks.push(headerSettings);
      if (headerSettings.colspan > 1) {
        i += headerSettings.colspan - 1;
      }
      if (currentLength === columnsLength) {
        break;
      }
      if (currentLength > columnsLength) {
        throw new Error("The last column settings cannot overlap the other header layers");
      }
    }
    return headersSettingsChunks;
  }
  /**
   * Gets a total number of headers levels.
   *
   * @returns {number}
   */
  getLayersCount() {
    return _classPrivateFieldGet33(_dataLength, this);
  }
  /**
   * Gets a total number of columns count.
   *
   * @returns {number}
   */
  getColumnsCount() {
    return _classPrivateFieldGet33(_dataLength, this) > 0 ? _classPrivateFieldGet33(_data, this)[0].length : 0;
  }
  /**
   * Clears the data.
   */
  clear() {
    _classPrivateFieldSet31(_data, this, []);
    _classPrivateFieldSet31(_dataLength, this, 0);
  }
};

// node_modules/handsontable/utils/dataStructures/tree.mjs
function _defineProperty50(e, r, t) {
  return (r = _toPropertyKey50(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey50(t) {
  var i = _toPrimitive50(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive50(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var TRAVERSAL_DF_PRE = "DF-pre-order";
function depthFirstPreOrder(callback, context) {
  let continueTraverse = callback.call(context, this);
  for (let i = 0; i < this.childs.length; i++) {
    if (continueTraverse === false) {
      return false;
    }
    continueTraverse = depthFirstPreOrder.call(this.childs[i], callback, context);
  }
  return continueTraverse;
}
var TRAVERSAL_DF_POST = "DF-post-order";
function depthFirstPostOrder(callback, context) {
  for (let i = 0; i < this.childs.length; i++) {
    const continueTraverse = depthFirstPostOrder.call(this.childs[i], callback, context);
    if (continueTraverse === false) {
      return false;
    }
  }
  return callback.call(context, this);
}
var TRAVERSAL_BF = "BF";
function breadthFirst(callback, context) {
  const queue = [this];
  function process2() {
    if (queue.length === 0) {
      return;
    }
    const node = queue.shift();
    queue.push(...node.childs);
    if (callback.call(context, node) !== false) {
      process2();
    }
  }
  process2();
}
var DEFAULT_TRAVERSAL_STRATEGY = TRAVERSAL_BF;
var TRAVERSAL_STRATEGIES = /* @__PURE__ */ new Map([[TRAVERSAL_DF_PRE, depthFirstPreOrder], [TRAVERSAL_DF_POST, depthFirstPostOrder], [TRAVERSAL_BF, breadthFirst]]);
var TreeNode = class _TreeNode {
  constructor(data) {
    _defineProperty50(this, "data", {});
    _defineProperty50(this, "parent", null);
    _defineProperty50(this, "childs", []);
    this.data = data;
  }
  /**
   * Adds a node to tree leaves. Added node is linked with the parent node through "parent" property.
   *
   * @param {TreeNode} node A TreeNode to add.
   */
  addChild(node) {
    node.parent = this;
    this.childs.push(node);
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * @memberof TreeNode#
   * @function cloneTree
   *
   * Clones a tree structure deeply.
   *
   * For example, for giving a tree structure:
   *      .--(B1)--.
   *   .-(C1)   .-(C2)-.----.
   *  (D1)     (D2)   (D3) (D4)
   *
   * Cloning a tree starting from C2 node creates a mirrored tree structure.
   *     .-(C2')-.-----.
   *    (D2')   (D3') (D4')
   *
   * The cloned tree can be safely modified without affecting the original structure.
   * After modification, the clone can be merged with a tree using the "replaceTreeWith" method.
   *
   * @param {TreeNode} [nodeTree=this] A TreeNode to clone.
   * @returns {TreeNode}
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  cloneTree() {
    let nodeTree = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this;
    const clonedNode = new _TreeNode({
      ...nodeTree.data
    });
    for (let i = 0; i < nodeTree.childs.length; i++) {
      clonedNode.addChild(this.cloneTree(nodeTree.childs[i]));
    }
    return clonedNode;
  }
  /**
   * Replaces the current node with a passed tree structure.
   *
   * @param {TreeNode} nodeTree A TreeNode to replace with.
   */
  replaceTreeWith(nodeTree) {
    this.data = {
      ...nodeTree.data
    };
    this.childs = [];
    for (let i = 0; i < nodeTree.childs.length; i++) {
      this.addChild(nodeTree.childs[i]);
    }
  }
  /**
   * Traverses the tree structure through node childs. The walk down traversing supports
   * a three different strategies.
   *  - Depth-first pre-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR));
   *  - Depth-first post-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Post-order_(NLR));
   *  - Breadth-first traversal strategy (https://en.wikipedia.org/wiki/Tree_traversal#Breadth-first_search_/_level_order).
   *
   * @param {Function} callback The callback function which will be called for each node.
   * @param {string} [traversalStrategy=DEFAULT_TRAVERSAL_STRATEGY] Traversing strategy.
   */
  walkDown(callback) {
    let traversalStrategy = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_TRAVERSAL_STRATEGY;
    if (!TRAVERSAL_STRATEGIES.has(traversalStrategy)) {
      throw new Error(`Traversal strategy "${traversalStrategy}" does not exist`);
    }
    TRAVERSAL_STRATEGIES.get(traversalStrategy).call(this, callback, this);
  }
  /**
   * Traverses the tree structure through node parents.
   *
   * @param {Function} callback The callback function which will be called for each node.
   */
  walkUp(callback) {
    const context = this;
    const process2 = (node) => {
      const continueTraverse = callback.call(context, node);
      if (continueTraverse !== false && node.parent !== null) {
        process2(node.parent);
      }
    };
    process2(this);
  }
};

// node_modules/handsontable/plugins/nestedHeaders/stateManager/headersTree.mjs
function _classPrivateFieldInitSpec34(e, t, a) {
  _checkPrivateRedeclaration49(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration49(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldGet34(s, a) {
  return s.get(_assertClassBrand49(s, a));
}
function _classPrivateFieldSet32(s, a, r) {
  return s.set(_assertClassBrand49(s, a), r), r;
}
function _assertClassBrand49(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _rootNodes = /* @__PURE__ */ new WeakMap();
var _rootsIndex = /* @__PURE__ */ new WeakMap();
var _sourceSettings = /* @__PURE__ */ new WeakMap();
var HeadersTree = class {
  constructor(sourceSettings) {
    _classPrivateFieldInitSpec34(this, _rootNodes, /* @__PURE__ */ new Map());
    _classPrivateFieldInitSpec34(this, _rootsIndex, /* @__PURE__ */ new Map());
    _classPrivateFieldInitSpec34(this, _sourceSettings, null);
    _classPrivateFieldSet32(_sourceSettings, this, sourceSettings);
  }
  /**
   * Gets an array of the all root nodes.
   *
   * @returns {TreeNode[]}
   */
  getRoots() {
    return Array.from(_classPrivateFieldGet34(_rootNodes, this).values());
  }
  /**
   * Gets a root node by specified visual column index.
   *
   * @param {number} columnIndex A visual column index.
   * @returns {TreeNode|undefined}
   */
  getRootByColumn(columnIndex) {
    let node;
    if (_classPrivateFieldGet34(_rootsIndex, this).has(columnIndex)) {
      node = _classPrivateFieldGet34(_rootNodes, this).get(_classPrivateFieldGet34(_rootsIndex, this).get(columnIndex));
    }
    return node;
  }
  /**
   * Gets a tree node by its position in the grid settings.
   *
   * @param {number} headerLevel Header level index (there is support only for positive values).
   * @param {number} columnIndex A visual column index.
   * @returns {TreeNode|undefined}
   */
  getNode(headerLevel, columnIndex) {
    const rootNode = this.getRootByColumn(columnIndex);
    if (!rootNode) {
      return;
    }
    const normColumnIndex = columnIndex - _classPrivateFieldGet34(_rootsIndex, this).get(columnIndex);
    let columnCursor = 0;
    let treeNode;
    rootNode.walkDown((node) => {
      const {
        data: {
          origColspan,
          headerLevel: nodeHeaderLevel
        }
      } = node;
      if (headerLevel === nodeHeaderLevel) {
        if (normColumnIndex >= columnCursor && normColumnIndex <= columnCursor + origColspan - 1) {
          treeNode = node;
          treeNode.data.isRoot = columnIndex === treeNode.data.columnIndex;
          return false;
        }
        columnCursor += origColspan;
      }
    });
    return treeNode;
  }
  /**
   * Builds (or rebuilds if called again) root nodes indexes.
   */
  rebuildTreeIndex() {
    let columnIndex = 0;
    _classPrivateFieldGet34(_rootsIndex, this).clear();
    arrayEach(_classPrivateFieldGet34(_rootNodes, this), (_ref) => {
      let [, {
        data: {
          colspan
        }
      }] = _ref;
      for (let i = columnIndex; i < columnIndex + colspan; i++) {
        _classPrivateFieldGet34(_rootsIndex, this).set(i, columnIndex);
      }
      columnIndex += colspan;
    });
  }
  /**
   * Builds trees based on SourceSettings class. Calling a method causes clearing the tree state built
   * from the previous call.
   */
  buildTree() {
    this.clear();
    const columnsCount = _classPrivateFieldGet34(_sourceSettings, this).getColumnsCount();
    let columnIndex = 0;
    while (columnIndex < columnsCount) {
      const columnSettings = _classPrivateFieldGet34(_sourceSettings, this).getHeaderSettings(0, columnIndex);
      const rootNode = new TreeNode();
      _classPrivateFieldGet34(_rootNodes, this).set(columnIndex, rootNode);
      this.buildLeaves(rootNode, columnIndex, 0, columnSettings.origColspan);
      columnIndex += columnSettings.origColspan;
    }
    this.rebuildTreeIndex();
  }
  /**
   * Builds leaves for specified tree node.
   *
   * @param {TreeNode} parentNode A node to which the leaves applies.
   * @param {number} columnIndex A visual column index.
   * @param {number} headerLevel Currently processed header level.
   * @param {number} [extractionLength=1] Determines column extraction length for node children.
   */
  buildLeaves(parentNode, columnIndex, headerLevel) {
    let extractionLength = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
    const columnsSettings = _classPrivateFieldGet34(_sourceSettings, this).getHeadersSettings(headerLevel, columnIndex, extractionLength);
    headerLevel += 1;
    arrayEach(columnsSettings, (columnSettings) => {
      const nodeData = {
        ...columnSettings,
        /**
         * The header level (tree node depth level).
         *
         * @type {number}
         */
        headerLevel: headerLevel - 1,
        /**
         * A visual column index.
         *
         * @type {number}
         */
        columnIndex
      };
      let node;
      if (headerLevel === 1) {
        parentNode.data = nodeData;
        node = parentNode;
      } else {
        node = new TreeNode(nodeData);
        parentNode.addChild(node);
      }
      if (headerLevel < _classPrivateFieldGet34(_sourceSettings, this).getLayersCount()) {
        this.buildLeaves(node, columnIndex, headerLevel, columnSettings.origColspan);
      }
      columnIndex += columnSettings.origColspan;
    });
  }
  /**
   * Clears the tree to the initial state.
   */
  clear() {
    _classPrivateFieldGet34(_rootNodes, this).clear();
    _classPrivateFieldGet34(_rootsIndex, this).clear();
  }
};

// node_modules/handsontable/plugins/nestedHeaders/stateManager/nodeModifiers/utils/tree.mjs
function traverseHiddenNodeColumnIndexes(node, callback) {
  node.walkDown((_ref) => {
    let {
      data,
      childs
    } = _ref;
    if (!data.isHidden) {
      callback(data.columnIndex);
      if (childs.length === 0) {
        for (let i = 1; i < data.colspan; i++) {
          callback(data.columnIndex + i);
        }
      }
    }
  });
}
function getFirstChildProperty(_ref2, propertyName) {
  let {
    childs
  } = _ref2;
  if (childs.length === 0) {
    return;
  }
  return childs[0].data[propertyName];
}
function isNodeReflectsFirstChildColspan(node) {
  return getFirstChildProperty(node, "origColspan") === node.data.origColspan;
}

// node_modules/handsontable/plugins/nestedHeaders/stateManager/nodeModifiers/expand.mjs
function expandNode(nodeToProcess) {
  const {
    data: nodeData,
    childs: nodeChilds
  } = nodeToProcess;
  if (!nodeData.isCollapsed || nodeData.isHidden || nodeData.origColspan <= 1) {
    return {
      rollbackModification: () => {
      },
      affectedColumns: [],
      colspanCompensation: 0
    };
  }
  const isNodeReflected = isNodeReflectsFirstChildColspan(nodeToProcess);
  if (isNodeReflected) {
    return expandNode(nodeChilds[0]);
  }
  nodeData.isCollapsed = false;
  const allLeavesExceptMostLeft = nodeChilds.slice(1);
  const affectedColumns = /* @__PURE__ */ new Set();
  let colspanCompensation = 0;
  if (allLeavesExceptMostLeft.length > 0) {
    arrayEach(allLeavesExceptMostLeft, (node) => {
      node.replaceTreeWith(node.data.clonedTree);
      node.data.clonedTree = null;
      const leafData = node.data;
      colspanCompensation += leafData.colspan;
      traverseHiddenNodeColumnIndexes(node, (gridColumnIndex) => {
        affectedColumns.add(gridColumnIndex);
      });
    });
  } else {
    const {
      colspan,
      origColspan,
      columnIndex
    } = nodeData;
    colspanCompensation = origColspan - colspan;
    for (let i = 1; i < origColspan; i++) {
      affectedColumns.add(columnIndex + i);
    }
  }
  nodeToProcess.walkUp((node) => {
    const {
      data
    } = node;
    data.colspan += colspanCompensation;
    if (data.colspan >= data.origColspan) {
      data.colspan = data.origColspan;
      data.isCollapsed = false;
    } else if (isNodeReflectsFirstChildColspan(node)) {
      data.isCollapsed = getFirstChildProperty(node, "isCollapsed");
    }
  });
  return {
    rollbackModification: () => collapseNode(nodeToProcess),
    affectedColumns: Array.from(affectedColumns),
    colspanCompensation
  };
}

// node_modules/handsontable/plugins/nestedHeaders/stateManager/nodeModifiers/collapse.mjs
function collapseNode(nodeToProcess) {
  var _getFirstChildPropert;
  const {
    data: nodeData,
    childs: nodeChilds
  } = nodeToProcess;
  if (nodeData.isCollapsed || nodeData.isHidden || nodeData.origColspan <= 1) {
    return {
      rollbackModification: () => {
      },
      affectedColumns: [],
      colspanCompensation: 0
    };
  }
  const isNodeReflected = isNodeReflectsFirstChildColspan(nodeToProcess);
  if (isNodeReflected) {
    return collapseNode(nodeChilds[0]);
  }
  nodeData.isCollapsed = true;
  const allLeavesExceptMostLeft = nodeChilds.slice(1);
  const affectedColumns = /* @__PURE__ */ new Set();
  if (allLeavesExceptMostLeft.length > 0) {
    arrayEach(allLeavesExceptMostLeft, (node) => {
      traverseHiddenNodeColumnIndexes(node, (gridColumnIndex) => {
        affectedColumns.add(gridColumnIndex);
      });
      node.data.clonedTree = node.cloneTree();
      node.walkDown((_ref) => {
        let {
          data
        } = _ref;
        data.isHidden = true;
      });
    });
  } else {
    const {
      origColspan,
      columnIndex
    } = nodeData;
    for (let i = 1; i < origColspan; i++) {
      const gridColumnIndex = columnIndex + i;
      affectedColumns.add(gridColumnIndex);
    }
  }
  const colspanCompensation = nodeData.colspan - ((_getFirstChildPropert = getFirstChildProperty(nodeToProcess, "colspan")) !== null && _getFirstChildPropert !== void 0 ? _getFirstChildPropert : 1);
  nodeToProcess.walkUp((node) => {
    const {
      data
    } = node;
    data.colspan -= colspanCompensation;
    if (data.colspan <= 1) {
      data.colspan = 1;
      data.isCollapsed = true;
    } else if (isNodeReflectsFirstChildColspan(node)) {
      data.isCollapsed = getFirstChildProperty(node, "isCollapsed");
    }
  });
  return {
    rollbackModification: () => expandNode(nodeToProcess),
    affectedColumns: Array.from(affectedColumns),
    colspanCompensation
  };
}

// node_modules/handsontable/plugins/nestedHeaders/stateManager/nodeModifiers/hideColumn.mjs
function hideColumn(nodeToProcess, gridColumnIndex) {
  if (!Number.isInteger(gridColumnIndex)) {
    throw new Error("The passed gridColumnIndex argument has invalid type.");
  }
  if (nodeToProcess.childs.length > 0) {
    throw new Error(toSingleLine`The passed node is not the last node on the tree. Only for\x20
the last node, the hide column modification can be applied.`);
  }
  const {
    crossHiddenColumns
  } = nodeToProcess.data;
  if (crossHiddenColumns.includes(gridColumnIndex)) {
    return;
  }
  let isCollapsibleNode = false;
  nodeToProcess.walkUp((node) => {
    const {
      data: {
        collapsible
      }
    } = node;
    if (collapsible) {
      isCollapsibleNode = true;
      return false;
    }
  });
  if (isCollapsibleNode) {
    return;
  }
  nodeToProcess.walkUp((node) => {
    const {
      data
    } = node;
    data.crossHiddenColumns.push(gridColumnIndex);
    if (data.colspan > 1) {
      data.colspan -= 1;
    } else {
      data.isHidden = true;
    }
  });
}

// node_modules/handsontable/plugins/nestedHeaders/stateManager/nodeModifiers/showColumn.mjs
function showColumn(nodeToProcess, gridColumnIndex) {
  if (!Number.isInteger(gridColumnIndex)) {
    throw new Error("The passed gridColumnIndex argument has invalid type.");
  }
  if (nodeToProcess.childs.length > 0) {
    throw new Error(toSingleLine`The passed node is not the last node on the tree. Only for\x20
the last node, the show column modification can be applied.`);
  }
  const {
    crossHiddenColumns
  } = nodeToProcess.data;
  if (!crossHiddenColumns.includes(gridColumnIndex)) {
    return;
  }
  let isCollapsibleNode = false;
  nodeToProcess.walkUp((node) => {
    const {
      data: {
        collapsible
      }
    } = node;
    if (collapsible) {
      isCollapsibleNode = true;
      return false;
    }
  });
  if (isCollapsibleNode) {
    return;
  }
  nodeToProcess.walkUp((node) => {
    const {
      data
    } = node;
    data.crossHiddenColumns.splice(data.crossHiddenColumns.indexOf(gridColumnIndex), 1);
    if (!data.isHidden && data.colspan < data.origColspan) {
      data.colspan += 1;
    }
    data.isHidden = false;
  });
}

// node_modules/handsontable/plugins/nestedHeaders/stateManager/nodeModifiers/index.mjs
var availableModifiers = /* @__PURE__ */ new Map([["collapse", collapseNode], ["expand", expandNode], ["hide-column", hideColumn], ["show-column", showColumn]]);
function triggerNodeModification(actionName, nodeToProcess, gridColumnIndex) {
  if (!availableModifiers.has(actionName)) {
    throw new Error(`The node modifier action ("${actionName}") does not exist.`);
  }
  return availableModifiers.get(actionName)(nodeToProcess, gridColumnIndex);
}

// node_modules/handsontable/plugins/nestedHeaders/stateManager/matrixGenerator.mjs
function generateMatrix(headerRoots) {
  const matrix = [];
  arrayEach(headerRoots, (rootNode) => {
    rootNode.walkDown((node) => {
      const nodeData = node.data;
      const {
        origColspan,
        columnIndex,
        headerLevel,
        crossHiddenColumns
      } = nodeData;
      const colspanHeaderLayer = createNestedArrayIfNecessary(matrix, headerLevel);
      let isRootSettingsFound = false;
      for (let i = columnIndex; i < columnIndex + origColspan; i++) {
        const isColumnHidden = crossHiddenColumns.includes(i);
        if (isColumnHidden || isRootSettingsFound) {
          colspanHeaderLayer.push(createPlaceholderHeaderSettings(nodeData));
        } else {
          const headerRootSettings = createHeaderSettings(nodeData);
          headerRootSettings.isRoot = true;
          colspanHeaderLayer.push(headerRootSettings);
          isRootSettingsFound = true;
        }
      }
    });
  });
  return matrix;
}
function createHeaderSettings(nodeData) {
  const {
    crossHiddenColumns,
    ...headerRootSettings
  } = createDefaultHeaderSettings(nodeData);
  return headerRootSettings;
}
function createNestedArrayIfNecessary(array, index) {
  let subArray;
  if (Array.isArray(array[index])) {
    subArray = array[index];
  } else {
    subArray = [];
    array[index] = subArray;
  }
  return subArray;
}

// node_modules/handsontable/plugins/nestedHeaders/stateManager/index.mjs
function _classPrivateFieldInitSpec35(e, t, a) {
  _checkPrivateRedeclaration50(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration50(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldSet33(s, a, r) {
  return s.set(_assertClassBrand50(s, a), r), r;
}
function _classPrivateFieldGet35(s, a) {
  return s.get(_assertClassBrand50(s, a));
}
function _assertClassBrand50(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _sourceSettings2 = /* @__PURE__ */ new WeakMap();
var _headersTree = /* @__PURE__ */ new WeakMap();
var _stateMatrix = /* @__PURE__ */ new WeakMap();
var StateManager = class {
  constructor() {
    _classPrivateFieldInitSpec35(this, _sourceSettings2, new SourceSettings());
    _classPrivateFieldInitSpec35(this, _headersTree, new HeadersTree(_classPrivateFieldGet35(_sourceSettings2, this)));
    _classPrivateFieldInitSpec35(this, _stateMatrix, [[]]);
  }
  /**
   * Sets a new state for the nested headers plugin based on settings passed
   * directly to the plugin.
   *
   * @param {Array[]} nestedHeadersSettings The user-defined settings.
   * @returns {boolean} Returns `true` if the settings are processed correctly, `false` otherwise.
   */
  setState(nestedHeadersSettings) {
    _classPrivateFieldGet35(_sourceSettings2, this).setData(nestedHeadersSettings);
    let hasError = false;
    try {
      _classPrivateFieldGet35(_headersTree, this).buildTree();
    } catch (ex) {
      _classPrivateFieldGet35(_headersTree, this).clear();
      _classPrivateFieldGet35(_sourceSettings2, this).clear();
      hasError = true;
    }
    _classPrivateFieldSet33(_stateMatrix, this, generateMatrix(_classPrivateFieldGet35(_headersTree, this).getRoots()));
    return hasError;
  }
  /**
   * Sets columns limit to the state will be trimmed. All headers (colspans) which
   * overlap the column limit will be reduced to keep the structure solid.
   *
   * @param {number} columnsCount The number of columns to limit to.
   */
  setColumnsLimit(columnsCount) {
    _classPrivateFieldGet35(_sourceSettings2, this).setColumnsLimit(columnsCount);
  }
  /**
   * Merges settings with current plugin state.
   *
   * By default only foreign keys are merged with source state and passed to the tree. But only
   * known keys are exported to matrix.
   *
   * @param {object[]} settings An array of objects to merge with the current source settings.
   *                            It is a requirement that every object has `row` and `col` properties
   *                            which points to the specific header settings object.
   */
  mergeStateWith(settings) {
    const transformedSettings = arrayMap(settings, (_ref) => {
      let {
        row,
        ...rest
      } = _ref;
      return {
        row: row < 0 ? this.rowCoordsToLevel(row) : row,
        ...rest
      };
    });
    _classPrivateFieldGet35(_sourceSettings2, this).mergeWith(transformedSettings);
    _classPrivateFieldGet35(_headersTree, this).buildTree();
    _classPrivateFieldSet33(_stateMatrix, this, generateMatrix(_classPrivateFieldGet35(_headersTree, this).getRoots()));
  }
  /**
   * Maps the current state with a callback. For each header settings the callback function
   * is called. If the function returns value that value is merged with the state.
   *
   * By default only foreign keys are merged with source state and passed to the tree. But only
   * known keys are exported to matrix.
   *
   * @param {Function} callback A function that is called for every header source settings.
   *                            Each time the callback is called, the returned value extends
   *                            header settings.
   */
  mapState(callback) {
    _classPrivateFieldGet35(_sourceSettings2, this).map(callback);
    _classPrivateFieldGet35(_headersTree, this).buildTree();
    _classPrivateFieldSet33(_stateMatrix, this, generateMatrix(_classPrivateFieldGet35(_headersTree, this).getRoots()));
  }
  /**
   * Maps the current tree nodes with a callback. For each node the callback function
   * is called. If the function returns value that value is added to returned array.
   *
   * @param {Function} callback A function that is called for every tree node.
   *                            Each time the callback is called, the returned value is
   *                            added to returned array.
   * @returns {Array}
   */
  mapNodes(callback) {
    return arrayReduce(_classPrivateFieldGet35(_headersTree, this).getRoots(), (acc, rootNode) => {
      rootNode.walkDown((node) => {
        const result = callback(node.data);
        if (result !== void 0) {
          acc.push(result);
        }
      });
      return acc;
    }, []);
  }
  /**
   * Triggers an action (e.g. "collapse") from the NodeModifiers module. The module
   * modifies a tree structure in such a way as to obtain the correct structure consistent with the
   * called action.
   *
   * @param {string} action An action name to trigger.
   * @param {number} headerLevel Header level index (there is support for negative and positive values).
   * @param {number} columnIndex A visual column index.
   * @returns {object|undefined}
   */
  triggerNodeModification(action, headerLevel, columnIndex) {
    if (headerLevel < 0) {
      headerLevel = this.rowCoordsToLevel(headerLevel);
    }
    const nodeToProcess = _classPrivateFieldGet35(_headersTree, this).getNode(headerLevel, columnIndex);
    let actionResult;
    if (nodeToProcess) {
      actionResult = triggerNodeModification(action, nodeToProcess, columnIndex);
      _classPrivateFieldSet33(_stateMatrix, this, generateMatrix(_classPrivateFieldGet35(_headersTree, this).getRoots()));
    }
    return actionResult;
  }
  /**
   * Triggers an action (e.g. "hide-column") from the NodeModifiers module. The action is
   * triggered starting from the lowest header. The module modifies a tree structure in
   * such a way as to obtain the correct structure consistent with the called action.
   *
   * @param {string} action An action name to trigger.
   * @param {number} columnIndex A visual column index.
   * @returns {object|undefined}
   */
  triggerColumnModification(action, columnIndex) {
    return this.triggerNodeModification(action, -1, columnIndex);
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * @memberof StateManager#
   * @function rowCoordsToLevel
   *
   * Translates row coordinates into header level. The row coordinates counts from -1 to -N
   * and describes headers counting from most closest to most distant from the table.
   * The header levels are counted from 0 to N where 0 describes most distant header
   * from the table.
   *
   *  Row coords             Header level
   *           +--------------+
   *       -3  │ A1 │ A1      │  0
   *           +--------------+
   *       -2  │ B1 │ B2 │ B3 │  1
   *           +--------------+
   *       -1  │ C1 │ C2 │ C3 │  2
   *           +==============+
   *           │    │    │    │
   *           +--------------+
   *           │    │    │    │
   *
   * @param {number} rowIndex A visual row index.
   * @returns {number|null} Returns unsigned number.
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  rowCoordsToLevel(rowIndex) {
    if (rowIndex >= 0) {
      return null;
    }
    const headerLevel = rowIndex + Math.max(this.getLayersCount(), 1);
    if (headerLevel < 0) {
      return null;
    }
    return headerLevel;
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * @memberof StateManager#
   * @function levelToRowCoords
   *
   * Translates header level into row coordinates. The row coordinates counts from -1 to -N
   * and describes headers counting from most closest to most distant from the table.
   * The header levels are counted from 0 to N where 0 describes most distant header
   * from the table.
   *
   *  Header level            Row coords
   *           +--------------+
   *        0  │ A1 │ A1      │  -3
   *           +--------------+
   *        1  │ B1 │ B2 │ B3 │  -2
   *           +--------------+
   *        2  │ C1 │ C2 │ C3 │  -1
   *           +==============+
   *           │    │    │    │
   *           +--------------+
   *           │    │    │    │
   *
   * @param {number} headerLevel Header level index.
   * @returns {number} Returns negative number.
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  levelToRowCoords(headerLevel) {
    if (headerLevel < 0) {
      return null;
    }
    const rowIndex = headerLevel - Math.max(this.getLayersCount(), 1);
    if (rowIndex >= 0) {
      return null;
    }
    return rowIndex;
  }
  /**
   * Gets column header settings for a specified column and header index. The returned object contains
   * all information necessary for header renderers. It contains header label, colspan length, or hidden
   * flag.
   *
   * @param {number} headerLevel Header level (there is support for negative and positive values).
   * @param {number} columnIndex A visual column index.
   * @returns {object|null}
   */
  getHeaderSettings(headerLevel, columnIndex) {
    var _classPrivateFieldGet210, _classPrivateFieldGet310;
    if (headerLevel < 0) {
      headerLevel = this.rowCoordsToLevel(headerLevel);
    }
    if (headerLevel === null || headerLevel >= this.getLayersCount()) {
      return null;
    }
    return (_classPrivateFieldGet210 = (_classPrivateFieldGet310 = _classPrivateFieldGet35(_stateMatrix, this)[headerLevel]) === null || _classPrivateFieldGet310 === void 0 ? void 0 : _classPrivateFieldGet310[columnIndex]) !== null && _classPrivateFieldGet210 !== void 0 ? _classPrivateFieldGet210 : null;
  }
  /**
   * Gets tree data that is connected to the column header. The returned object contains all information
   * necessary for modifying tree structure (column collapsing, hiding, etc.). It contains a header
   * label, colspan length, or visual column index that indicates which column index the node is rendered from.
   *
   * @param {number} headerLevel Header level (there is support for negative and positive values).
   * @param {number} columnIndex A visual column index.
   * @returns {object|null}
   */
  getHeaderTreeNodeData(headerLevel, columnIndex) {
    const node = this.getHeaderTreeNode(headerLevel, columnIndex);
    if (!node) {
      return null;
    }
    return {
      ...node.data
    };
  }
  /**
   * Gets tree node that is connected to the column header.
   *
   * @param {number} headerLevel Header level (there is support for negative and positive values).
   * @param {number} columnIndex A visual column index.
   * @returns {TreeNode|null}
   */
  getHeaderTreeNode(headerLevel, columnIndex) {
    if (headerLevel < 0) {
      headerLevel = this.rowCoordsToLevel(headerLevel);
    }
    if (headerLevel === null || headerLevel >= this.getLayersCount()) {
      return null;
    }
    const node = _classPrivateFieldGet35(_headersTree, this).getNode(headerLevel, columnIndex);
    if (!node) {
      return null;
    }
    return node;
  }
  /**
   * Finds the most top header level of the column header that is rendered entirely within
   * the passed visual columns range. If multiple columns headers are found within the range the
   * most top header level value will be returned.
   *
   * @param {number} columnIndexFrom A visual column index.
   * @param {number} [columnIndexTo] A visual column index.
   * @returns {number} Returns a header level in format -1 to -N.
   */
  findTopMostEntireHeaderLevel(columnIndexFrom) {
    let columnIndexTo = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : columnIndexFrom;
    const columnsWidth = columnIndexTo - columnIndexFrom + 1;
    let atLeastOneRootFound = false;
    let headerLevel = null;
    for (let columnIndex = columnIndexFrom; columnIndex <= columnIndexTo; columnIndex++) {
      const rootNode = _classPrivateFieldGet35(_headersTree, this).getRootByColumn(columnIndex);
      if (!rootNode) {
        break;
      }
      atLeastOneRootFound = true;
      rootNode.walkDown((node) => {
        const {
          columnIndex: nodeColumnIndex,
          headerLevel: nodeHeaderLevel,
          origColspan,
          isHidden
        } = node.data;
        if (isHidden) {
          return;
        }
        if (origColspan <= columnsWidth && nodeColumnIndex >= columnIndexFrom && nodeColumnIndex + origColspan - 1 <= columnIndexTo && (headerLevel === null || nodeHeaderLevel < headerLevel)) {
          headerLevel = nodeHeaderLevel;
        }
      }, TRAVERSAL_DF_PRE);
    }
    if (atLeastOneRootFound && headerLevel === null) {
      return -1;
    }
    return this.levelToRowCoords(headerLevel !== null && headerLevel !== void 0 ? headerLevel : 0);
  }
  /**
   * The method is helpful in cases where the column index targets in-between currently
   * collapsed column. In that case, the method returns the left-most column index
   * where the nested header begins.
   *
   * @param {number} headerLevel Header level (there is support for negative and positive values).
   * @param {number} columnIndex A visual column index.
   * @returns {number}
   */
  findLeftMostColumnIndex(headerLevel, columnIndex) {
    var _this$getHeaderSettin;
    const {
      isRoot
    } = (_this$getHeaderSettin = this.getHeaderSettings(headerLevel, columnIndex)) !== null && _this$getHeaderSettin !== void 0 ? _this$getHeaderSettin : {
      isRoot: true
    };
    if (isRoot) {
      return columnIndex;
    }
    let stepBackColumn = columnIndex - 1;
    while (stepBackColumn >= 0) {
      var _this$getHeaderSettin2;
      const {
        isRoot: isRootNode
      } = (_this$getHeaderSettin2 = this.getHeaderSettings(headerLevel, stepBackColumn)) !== null && _this$getHeaderSettin2 !== void 0 ? _this$getHeaderSettin2 : {
        isRoot: true
      };
      if (isRootNode) {
        break;
      }
      stepBackColumn -= 1;
    }
    return stepBackColumn;
  }
  /**
   * The method is helpful in cases where the column index targets in-between currently
   * collapsed column. In that case, the method returns the right-most column index
   * where the nested header ends.
   *
   * @param {number} headerLevel Header level (there is support for negative and positive values).
   * @param {number} columnIndex A visual column index.
   * @returns {number}
   */
  findRightMostColumnIndex(headerLevel, columnIndex) {
    var _this$getHeaderSettin3;
    const {
      isRoot,
      origColspan
    } = (_this$getHeaderSettin3 = this.getHeaderSettings(headerLevel, columnIndex)) !== null && _this$getHeaderSettin3 !== void 0 ? _this$getHeaderSettin3 : {
      isRoot: true,
      origColspan: 1
    };
    if (isRoot) {
      return columnIndex + origColspan - 1;
    }
    let stepForthColumn = columnIndex + 1;
    while (stepForthColumn < this.getColumnsCount()) {
      var _this$getHeaderSettin4;
      const {
        isRoot: isRootNode
      } = (_this$getHeaderSettin4 = this.getHeaderSettings(headerLevel, stepForthColumn)) !== null && _this$getHeaderSettin4 !== void 0 ? _this$getHeaderSettin4 : {
        isRoot: true
      };
      if (isRootNode) {
        break;
      }
      stepForthColumn += 1;
    }
    return stepForthColumn - 1;
  }
  /**
   * Gets a total number of headers levels.
   *
   * @returns {number}
   */
  getLayersCount() {
    return _classPrivateFieldGet35(_sourceSettings2, this).getLayersCount();
  }
  /**
   * Gets a total number of columns count.
   *
   * @returns {number}
   */
  getColumnsCount() {
    return _classPrivateFieldGet35(_sourceSettings2, this).getColumnsCount();
  }
  /**
   * Clears the column state manager to the initial state.
   */
  clear() {
    _classPrivateFieldSet33(_stateMatrix, this, []);
    _classPrivateFieldGet35(_sourceSettings2, this).clear();
    _classPrivateFieldGet35(_headersTree, this).clear();
  }
};

// node_modules/handsontable/plugins/nestedHeaders/utils/ghostTable.mjs
function _defineProperty51(e, r, t) {
  return (r = _toPropertyKey51(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey51(t) {
  var i = _toPrimitive51(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive51(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var GhostTable2 = class {
  constructor(hot, nestedHeaderSettingsGetter) {
    _defineProperty51(this, "hot", void 0);
    _defineProperty51(this, "nestedHeaderSettingsGetter", void 0);
    _defineProperty51(this, "layersCount", 0);
    _defineProperty51(this, "container", void 0);
    _defineProperty51(this, "widthsMap", void 0);
    this.hot = hot;
    this.nestedHeaderSettingsGetter = nestedHeaderSettingsGetter;
    this.widthsMap = this.hot.columnIndexMapper.createAndRegisterIndexMap("nestedHeaders.widthsMap", "physicalIndexToValue");
  }
  /**
   * Sets the number of nested headers layers count.
   *
   * @param {number} layersCount Total number of headers levels.
   * @returns {GhostTable}
   */
  setLayersCount(layersCount) {
    this.layersCount = layersCount;
    return this;
  }
  /**
   * Gets the column width based on the visual column index.
   *
   * @param {number} visualColumn Visual column index.
   * @returns {number|null}
   */
  getWidth(visualColumn) {
    return this.widthsMap.getValueAtIndex(this.hot.toPhysicalColumn(visualColumn));
  }
  /**
   * Build cache of the headers widths.
   */
  buildWidthsMap() {
    const currentThemeName = this.hot.getCurrentThemeName();
    this.container = this.hot.rootDocument.createElement("div");
    this.container.classList.add("handsontable", "htGhostTable", "htAutoSize");
    if (currentThemeName) {
      this.container.classList.add(currentThemeName);
    }
    this._buildGhostTable(this.container);
    this.hot.rootDocument.body.appendChild(this.container);
    const columns = this.container.querySelectorAll("tr:last-of-type th");
    const maxColumns = columns.length;
    this.widthsMap.clear();
    for (let column = 0; column < maxColumns; column++) {
      const visualColumnsIndex = this.hot.columnIndexMapper.getVisualFromRenderableIndex(column);
      const physicalColumnIndex = this.hot.toPhysicalColumn(visualColumnsIndex);
      this.widthsMap.setValueAtIndex(physicalColumnIndex, columns[column].offsetWidth);
    }
    this.container.parentNode.removeChild(this.container);
    this.container = null;
  }
  /**
   * Build temporary table for getting minimal columns widths.
   *
   * @private
   * @param {HTMLElement} container The element where the DOM nodes are injected.
   */
  _buildGhostTable(container) {
    const {
      rootDocument,
      columnIndexMapper
    } = this.hot;
    const fragment = rootDocument.createDocumentFragment();
    const table = rootDocument.createElement("table");
    const isDropdownEnabled = !!this.hot.getSettings().dropdownMenu;
    const maxRenderedCols = columnIndexMapper.getRenderableIndexesLength();
    for (let row = 0; row < this.layersCount; row++) {
      const tr = rootDocument.createElement("tr");
      for (let col = 0; col < maxRenderedCols; col++) {
        let visualColumnsIndex = columnIndexMapper.getVisualFromRenderableIndex(col);
        if (visualColumnsIndex === null) {
          visualColumnsIndex = col;
        }
        const th = rootDocument.createElement("th");
        const headerSettings = this.nestedHeaderSettingsGetter(row, visualColumnsIndex);
        if (headerSettings && (!headerSettings.isPlaceholder || headerSettings.isHidden)) {
          let label = headerSettings.label;
          if (isDropdownEnabled) {
            label += '<button class="changeType"></button>';
          }
          fastInnerHTML(th, label);
          th.colSpan = headerSettings.colspan;
          tr.appendChild(th);
        }
      }
      table.appendChild(tr);
    }
    fragment.appendChild(table);
    container.appendChild(fragment);
  }
  /**
   * Clear the widths cache.
   */
  clear() {
    this.widthsMap.clear();
    this.container = null;
  }
};
var ghostTable_default2 = GhostTable2;

// node_modules/handsontable/plugins/nestedHeaders/nestedHeaders.mjs
function _classPrivateMethodInitSpec40(e, a) {
  _checkPrivateRedeclaration51(e, a), a.add(e);
}
function _defineProperty52(e, r, t) {
  return (r = _toPropertyKey52(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey52(t) {
  var i = _toPrimitive52(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive52(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _classPrivateFieldInitSpec36(e, t, a) {
  _checkPrivateRedeclaration51(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration51(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldSet34(s, a, r) {
  return s.set(_assertClassBrand51(s, a), r), r;
}
function _classPrivateFieldGet36(s, a) {
  return s.get(_assertClassBrand51(s, a));
}
function _assertClassBrand51(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var PLUGIN_KEY28 = "nestedHeaders";
var PLUGIN_PRIORITY27 = 280;
var _stateManager = /* @__PURE__ */ new WeakMap();
var _hidingIndexMapObserver = /* @__PURE__ */ new WeakMap();
var _focusInitialCoords = /* @__PURE__ */ new WeakMap();
var _isColumnsSelectionInProgress = /* @__PURE__ */ new WeakMap();
var _recentlyHighlightCoords = /* @__PURE__ */ new WeakMap();
var _NestedHeaders_brand = /* @__PURE__ */ new WeakSet();
var NestedHeaders = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec40(this, _NestedHeaders_brand);
    _classPrivateFieldInitSpec36(this, _stateManager, new StateManager());
    _classPrivateFieldInitSpec36(this, _hidingIndexMapObserver, null);
    _classPrivateFieldInitSpec36(this, _focusInitialCoords, null);
    _classPrivateFieldInitSpec36(this, _isColumnsSelectionInProgress, false);
    _classPrivateFieldInitSpec36(this, _recentlyHighlightCoords, null);
    _defineProperty52(this, "ghostTable", new ghostTable_default2(this.hot, (row, column) => this.getHeaderSettings(row, column)));
    _defineProperty52(this, "detectedOverlappedHeaders", false);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY28;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY27;
  }
  /**
   * Check if plugin is enabled.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[PLUGIN_KEY28];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _this = this;
    if (this.enabled) {
      return;
    }
    const {
      nestedHeaders
    } = this.hot.getSettings();
    if (!Array.isArray(nestedHeaders) || !Array.isArray(nestedHeaders[0])) {
      warn(toSingleLine`Your Nested Headers plugin configuration is invalid. The settings has to be\x20
                        passed as an array of arrays e.q. [['A1', { label: 'A2', colspan: 2 }]]`);
    }
    this.addHook("init", () => _assertClassBrand51(_NestedHeaders_brand, this, _onInit4).call(this));
    this.addHook("afterLoadData", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _assertClassBrand51(_NestedHeaders_brand, _this, _onAfterLoadData8).call(_this, ...args);
    });
    this.addHook("beforeOnCellMouseDown", function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _assertClassBrand51(_NestedHeaders_brand, _this, _onBeforeOnCellMouseDown6).call(_this, ...args);
    });
    this.addHook("afterOnCellMouseDown", function() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return _assertClassBrand51(_NestedHeaders_brand, _this, _onAfterOnCellMouseDown).call(_this, ...args);
    });
    this.addHook("beforeOnCellMouseOver", function() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return _assertClassBrand51(_NestedHeaders_brand, _this, _onBeforeOnCellMouseOver3).call(_this, ...args);
    });
    this.addHook("beforeOnCellMouseUp", function() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }
      return _assertClassBrand51(_NestedHeaders_brand, _this, _onBeforeOnCellMouseUp).call(_this, ...args);
    });
    this.addHook("beforeSelectionHighlightSet", function() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      return _assertClassBrand51(_NestedHeaders_brand, _this, _onBeforeSelectionHighlightSet2).call(_this, ...args);
    });
    this.addHook("modifyTransformStart", function() {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }
      return _assertClassBrand51(_NestedHeaders_brand, _this, _onModifyTransformStart2).call(_this, ...args);
    });
    this.addHook("afterSelection", () => _assertClassBrand51(_NestedHeaders_brand, this, _updateFocusHighlightPosition).call(this));
    this.addHook("afterSelectionFocusSet", () => _assertClassBrand51(_NestedHeaders_brand, this, _updateFocusHighlightPosition).call(this));
    this.addHook("beforeViewportScrollHorizontally", function() {
      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }
      return _assertClassBrand51(_NestedHeaders_brand, _this, _onBeforeViewportScrollHorizontally2).call(_this, ...args);
    });
    this.addHook("afterGetColumnHeaderRenderers", (array) => _assertClassBrand51(_NestedHeaders_brand, this, _onAfterGetColumnHeaderRenderers).call(this, array));
    this.addHook("modifyColWidth", function() {
      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        args[_key9] = arguments[_key9];
      }
      return _assertClassBrand51(_NestedHeaders_brand, _this, _onModifyColWidth3).call(_this, ...args);
    });
    this.addHook("modifyColumnHeaderValue", function() {
      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        args[_key10] = arguments[_key10];
      }
      return _assertClassBrand51(_NestedHeaders_brand, _this, _onModifyColumnHeaderValue).call(_this, ...args);
    });
    this.addHook("beforeHighlightingColumnHeader", function() {
      for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
        args[_key11] = arguments[_key11];
      }
      return _assertClassBrand51(_NestedHeaders_brand, _this, _onBeforeHighlightingColumnHeader).call(_this, ...args);
    });
    this.addHook("beforeCopy", function() {
      for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
        args[_key12] = arguments[_key12];
      }
      return _assertClassBrand51(_NestedHeaders_brand, _this, _onBeforeCopy).call(_this, ...args);
    });
    this.addHook("beforeSelectColumns", function() {
      for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
        args[_key13] = arguments[_key13];
      }
      return _assertClassBrand51(_NestedHeaders_brand, _this, _onBeforeSelectColumns).call(_this, ...args);
    });
    this.addHook("afterViewportColumnCalculatorOverride", function() {
      for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
        args[_key14] = arguments[_key14];
      }
      return _assertClassBrand51(_NestedHeaders_brand, _this, _onAfterViewportColumnCalculatorOverride2).call(_this, ...args);
    });
    this.addHook("modifyFocusedElement", function() {
      for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
        args[_key15] = arguments[_key15];
      }
      return _assertClassBrand51(_NestedHeaders_brand, _this, _onModifyFocusedElement).call(_this, ...args);
    });
    this.hot.columnIndexMapper.addLocalHook("cacheUpdated", () => _assertClassBrand51(_NestedHeaders_brand, this, _updateFocusHighlightPosition).call(this));
    this.hot.rowIndexMapper.addLocalHook("cacheUpdated", () => _assertClassBrand51(_NestedHeaders_brand, this, _updateFocusHighlightPosition).call(this));
    super.enablePlugin();
    this.updatePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`nestedHeaders`](@/api/options.md#nestedheaders)
   */
  updatePlugin() {
    if (!this.hot.view) {
      return;
    }
    const {
      nestedHeaders
    } = this.hot.getSettings();
    _classPrivateFieldGet36(_stateManager, this).setColumnsLimit(this.hot.countCols());
    if (Array.isArray(nestedHeaders)) {
      this.detectedOverlappedHeaders = _classPrivateFieldGet36(_stateManager, this).setState(nestedHeaders);
    }
    if (this.detectedOverlappedHeaders) {
      warn(toSingleLine`Your Nested Headers plugin setup contains overlapping headers. This kind of configuration\x20
                        is currently not supported.`);
    }
    if (this.enabled) {
      this.hot.columnIndexMapper.hidingMapsCollection.getMergedValues().forEach((isColumnHidden, physicalColumnIndex) => {
        const actionName = isColumnHidden === true ? "hide-column" : "show-column";
        _classPrivateFieldGet36(_stateManager, this).triggerColumnModification(actionName, physicalColumnIndex);
      });
    }
    if (!_classPrivateFieldGet36(_hidingIndexMapObserver, this) && this.enabled) {
      _classPrivateFieldSet34(_hidingIndexMapObserver, this, this.hot.columnIndexMapper.createChangesObserver("hiding").subscribe((changes) => {
        changes.forEach((_ref) => {
          let {
            op,
            index: columnIndex,
            newValue
          } = _ref;
          if (op === "replace") {
            const actionName = newValue === true ? "hide-column" : "show-column";
            _classPrivateFieldGet36(_stateManager, this).triggerColumnModification(actionName, columnIndex);
          }
        });
        this.ghostTable.buildWidthsMap();
      }));
    }
    this.ghostTable.setLayersCount(this.getLayersCount()).buildWidthsMap();
    super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.clearColspans();
    _classPrivateFieldGet36(_stateManager, this).clear();
    _classPrivateFieldGet36(_hidingIndexMapObserver, this).unsubscribe();
    _classPrivateFieldSet34(_hidingIndexMapObserver, this, null);
    this.ghostTable.clear();
    super.disablePlugin();
  }
  /**
   * Returns an instance of the internal state manager of the plugin.
   *
   * @private
   * @returns {StateManager}
   */
  getStateManager() {
    return _classPrivateFieldGet36(_stateManager, this);
  }
  /**
   * Gets a total number of headers levels.
   *
   * @private
   * @returns {number}
   */
  getLayersCount() {
    return _classPrivateFieldGet36(_stateManager, this).getLayersCount();
  }
  /**
   * Gets column settings for a specified header. The returned object contains
   * information about the header label, its colspan length, or if it is hidden
   * in the header renderers.
   *
   * @private
   * @param {number} headerLevel Header level (0 = most distant to the table).
   * @param {number} columnIndex A visual column index.
   * @returns {object}
   */
  getHeaderSettings(headerLevel, columnIndex) {
    return _classPrivateFieldGet36(_stateManager, this).getHeaderSettings(headerLevel, columnIndex);
  }
  /**
   * Clear the colspans remaining after plugin usage.
   *
   * @private
   */
  clearColspans() {
    if (!this.hot.view) {
      return;
    }
    const {
      _wt: wt
    } = this.hot.view;
    const headerLevels = wt.getSetting("columnHeaders").length;
    const mainHeaders = wt.wtTable.THEAD;
    const topHeaders = wt.wtOverlays.topOverlay.clone.wtTable.THEAD;
    const topLeftCornerHeaders = wt.wtOverlays.topInlineStartCornerOverlay ? wt.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.THEAD : null;
    for (let i = 0; i < headerLevels; i++) {
      const masterLevel = mainHeaders.childNodes[i];
      if (!masterLevel) {
        break;
      }
      const topLevel = topHeaders.childNodes[i];
      const topLeftCornerLevel = topLeftCornerHeaders ? topLeftCornerHeaders.childNodes[i] : null;
      for (let j = 0, masterNodes = masterLevel.childNodes.length; j < masterNodes; j++) {
        masterLevel.childNodes[j].removeAttribute("colspan");
        removeClass(masterLevel.childNodes[j], "hiddenHeader");
        if (topLevel && topLevel.childNodes[j]) {
          topLevel.childNodes[j].removeAttribute("colspan");
          removeClass(topLevel.childNodes[j], "hiddenHeader");
        }
        if (topLeftCornerHeaders && topLeftCornerLevel && topLeftCornerLevel.childNodes[j]) {
          topLeftCornerLevel.childNodes[j].removeAttribute("colspan");
          removeClass(topLeftCornerLevel.childNodes[j], "hiddenHeader");
        }
      }
    }
  }
  /**
   * Generates the appropriate header renderer for a header row.
   *
   * @private
   * @param {number} headerLevel The index of header level counting from the top (positive
   *                             values counting from 0 to N).
   * @returns {Function}
   * @fires Hooks#afterGetColHeader
   */
  headerRendererFactory(headerLevel) {
    var _this2 = this;
    const fixedColumnsStart = this.hot.view._wt.getSetting("fixedColumnsStart");
    return (renderedColumnIndex, TH) => {
      var _classPrivateFieldGet210;
      const {
        columnIndexMapper,
        view
      } = this.hot;
      let visualColumnIndex = columnIndexMapper.getVisualFromRenderableIndex(renderedColumnIndex);
      if (visualColumnIndex === null) {
        visualColumnIndex = renderedColumnIndex;
      }
      TH.removeAttribute("colspan");
      removeClass(TH, "hiddenHeader");
      removeClass(TH, "hiddenHeaderText");
      const {
        colspan,
        isHidden,
        isPlaceholder,
        headerClassNames
      } = (_classPrivateFieldGet210 = _classPrivateFieldGet36(_stateManager, this).getHeaderSettings(headerLevel, visualColumnIndex)) !== null && _classPrivateFieldGet210 !== void 0 ? _classPrivateFieldGet210 : {
        label: ""
      };
      if (isPlaceholder || isHidden) {
        addClass(TH, "hiddenHeader");
      } else if (colspan > 1) {
        var _wtOverlays$topInline, _wtOverlays$inlineSta, _wtOverlays$topOverla;
        const {
          wtOverlays
        } = view._wt;
        const isTopInlineStartOverlay = (_wtOverlays$topInline = wtOverlays.topInlineStartCornerOverlay) === null || _wtOverlays$topInline === void 0 ? void 0 : _wtOverlays$topInline.clone.wtTable.THEAD.contains(TH);
        const isInlineStartOverlay = (_wtOverlays$inlineSta = wtOverlays.inlineStartOverlay) === null || _wtOverlays$inlineSta === void 0 ? void 0 : _wtOverlays$inlineSta.clone.wtTable.THEAD.contains(TH);
        const isTopOverlay = (_wtOverlays$topOverla = wtOverlays.topOverlay) === null || _wtOverlays$topOverla === void 0 ? void 0 : _wtOverlays$topOverla.clone.wtTable.THEAD.contains(TH);
        if (isTopOverlay && visualColumnIndex < fixedColumnsStart) {
          addClass(TH, "hiddenHeaderText");
        }
        const correctedColspan = isTopInlineStartOverlay || isInlineStartOverlay ? Math.min(colspan, fixedColumnsStart - renderedColumnIndex) : colspan;
        if (correctedColspan > 1) {
          TH.setAttribute("colspan", correctedColspan);
        }
      }
      this.hot.view.appendColHeader(visualColumnIndex, TH, function() {
        return _this2.getColumnHeaderValue(...arguments);
      }, headerLevel);
      if (!isPlaceholder && !isHidden) {
        const innerHeaderDiv = TH.querySelector("div.relative");
        if (innerHeaderDiv && headerClassNames && headerClassNames.length > 0) {
          removeClass(innerHeaderDiv, this.hot.getColumnMeta(visualColumnIndex).headerClassName);
          addClass(innerHeaderDiv, headerClassNames);
        }
      }
    };
  }
  /**
   * Returns the column header value for specified column and header level index.
   *
   * @private
   * @param {number} visualColumnIndex Visual column index.
   * @param {number} headerLevel The index of header level. The header level accepts positive (0 to N)
   *                             and negative (-1 to -N) values. For positive values, 0 points to the
   *                             top most header, and for negative direction, -1 points to the most bottom
   *                             header (the header closest to the cells).
   * @returns {string} Returns the column header value to update.
   */
  getColumnHeaderValue(visualColumnIndex, headerLevel) {
    var _classPrivateFieldGet310;
    const {
      isHidden,
      isPlaceholder
    } = (_classPrivateFieldGet310 = _classPrivateFieldGet36(_stateManager, this).getHeaderSettings(headerLevel, visualColumnIndex)) !== null && _classPrivateFieldGet310 !== void 0 ? _classPrivateFieldGet310 : {};
    if (isPlaceholder || isHidden) {
      return "";
    }
    return this.hot.getColHeader(visualColumnIndex, headerLevel);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    _classPrivateFieldSet34(_stateManager, this, null);
    if (_classPrivateFieldGet36(_hidingIndexMapObserver, this) !== null) {
      _classPrivateFieldGet36(_hidingIndexMapObserver, this).unsubscribe();
      _classPrivateFieldSet34(_hidingIndexMapObserver, this, null);
    }
    super.destroy();
  }
  /**
   * Gets the tree data that belongs to the column headers pointed by the passed coordinates.
   *
   * @private
   * @param {CellCoords} coords The CellCoords instance.
   * @returns {object|undefined}
   */
  _getHeaderTreeNodeDataByCoords(coords) {
    if (coords.row >= 0 || coords.col < 0) {
      return;
    }
    return _classPrivateFieldGet36(_stateManager, this).getHeaderTreeNodeData(coords.row, coords.col);
  }
};
function _updateFocusHighlightPosition() {
  var _this$hot;
  const selection = (_this$hot = this.hot) === null || _this$hot === void 0 ? void 0 : _this$hot.getSelectedRangeLast();
  if (!selection) {
    return;
  }
  const {
    highlight
  } = selection;
  const isNestedHeadersRange = highlight.isHeader() && highlight.col >= 0;
  if (isNestedHeadersRange) {
    const columnIndex = _classPrivateFieldGet36(_stateManager, this).findLeftMostColumnIndex(highlight.row, highlight.col);
    const focusHighlight = this.hot.selection.highlight.getFocus();
    focusHighlight.visualCellRange.highlight.col = columnIndex;
    focusHighlight.visualCellRange.from.col = columnIndex;
    focusHighlight.visualCellRange.to.col = columnIndex;
    focusHighlight.commit();
  }
}
function _onBeforeViewportScrollHorizontally2(visualColumn, snapping) {
  var _classPrivateFieldGet42;
  const selection = this.hot.getSelectedRangeLast();
  if (!selection) {
    return visualColumn;
  }
  const {
    highlight
  } = selection;
  const {
    navigableHeaders
  } = this.hot.getSettings();
  const isSelectedByColumnHeader = this.hot.selection.isSelectedByColumnHeader();
  const highlightRow = navigableHeaders ? highlight.row : (_classPrivateFieldGet42 = _classPrivateFieldGet36(_recentlyHighlightCoords, this)) === null || _classPrivateFieldGet42 === void 0 ? void 0 : _classPrivateFieldGet42.row;
  const highlightColumn = isSelectedByColumnHeader ? visualColumn : highlight.col;
  const isNestedHeadersRange = highlightRow < 0 && highlightColumn >= 0;
  _classPrivateFieldSet34(_recentlyHighlightCoords, this, null);
  if (!isNestedHeadersRange) {
    return visualColumn;
  }
  const firstVisibleColumn = this.hot.getFirstFullyVisibleColumn();
  const lastVisibleColumn = this.hot.getLastFullyVisibleColumn();
  const viewportWidth = lastVisibleColumn - firstVisibleColumn + 1;
  const mostLeftColumnIndex = _classPrivateFieldGet36(_stateManager, this).findLeftMostColumnIndex(highlightRow, highlightColumn);
  const mostRightColumnIndex = _classPrivateFieldGet36(_stateManager, this).findRightMostColumnIndex(highlightRow, highlightColumn);
  const headerWidth = mostRightColumnIndex - mostLeftColumnIndex + 1;
  if (mostLeftColumnIndex < firstVisibleColumn && mostRightColumnIndex > lastVisibleColumn) {
    return mostLeftColumnIndex;
  }
  if (isSelectedByColumnHeader) {
    let scrollColumnIndex = null;
    if (mostLeftColumnIndex >= firstVisibleColumn && mostRightColumnIndex > lastVisibleColumn) {
      if (headerWidth > viewportWidth) {
        snapping.value = "start";
        scrollColumnIndex = mostLeftColumnIndex;
      } else {
        snapping.value = "end";
        scrollColumnIndex = mostRightColumnIndex;
      }
    } else if (mostLeftColumnIndex < firstVisibleColumn && mostRightColumnIndex <= lastVisibleColumn) {
      if (headerWidth > viewportWidth) {
        snapping.value = "end";
        scrollColumnIndex = mostRightColumnIndex;
      } else {
        snapping.value = "start";
        scrollColumnIndex = mostLeftColumnIndex;
      }
    }
    return scrollColumnIndex;
  }
  return mostLeftColumnIndex <= firstVisibleColumn ? mostLeftColumnIndex : mostRightColumnIndex;
}
function _onBeforeHighlightingColumnHeader(visualColumn, headerLevel, highlightMeta) {
  const headerNodeData = _classPrivateFieldGet36(_stateManager, this).getHeaderTreeNodeData(headerLevel, visualColumn);
  if (!headerNodeData) {
    return visualColumn;
  }
  const {
    columnCursor,
    selectionType,
    selectionWidth
  } = highlightMeta;
  const {
    isRoot,
    colspan
  } = _classPrivateFieldGet36(_stateManager, this).getHeaderSettings(headerLevel, visualColumn);
  if (selectionType === HEADER_TYPE) {
    if (!isRoot) {
      return headerNodeData.columnIndex;
    }
  } else if (selectionType === ACTIVE_HEADER_TYPE) {
    if (colspan > selectionWidth - columnCursor || !isRoot) {
      return null;
    }
  }
  return visualColumn;
}
function _onBeforeCopy(data, copyableRanges, _ref2) {
  let {
    columnHeadersCount
  } = _ref2;
  if (columnHeadersCount === 0) {
    return;
  }
  for (let rangeIndex = 0; rangeIndex < copyableRanges.length; rangeIndex++) {
    const {
      startRow,
      startCol,
      endRow,
      endCol
    } = copyableRanges[rangeIndex];
    const rowsCount = endRow - startRow + 1;
    const columnsCount = startCol - endCol + 1;
    if (startRow >= 0 || columnsCount === 1) {
      break;
    }
    for (let column = startCol; column <= endCol; column++) {
      for (let row = startRow; row <= endRow; row++) {
        var _classPrivateFieldGet52;
        const zeroBasedColumnHeaderLevel = rowsCount + row;
        const zeroBasedColumnIndex = column - startCol;
        if (zeroBasedColumnIndex === 0) {
          continue;
        }
        const isRoot = (_classPrivateFieldGet52 = _classPrivateFieldGet36(_stateManager, this).getHeaderTreeNodeData(row, column)) === null || _classPrivateFieldGet52 === void 0 ? void 0 : _classPrivateFieldGet52.isRoot;
        if (isRoot === false) {
          data[zeroBasedColumnHeaderLevel][zeroBasedColumnIndex] = "";
        }
      }
    }
  }
}
function _onBeforeOnCellMouseDown6(event, coords, TD, controller) {
  const headerNodeData = this._getHeaderTreeNodeDataByCoords(coords);
  if (headerNodeData) {
    controller.column = true;
  }
}
function _onAfterOnCellMouseDown(event, coords) {
  const headerNodeData = this._getHeaderTreeNodeDataByCoords(coords);
  if (!headerNodeData) {
    return;
  }
  _classPrivateFieldSet34(_focusInitialCoords, this, coords.clone());
  _classPrivateFieldSet34(_isColumnsSelectionInProgress, this, true);
  const {
    selection
  } = this.hot;
  const currentSelection = selection.isSelected() ? selection.getSelectedRange().current() : null;
  const columnsToSelect = [];
  const {
    columnIndex,
    origColspan
  } = headerNodeData;
  const allowRightClickSelection = !selection.inInSelection(coords);
  if (event.shiftKey && currentSelection) {
    if (coords.col < currentSelection.from.col) {
      columnsToSelect.push(currentSelection.getTopEndCorner().col, columnIndex, coords.row);
    } else if (coords.col > currentSelection.from.col) {
      columnsToSelect.push(currentSelection.getTopStartCorner().col, columnIndex + origColspan - 1, coords.row);
    } else {
      columnsToSelect.push(columnIndex, columnIndex + origColspan - 1, coords.row);
    }
  } else if (isLeftClick(event) || isRightClick(event) && allowRightClickSelection || isTouchEvent(event)) {
    columnsToSelect.push(columnIndex, columnIndex + origColspan - 1, coords.row);
  }
  selection.selectColumns(...columnsToSelect);
}
function _onBeforeOnCellMouseOver3(event, coords, TD, controller) {
  if (!this.hot.view.isMouseDown() || controller.column) {
    return;
  }
  const headerNodeData = this._getHeaderTreeNodeDataByCoords(coords);
  if (!headerNodeData) {
    return;
  }
  const {
    columnIndex,
    origColspan
  } = headerNodeData;
  const selectedRange = this.hot.getSelectedRangeLast();
  const topStartCoords = selectedRange.getTopStartCorner();
  const bottomEndCoords = selectedRange.getBottomEndCorner();
  const {
    from
  } = selectedRange;
  controller.column = true;
  controller.cell = true;
  const columnsToSelect = [];
  const headerLevel = clamp(coords.row, -Infinity, -1);
  if (coords.col < from.col) {
    columnsToSelect.push(bottomEndCoords.col, columnIndex, headerLevel);
  } else if (coords.col > from.col) {
    columnsToSelect.push(topStartCoords.col, columnIndex + origColspan - 1, headerLevel);
  } else {
    columnsToSelect.push(columnIndex, columnIndex + origColspan - 1, headerLevel);
  }
  this.hot.selection.selectColumns(...columnsToSelect);
}
function _onBeforeOnCellMouseUp() {
  _classPrivateFieldSet34(_isColumnsSelectionInProgress, this, false);
}
function _onBeforeSelectionHighlightSet2() {
  const {
    navigableHeaders
  } = this.hot.getSettings();
  if (!this.hot.view.isMouseDown() || !_classPrivateFieldGet36(_isColumnsSelectionInProgress, this) || !navigableHeaders) {
    return;
  }
  const selectedRange = this.hot.getSelectedRangeLast();
  const columnStart = selectedRange.getTopStartCorner().col;
  const columnEnd = selectedRange.getBottomEndCorner().col;
  const {
    columnIndex,
    origColspan
  } = _classPrivateFieldGet36(_stateManager, this).getHeaderTreeNodeData(_classPrivateFieldGet36(_focusInitialCoords, this).row, _classPrivateFieldGet36(_focusInitialCoords, this).col);
  selectedRange.setHighlight(_classPrivateFieldGet36(_focusInitialCoords, this));
  if (origColspan > selectedRange.getWidth() || columnIndex < columnStart || columnIndex + origColspan - 1 > columnEnd) {
    const headerLevel = _classPrivateFieldGet36(_stateManager, this).findTopMostEntireHeaderLevel(clamp(columnStart, columnIndex, columnIndex + origColspan - 1), clamp(columnEnd, columnIndex, columnIndex + origColspan - 1));
    selectedRange.highlight.row = headerLevel;
    selectedRange.highlight.col = selectedRange.from.col;
  }
}
function _onModifyTransformStart2(delta) {
  const {
    highlight
  } = this.hot.getSelectedRangeLast();
  const nextCoords = this.hot._createCellCoords(highlight.row + delta.row, highlight.col + delta.col);
  const isNestedHeadersRange = nextCoords.isHeader() && nextCoords.col >= 0;
  if (!isNestedHeadersRange) {
    return;
  }
  const visualColumnIndexStart = _classPrivateFieldGet36(_stateManager, this).findLeftMostColumnIndex(nextCoords.row, nextCoords.col);
  const visualColumnIndexEnd = _classPrivateFieldGet36(_stateManager, this).findRightMostColumnIndex(nextCoords.row, nextCoords.col);
  if (delta.col < 0) {
    const nextColumn = highlight.col >= visualColumnIndexStart && highlight.col <= visualColumnIndexEnd ? visualColumnIndexStart - 1 : visualColumnIndexEnd;
    const notHiddenColumnIndex = this.hot.columnIndexMapper.getNearestNotHiddenIndex(nextColumn, -1);
    if (notHiddenColumnIndex === null) {
      delta.col = -this.hot.view.countRenderableColumnsInRange(0, highlight.col);
    } else {
      delta.col = -Math.max(this.hot.view.countRenderableColumnsInRange(notHiddenColumnIndex, highlight.col) - 1, 1);
    }
  } else if (delta.col > 0) {
    const nextColumn = highlight.col >= visualColumnIndexStart && highlight.col <= visualColumnIndexEnd ? visualColumnIndexEnd + 1 : visualColumnIndexStart;
    const notHiddenColumnIndex = this.hot.columnIndexMapper.getNearestNotHiddenIndex(nextColumn, 1);
    if (notHiddenColumnIndex === null) {
      delta.col = this.hot.view.countRenderableColumnsInRange(highlight.col, this.hot.countCols());
    } else {
      delta.col = Math.max(this.hot.view.countRenderableColumnsInRange(highlight.col, notHiddenColumnIndex) - 1, 1);
    }
  }
}
function _onBeforeSelectColumns(from, to, highlight) {
  const headerLevel = from.row;
  const startNodeData = this._getHeaderTreeNodeDataByCoords({
    row: headerLevel,
    col: from.col
  });
  const endNodeData = this._getHeaderTreeNodeDataByCoords({
    row: headerLevel,
    col: to.col
  });
  _classPrivateFieldSet34(_recentlyHighlightCoords, this, highlight.clone());
  if (to.col < from.col) {
    if (startNodeData) {
      from.col = startNodeData.columnIndex + startNodeData.origColspan - 1;
    }
    if (endNodeData) {
      to.col = endNodeData.columnIndex;
    }
  } else if (to.col >= from.col) {
    if (startNodeData) {
      from.col = startNodeData.columnIndex;
    }
    if (endNodeData) {
      to.col = endNodeData.columnIndex + endNodeData.origColspan - 1;
    }
  }
}
function _onAfterGetColumnHeaderRenderers(renderersArray) {
  if (_classPrivateFieldGet36(_stateManager, this).getLayersCount() > 0) {
    renderersArray.length = 0;
    for (let headerLayer = 0; headerLayer < _classPrivateFieldGet36(_stateManager, this).getLayersCount(); headerLayer++) {
      renderersArray.push(this.headerRendererFactory(headerLayer));
    }
  }
}
function _onAfterViewportColumnCalculatorOverride2(calc) {
  const headerLayersCount = _classPrivateFieldGet36(_stateManager, this).getLayersCount();
  let newStartColumn = calc.startColumn;
  let nonRenderable = !!headerLayersCount;
  for (let headerLayer = 0; headerLayer < headerLayersCount; headerLayer++) {
    const startColumn = _classPrivateFieldGet36(_stateManager, this).findLeftMostColumnIndex(headerLayer, calc.startColumn);
    const renderedStartColumn = this.hot.columnIndexMapper.getRenderableFromVisualIndex(startColumn);
    if (startColumn >= 0) {
      nonRenderable = false;
    }
    if (isNumeric(renderedStartColumn) && renderedStartColumn < calc.startColumn) {
      newStartColumn = renderedStartColumn;
      break;
    }
  }
  calc.startColumn = nonRenderable ? _classPrivateFieldGet36(_stateManager, this).getHeaderTreeNodeData(0, newStartColumn).columnIndex : newStartColumn;
}
function _onModifyColWidth3(width, column) {
  const cachedWidth = this.ghostTable.getWidth(column);
  return width > cachedWidth ? width : cachedWidth;
}
function _onModifyColumnHeaderValue(value, visualColumnIndex, headerLevel) {
  var _classPrivateFieldGet62;
  const {
    label
  } = (_classPrivateFieldGet62 = _classPrivateFieldGet36(_stateManager, this).getHeaderTreeNodeData(headerLevel, visualColumnIndex)) !== null && _classPrivateFieldGet62 !== void 0 ? _classPrivateFieldGet62 : {
    label: ""
  };
  return label;
}
function _onModifyFocusedElement(row, column) {
  if (row < 0) {
    return this.hot.getCell(row, _classPrivateFieldGet36(_stateManager, this).findLeftMostColumnIndex(row, column), true);
  }
}
function _onInit4() {
  this.updatePlugin();
}
function _onAfterLoadData8(sourceData, initialLoad) {
  if (!initialLoad) {
    this.updatePlugin();
  }
}

// node_modules/handsontable/plugins/nestedRows/data/dataManager.mjs
function _defineProperty53(e, r, t) {
  return (r = _toPropertyKey53(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey53(t) {
  var i = _toPrimitive53(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive53(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var DataManager = class {
  constructor(nestedRowsPlugin, hotInstance) {
    _defineProperty53(this, "hot", void 0);
    _defineProperty53(this, "data", null);
    _defineProperty53(this, "plugin", void 0);
    _defineProperty53(this, "parentReference", /* @__PURE__ */ new WeakMap());
    _defineProperty53(this, "cache", {
      levels: [],
      levelCount: 0,
      rows: [],
      nodeInfo: /* @__PURE__ */ new WeakMap()
    });
    this.hot = hotInstance;
    this.plugin = nestedRowsPlugin;
  }
  /**
   * Set the data for the manager.
   *
   * @param {Handsontable.CellValue[][]|Handsontable.RowObject[]} data Data for the manager.
   */
  setData(data) {
    this.data = data;
  }
  /**
   * Get the data cached in the manager.
   *
   * @returns {Handsontable.CellValue[][]|Handsontable.RowObject[]}
   */
  getData() {
    return this.data;
  }
  /**
   * Load the "raw" source data, without NestedRows' modifications.
   *
   * @returns {Handsontable.CellValue[][]|Handsontable.RowObject[]}
   */
  getRawSourceData() {
    let rawSourceData = null;
    this.plugin.disableCoreAPIModifiers();
    rawSourceData = this.hot.getSourceData();
    this.plugin.enableCoreAPIModifiers();
    return rawSourceData;
  }
  /**
   * Update the Data Manager with new data and refresh cache.
   *
   * @param {Handsontable.CellValue[][]|Handsontable.RowObject[]} data Data for the manager.
   */
  updateWithData(data) {
    this.setData(data);
    this.rewriteCache();
  }
  /**
   * Rewrite the nested structure cache.
   *
   * @private
   */
  rewriteCache() {
    this.cache = {
      levels: [],
      levelCount: 0,
      rows: [],
      nodeInfo: /* @__PURE__ */ new WeakMap()
    };
    rangeEach(0, this.data.length - 1, (i) => {
      this.cacheNode(this.data[i], 0, null);
    });
  }
  /**
   * Cache a data node.
   *
   * @private
   * @param {object} node Node to cache.
   * @param {number} level Level of the node.
   * @param {object} parent Parent of the node.
   */
  cacheNode(node, level, parent) {
    if (!this.cache.levels[level]) {
      this.cache.levels[level] = [];
      this.cache.levelCount += 1;
    }
    this.cache.levels[level].push(node);
    this.cache.rows.push(node);
    this.cache.nodeInfo.set(node, {
      parent,
      row: this.cache.rows.length - 1,
      level
    });
    if (this.hasChildren(node)) {
      arrayEach(node.__children, (elem) => {
        this.cacheNode(elem, level + 1, node);
      });
    }
  }
  /**
   * Get the date for the provided visual row number.
   *
   * @param {number} row Row index.
   * @returns {object}
   */
  getDataObject(row) {
    return row === null || row === void 0 ? null : this.cache.rows[row];
  }
  /**
   * Read the row tree in search for a specific row index or row object.
   *
   * @private
   * @param {object} parent The initial parent object.
   * @param {number} readCount Number of read nodes.
   * @param {number} neededIndex The row index we search for.
   * @param {object} neededObject The row object we search for.
   * @returns {number|object}
   */
  readTreeNodes(parent, readCount, neededIndex, neededObject) {
    let rootLevel = false;
    let readNodesCount = readCount;
    if (isNaN(readNodesCount) && readNodesCount.end) {
      return readNodesCount;
    }
    let parentObj = parent;
    if (!parentObj) {
      parentObj = {
        __children: this.data
      };
      rootLevel = true;
      readNodesCount -= 1;
    }
    if (neededIndex !== null && neededIndex !== void 0 && readNodesCount === neededIndex) {
      return {
        result: parentObj,
        end: true
      };
    }
    if (neededObject !== null && neededObject !== void 0 && parentObj === neededObject) {
      return {
        result: readNodesCount,
        end: true
      };
    }
    readNodesCount += 1;
    if (parentObj.__children) {
      arrayEach(parentObj.__children, (val) => {
        this.parentReference.set(val, rootLevel ? null : parentObj);
        readNodesCount = this.readTreeNodes(val, readNodesCount, neededIndex, neededObject);
        if (isNaN(readNodesCount) && readNodesCount.end) {
          return false;
        }
      });
    }
    return readNodesCount;
  }
  /**
   * Mock a parent node.
   *
   * @private
   * @returns {*}
   */
  mockParent() {
    const fakeParent = this.mockNode();
    fakeParent.__children = this.data;
    return fakeParent;
  }
  /**
   * Mock a data node.
   *
   * @private
   * @returns {{}}
   */
  mockNode() {
    const fakeNode = {};
    objectEach(this.data[0], (val, key) => {
      fakeNode[key] = null;
    });
    return fakeNode;
  }
  /**
   * Get the row index for the provided row object.
   *
   * @param {object} rowObj The row object.
   * @returns {number} Row index.
   */
  getRowIndex(rowObj) {
    return rowObj === null || rowObj === void 0 ? null : this.cache.nodeInfo.get(rowObj).row;
  }
  /**
   * Get the index of the provided row index/row object within its parent.
   *
   * @param {number|object} row Row index / row object.
   * @returns {number}
   */
  getRowIndexWithinParent(row) {
    let rowObj = null;
    if (isNaN(row)) {
      rowObj = row;
    } else {
      rowObj = this.getDataObject(row);
    }
    const parent = this.getRowParent(row);
    if (parent === null || parent === void 0) {
      return this.data.indexOf(rowObj);
    }
    return parent.__children.indexOf(rowObj);
  }
  /**
   * Count all rows (including all parents and children).
   *
   * @returns {number}
   */
  countAllRows() {
    const rootNodeMock = {
      __children: this.data
    };
    return this.countChildren(rootNodeMock);
  }
  /**
   * Count children of the provided parent.
   *
   * @param {object|number} parent Parent node.
   * @returns {number} Children count.
   */
  countChildren(parent) {
    let rowCount = 0;
    let parentNode = parent;
    if (!isNaN(parentNode)) {
      parentNode = this.getDataObject(parentNode);
    }
    if (!parentNode || !parentNode.__children) {
      return 0;
    }
    arrayEach(parentNode.__children, (elem) => {
      rowCount += 1;
      if (elem.__children) {
        rowCount += this.countChildren(elem);
      }
    });
    return rowCount;
  }
  /**
   * Get the parent of the row at the provided index.
   *
   * @param {number|object} row Physical row index.
   * @returns {object}
   */
  getRowParent(row) {
    let rowObject;
    if (isNaN(row)) {
      rowObject = row;
    } else {
      rowObject = this.getDataObject(row);
    }
    return this.getRowObjectParent(rowObject);
  }
  /**
   * Get the parent of the provided row object.
   *
   * @private
   * @param {object} rowObject The row object (tree node).
   * @returns {object|null}
   */
  getRowObjectParent(rowObject) {
    if (!rowObject || typeof rowObject !== "object") {
      return null;
    }
    return this.cache.nodeInfo.get(rowObject).parent;
  }
  /**
   * Get the nesting level for the row with the provided row index.
   *
   * @param {number} row Row index.
   * @returns {number|null} Row level or null, when row doesn't exist.
   */
  getRowLevel(row) {
    let rowObject = null;
    if (isNaN(row)) {
      rowObject = row;
    } else {
      rowObject = this.getDataObject(row);
    }
    return rowObject ? this.getRowObjectLevel(rowObject) : null;
  }
  /**
   * Get the nesting level for the row with the provided row index.
   *
   * @private
   * @param {object} rowObject Row object.
   * @returns {number} Row level.
   */
  getRowObjectLevel(rowObject) {
    return rowObject === null || rowObject === void 0 ? null : this.cache.nodeInfo.get(rowObject).level;
  }
  /**
   * Check if the provided row/row element has children.
   *
   * @param {number|object} row Row number or row element.
   * @returns {boolean}
   */
  hasChildren(row) {
    let rowObj = row;
    if (!isNaN(rowObj)) {
      rowObj = this.getDataObject(rowObj);
    }
    return !!(rowObj.__children && rowObj.__children.length);
  }
  /**
   * Returns `true` if the row at the provided index has a parent.
   *
   * @param {number} index Row index.
   * @returns {boolean} `true` if the row at the provided index has a parent, `false` otherwise.
   */
  isChild(index) {
    return this.getRowParent(index) !== null;
  }
  /**
   * Get child at a provided index from the parent element.
   *
   * @param {object} parent The parent row object.
   * @param {number} index Index of the child element to be retrieved.
   * @returns {object|null} The child element or `null` if the child doesn't exist.
   */
  getChild(parent, index) {
    var _parent$__children;
    return ((_parent$__children = parent.__children) === null || _parent$__children === void 0 ? void 0 : _parent$__children[index]) || null;
  }
  /**
   * Return `true` of the row at the provided index is located at the topmost level.
   *
   * @param {number} index Row index.
   * @returns {boolean} `true` of the row at the provided index is located at the topmost level, `false` otherwise.
   */
  isRowHighestLevel(index) {
    return !this.isChild(index);
  }
  /**
   * Return `true` if the provided row index / row object represents a parent in the nested structure.
   *
   * @param {number|object} row Row index / row object.
   * @returns {boolean} `true` if the row is a parent, `false` otherwise.
   */
  isParent(row) {
    var _rowObj$__children;
    let rowObj = row;
    if (!isNaN(rowObj)) {
      rowObj = this.getDataObject(rowObj);
    }
    return rowObj && !!rowObj.__children && ((_rowObj$__children = rowObj.__children) === null || _rowObj$__children === void 0 ? void 0 : _rowObj$__children.length) !== 0;
  }
  /**
   * Add a child to the provided parent. It's optional to add a row object as the "element".
   *
   * @param {object} parent The parent row object.
   * @param {object} [element] The element to add as a child.
   */
  addChild(parent, element) {
    let childElement = element;
    this.hot.runHooks("beforeAddChild", parent, childElement);
    let parentIndex = null;
    if (parent) {
      parentIndex = this.getRowIndex(parent);
    }
    this.hot.runHooks("beforeCreateRow", parentIndex + this.countChildren(parent) + 1, 1);
    let functionalParent = parent;
    if (!parent) {
      functionalParent = this.mockParent();
    }
    if (!functionalParent.__children) {
      functionalParent.__children = [];
    }
    if (!childElement) {
      childElement = this.mockNode();
    }
    functionalParent.__children.push(childElement);
    this.rewriteCache();
    const newRowIndex = this.getRowIndex(childElement);
    this.hot.rowIndexMapper.insertIndexes(newRowIndex, 1);
    this.hot.runHooks("afterCreateRow", newRowIndex, 1);
    this.hot.runHooks("afterAddChild", parent, childElement);
  }
  /**
   * Add a child node to the provided parent at a specified index.
   *
   * @param {object} parent Parent node.
   * @param {number} index Index to insert the child element at.
   * @param {object} [element] Element (node) to insert.
   */
  addChildAtIndex(parent, index, element) {
    let childElement = element;
    let flattenedIndex;
    if (!childElement) {
      childElement = this.mockNode();
    }
    this.hot.runHooks("beforeAddChild", parent, childElement, index);
    if (parent) {
      const parentIndex = this.getRowIndex(parent);
      const finalChildIndex = parentIndex + index + 1;
      this.hot.runHooks("beforeCreateRow", finalChildIndex, 1);
      parent.__children.splice(index, null, childElement);
      this.rewriteCache();
      this.plugin.disableCoreAPIModifiers();
      this.hot.setSourceDataAtCell(this.getRowIndexWithinParent(parent), "__children", parent.__children, "NestedRows.addChildAtIndex");
      this.hot.rowIndexMapper.insertIndexes(finalChildIndex, 1);
      this.plugin.enableCoreAPIModifiers();
      this.hot.runHooks("afterCreateRow", finalChildIndex, 1);
      flattenedIndex = finalChildIndex;
    } else {
      this.plugin.disableCoreAPIModifiers();
      this.hot.alter("insert_row_above", index, 1, "NestedRows.addChildAtIndex");
      this.plugin.enableCoreAPIModifiers();
      flattenedIndex = this.getRowIndex(this.data[index]);
    }
    childElement = this.getDataObject(flattenedIndex);
    this.hot.runHooks("afterAddChild", parent, childElement, index);
  }
  /**
   * Add a sibling element at the specified index.
   *
   * @param {number} index New element sibling's index.
   * @param {('above'|'below')} where Direction in which the sibling is to be created.
   */
  addSibling(index) {
    let where = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "below";
    const translatedIndex = this.translateTrimmedRow(index);
    const parent = this.getRowParent(translatedIndex);
    const indexWithinParent = this.getRowIndexWithinParent(translatedIndex);
    switch (where) {
      case "below":
        this.addChildAtIndex(parent, indexWithinParent + 1, null);
        break;
      case "above":
        this.addChildAtIndex(parent, indexWithinParent, null);
        break;
      default:
        break;
    }
  }
  /**
   * Detach the provided element from its parent and add it right after it.
   *
   * @param {object|Array} elements Row object or an array of selected coordinates.
   * @param {boolean} [forceRender=true] If true (default), it triggers render after finished.
   */
  detachFromParent(elements) {
    let forceRender = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    let element = null;
    const rowObjects = [];
    if (Array.isArray(elements)) {
      rangeEach(elements[0], elements[2], (i) => {
        const translatedIndex = this.translateTrimmedRow(i);
        rowObjects.push(this.getDataObject(translatedIndex));
      });
      rangeEach(0, rowObjects.length - 2, (i) => {
        this.detachFromParent(rowObjects[i], false);
      });
      element = rowObjects[rowObjects.length - 1];
    } else {
      element = elements;
    }
    const childRowIndex = this.getRowIndex(element);
    const childCount = this.countChildren(element);
    const indexWithinParent = this.getRowIndexWithinParent(element);
    const parent = this.getRowParent(element);
    const grandparent = this.getRowParent(parent);
    const grandparentRowIndex = this.getRowIndex(grandparent);
    let movedElementRowIndex = null;
    this.hot.runHooks("beforeDetachChild", parent, element);
    if (indexWithinParent !== null && indexWithinParent !== void 0) {
      const removedRowIndexes = Array.from(new Array(childRowIndex + childCount + 1).keys()).splice(-1 * (childCount + 1));
      this.hot.runHooks("beforeRemoveRow", childRowIndex, childCount + 1, removedRowIndexes, this.plugin.pluginName);
      parent.__children.splice(indexWithinParent, 1);
      this.rewriteCache();
      this.hot.runHooks("afterRemoveRow", childRowIndex, childCount + 1, removedRowIndexes, this.plugin.pluginName);
      if (grandparent) {
        movedElementRowIndex = grandparentRowIndex + this.countChildren(grandparent);
        const lastGrandparentChild = this.getChild(grandparent, this.countChildren(grandparent) - 1);
        const lastGrandparentChildIndex = this.getRowIndex(lastGrandparentChild);
        this.hot.runHooks("beforeCreateRow", lastGrandparentChildIndex + 1, childCount + 1, this.plugin.pluginName);
        grandparent.__children.push(element);
      } else {
        movedElementRowIndex = this.hot.countRows() + 1;
        this.hot.runHooks("beforeCreateRow", movedElementRowIndex - 2, childCount + 1, this.plugin.pluginName);
        this.data.push(element);
      }
    }
    this.rewriteCache();
    this.hot.runHooks("afterCreateRow", movedElementRowIndex - 2, childCount + 1, this.plugin.pluginName);
    this.hot.runHooks("afterDetachChild", parent, element, this.getRowIndex(element));
    if (forceRender) {
      this.hot.render();
    }
  }
  /**
   * Filter the data by the `logicRows` array.
   *
   * @private
   * @param {number} index Index of the first row to remove.
   * @param {number} amount Number of elements to remove.
   * @param {Array} logicRows Array of indexes to remove.
   */
  filterData(index, amount, logicRows) {
    const elementsToRemove = [];
    arrayEach(logicRows, (elem) => {
      elementsToRemove.push(this.getDataObject(elem));
    });
    arrayEach(elementsToRemove, (elem) => {
      const indexWithinParent = this.getRowIndexWithinParent(elem);
      const tempParent = this.getRowParent(elem);
      if (tempParent === null) {
        this.data.splice(indexWithinParent, 1);
      } else {
        tempParent.__children.splice(indexWithinParent, 1);
      }
    });
    this.rewriteCache();
  }
  /**
   * Used to splice the source data. Needed to properly modify the nested structure, which wouldn't work with the
   * default script.
   *
   * @private
   * @param {number} index Physical index of the element at the splice beginning.
   * @param {number} amount Number of elements to be removed.
   * @param {object[]} elements Array of row objects to add.
   */
  spliceData(index, amount, elements) {
    const previousElement = this.getDataObject(index - 1);
    let newRowParent = null;
    let indexWithinParent = index;
    if (previousElement && previousElement.__children && previousElement.__children.length === 0) {
      newRowParent = previousElement;
      indexWithinParent = 0;
    } else if (index < this.countAllRows()) {
      newRowParent = this.getRowParent(index);
      indexWithinParent = this.getRowIndexWithinParent(index);
    }
    if (newRowParent) {
      if (elements) {
        newRowParent.__children.splice(indexWithinParent, amount, ...elements);
      } else {
        newRowParent.__children.splice(indexWithinParent, amount);
      }
    } else if (elements) {
      this.data.splice(indexWithinParent, amount, ...elements);
    } else {
      this.data.splice(indexWithinParent, amount);
    }
    this.rewriteCache();
  }
  /**
   * Update the `__children` key of the upmost parent of the provided row object.
   *
   * @private
   * @param {object} rowElement Row object.
   */
  syncRowWithRawSource(rowElement) {
    let upmostParent = rowElement;
    let tempParent = upmostParent;
    do {
      tempParent = this.getRowParent(tempParent);
      if (tempParent !== null) {
        upmostParent = tempParent;
      }
    } while (tempParent !== null);
    this.plugin.disableCoreAPIModifiers();
    this.hot.setSourceDataAtCell(this.getRowIndexWithinParent(upmostParent), "__children", upmostParent.__children, "NestedRows.syncRowWithRawSource");
    this.plugin.enableCoreAPIModifiers();
  }
  /* eslint-disable jsdoc/require-param */
  /**
   * Move a single row.
   *
   * @param {number} fromIndex Index of the row to be moved.
   * @param {number} toIndex Index of the destination.
   * @param {boolean} moveToCollapsed `true` if moving a row to a collapsed parent.
   * @param {boolean} moveToLastChild `true` if moving a row to be a last child of the new parent.
   */
  /* eslint-enable jsdoc/require-param */
  moveRow(fromIndex, toIndex, moveToCollapsed, moveToLastChild) {
    const moveToLastRow = toIndex === this.hot.countRows();
    const fromParent = this.getRowParent(fromIndex);
    const indexInFromParent = this.getRowIndexWithinParent(fromIndex);
    const elemToMove = fromParent.__children.slice(indexInFromParent, indexInFromParent + 1);
    const movingUp = fromIndex > toIndex;
    let toParent = moveToLastRow ? this.getRowParent(toIndex - 1) : this.getRowParent(toIndex);
    if (toParent === null || toParent === void 0) {
      toParent = this.getRowParent(toIndex - 1);
    }
    if (toParent === null || toParent === void 0) {
      toParent = this.getDataObject(toIndex - 1);
    }
    if (!toParent) {
      toParent = this.getDataObject(toIndex);
      toParent.__children = [];
    } else if (!toParent.__children) {
      toParent.__children = [];
    }
    const indexInTargetParent = moveToLastRow || moveToCollapsed || moveToLastChild ? toParent.__children.length : this.getRowIndexWithinParent(toIndex);
    const sameParent = fromParent === toParent;
    toParent.__children.splice(indexInTargetParent, 0, elemToMove[0]);
    fromParent.__children.splice(indexInFromParent + (movingUp && sameParent ? 1 : 0), 1);
    this.syncRowWithRawSource(fromParent);
    if (!sameParent) {
      this.syncRowWithRawSource(toParent);
    }
  }
  /**
   * Translate the visual row index to the physical index, taking into consideration the state of collapsed rows.
   *
   * @private
   * @param {number} row Row index.
   * @returns {number}
   */
  translateTrimmedRow(row) {
    if (this.plugin.collapsingUI) {
      return this.plugin.collapsingUI.translateTrimmedRow(row);
    }
    return row;
  }
  /**
   * Translate the physical row index to the visual index, taking into consideration the state of collapsed rows.
   *
   * @private
   * @param {number} row Row index.
   * @returns {number}
   */
  untranslateTrimmedRow(row) {
    if (this.plugin.collapsingUI) {
      return this.plugin.collapsingUI.untranslateTrimmedRow(row);
    }
    return row;
  }
};
var dataManager_default = DataManager;

// node_modules/handsontable/plugins/nestedRows/ui/_base.mjs
function _defineProperty54(e, r, t) {
  return (r = _toPropertyKey54(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey54(t) {
  var i = _toPrimitive54(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive54(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var BaseUI4 = class {
  constructor(pluginInstance, hotInstance) {
    _defineProperty54(this, "hot", void 0);
    _defineProperty54(this, "plugin", void 0);
    this.hot = hotInstance;
    this.plugin = pluginInstance;
  }
};
var base_default5 = BaseUI4;

// node_modules/handsontable/plugins/nestedRows/ui/headers.mjs
var HeadersUI = class _HeadersUI extends base_default5 {
  /**
   * CSS classes used in the row headers.
   *
   * @type {object}
   */
  static get CSS_CLASSES() {
    return {
      indicatorContainer: "ht_nestingLevels",
      parent: "ht_nestingParent",
      indicator: "ht_nestingLevel",
      emptyIndicator: "ht_nestingLevel_empty",
      button: "ht_nestingButton",
      expandButton: "ht_nestingExpand",
      collapseButton: "ht_nestingCollapse"
    };
  }
  constructor(nestedRowsPlugin, hotInstance) {
    super(nestedRowsPlugin, hotInstance);
    this.dataManager = this.plugin.dataManager;
    this.collapsingUI = this.plugin.collapsingUI;
    this.rowHeaderWidthCache = null;
  }
  /**
   * Append nesting indicators and buttons to the row headers.
   *
   * @private
   * @param {number} row Row index.
   * @param {HTMLElement} TH TH 3element.
   */
  appendLevelIndicators(row, TH) {
    const rowIndex = this.hot.toPhysicalRow(row);
    const rowLevel = this.dataManager.getRowLevel(rowIndex);
    const rowObject = this.dataManager.getDataObject(rowIndex);
    const innerDiv = TH.getElementsByTagName("DIV")[0];
    const innerSpan = innerDiv.querySelector("span.rowHeader");
    const previousIndicators = innerDiv.querySelectorAll('[class^="ht_nesting"]');
    const ariaEnabled = this.hot.getSettings().ariaTags;
    arrayEach(previousIndicators, (elem) => {
      if (elem) {
        innerDiv.removeChild(elem);
      }
    });
    addClass(TH, _HeadersUI.CSS_CLASSES.indicatorContainer);
    if (rowLevel) {
      const {
        rootDocument
      } = this.hot;
      const initialContent = innerSpan.cloneNode(true);
      innerDiv.innerHTML = "";
      rangeEach(0, rowLevel - 1, () => {
        const levelIndicator = rootDocument.createElement("SPAN");
        addClass(levelIndicator, _HeadersUI.CSS_CLASSES.emptyIndicator);
        innerDiv.appendChild(levelIndicator);
      });
      innerDiv.appendChild(initialContent);
    }
    if (this.dataManager.hasChildren(rowObject)) {
      const buttonsContainer = this.hot.rootDocument.createElement("DIV");
      if (ariaEnabled) {
        setAttribute(buttonsContainer, [A11Y_HIDDEN()]);
      }
      addClass(TH, _HeadersUI.CSS_CLASSES.parent);
      if (this.collapsingUI.areChildrenCollapsed(rowIndex)) {
        addClass(buttonsContainer, `${_HeadersUI.CSS_CLASSES.button} ${_HeadersUI.CSS_CLASSES.expandButton}`);
        if (ariaEnabled) {
          setAttribute(TH, [A11Y_EXPANDED(false)]);
        }
      } else {
        addClass(buttonsContainer, `${_HeadersUI.CSS_CLASSES.button} ${_HeadersUI.CSS_CLASSES.collapseButton}`);
        if (ariaEnabled) {
          setAttribute(TH, [A11Y_EXPANDED(true)]);
        }
      }
      innerDiv.appendChild(buttonsContainer);
    }
  }
  /**
   * Update the row header width according to number of levels in the dataset.
   *
   * @private
   * @param {number} deepestLevel Cached deepest level of nesting.
   */
  updateRowHeaderWidth(deepestLevel) {
    let deepestLevelIndex = deepestLevel;
    if (!deepestLevelIndex) {
      deepestLevelIndex = this.dataManager.cache.levelCount;
    }
    const stylesHandler = this.hot.view.getStylesHandler();
    let completeVerticalPadding = 11;
    if (!stylesHandler.isClassicTheme()) {
      const verticalPadding = stylesHandler.getCSSVariableValue("cell-horizontal-padding");
      completeVerticalPadding = verticalPadding * 2;
    }
    this.rowHeaderWidthCache = Math.max(50, completeVerticalPadding + 10 * deepestLevelIndex + 25);
    this.hot.render();
  }
};
var headers_default = HeadersUI;

// node_modules/handsontable/plugins/nestedRows/ui/collapsing.mjs
var CollapsingUI = class extends base_default5 {
  constructor(nestedRowsPlugin, hotInstance) {
    var _this;
    super(nestedRowsPlugin, hotInstance);
    _this = this;
    this.dataManager = this.plugin.dataManager;
    this.collapsedRows = [];
    this.collapsedRowsStash = {
      stash: function() {
        let forceRender = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
        _this.lastCollapsedRows = _this.collapsedRows.slice(0);
        _this.expandMultipleChildren(_this.lastCollapsedRows, forceRender);
      },
      shiftStash: function(baseIndex, targetIndex) {
        let delta = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
        if (targetIndex === null || targetIndex === void 0) {
          targetIndex = Infinity;
        }
        arrayEach(_this.lastCollapsedRows, (elem, i) => {
          if (elem >= baseIndex && elem < targetIndex) {
            _this.lastCollapsedRows[i] = elem + delta;
          }
        });
      },
      applyStash: function() {
        let forceRender = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
        _this.collapseMultipleChildren(_this.lastCollapsedRows, forceRender);
        _this.lastCollapsedRows = void 0;
      },
      trimStash: (realElementIndex, amount) => {
        rangeEach(realElementIndex, realElementIndex + amount - 1, (i) => {
          const indexOfElement = this.lastCollapsedRows.indexOf(i);
          if (indexOfElement > -1) {
            this.lastCollapsedRows.splice(indexOfElement, 1);
          }
        });
      }
    };
  }
  /**
   * Collapse the children of the row passed as an argument.
   *
   * @param {number|object} row The parent row.
   * @param {boolean} [forceRender=true] Whether to render the table after the function ends.
   * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
   * @returns {Array}
   */
  collapseChildren(row) {
    let forceRender = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    let doTrimming = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    const rowsToCollapse = [];
    let rowObject = null;
    let rowIndex = null;
    let rowsToTrim = null;
    if (isNaN(row)) {
      rowObject = row;
      rowIndex = this.dataManager.getRowIndex(rowObject);
    } else {
      rowObject = this.dataManager.getDataObject(row);
      rowIndex = row;
    }
    if (this.dataManager.hasChildren(rowObject)) {
      arrayEach(rowObject.__children, (elem) => {
        rowsToCollapse.push(this.dataManager.getRowIndex(elem));
      });
    }
    rowsToTrim = this.collapseRows(rowsToCollapse, true, false);
    if (doTrimming) {
      this.trimRows(rowsToTrim);
    }
    if (forceRender) {
      this.renderAndAdjust();
    }
    if (this.collapsedRows.indexOf(rowIndex) === -1) {
      this.collapsedRows.push(rowIndex);
    }
    return rowsToTrim;
  }
  /**
   * Collapse multiple children.
   *
   * @param {Array} rows Rows to collapse (including their children).
   * @param {boolean} [forceRender=true] `true` if the table should be rendered after finishing the function.
   * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
   */
  collapseMultipleChildren(rows) {
    let forceRender = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    let doTrimming = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    const rowsToTrim = [];
    arrayEach(rows, (elem) => {
      rowsToTrim.push(...this.collapseChildren(elem, false, false));
    });
    if (doTrimming) {
      this.trimRows(rowsToTrim);
    }
    if (forceRender) {
      this.renderAndAdjust();
    }
  }
  /**
   * Collapse a single row.
   *
   * @param {number} rowIndex Index of the row to collapse.
   * @param {boolean} [recursive=true] `true` if it should collapse the row's children.
   */
  collapseRow(rowIndex) {
    let recursive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    this.collapseRows([rowIndex], recursive);
  }
  /**
   * Collapse multiple rows.
   *
   * @param {Array} rowIndexes Array of row indexes to collapse.
   * @param {boolean} [recursive=true] `true` if it should collapse the rows' children.
   * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
   * @returns {Array} Rows prepared for trimming (or trimmed, if doTrimming == true).
   */
  collapseRows(rowIndexes) {
    let recursive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    let doTrimming = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    const rowsToTrim = [];
    arrayEach(rowIndexes, (elem) => {
      rowsToTrim.push(elem);
      if (recursive) {
        this.collapseChildRows(elem, rowsToTrim);
      }
    });
    if (doTrimming) {
      this.trimRows(rowsToTrim);
    }
    return rowsToTrim;
  }
  /**
   * Collapse child rows of the row at the provided index.
   *
   * @param {number} parentIndex Index of the parent node.
   * @param {Array} [rowsToTrim=[]] Array of rows to trim. Defaults to an empty array.
   * @param {boolean} [recursive] `true` if the collapsing process should be recursive.
   * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
   */
  collapseChildRows(parentIndex) {
    let rowsToTrim = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    let recursive = arguments.length > 2 ? arguments[2] : void 0;
    let doTrimming = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    if (this.dataManager.hasChildren(parentIndex)) {
      const parentObject = this.dataManager.getDataObject(parentIndex);
      arrayEach(parentObject.__children, (elem) => {
        const elemIndex = this.dataManager.getRowIndex(elem);
        rowsToTrim.push(elemIndex);
        this.collapseChildRows(elemIndex, rowsToTrim);
      });
    }
    if (doTrimming) {
      this.trimRows(rowsToTrim);
    }
  }
  /**
   * Expand a single row.
   *
   * @param {number} rowIndex Index of the row to expand.
   * @param {boolean} [recursive=true] `true` if it should expand the row's children recursively.
   */
  expandRow(rowIndex) {
    let recursive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    this.expandRows([rowIndex], recursive);
  }
  /**
   * Expand multiple rows.
   *
   * @param {Array} rowIndexes Array of indexes of the rows to expand.
   * @param {boolean} [recursive=true] `true` if it should expand the rows' children recursively.
   * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
   * @returns {Array} Array of row indexes to be untrimmed.
   */
  expandRows(rowIndexes) {
    let recursive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    let doTrimming = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    const rowsToUntrim = [];
    arrayEach(rowIndexes, (elem) => {
      rowsToUntrim.push(elem);
      if (recursive) {
        this.expandChildRows(elem, rowsToUntrim);
      }
    });
    if (doTrimming) {
      this.untrimRows(rowsToUntrim);
    }
    return rowsToUntrim;
  }
  /**
   * Expand child rows of the provided index.
   *
   * @param {number} parentIndex Index of the parent row.
   * @param {Array} [rowsToUntrim=[]] Array of the rows to be untrimmed.
   * @param {boolean} [recursive] `true` if it should expand the rows' children recursively.
   * @param {boolean} [doTrimming=false] I determine whether collapsing should envolve trimming rows.
   */
  expandChildRows(parentIndex) {
    let rowsToUntrim = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    let recursive = arguments.length > 2 ? arguments[2] : void 0;
    let doTrimming = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    if (this.dataManager.hasChildren(parentIndex)) {
      const parentObject = this.dataManager.getDataObject(parentIndex);
      arrayEach(parentObject.__children, (elem) => {
        if (!this.isAnyParentCollapsed(elem)) {
          const elemIndex = this.dataManager.getRowIndex(elem);
          rowsToUntrim.push(elemIndex);
          this.expandChildRows(elemIndex, rowsToUntrim);
        }
      });
    }
    if (doTrimming) {
      this.untrimRows(rowsToUntrim);
    }
  }
  /**
   * Expand the children of the row passed as an argument.
   *
   * @param {number|object} row Parent row.
   * @param {boolean} [forceRender=true] Whether to render the table after the function ends.
   * @param {boolean} [doTrimming=true] If set to `true`, the trimming will be applied when the function finishes.
   * @returns {number[]}
   */
  expandChildren(row) {
    let forceRender = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    let doTrimming = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    const rowsToExpand = [];
    let rowObject = null;
    let rowIndex = null;
    let rowsToUntrim = null;
    if (isNaN(row)) {
      rowObject = row;
      rowIndex = this.dataManager.getRowIndex(row);
    } else {
      rowObject = this.dataManager.getDataObject(row);
      rowIndex = row;
    }
    this.collapsedRows.splice(this.collapsedRows.indexOf(rowIndex), 1);
    if (this.dataManager.hasChildren(rowObject)) {
      arrayEach(rowObject.__children, (elem) => {
        const childIndex = this.dataManager.getRowIndex(elem);
        rowsToExpand.push(childIndex);
      });
    }
    rowsToUntrim = this.expandRows(rowsToExpand, true, false);
    if (doTrimming) {
      this.untrimRows(rowsToUntrim);
    }
    if (forceRender) {
      this.renderAndAdjust();
    }
    return rowsToUntrim;
  }
  /**
   * Expand multiple rows' children.
   *
   * @param {Array} rows Array of rows which children are about to be expanded.
   * @param {boolean} [forceRender=true] `true` if the table should render after finishing the function.
   * @param {boolean} [doTrimming=true] `true` if the rows should be untrimmed after finishing the function.
   */
  expandMultipleChildren(rows) {
    let forceRender = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    let doTrimming = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    const rowsToUntrim = [];
    arrayEach(rows, (elem) => {
      rowsToUntrim.push(...this.expandChildren(elem, false, false));
    });
    if (doTrimming) {
      this.untrimRows(rowsToUntrim);
    }
    if (forceRender) {
      this.renderAndAdjust();
    }
  }
  /**
   * Collapse all collapsable rows.
   */
  collapseAll() {
    const data = this.dataManager.getData();
    const parentsToCollapse = [];
    arrayEach(data, (elem) => {
      if (this.dataManager.hasChildren(elem)) {
        parentsToCollapse.push(elem);
      }
    });
    this.collapseMultipleChildren(parentsToCollapse);
    this.renderAndAdjust();
  }
  /**
   * Expand all collapsable rows.
   */
  expandAll() {
    const data = this.dataManager.getData();
    const parentsToExpand = [];
    arrayEach(data, (elem) => {
      if (this.dataManager.hasChildren(elem)) {
        parentsToExpand.push(elem);
      }
    });
    this.expandMultipleChildren(parentsToExpand);
    this.renderAndAdjust();
  }
  /**
   * Trim rows.
   *
   * @param {Array} rows Physical row indexes.
   */
  trimRows(rows) {
    this.hot.batchExecution(() => {
      arrayEach(rows, (physicalRow) => {
        this.plugin.collapsedRowsMap.setValueAtIndex(physicalRow, true);
      });
    }, true);
  }
  /**
   * Untrim rows.
   *
   * @param {Array} rows Physical row indexes.
   */
  untrimRows(rows) {
    this.hot.batchExecution(() => {
      arrayEach(rows, (physicalRow) => {
        this.plugin.collapsedRowsMap.setValueAtIndex(physicalRow, false);
      });
    }, true);
  }
  /**
   * Check if all child rows are collapsed.
   *
   * @private
   * @param {number|object|null} row The parent row. `null` for the top level.
   * @returns {boolean}
   */
  areChildrenCollapsed(row) {
    let rowObj = isNaN(row) ? row : this.dataManager.getDataObject(row);
    let allCollapsed = true;
    if (rowObj === null) {
      rowObj = {
        __children: this.dataManager.data
      };
    }
    if (this.dataManager.hasChildren(rowObj)) {
      arrayEach(rowObj.__children, (elem) => {
        const rowIndex = this.dataManager.getRowIndex(elem);
        if (!this.plugin.collapsedRowsMap.getValueAtIndex(rowIndex)) {
          allCollapsed = false;
          return false;
        }
      });
    }
    return allCollapsed;
  }
  /**
   * Check if any of the row object parents are collapsed.
   *
   * @private
   * @param {object} rowObj Row object.
   * @returns {boolean}
   */
  isAnyParentCollapsed(rowObj) {
    let parent = rowObj;
    while (parent !== null) {
      parent = this.dataManager.getRowParent(parent);
      const parentIndex = this.dataManager.getRowIndex(parent);
      if (this.collapsedRows.indexOf(parentIndex) > -1) {
        return true;
      }
    }
    return false;
  }
  /**
   * Toggle collapsed state. Callback for the `beforeOnCellMousedown` hook.
   *
   * @private
   * @param {MouseEvent} event `mousedown` event.
   * @param {object} coords Coordinates of the clicked cell/header.
   */
  toggleState(event, coords) {
    if (coords.col >= 0) {
      return;
    }
    const row = this.translateTrimmedRow(coords.row);
    if (hasClass(event.target, headers_default.CSS_CLASSES.button)) {
      if (this.areChildrenCollapsed(row)) {
        this.expandChildren(row);
      } else {
        this.collapseChildren(row);
      }
      stopImmediatePropagation(event);
    }
  }
  /**
   * Translate visual row after trimming to physical base row index.
   *
   * @private
   * @param {number} row Row index.
   * @returns {number} Base row index.
   */
  translateTrimmedRow(row) {
    return this.hot.toPhysicalRow(row);
  }
  /**
   * Translate physical row after trimming to visual base row index.
   *
   * @private
   * @param {number} row Row index.
   * @returns {number} Base row index.
   */
  untranslateTrimmedRow(row) {
    return this.hot.toVisualRow(row);
  }
  /**
   * Helper function to render the table and call the `adjustElementsSize` method.
   *
   * @private
   */
  renderAndAdjust() {
    this.hot.render();
    this.hot.view.adjustElementsSize();
  }
};
var collapsing_default = CollapsingUI;

// node_modules/handsontable/plugins/nestedRows/ui/contextMenu.mjs
function _classPrivateFieldInitSpec37(e, t, a) {
  _checkPrivateRedeclaration52(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration52(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty55(e, r, t) {
  return (r = _toPropertyKey55(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey55(t) {
  var i = _toPrimitive55(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive55(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _classPrivateFieldGet37(s, a) {
  return s.get(_assertClassBrand52(s, a));
}
function _assertClassBrand52(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _menuEntries = /* @__PURE__ */ new WeakMap();
var ContextMenuUI = class extends base_default5 {
  constructor() {
    super(...arguments);
    _defineProperty55(this, "dataManager", this.plugin.dataManager);
    _classPrivateFieldInitSpec37(this, _menuEntries, {
      row_above: (key, selection) => {
        const lastSelection = selection[selection.length - 1];
        this.dataManager.addSibling(lastSelection.start.row, "above");
      },
      row_below: (key, selection) => {
        const lastSelection = selection[selection.length - 1];
        this.dataManager.addSibling(lastSelection.start.row, "below");
      }
    });
  }
  /**
   * Append options to the context menu. (Propagated from the `afterContextMenuDefaultOptions` hook callback)
   * f.
   *
   * @private
   * @param {object} defaultOptions Default context menu options.
   * @returns {*}
   */
  appendOptions(defaultOptions2) {
    const newEntries = [{
      key: "add_child",
      name() {
        return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_NESTED_ROWS_INSERT_CHILD);
      },
      callback: () => {
        const translatedRowIndex = this.dataManager.translateTrimmedRow(this.hot.getSelectedLast()[0]);
        const parent = this.dataManager.getDataObject(translatedRowIndex);
        this.dataManager.addChild(parent);
      },
      disabled: () => {
        const selected = this.hot.getSelectedLast();
        return !selected || selected[0] < 0 || this.hot.selection.isSelectedByColumnHeader() || this.hot.countRows() >= this.hot.getSettings().maxRows;
      }
    }, {
      key: "detach_from_parent",
      name() {
        return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_NESTED_ROWS_DETACH_CHILD);
      },
      callback: () => {
        this.dataManager.detachFromParent(this.hot.getSelectedLast());
      },
      disabled: () => {
        const selected = this.hot.getSelectedLast();
        const translatedRowIndex = this.dataManager.translateTrimmedRow(selected[0]);
        const parent = this.dataManager.getRowParent(translatedRowIndex);
        return !parent || !selected || selected[0] < 0 || this.hot.selection.isSelectedByColumnHeader() || this.hot.countRows() >= this.hot.getSettings().maxRows;
      }
    }, {
      name: "---------"
    }];
    rangeEach(0, defaultOptions2.items.length - 1, (i) => {
      if (i === 0) {
        arrayEach(newEntries, (val, j) => {
          defaultOptions2.items.splice(i + j, 0, val);
        });
        return false;
      }
    });
    return this.modifyRowInsertingOptions(defaultOptions2);
  }
  /**
   * Modify how the row inserting options work.
   *
   * @private
   * @param {object} defaultOptions Default context menu items.
   * @returns {*}
   */
  modifyRowInsertingOptions(defaultOptions2) {
    rangeEach(0, defaultOptions2.items.length - 1, (i) => {
      const option = _classPrivateFieldGet37(_menuEntries, this)[defaultOptions2.items[i].key];
      if (option !== null && option !== void 0) {
        defaultOptions2.items[i].callback = option;
      }
    });
    return defaultOptions2;
  }
};
var contextMenu_default = ContextMenuUI;

// node_modules/handsontable/plugins/nestedRows/utils/rowMoveController.mjs
function _defineProperty56(e, r, t) {
  return (r = _toPropertyKey56(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey56(t) {
  var i = _toPrimitive56(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive56(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var RowMoveController = class {
  constructor(plugin) {
    _defineProperty56(this, "plugin", void 0);
    _defineProperty56(this, "hot", void 0);
    _defineProperty56(this, "dataManager", void 0);
    _defineProperty56(this, "collapsingUI", void 0);
    this.plugin = plugin;
    this.hot = plugin.hot;
    this.dataManager = plugin.dataManager;
    this.collapsingUI = plugin.collapsingUI;
  }
  /**
   * `beforeRowMove` hook callback.
   *
   * @param {Array} rows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements
   *   will be placed after the moving action. To check the visualization of the final index, please take a look at
   *   [documentation](@/guides/rows/row-moving/row-moving.md).
   * @param {undefined|number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we
   *   are going to drop the moved elements. To check visualization of drop index please take a look at
   *   [documentation](@/guides/rows/row-moving/row-moving.md).
   * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.
   * @fires Hooks#afterRowMove
   * @returns {boolean}
   */
  onBeforeRowMove(rows, finalIndex, dropIndex, movePossible) {
    const improperUsage = this.displayAPICompatibilityWarning({
      rows,
      finalIndex,
      dropIndex,
      movePossible
    });
    if (improperUsage) {
      return false;
    }
    this.movedToCollapsed = false;
    const dropToLastRow = dropIndex === this.hot.countRows();
    const physicalDropIndex = dropToLastRow ? this.hot.countSourceRows() : this.dataManager.translateTrimmedRow(dropIndex);
    let allowMove = true;
    const physicalStartIndexes = rows.map((rowIndex) => {
      if (!allowMove) {
        return false;
      }
      const physicalRowIndex = this.dataManager.translateTrimmedRow(rowIndex);
      allowMove = this.shouldAllowMoving(physicalRowIndex, physicalDropIndex);
      return physicalRowIndex;
    });
    const willDataChange = physicalStartIndexes.indexOf(physicalDropIndex) === -1;
    if (!allowMove || !willDataChange) {
      return false;
    }
    const baseParent = this.getBaseParent(physicalStartIndexes);
    const targetParent = this.getTargetParent(dropToLastRow, physicalDropIndex);
    const sameParent = baseParent === targetParent;
    this.movedToCollapsed = this.collapsingUI.areChildrenCollapsed(targetParent);
    this.collapsingUI.collapsedRowsStash.stash();
    this.shiftCollapsibleParentsLocations(physicalStartIndexes, physicalDropIndex, sameParent);
    this.moveRows(physicalStartIndexes, physicalDropIndex, targetParent);
    this.dataManager.rewriteCache();
    this.moveCellsMeta(physicalStartIndexes, physicalDropIndex);
    this.collapsingUI.collapsedRowsStash.applyStash(false);
    this.hot.runHooks("afterRowMove", rows, finalIndex, dropIndex, movePossible, movePossible && this.isRowOrderChanged(rows, finalIndex));
    this.hot.render();
    this.selectCells(rows, dropIndex);
    return false;
  }
  /**
   * Display a `dragRows`/`moveRows` method compatibility warning if needed.
   *
   * @param {object} beforeMoveRowHookArgs A set of arguments from the `beforeMoveRow` hook.
   * @returns {boolean} `true` if is a result of an improper usage of the moving API.
   */
  displayAPICompatibilityWarning(beforeMoveRowHookArgs) {
    const {
      rows,
      finalIndex,
      dropIndex,
      movePossible
    } = beforeMoveRowHookArgs;
    let shouldTerminate = false;
    if (isUndefined(dropIndex)) {
      warn(toSingleLine`Since version 8.0.0 of the Handsontable the 'moveRows' method isn't used for moving rows\x20
      when the NestedRows plugin is enabled. Please use the 'dragRows' method instead.`);
      this.hot.runHooks("afterRowMove", rows, finalIndex, dropIndex, movePossible, false);
      shouldTerminate = true;
    }
    return shouldTerminate;
  }
  /**
   * Check if the moving action should be allowed.
   *
   * @param {number} physicalRowIndex Physical start row index.
   * @param {number} physicalDropIndex Physical drop index.
   * @returns {boolean} `true` if it should continue with the moving action.
   */
  shouldAllowMoving(physicalRowIndex, physicalDropIndex) {
    return !(this.dataManager.isParent(physicalRowIndex) || this.dataManager.isRowHighestLevel(physicalRowIndex) || physicalRowIndex === physicalDropIndex || physicalDropIndex === 0);
  }
  /**
   * Get the base row parent.
   *
   * @param {number} physicalStartIndexes Physical start row index.
   * @returns {object|null} The base row parent.
   */
  getBaseParent(physicalStartIndexes) {
    return this.dataManager.getRowParent(physicalStartIndexes[0]);
  }
  /**
   * Get the target row parent.
   *
   * @param {boolean} dropToLastRow `true` if the row is moved to the last row of the table.
   * @param {number} physicalDropIndex Physical drop row index.
   * @returns {object|null} The target row parent.
   */
  getTargetParent(dropToLastRow, physicalDropIndex) {
    let targetParent = this.dataManager.getRowParent(dropToLastRow ? physicalDropIndex - 1 : physicalDropIndex);
    if (targetParent === null || targetParent === void 0) {
      targetParent = this.dataManager.getRowParent(physicalDropIndex - 1);
    }
    return targetParent;
  }
  /**
   * Shift the cached collapsible rows position according to the move action.
   *
   * @param {number[]} physicalStartIndexes Physical start row indexes.
   * @param {number} physicalDropIndex Physical drop index.
   * @param {boolean} sameParent `true` if the row's being moved between siblings of the same parent.
   */
  shiftCollapsibleParentsLocations(physicalStartIndexes, physicalDropIndex, sameParent) {
    if (!sameParent) {
      if (Math.max(...physicalStartIndexes) <= physicalDropIndex) {
        this.collapsingUI.collapsedRowsStash.shiftStash(physicalStartIndexes[0], physicalDropIndex, -1 * physicalStartIndexes.length);
      } else {
        this.collapsingUI.collapsedRowsStash.shiftStash(physicalDropIndex, physicalStartIndexes[0], physicalStartIndexes.length);
      }
    }
  }
  /**
   * Move the rows at the provided coordinates.
   *
   * @param {number[]} physicalStartIndexes Physical indexes of the rows about to be moved.
   * @param {number} physicalDropIndex Physical drop index.
   * @param {object} targetParent Parent of the destination row.
   */
  moveRows(physicalStartIndexes, physicalDropIndex, targetParent) {
    const moveToLastChild = physicalDropIndex === this.dataManager.getRowIndex(targetParent) + this.dataManager.countChildren(targetParent) + 1;
    this.hot.batchRender(() => {
      physicalStartIndexes.forEach((physicalStartIndex) => {
        this.dataManager.moveRow(physicalStartIndex, physicalDropIndex, this.movedToCollapsed, moveToLastChild);
      });
    });
  }
  /**
   * Move the cell meta for multiple rows.
   *
   * @param {number[]} baseIndexes Array of indexes for the rows being moved.
   * @param {number} targetIndex Index of the destination of the move.
   */
  moveCellsMeta(baseIndexes, targetIndex) {
    const rowsOfMeta = [];
    const movingDown = Math.max(...baseIndexes) < targetIndex;
    baseIndexes.forEach((baseIndex) => {
      rowsOfMeta.push(this.hot.getCellMetaAtRow(baseIndex));
    });
    this.hot.spliceCellsMeta(baseIndexes[0], baseIndexes.length);
    this.hot.spliceCellsMeta(targetIndex - (movingDown ? rowsOfMeta.length : 0), 0, ...rowsOfMeta);
  }
  /**
   * Select cells after the move.
   *
   * @param {Array} rows Array of visual row indexes to be moved.
   * @param {undefined|number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we
   *   are going to drop the moved elements. To check visualization of drop index please take a look at
   *   [documentation](@/guides/rows/row-moving/row-moving.md).
   */
  selectCells(rows, dropIndex) {
    const rowsLen = rows.length;
    let startRow = 0;
    let endRow = 0;
    if (this.movedToCollapsed) {
      let physicalDropIndex = null;
      if (rows[rowsLen - 1] < dropIndex) {
        physicalDropIndex = this.dataManager.translateTrimmedRow(dropIndex - rowsLen);
      } else {
        physicalDropIndex = this.dataManager.translateTrimmedRow(dropIndex);
      }
      const parentObject = this.dataManager.getRowParent(physicalDropIndex === null ? this.hot.countSourceRows() - 1 : physicalDropIndex - 1);
      const parentIndex = this.dataManager.getRowIndex(parentObject);
      startRow = this.dataManager.untranslateTrimmedRow(parentIndex);
      endRow = startRow;
    } else if (rows[rowsLen - 1] < dropIndex) {
      endRow = dropIndex - 1;
      startRow = endRow - rowsLen + 1;
    } else {
      startRow = dropIndex;
      endRow = startRow + rowsLen - 1;
    }
    this.hot.selectCells([[startRow, 0, endRow, this.hot.countCols() - 1]], false);
  }
  // TODO: Reimplementation of function which is inside the `ManualRowMove` plugin.
  /**
   * Indicates if order of rows was changed.
   *
   * @param {Array} movedRows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements
   *   will be placed after the moving action. To check the visualization of the final index, please take a look at
   *   [documentation](@/guides/rows/row-moving/row-moving.md).
   * @returns {boolean}
   */
  isRowOrderChanged(movedRows, finalIndex) {
    return movedRows.some((row, nrOfMovedElement) => row - nrOfMovedElement !== finalIndex);
  }
};

// node_modules/handsontable/plugins/nestedRows/nestedRows.mjs
function _classPrivateMethodInitSpec41(e, a) {
  _checkPrivateRedeclaration53(e, a), a.add(e);
}
function _classPrivateFieldInitSpec38(e, t, a) {
  _checkPrivateRedeclaration53(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration53(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty57(e, r, t) {
  return (r = _toPropertyKey57(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey57(t) {
  var i = _toPrimitive57(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive57(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _classPrivateFieldGet38(s, a) {
  return s.get(_assertClassBrand53(s, a));
}
function _classPrivateFieldSet35(s, a, r) {
  return s.set(_assertClassBrand53(s, a), r), r;
}
function _assertClassBrand53(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var PLUGIN_KEY29 = "nestedRows";
var PLUGIN_PRIORITY28 = 300;
var SHORTCUTS_GROUP14 = PLUGIN_KEY29;
var WRONG_DATA_TYPE_ERROR = "The Nested Rows plugin requires an Array of Objects as a dataset to be provided. The plugin has been disabled.";
var _skipRender = /* @__PURE__ */ new WeakMap();
var _skipCoreAPIModifiers = /* @__PURE__ */ new WeakMap();
var _NestedRows_brand = /* @__PURE__ */ new WeakSet();
var NestedRows = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec41(this, _NestedRows_brand);
    _defineProperty57(this, "dataManager", null);
    _defineProperty57(this, "headersUI", null);
    _defineProperty57(this, "collapsedRowsMap", null);
    _classPrivateFieldInitSpec38(this, _skipRender, false);
    _classPrivateFieldInitSpec38(this, _skipCoreAPIModifiers, false);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY29;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY28;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link NestedRows#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[PLUGIN_KEY29];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _this = this;
    if (this.enabled) {
      return;
    }
    this.collapsedRowsMap = this.hot.rowIndexMapper.registerMap("nestedRows", new TrimmingMap());
    this.dataManager = new dataManager_default(this, this.hot);
    this.collapsingUI = new collapsing_default(this, this.hot);
    this.headersUI = new headers_default(this, this.hot);
    this.contextMenuUI = new contextMenu_default(this, this.hot);
    this.rowMoveController = new RowMoveController(this);
    this.addHook("afterInit", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _assertClassBrand53(_NestedRows_brand, _this, _onAfterInit4).call(_this, ...args);
    });
    this.addHook("beforeViewRender", function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _assertClassBrand53(_NestedRows_brand, _this, _onBeforeViewRender).call(_this, ...args);
    });
    this.addHook("modifyRowData", function() {
      return _this.onModifyRowData(...arguments);
    });
    this.addHook("modifySourceLength", function() {
      return _this.onModifySourceLength(...arguments);
    });
    this.addHook("beforeDataSplice", function() {
      return _this.onBeforeDataSplice(...arguments);
    });
    this.addHook("filterData", function() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return _assertClassBrand53(_NestedRows_brand, _this, _onFilterData).call(_this, ...args);
    });
    this.addHook("afterContextMenuDefaultOptions", function() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return _assertClassBrand53(_NestedRows_brand, _this, _onAfterContextMenuDefaultOptions5).call(_this, ...args);
    });
    this.addHook("afterGetRowHeader", function() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }
      return _assertClassBrand53(_NestedRows_brand, _this, _onAfterGetRowHeader2).call(_this, ...args);
    });
    this.addHook("beforeOnCellMouseDown", function() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      return _assertClassBrand53(_NestedRows_brand, _this, _onBeforeOnCellMouseDown7).call(_this, ...args);
    });
    this.addHook("beforeRemoveRow", function() {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }
      return _assertClassBrand53(_NestedRows_brand, _this, _onBeforeRemoveRow2).call(_this, ...args);
    });
    this.addHook("afterRemoveRow", function() {
      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }
      return _assertClassBrand53(_NestedRows_brand, _this, _onAfterRemoveRow3).call(_this, ...args);
    });
    this.addHook("beforeAddChild", function() {
      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        args[_key9] = arguments[_key9];
      }
      return _assertClassBrand53(_NestedRows_brand, _this, _onBeforeAddChild).call(_this, ...args);
    });
    this.addHook("afterAddChild", function() {
      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        args[_key10] = arguments[_key10];
      }
      return _assertClassBrand53(_NestedRows_brand, _this, _onAfterAddChild).call(_this, ...args);
    });
    this.addHook("beforeDetachChild", function() {
      for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
        args[_key11] = arguments[_key11];
      }
      return _assertClassBrand53(_NestedRows_brand, _this, _onBeforeDetachChild).call(_this, ...args);
    });
    this.addHook("afterDetachChild", function() {
      for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
        args[_key12] = arguments[_key12];
      }
      return _assertClassBrand53(_NestedRows_brand, _this, _onAfterDetachChild2).call(_this, ...args);
    });
    this.addHook("modifyRowHeaderWidth", function() {
      for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
        args[_key13] = arguments[_key13];
      }
      return _assertClassBrand53(_NestedRows_brand, _this, _onModifyRowHeaderWidth).call(_this, ...args);
    });
    this.addHook("afterCreateRow", function() {
      for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
        args[_key14] = arguments[_key14];
      }
      return _assertClassBrand53(_NestedRows_brand, _this, _onAfterCreateRow3).call(_this, ...args);
    });
    this.addHook("beforeRowMove", function() {
      for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
        args[_key15] = arguments[_key15];
      }
      return _assertClassBrand53(_NestedRows_brand, _this, _onBeforeRowMove).call(_this, ...args);
    });
    this.addHook("beforeLoadData", (data) => _assertClassBrand53(_NestedRows_brand, this, _onBeforeLoadData2).call(this, data));
    this.addHook("beforeUpdateData", (data) => _assertClassBrand53(_NestedRows_brand, this, _onBeforeLoadData2).call(this, data));
    this.registerShortcuts();
    super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.hot.rowIndexMapper.unregisterMap("nestedRows");
    this.unregisterShortcuts();
    super.disablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`nestedRows`](@/api/options.md#nestedrows)
   */
  updatePlugin() {
    this.disablePlugin();
    const currentSourceData = this.dataManager.getData();
    this.enablePlugin();
    this.dataManager.updateWithData(currentSourceData);
    super.updatePlugin();
  }
  /**
   * Register shortcuts responsible for toggling collapsible columns.
   *
   * @private
   */
  registerShortcuts() {
    this.hot.getShortcutManager().getContext("grid").addShortcut({
      keys: [["Enter"]],
      callback: () => {
        const {
          highlight
        } = this.hot.getSelectedRangeLast();
        const row = this.collapsingUI.translateTrimmedRow(highlight.row);
        if (this.collapsingUI.areChildrenCollapsed(row)) {
          this.collapsingUI.expandChildren(row);
        } else {
          this.collapsingUI.collapseChildren(row);
        }
        return false;
      },
      runOnlyIf: () => {
        var _this$hot$getSelected, _this$hot$getSelected2;
        const highlight = (_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight;
        return highlight && ((_this$hot$getSelected2 = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected2 === void 0 ? void 0 : _this$hot$getSelected2.isSingle()) && this.hot.selection.isCellVisible(highlight) && highlight.col === -1 && highlight.row >= 0;
      },
      group: SHORTCUTS_GROUP14,
      relativeToGroup: EDITOR_EDIT_GROUP,
      position: "before"
    });
  }
  /**
   * Unregister shortcuts responsible for toggling collapsible columns.
   *
   * @private
   */
  unregisterShortcuts() {
    this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(SHORTCUTS_GROUP14);
  }
  /**
   * Enable the modify hook skipping flag - allows retrieving the data from Handsontable without this plugin's
   * modifications.
   *
   * @private
   */
  disableCoreAPIModifiers() {
    _classPrivateFieldSet35(_skipCoreAPIModifiers, this, true);
  }
  /**
   * Disable the modify hook skipping flag.
   *
   * @private
   */
  enableCoreAPIModifiers() {
    _classPrivateFieldSet35(_skipCoreAPIModifiers, this, false);
  }
  /**
   * `beforeOnCellMousedown` hook callback.
   *
   * @param {MouseEvent} event Mousedown event.
   * @param {object} coords Cell coords.
   * @param {HTMLElement} TD Clicked cell.
   */
  /**
   * The modifyRowData hook callback.
   *
   * @private
   * @param {number} row Visual row index.
   * @returns {boolean}
   */
  onModifyRowData(row) {
    if (_classPrivateFieldGet38(_skipCoreAPIModifiers, this)) {
      return;
    }
    return this.dataManager.getDataObject(row);
  }
  /**
   * Modify the source data length to match the length of the nested structure.
   *
   * @private
   * @returns {number}
   */
  onModifySourceLength() {
    if (_classPrivateFieldGet38(_skipCoreAPIModifiers, this)) {
      return;
    }
    return this.dataManager.countAllRows();
  }
  /**
   * @private
   * @param {number} index The index where the data was spliced.
   * @param {number} amount An amount of items to remove.
   * @param {object} element An element to add.
   * @returns {boolean}
   */
  onBeforeDataSplice(index, amount, element) {
    if (_classPrivateFieldGet38(_skipCoreAPIModifiers, this) || this.dataManager.isRowHighestLevel(index)) {
      return true;
    }
    this.dataManager.spliceData(index, amount, element);
    return false;
  }
  /**
   * Provide custom source data filtering. It's handled by core method and replaces the native filtering.
   *
   * @param {number} index The index where the data filtering starts.
   * @param {number} amount An amount of rows which filtering applies to.
   * @param {number} physicalRows Physical row indexes.
   * @returns {Array}
   */
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
};
function _onBeforeRowMove(rows, finalIndex, dropIndex, movePossible) {
  return this.rowMoveController.onBeforeRowMove(rows, finalIndex, dropIndex, movePossible);
}
function _onBeforeOnCellMouseDown7(event, coords, TD) {
  this.collapsingUI.toggleState(event, coords, TD);
}
function _onFilterData(index, amount, physicalRows) {
  this.collapsingUI.collapsedRowsStash.stash();
  this.collapsingUI.collapsedRowsStash.trimStash(physicalRows[0], amount);
  this.collapsingUI.collapsedRowsStash.shiftStash(physicalRows[0], null, -1 * amount);
  this.dataManager.filterData(index, amount, physicalRows);
  _classPrivateFieldSet35(_skipRender, this, true);
  return this.dataManager.getData().slice();
}
function _onAfterContextMenuDefaultOptions5(defaultOptions2) {
  return this.contextMenuUI.appendOptions(defaultOptions2);
}
function _onAfterGetRowHeader2(row, TH) {
  this.headersUI.appendLevelIndicators(row, TH);
}
function _onModifyRowHeaderWidth(rowHeaderWidth) {
  return Math.max(this.headersUI.rowHeaderWidthCache, rowHeaderWidth);
}
function _onAfterRemoveRow3(index, amount, logicRows, source) {
  if (source === this.pluginName) {
    return;
  }
  this.hot._registerTimeout(() => {
    _classPrivateFieldSet35(_skipRender, this, false);
    this.headersUI.updateRowHeaderWidth();
    this.collapsingUI.collapsedRowsStash.applyStash();
  });
}
function _onBeforeRemoveRow2(index, amount, physicalRows) {
  const modifiedPhysicalRows = Array.from(physicalRows.reduce((removedRows, physicalIndex) => {
    if (this.dataManager.isParent(physicalIndex)) {
      const children = this.dataManager.getDataObject(physicalIndex).__children;
      removedRows.add(physicalIndex);
      if (Array.isArray(children)) {
        children.forEach((child) => removedRows.add(this.dataManager.getRowIndex(child)));
      }
      return removedRows;
    }
    return removedRows.add(physicalIndex);
  }, /* @__PURE__ */ new Set()));
  physicalRows.length = 0;
  physicalRows.push(...modifiedPhysicalRows);
}
function _onBeforeAddChild() {
  this.collapsingUI.collapsedRowsStash.stash();
}
function _onAfterAddChild(parent, element) {
  this.collapsingUI.collapsedRowsStash.shiftStash(this.dataManager.getRowIndex(element));
  this.collapsingUI.collapsedRowsStash.applyStash();
  this.headersUI.updateRowHeaderWidth();
}
function _onBeforeDetachChild() {
  this.collapsingUI.collapsedRowsStash.stash();
}
function _onAfterDetachChild2(parent, element, finalElementRowIndex) {
  this.collapsingUI.collapsedRowsStash.shiftStash(finalElementRowIndex, null, -1);
  this.collapsingUI.collapsedRowsStash.applyStash();
  this.headersUI.updateRowHeaderWidth();
}
function _onAfterCreateRow3() {
  this.dataManager.rewriteCache();
}
function _onAfterInit4() {
  this.headersUI.updateRowHeaderWidth();
}
function _onBeforeViewRender(force, skipRender) {
  if (_classPrivateFieldGet38(_skipRender, this)) {
    skipRender.skipRender = true;
  }
}
function _onBeforeLoadData2(data) {
  if (!isArrayOfObjects(data)) {
    error(WRONG_DATA_TYPE_ERROR);
    this.hot.getSettings()[PLUGIN_KEY29] = false;
    this.disablePlugin();
    return;
  }
  this.dataManager.setData(data);
  this.dataManager.rewriteCache();
}

// node_modules/handsontable/plugins/persistentState/storage.mjs
function _defineProperty58(e, r, t) {
  return (r = _toPropertyKey58(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey58(t) {
  var i = _toPrimitive58(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive58(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var Storage = class {
  // eslint-disable-next-line no-restricted-globals
  constructor(prefix) {
    let rootWindow = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : window;
    _defineProperty58(this, "rootWindow", void 0);
    _defineProperty58(this, "prefix", void 0);
    _defineProperty58(this, "savedKeys", []);
    this.rootWindow = rootWindow;
    this.prefix = prefix;
    this.loadSavedKeys();
  }
  /**
   * Save data to localStorage.
   *
   * @param {string} key Key string.
   * @param {Mixed} value Value to save.
   */
  saveValue(key, value) {
    this.rootWindow.localStorage.setItem(`${this.prefix}_${key}`, JSON.stringify(value));
    if (this.savedKeys.indexOf(key) === -1) {
      this.savedKeys.push(key);
      this.saveSavedKeys();
    }
  }
  /**
   * Load data from localStorage.
   *
   * @param {string} key Key string.
   * @param {object} defaultValue Object containing the loaded data.
   *
   * @returns {object|undefined}
   */
  loadValue(key, defaultValue) {
    const itemKey = typeof key === "undefined" ? defaultValue : key;
    const value = this.rootWindow.localStorage.getItem(`${this.prefix}_${itemKey}`);
    return value === null ? void 0 : JSON.parse(value);
  }
  /**
   * Reset given data from localStorage.
   *
   * @param {string} key Key string.
   */
  reset(key) {
    this.rootWindow.localStorage.removeItem(`${this.prefix}_${key}`);
  }
  /**
   * Reset all data from localStorage.
   *
   */
  resetAll() {
    arrayEach(this.savedKeys, (value, index) => {
      this.rootWindow.localStorage.removeItem(`${this.prefix}_${this.savedKeys[index]}`);
    });
    this.clearSavedKeys();
  }
  /**
   * Load and save all keys from localStorage.
   *
   * @private
   */
  loadSavedKeys() {
    const keysJSON = this.rootWindow.localStorage.getItem(`${this.prefix}__persistentStateKeys`);
    const keys = typeof keysJSON === "string" ? JSON.parse(keysJSON) : void 0;
    this.savedKeys = keys || [];
  }
  /**
   * Save saved key in localStorage.
   *
   * @private
   */
  saveSavedKeys() {
    this.rootWindow.localStorage.setItem(`${this.prefix}__persistentStateKeys`, JSON.stringify(this.savedKeys));
  }
  /**
   * Clear saved key from localStorage.
   *
   * @private
   */
  clearSavedKeys() {
    this.savedKeys.length = 0;
    this.saveSavedKeys();
  }
};
var storage_default = Storage;

// node_modules/handsontable/plugins/persistentState/persistentState.mjs
function _defineProperty59(e, r, t) {
  return (r = _toPropertyKey59(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey59(t) {
  var i = _toPrimitive59(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive59(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
Hooks.getSingleton().register("persistentStateSave");
Hooks.getSingleton().register("persistentStateLoad");
Hooks.getSingleton().register("persistentStateReset");
var PLUGIN_KEY30 = "persistentState";
var PLUGIN_PRIORITY29 = 0;
var PersistentState = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _defineProperty59(this, "storage", void 0);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY30;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY29;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link PersistentState#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[PLUGIN_KEY30];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    if (this.enabled) {
      return;
    }
    if (!this.storage) {
      this.storage = new storage_default(this.hot.rootElement.id, this.hot.rootWindow);
    }
    this.addHook("persistentStateSave", (key, value) => this.saveValue(key, value));
    this.addHook("persistentStateLoad", (key, saveTo) => this.loadValue(key, saveTo));
    this.addHook("persistentStateReset", () => this.resetValue());
    super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.storage = void 0;
    super.disablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`persistentState`](@/api/options.md#persistentstate)
   */
  updatePlugin() {
    this.disablePlugin();
    this.enablePlugin();
    super.updatePlugin();
  }
  /**
   * Loads the value from local storage.
   *
   * @param {string} key Storage key.
   * @param {object} saveTo Saved value from local storage.
   */
  loadValue(key, saveTo) {
    saveTo.value = this.storage.loadValue(key);
  }
  /**
   * Saves the data to local storage.
   *
   * @param {string} key Storage key.
   * @param {Mixed} value Value to save.
   */
  saveValue(key, value) {
    this.storage.saveValue(key, value);
  }
  /**
   * Resets the data or all data from local storage.
   *
   * @param {string} key [optional] Storage key.
   */
  resetValue(key) {
    if (typeof key === "undefined") {
      this.storage.resetAll();
    } else {
      this.storage.reset(key);
    }
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
};

// node_modules/handsontable/plugins/search/search.mjs
function _classPrivateMethodInitSpec42(e, a) {
  _checkPrivateRedeclaration54(e, a), a.add(e);
}
function _checkPrivateRedeclaration54(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty60(e, r, t) {
  return (r = _toPropertyKey60(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey60(t) {
  var i = _toPrimitive60(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive60(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _assertClassBrand54(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var PLUGIN_KEY31 = "search";
var PLUGIN_PRIORITY30 = 190;
var DEFAULT_SEARCH_RESULT_CLASS = "htSearchResult";
var DEFAULT_CALLBACK = function(instance, row, col, data, testResult) {
  instance.getCellMeta(row, col).isSearchResult = testResult;
};
var DEFAULT_QUERY_METHOD = function(query, value, cellProperties) {
  if (isUndefined(query) || query === null || !query.toLocaleLowerCase || query.length === 0) {
    return false;
  }
  if (isUndefined(value) || value === null) {
    return false;
  }
  return value.toString().toLocaleLowerCase(cellProperties.locale).indexOf(query.toLocaleLowerCase(cellProperties.locale)) !== -1;
};
var _Search_brand = /* @__PURE__ */ new WeakSet();
var Search = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec42(this, _Search_brand);
    _defineProperty60(this, "callback", DEFAULT_CALLBACK);
    _defineProperty60(this, "queryMethod", DEFAULT_QUERY_METHOD);
    _defineProperty60(this, "searchResultClass", DEFAULT_SEARCH_RESULT_CLASS);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY31;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY30;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link AutoRowSize#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return this.hot.getSettings()[PLUGIN_KEY31];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _this = this;
    if (this.enabled) {
      return;
    }
    const searchSettings = this.hot.getSettings()[PLUGIN_KEY31];
    this.updatePluginSettings(searchSettings);
    this.addHook("beforeRenderer", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _assertClassBrand54(_Search_brand, _this, _onBeforeRenderer).call(_this, ...args);
    });
    super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    var _this2 = this;
    const beforeRendererCallback = function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _assertClassBrand54(_Search_brand, _this2, _onBeforeRenderer).call(_this2, ...args);
    };
    this.hot.addHook("beforeRenderer", beforeRendererCallback);
    this.hot.addHookOnce("afterViewRender", () => {
      this.hot.removeHook("beforeRenderer", beforeRendererCallback);
    });
    super.disablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`search`](@/api/options.md#search)
   */
  updatePlugin() {
    this.disablePlugin();
    this.enablePlugin();
    super.updatePlugin();
  }
  /**
   * Makes the query.
   *
   * @param {string} queryStr Value to be search.
   * @param {Function} [callback] Callback function performed on cells with values which matches to the searched query.
   * @param {Function} [queryMethod] Query function responsible for determining whether a query matches the value stored in a cell.
   * @returns {object[]} Return an array of objects with `row`, `col`, `data` properties or empty array.
   */
  query(queryStr) {
    let callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.getCallback();
    let queryMethod = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.getQueryMethod();
    const rowCount = this.hot.countRows();
    const colCount = this.hot.countCols();
    const queryResult = [];
    const instance = this.hot;
    rangeEach(0, rowCount - 1, (rowIndex) => {
      rangeEach(0, colCount - 1, (colIndex) => {
        const cellData = this.hot.getDataAtCell(rowIndex, colIndex);
        const cellProperties = this.hot.getCellMeta(rowIndex, colIndex);
        const cellCallback = cellProperties.search.callback || callback;
        const cellQueryMethod = cellProperties.search.queryMethod || queryMethod;
        const testResult = cellQueryMethod(queryStr, cellData, cellProperties);
        if (testResult) {
          const singleResult = {
            row: rowIndex,
            col: colIndex,
            data: cellData
          };
          queryResult.push(singleResult);
        }
        if (cellCallback) {
          cellCallback(instance, rowIndex, colIndex, cellData, testResult);
        }
      });
    });
    return queryResult;
  }
  /**
   * Gets the callback function.
   *
   * @returns {Function} Return the callback function.
   */
  getCallback() {
    return this.callback;
  }
  /**
   * Sets the callback function. This function will be called during querying for each cell.
   *
   * @param {Function} newCallback A callback function.
   */
  setCallback(newCallback) {
    this.callback = newCallback;
  }
  /**
   * Gets the query method function.
   *
   * @returns {Function} Return the query method.
   */
  getQueryMethod() {
    return this.queryMethod;
  }
  /**
   * Sets the query method function. The function is responsible for determining whether a query matches the value stored in a cell.
   *
   * @param {Function} newQueryMethod A function with specific match logic.
   */
  setQueryMethod(newQueryMethod) {
    this.queryMethod = newQueryMethod;
  }
  /**
   * Gets search result cells class name.
   *
   * @returns {string} Return the cell class name.
   */
  getSearchResultClass() {
    return this.searchResultClass;
  }
  /**
   * Sets search result cells class name. This class name will be added to each cell that belongs to the searched query.
   *
   * @param {string} newElementClass CSS class name.
   */
  setSearchResultClass(newElementClass) {
    this.searchResultClass = newElementClass;
  }
  /**
   * Updates the settings of the plugin.
   *
   * @param {object} searchSettings The plugin settings, taken from Handsontable configuration.
   * @private
   */
  updatePluginSettings(searchSettings) {
    if (isObject(searchSettings)) {
      if (searchSettings.searchResultClass) {
        this.setSearchResultClass(searchSettings.searchResultClass);
      }
      if (searchSettings.queryMethod) {
        this.setQueryMethod(searchSettings.queryMethod);
      }
      if (searchSettings.callback) {
        this.setCallback(searchSettings.callback);
      }
    }
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
};
function _onBeforeRenderer(TD, row, col, prop, value, cellProperties) {
  const className = cellProperties.className || [];
  let classArray = [];
  if (typeof className === "string") {
    classArray = className.split(" ");
  } else {
    classArray.push(...className);
  }
  if (this.isEnabled() && cellProperties.isSearchResult) {
    if (!classArray.includes(this.searchResultClass)) {
      classArray.push(`${this.searchResultClass}`);
    }
  } else if (classArray.includes(this.searchResultClass)) {
    classArray.splice(classArray.indexOf(this.searchResultClass), 1);
  }
  cellProperties.className = classArray.join(" ");
}

// node_modules/handsontable/plugins/stretchColumns/strategies/_base.mjs
function _defineProperty61(e, r, t) {
  return (r = _toPropertyKey61(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey61(t) {
  var i = _toPrimitive61(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive61(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var StretchStrategy = class {
  constructor(overwriteColumnWidthFn) {
    _defineProperty61(this, "viewportWidth", void 0);
    _defineProperty61(this, "overwriteColumnWidthFn", void 0);
    _defineProperty61(this, "baseWidths", /* @__PURE__ */ new Map());
    _defineProperty61(this, "stretchedWidths", /* @__PURE__ */ new Map());
    this.overwriteColumnWidthFn = overwriteColumnWidthFn;
  }
  /**
   * Prepares the strategy for the calculation.
   *
   * @param {StretchStrategyCalcArgs} calcArgs The calculation arguments.
   */
  prepare(_ref) {
    let {
      viewportWidth
    } = _ref;
    this.viewportWidth = viewportWidth;
    this.baseWidths.clear();
    this.stretchedWidths.clear();
  }
  /**
   * Sets the base widths of the columns with which the strategy will work with.
   *
   * @param {number} columnVisualIndex The visual index of the column.
   * @param {number} columnWidth The width of the column.
   */
  setColumnBaseWidth(columnVisualIndex, columnWidth) {
    this.baseWidths.set(columnVisualIndex, columnWidth);
  }
  /**
   * Calculates the width of the column.
   */
  calculate() {
  }
  /**
   * Gets the calculated stretched column widths.
   *
   * @returns {Array<number[]>}
   */
  getWidths() {
    return Array.from(this.stretchedWidths);
  }
};

// node_modules/handsontable/plugins/stretchColumns/strategies/all.mjs
var StretchAllStrategy = class extends StretchStrategy {
  /**
   * Calculates the columns widths.
   */
  calculate() {
    const allColumnsWidth = Array.from(this.baseWidths).reduce((sum, _ref) => {
      let [, width] = _ref;
      return sum + width;
    }, 0);
    const remainingViewportWidth = this.viewportWidth - allColumnsWidth;
    if (remainingViewportWidth < 0) {
      this.stretchedWidths.clear();
      return;
    }
    const initialStretchRatio = this.viewportWidth / allColumnsWidth;
    const stretchedWidths = [];
    const fixedColumns = [];
    let viewportWidth = this.viewportWidth;
    let allStretchedColumnsWidth = 0;
    this.baseWidths.forEach((columnWidth, columnVisualIndex) => {
      const stretchedWidth = Math.round(columnWidth * initialStretchRatio);
      const finalWidth = this.overwriteColumnWidthFn(stretchedWidth, columnVisualIndex);
      if (stretchedWidth === finalWidth && stretchedWidth >= DEFAULT_WIDTH) {
        stretchedWidths.push([columnVisualIndex, finalWidth]);
        allStretchedColumnsWidth += finalWidth;
      } else if (stretchedWidth !== finalWidth) {
        stretchedWidths.push([columnVisualIndex, finalWidth]);
        fixedColumns.push(columnVisualIndex);
        viewportWidth -= finalWidth;
      }
    });
    if (viewportWidth <= DEFAULT_WIDTH) {
      this.stretchedWidths.clear();
      return;
    }
    const finalStretchRatio = viewportWidth / allStretchedColumnsWidth;
    let lastColumnIndex = -1;
    let sumColumnsWithoutLastOne = 0;
    stretchedWidths.forEach((_ref2, index) => {
      let [columnVisualIndex, columnWidth] = _ref2;
      let newWidth = columnWidth;
      if (!fixedColumns.includes(columnVisualIndex)) {
        newWidth = Math.round(columnWidth * finalStretchRatio);
      }
      this.stretchedWidths.set(columnVisualIndex, newWidth);
      lastColumnIndex = columnVisualIndex;
      if (index < stretchedWidths.length - 1) {
        sumColumnsWithoutLastOne += newWidth;
      }
    });
    if (this.stretchedWidths.size > 1) {
      this.stretchedWidths.set(lastColumnIndex, Math.round(this.viewportWidth - sumColumnsWithoutLastOne));
    }
  }
};

// node_modules/handsontable/plugins/stretchColumns/strategies/last.mjs
function _classPrivateFieldInitSpec39(e, t, a) {
  _checkPrivateRedeclaration55(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration55(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldGet39(s, a) {
  return s.get(_assertClassBrand55(s, a));
}
function _classPrivateFieldSet36(s, a, r) {
  return s.set(_assertClassBrand55(s, a), r), r;
}
function _assertClassBrand55(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var _lastColumnWidth = /* @__PURE__ */ new WeakMap();
var _lastColumnIndex = /* @__PURE__ */ new WeakMap();
var StretchLastStrategy = class extends StretchStrategy {
  constructor() {
    super(...arguments);
    _classPrivateFieldInitSpec39(this, _lastColumnWidth, 0);
    _classPrivateFieldInitSpec39(this, _lastColumnIndex, -1);
  }
  /**
   * Prepares the strategy for the calculation.
   *
   * @param {StretchStrategyCalcArgs} calcArgs The calculation arguments.
   */
  prepare(calcArgs) {
    super.prepare(calcArgs);
    _classPrivateFieldSet36(_lastColumnWidth, this, 0);
    _classPrivateFieldSet36(_lastColumnIndex, this, -1);
  }
  /**
   * Sets the base widths of the columns with which the strategy will work with.
   *
   * @param {number} columnVisualIndex The visual index of the column.
   * @param {number} columnWidth The width of the column.
   */
  setColumnBaseWidth(columnVisualIndex, columnWidth) {
    super.setColumnBaseWidth(columnVisualIndex, columnWidth);
    _classPrivateFieldSet36(_lastColumnIndex, this, columnVisualIndex);
    _classPrivateFieldSet36(_lastColumnWidth, this, columnWidth);
  }
  /**
   * Calculates the columns widths.
   */
  calculate() {
    if (_classPrivateFieldGet39(_lastColumnIndex, this) === -1) {
      return;
    }
    const allColumnsWidth = Array.from(this.baseWidths).reduce((sum, _ref) => {
      let [, width] = _ref;
      return sum + width;
    }, 0);
    const lastColumnWidth = Math.max(this.viewportWidth - allColumnsWidth + _classPrivateFieldGet39(_lastColumnWidth, this), 0);
    this.stretchedWidths.set(_classPrivateFieldGet39(_lastColumnIndex, this), lastColumnWidth);
  }
};

// node_modules/handsontable/plugins/stretchColumns/calculator.mjs
function _classPrivateMethodInitSpec43(e, a) {
  _checkPrivateRedeclaration56(e, a), a.add(e);
}
function _classPrivateFieldInitSpec40(e, t, a) {
  _checkPrivateRedeclaration56(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration56(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldGet40(s, a) {
  return s.get(_assertClassBrand56(s, a));
}
function _classPrivateFieldSet37(s, a, r) {
  return s.set(_assertClassBrand56(s, a), r), r;
}
function _assertClassBrand56(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var STRETCH_WIDTH_MAP_NAME = "stretchColumns";
var _hot = /* @__PURE__ */ new WeakMap();
var _widthsMap = /* @__PURE__ */ new WeakMap();
var _stretchStrategies = /* @__PURE__ */ new WeakMap();
var _activeStrategy = /* @__PURE__ */ new WeakMap();
var _StretchCalculator_brand = /* @__PURE__ */ new WeakSet();
var StretchCalculator = class {
  constructor(hotInstance) {
    _classPrivateMethodInitSpec43(this, _StretchCalculator_brand);
    _classPrivateFieldInitSpec40(this, _hot, void 0);
    _classPrivateFieldInitSpec40(this, _widthsMap, void 0);
    _classPrivateFieldInitSpec40(this, _stretchStrategies, /* @__PURE__ */ new Map([["all", new StretchAllStrategy(_assertClassBrand56(_StretchCalculator_brand, this, _overwriteColumnWidthFn).bind(this))], ["last", new StretchLastStrategy(_assertClassBrand56(_StretchCalculator_brand, this, _overwriteColumnWidthFn).bind(this))]]));
    _classPrivateFieldInitSpec40(this, _activeStrategy, "none");
    _classPrivateFieldSet37(_hot, this, hotInstance);
    _classPrivateFieldSet37(_widthsMap, this, _classPrivateFieldGet40(_hot, this).columnIndexMapper.createAndRegisterIndexMap(STRETCH_WIDTH_MAP_NAME, "physicalIndexToValue"));
  }
  /**
   * Sets the active stretch strategy.
   *
   * @param {'all' | 'last' | 'none'} strategyName The stretch strategy to use.
   */
  useStrategy(strategyName) {
    _classPrivateFieldSet37(_activeStrategy, this, _classPrivateFieldGet40(_stretchStrategies, this).has(strategyName) ? strategyName : "none");
  }
  /**
   * Recalculates the column widths.
   */
  refreshStretching() {
    if (_classPrivateFieldGet40(_activeStrategy, this) === "none") {
      _classPrivateFieldGet40(_widthsMap, this).clear();
      return;
    }
    _classPrivateFieldGet40(_hot, this).batchExecution(() => {
      _classPrivateFieldGet40(_widthsMap, this).clear();
      const stretchStrategy = _classPrivateFieldGet40(_stretchStrategies, this).get(_classPrivateFieldGet40(_activeStrategy, this));
      const view = _classPrivateFieldGet40(_hot, this).view;
      let viewportWidth = view.getViewportWidth();
      if (_assertClassBrand56(_StretchCalculator_brand, this, _willVerticalScrollAppear).call(this)) {
        viewportWidth -= getScrollbarWidth(_classPrivateFieldGet40(_hot, this).rootDocument);
      }
      stretchStrategy.prepare({
        viewportWidth
      });
      for (let columnIndex = 0; columnIndex < _classPrivateFieldGet40(_hot, this).countCols(); columnIndex++) {
        if (!_classPrivateFieldGet40(_hot, this).columnIndexMapper.isHidden(_classPrivateFieldGet40(_hot, this).toPhysicalColumn(columnIndex))) {
          stretchStrategy.setColumnBaseWidth(columnIndex, _assertClassBrand56(_StretchCalculator_brand, this, _getWidthWithoutStretching).call(this, columnIndex));
        }
      }
      stretchStrategy.calculate();
      stretchStrategy.getWidths().forEach((_ref) => {
        let [columnIndex, width] = _ref;
        _classPrivateFieldGet40(_widthsMap, this).setValueAtIndex(_classPrivateFieldGet40(_hot, this).toPhysicalColumn(columnIndex), width);
      });
    }, true);
  }
  /**
   * Gets the calculated column width.
   *
   * @param {number} columnVisualIndex Column visual index.
   * @returns {number | null}
   */
  getStretchedWidth(columnVisualIndex) {
    return _classPrivateFieldGet40(_widthsMap, this).getValueAtIndex(_classPrivateFieldGet40(_hot, this).toPhysicalColumn(columnVisualIndex));
  }
};
function _willVerticalScrollAppear() {
  const {
    view
  } = _classPrivateFieldGet40(_hot, this);
  if (view.isVerticallyScrollableByWindow()) {
    return false;
  }
  const viewportHeight = view.getViewportHeight();
  const totalRows = _classPrivateFieldGet40(_hot, this).countRows();
  const defaultRowHeight = view.getStylesHandler().getDefaultRowHeight();
  let totalHeight = 0;
  let hasVerticalScroll = false;
  for (let row = 0; row < totalRows; row++) {
    var _classPrivateFieldGet210;
    totalHeight += ((_classPrivateFieldGet210 = _classPrivateFieldGet40(_hot, this).getRowHeight(row)) !== null && _classPrivateFieldGet210 !== void 0 ? _classPrivateFieldGet210 : defaultRowHeight) + (row === 0 ? 1 : 0);
    if (totalHeight > viewportHeight) {
      hasVerticalScroll = true;
      break;
    }
  }
  return hasVerticalScroll;
}
function _getWidthWithoutStretching(columnVisualIndex) {
  var _classPrivateFieldGet310;
  return (_classPrivateFieldGet310 = _classPrivateFieldGet40(_hot, this).getColWidth(columnVisualIndex, "StretchColumns")) !== null && _classPrivateFieldGet310 !== void 0 ? _classPrivateFieldGet310 : DEFAULT_WIDTH;
}
function _overwriteColumnWidthFn(columnWidth, columnVisualIndex) {
  return _classPrivateFieldGet40(_hot, this).runHooks("beforeStretchingColumnWidth", columnWidth, columnVisualIndex);
}

// node_modules/handsontable/plugins/stretchColumns/stretchColumns.mjs
function _classPrivateMethodInitSpec44(e, a) {
  _checkPrivateRedeclaration57(e, a), a.add(e);
}
function _classPrivateFieldInitSpec41(e, t, a) {
  _checkPrivateRedeclaration57(e, t), t.set(e, a);
}
function _checkPrivateRedeclaration57(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldSet38(s, a, r) {
  return s.set(_assertClassBrand57(s, a), r), r;
}
function _classPrivateFieldGet41(s, a) {
  return s.get(_assertClassBrand57(s, a));
}
function _assertClassBrand57(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var PLUGIN_KEY32 = "stretchColumns";
var PLUGIN_PRIORITY31 = 155;
var _stretchCalculator = /* @__PURE__ */ new WeakMap();
var _previousTableWidth = /* @__PURE__ */ new WeakMap();
var _resizeObserver2 = /* @__PURE__ */ new WeakMap();
var _StretchColumns_brand = /* @__PURE__ */ new WeakSet();
var StretchColumns = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec44(this, _StretchColumns_brand);
    _classPrivateFieldInitSpec41(this, _stretchCalculator, new StretchCalculator(this.hot));
    _classPrivateFieldInitSpec41(this, _previousTableWidth, null);
    _classPrivateFieldInitSpec41(this, _resizeObserver2, new ResizeObserver((entries) => {
      requestAnimationFrame(() => {
        var _this$hot;
        if (!((_this$hot = this.hot) !== null && _this$hot !== void 0 && _this$hot.view.isHorizontallyScrollableByWindow())) {
          return;
        }
        entries.forEach((_ref) => {
          let {
            contentRect
          } = _ref;
          if (_classPrivateFieldGet41(_previousTableWidth, this) !== null && _classPrivateFieldGet41(_previousTableWidth, this) !== contentRect.width) {
            this.hot.refreshDimensions();
            this.hot.view.adjustElementsSize();
          }
          _classPrivateFieldSet38(_previousTableWidth, this, contentRect.width);
        });
      });
    }));
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY32;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY31;
  }
  static get SETTING_KEYS() {
    return true;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link #enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return ["all", "last"].includes(this.hot.getSettings().stretchH);
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _this = this;
    if (this.enabled) {
      return;
    }
    _classPrivateFieldGet41(_stretchCalculator, this).useStrategy(this.hot.getSettings().stretchH);
    _classPrivateFieldGet41(_resizeObserver2, this).observe(this.hot.rootElement);
    this.addHook("beforeRender", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _assertClassBrand57(_StretchColumns_brand, _this, _onBeforeRender3).call(_this, ...args);
    });
    this.addHook("modifyColWidth", function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _assertClassBrand57(_StretchColumns_brand, _this, _onModifyColWidth4).call(_this, ...args);
    }, 10);
    super.enablePlugin();
  }
  /**
   * Updates the plugin's state. This method is executed when {@link Core#updateSettings} is invoked.
   */
  updatePlugin() {
    _classPrivateFieldGet41(_stretchCalculator, this).useStrategy(this.hot.getSettings().stretchH);
    super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    super.disablePlugin();
    _classPrivateFieldGet41(_resizeObserver2, this).unobserve(this.hot.rootElement);
  }
  /**
   * Gets the calculated column width based on the stretching
   * strategy defined by {@link Options#stretchH} option.
   *
   * @param {number} columnVisualIndex The visual index of the column.
   * @returns {number | null}
   */
  getColumnWidth(columnVisualIndex) {
    return _classPrivateFieldGet41(_stretchCalculator, this).getStretchedWidth(columnVisualIndex);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    _classPrivateFieldGet41(_resizeObserver2, this).disconnect();
    _classPrivateFieldSet38(_resizeObserver2, this, null);
    _classPrivateFieldSet38(_stretchCalculator, this, null);
    super.destroy();
  }
};
function _onModifyColWidth4(width, column, source) {
  if (source === this.pluginName) {
    return;
  }
  const newWidth = this.getColumnWidth(column);
  if (typeof newWidth === "number") {
    return newWidth;
  }
  return width;
}
function _onBeforeRender3(fullRender) {
  if (fullRender) {
    _classPrivateFieldGet41(_stretchCalculator, this).refreshStretching();
  }
}

// node_modules/handsontable/plugins/touchScroll/touchScroll.mjs
function _classPrivateMethodInitSpec45(e, a) {
  _checkPrivateRedeclaration58(e, a), a.add(e);
}
function _checkPrivateRedeclaration58(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty62(e, r, t) {
  return (r = _toPropertyKey62(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey62(t) {
  var i = _toPrimitive62(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive62(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _assertClassBrand58(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var PLUGIN_KEY33 = "touchScroll";
var PLUGIN_PRIORITY32 = 200;
var _TouchScroll_brand = /* @__PURE__ */ new WeakSet();
var TouchScroll = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec45(this, _TouchScroll_brand);
    _defineProperty62(this, "scrollbars", []);
    _defineProperty62(this, "clones", []);
    _defineProperty62(this, "lockedCollection", false);
    _defineProperty62(this, "freezeOverlays", false);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY33;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY32;
  }
  static get SETTING_KEYS() {
    return true;
  }
  /**
   * Check if plugin is enabled.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return isTouchSupported();
  }
  /**
   * Enable the plugin.
   */
  enablePlugin() {
    if (this.enabled) {
      return;
    }
    this.addHook("afterViewRender", () => _assertClassBrand58(_TouchScroll_brand, this, _onAfterViewRender).call(this));
    this.registerEvents();
    super.enablePlugin();
  }
  /**
   * Updates the plugin to use the latest options you have specified.
   */
  updatePlugin() {
    this.lockedCollection = false;
    super.updatePlugin();
  }
  /**
   * Disable plugin for this Handsontable instance.
   */
  disablePlugin() {
    super.disablePlugin();
  }
  /**
   * Register all necessary events.
   *
   * @private
   */
  registerEvents() {
    this.addHook("beforeTouchScroll", () => _assertClassBrand58(_TouchScroll_brand, this, _onBeforeTouchScroll).call(this));
    this.addHook("afterMomentumScroll", () => _assertClassBrand58(_TouchScroll_brand, this, _onAfterMomentumScroll).call(this));
  }
};
function _onAfterViewRender() {
  if (this.lockedCollection) {
    return;
  }
  const {
    topOverlay,
    bottomOverlay,
    inlineStartOverlay,
    topInlineStartCornerOverlay,
    bottomInlineStartCornerOverlay
  } = this.hot.view._wt.wtOverlays;
  this.lockedCollection = true;
  this.scrollbars.length = 0;
  this.scrollbars.push(topOverlay);
  if (bottomOverlay.clone) {
    this.scrollbars.push(bottomOverlay);
  }
  this.scrollbars.push(inlineStartOverlay);
  if (topInlineStartCornerOverlay) {
    this.scrollbars.push(topInlineStartCornerOverlay);
  }
  if (bottomInlineStartCornerOverlay && bottomInlineStartCornerOverlay.clone) {
    this.scrollbars.push(bottomInlineStartCornerOverlay);
  }
  this.clones = [];
  if (topOverlay.needFullRender) {
    this.clones.push(topOverlay.clone.wtTable.holder.parentNode);
  }
  if (bottomOverlay.needFullRender) {
    this.clones.push(bottomOverlay.clone.wtTable.holder.parentNode);
  }
  if (inlineStartOverlay.needFullRender) {
    this.clones.push(inlineStartOverlay.clone.wtTable.holder.parentNode);
  }
  if (topInlineStartCornerOverlay) {
    this.clones.push(topInlineStartCornerOverlay.clone.wtTable.holder.parentNode);
  }
  if (bottomInlineStartCornerOverlay && bottomInlineStartCornerOverlay.clone) {
    this.clones.push(bottomInlineStartCornerOverlay.clone.wtTable.holder.parentNode);
  }
}
function _onBeforeTouchScroll() {
  this.freezeOverlays = true;
  arrayEach(this.clones, (clone2) => {
    addClass(clone2, "hide-tween");
  });
}
function _onAfterMomentumScroll() {
  this.freezeOverlays = false;
  arrayEach(this.clones, (clone2) => {
    removeClass(clone2, "hide-tween");
    addClass(clone2, "show-tween");
  });
  this.hot._registerTimeout(() => {
    arrayEach(this.clones, (clone2) => {
      removeClass(clone2, "show-tween");
    });
  }, 400);
  arrayEach(this.scrollbars, (scrollbar) => {
    scrollbar.refresh();
    scrollbar.resetFixedPosition();
  });
  this.hot.view._wt.wtOverlays.syncScrollWithMaster();
}

// node_modules/handsontable/plugins/trimRows/trimRows.mjs
function _classPrivateMethodInitSpec46(e, a) {
  _checkPrivateRedeclaration59(e, a), a.add(e);
}
function _checkPrivateRedeclaration59(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty63(e, r, t) {
  return (r = _toPropertyKey63(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey63(t) {
  var i = _toPrimitive63(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive63(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _assertClassBrand59(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var PLUGIN_KEY34 = "trimRows";
var PLUGIN_PRIORITY33 = 330;
var _TrimRows_brand = /* @__PURE__ */ new WeakSet();
var TrimRows = class extends BasePlugin {
  constructor() {
    super(...arguments);
    _classPrivateMethodInitSpec46(this, _TrimRows_brand);
    _defineProperty63(this, "trimmedRowsMap", null);
  }
  static get PLUGIN_KEY() {
    return PLUGIN_KEY34;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY33;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link AutoRowSize#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[PLUGIN_KEY34];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    if (this.enabled) {
      return;
    }
    this.trimmedRowsMap = this.hot.rowIndexMapper.registerMap("trimRows", new TrimmingMap());
    this.trimmedRowsMap.addLocalHook("init", () => _assertClassBrand59(_TrimRows_brand, this, _onMapInit5).call(this));
    super.enablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`trimRows`](@/api/options.md#trimrows)
   */
  updatePlugin() {
    const trimmedRows = this.hot.getSettings()[PLUGIN_KEY34];
    if (Array.isArray(trimmedRows)) {
      this.hot.batchExecution(() => {
        this.trimmedRowsMap.clear();
        arrayEach(trimmedRows, (physicalRow) => {
          this.trimmedRowsMap.setValueAtIndex(physicalRow, true);
        });
      }, true);
    }
    super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.hot.rowIndexMapper.unregisterMap("trimRows");
    super.disablePlugin();
  }
  /**
   * Get list of trimmed rows.
   *
   * @returns {Array} Physical rows.
   */
  getTrimmedRows() {
    return this.trimmedRowsMap.getTrimmedIndexes();
  }
  /**
   * Trims the rows provided in the array.
   *
   * @param {number[]} rows Array of physical row indexes.
   * @fires Hooks#beforeTrimRow
   * @fires Hooks#afterTrimRow
   */
  trimRows(rows) {
    const currentTrimConfig = this.getTrimmedRows();
    const isValidConfig = this.isValidConfig(rows);
    let destinationTrimConfig = currentTrimConfig;
    if (isValidConfig) {
      destinationTrimConfig = Array.from(new Set(currentTrimConfig.concat(rows)));
    }
    const allowTrimRow = this.hot.runHooks("beforeTrimRow", currentTrimConfig, destinationTrimConfig, isValidConfig);
    if (allowTrimRow === false) {
      return;
    }
    if (isValidConfig) {
      this.hot.batchExecution(() => {
        arrayEach(rows, (physicalRow) => {
          this.trimmedRowsMap.setValueAtIndex(physicalRow, true);
        });
      }, true);
    }
    this.hot.runHooks("afterTrimRow", currentTrimConfig, destinationTrimConfig, isValidConfig, isValidConfig && destinationTrimConfig.length > currentTrimConfig.length);
  }
  /**
   * Trims the row provided as a physical row index (counting from 0).
   *
   * @param {...number} row Physical row index.
   */
  trimRow() {
    for (var _len = arguments.length, row = new Array(_len), _key = 0; _key < _len; _key++) {
      row[_key] = arguments[_key];
    }
    this.trimRows(row);
  }
  /**
   * Untrims the rows provided in the array.
   *
   * @param {number[]} rows Array of physical row indexes.
   * @fires Hooks#beforeUntrimRow
   * @fires Hooks#afterUntrimRow
   */
  untrimRows(rows) {
    const currentTrimConfig = this.getTrimmedRows();
    const isValidConfig = this.isValidConfig(rows);
    let destinationTrimConfig = currentTrimConfig;
    const trimmingMapValues = this.trimmedRowsMap.getValues().slice();
    const isAnyRowUntrimmed = rows.length > 0;
    if (isValidConfig && isAnyRowUntrimmed) {
      arrayEach(rows, (physicalRow) => {
        trimmingMapValues[physicalRow] = false;
      });
      destinationTrimConfig = arrayReduce(trimmingMapValues, (trimmedIndexes, isTrimmed, physicalIndex) => {
        if (isTrimmed) {
          trimmedIndexes.push(physicalIndex);
        }
        return trimmedIndexes;
      }, []);
    }
    const allowUntrimRow = this.hot.runHooks("beforeUntrimRow", currentTrimConfig, destinationTrimConfig, isValidConfig && isAnyRowUntrimmed);
    if (allowUntrimRow === false) {
      return;
    }
    if (isValidConfig && isAnyRowUntrimmed) {
      this.trimmedRowsMap.setValues(trimmingMapValues);
    }
    this.hot.runHooks("afterUntrimRow", currentTrimConfig, destinationTrimConfig, isValidConfig && isAnyRowUntrimmed, isValidConfig && destinationTrimConfig.length < currentTrimConfig.length);
  }
  /**
   * Untrims the row provided as a physical row index (counting from 0).
   *
   * @param {...number} row Physical row index.
   */
  untrimRow() {
    for (var _len2 = arguments.length, row = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      row[_key2] = arguments[_key2];
    }
    this.untrimRows(row);
  }
  /**
   * Checks if given row is hidden.
   *
   * @param {number} physicalRow Physical row index.
   * @returns {boolean}
   */
  isTrimmed(physicalRow) {
    return this.trimmedRowsMap.getValueAtIndex(physicalRow) || false;
  }
  /**
   * Untrims all trimmed rows.
   */
  untrimAll() {
    this.untrimRows(this.getTrimmedRows());
  }
  /**
   * Get if trim config is valid. Check whether all of the provided physical row indexes are within source data.
   *
   * @param {Array} trimmedRows List of physical row indexes.
   * @returns {boolean}
   */
  isValidConfig(trimmedRows) {
    const sourceRows = this.hot.countSourceRows();
    return trimmedRows.every((trimmedRow) => Number.isInteger(trimmedRow) && trimmedRow >= 0 && trimmedRow < sourceRows);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
};
function _onMapInit5() {
  const trimmedRows = this.hot.getSettings()[PLUGIN_KEY34];
  if (Array.isArray(trimmedRows)) {
    this.hot.batchExecution(() => {
      arrayEach(trimmedRows, (physicalRow) => {
        this.trimmedRowsMap.setValueAtIndex(physicalRow, true);
      });
    }, true);
  }
}

// node_modules/handsontable/plugins/undoRedo/actions/_base.mjs
function _defineProperty64(e, r, t) {
  return (r = _toPropertyKey64(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey64(t) {
  var i = _toPrimitive64(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive64(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var BaseAction = class {
  constructor(actionType) {
    _defineProperty64(this, "actionType", "");
    this.actionType = actionType;
  }
  undo() {
    throw new Error("Not implemented");
  }
  redo() {
    throw new Error("Not implemented");
  }
};

// node_modules/handsontable/plugins/undoRedo/actions/cellAlignment.mjs
function _defineProperty65(e, r, t) {
  return (r = _toPropertyKey65(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey65(t) {
  var i = _toPrimitive65(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive65(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var CellAlignmentAction = class _CellAlignmentAction extends BaseAction {
  constructor(_ref) {
    let {
      stateBefore,
      range,
      type,
      alignment
    } = _ref;
    super("cell_alignment");
    _defineProperty65(this, "stateBefore", void 0);
    _defineProperty65(this, "range", void 0);
    _defineProperty65(this, "type", void 0);
    _defineProperty65(this, "alignment", void 0);
    this.stateBefore = stateBefore;
    this.range = range;
    this.type = type;
    this.alignment = alignment;
  }
  static startRegisteringEvents(hot, undoRedoPlugin) {
    hot.addHook("beforeCellAlignment", (stateBefore, range, type, alignment) => {
      undoRedoPlugin.done(() => new _CellAlignmentAction({
        stateBefore,
        range,
        type,
        alignment
      }));
    });
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} undoneCallback The callback to be called after the action is undone.
   */
  undo(hot, undoneCallback) {
    arrayEach(this.range, (range) => {
      range.forAll((row, col) => {
        if (row >= 0 && col >= 0) {
          hot.setCellMeta(row, col, "className", this.stateBefore[row][col] || " htLeft");
        }
      });
    });
    hot.addHookOnce("afterViewRender", undoneCallback);
    hot.render();
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} redoneCallback The callback to be called after the action is redone.
   */
  redo(hot, redoneCallback) {
    align(this.range, this.type, this.alignment, (row, col) => hot.getCellMeta(row, col), (row, col, key, value) => hot.setCellMeta(row, col, key, value));
    hot.addHookOnce("afterViewRender", redoneCallback);
    hot.render();
  }
};

// node_modules/handsontable/plugins/undoRedo/actions/columnMove.mjs
function _defineProperty66(e, r, t) {
  return (r = _toPropertyKey66(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey66(t) {
  var i = _toPrimitive66(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive66(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var ColumnMoveAction = class _ColumnMoveAction extends BaseAction {
  constructor(_ref) {
    let {
      columns,
      finalIndex
    } = _ref;
    super("col_move");
    _defineProperty66(this, "columns", void 0);
    _defineProperty66(this, "finalColumnIndex", void 0);
    this.columns = columns.slice();
    this.finalColumnIndex = finalIndex;
  }
  static startRegisteringEvents(hot, undoRedoPlugin) {
    hot.addHook("beforeColumnMove", (columns, finalIndex) => {
      if (columns === false) {
        return;
      }
      undoRedoPlugin.done(() => new _ColumnMoveAction({
        columns,
        finalIndex
      }));
    });
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} undoneCallback The callback to be called after the action is undone.
   */
  undo(hot, undoneCallback) {
    const manualColumnMove = hot.getPlugin("manualColumnMove");
    hot.addHookOnce("afterViewRender", undoneCallback);
    const columnMoves = getMoves(this.columns, this.finalColumnIndex, hot.columnIndexMapper.getNumberOfIndexes());
    columnMoves.reverse().forEach((_ref2) => {
      let {
        from,
        to
      } = _ref2;
      if (from < to) {
        to -= 1;
      }
      manualColumnMove.moveColumn(to, from);
    });
    hot.render();
    hot.deselectCell();
    hot.selectColumns(this.columns[0], this.columns[0] + this.columns.length - 1);
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} redoneCallback The callback to be called after the action is redone.
   */
  redo(hot, redoneCallback) {
    const manualColumnMove = hot.getPlugin("manualColumnMove");
    hot.addHookOnce("afterViewRender", redoneCallback);
    manualColumnMove.moveColumns(this.columns.slice(), this.finalColumnIndex);
    hot.render();
    hot.deselectCell();
    hot.selectColumns(this.finalColumnIndex, this.finalColumnIndex + this.columns.length - 1);
  }
};

// node_modules/handsontable/plugins/undoRedo/actions/columnSort.mjs
function _defineProperty67(e, r, t) {
  return (r = _toPropertyKey67(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey67(t) {
  var i = _toPrimitive67(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive67(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var ColumnSortAction = class _ColumnSortAction extends BaseAction {
  constructor(_ref) {
    let {
      currentSortState,
      newSortState
    } = _ref;
    super("col_sort");
    _defineProperty67(this, "previousSortState", void 0);
    _defineProperty67(this, "nextSortState", void 0);
    this.previousSortState = currentSortState;
    this.nextSortState = newSortState;
  }
  static startRegisteringEvents(hot, undoRedoPlugin) {
    hot.addHook("beforeColumnSort", (currentSortState, newSortState, sortPossible) => {
      if (!sortPossible) {
        return;
      }
      undoRedoPlugin.done(() => new _ColumnSortAction({
        currentSortState,
        newSortState
      }));
    });
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} undoneCallback The callback to be called after the action is undone.
   */
  undo(hot, undoneCallback) {
    const sortPlugin = hot.getPlugin("columnSorting");
    const multiSortPlugin = hot.getPlugin("multiColumnSorting");
    const enabledSortPlugin = multiSortPlugin.isEnabled() ? multiSortPlugin : sortPlugin;
    if (this.previousSortState.length) {
      enabledSortPlugin.sort(this.previousSortState);
    } else {
      enabledSortPlugin.clearSort();
    }
    undoneCallback();
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} redoneCallback The callback to be called after the action is redone.
   */
  redo(hot, redoneCallback) {
    const sortPlugin = hot.getPlugin("columnSorting");
    const multiSortPlugin = hot.getPlugin("multiColumnSorting");
    const enabledSortPlugin = multiSortPlugin.isEnabled() ? multiSortPlugin : sortPlugin;
    enabledSortPlugin.sort(this.nextSortState);
    redoneCallback();
  }
};

// node_modules/handsontable/plugins/undoRedo/actions/createColumn.mjs
function _defineProperty68(e, r, t) {
  return (r = _toPropertyKey68(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey68(t) {
  var i = _toPrimitive68(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive68(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var CreateColumnAction = class _CreateColumnAction extends BaseAction {
  constructor(_ref) {
    let {
      index,
      amount
    } = _ref;
    super("insert_col");
    _defineProperty68(this, "index", void 0);
    _defineProperty68(this, "amount", void 0);
    this.index = index;
    this.amount = amount;
  }
  static startRegisteringEvents(hot, undoRedoPlugin) {
    hot.addHook("afterCreateCol", (index, amount, source) => {
      undoRedoPlugin.done(() => new _CreateColumnAction({
        index,
        amount
      }), source);
    });
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} undoneCallback The callback to be called after the action is undone.
   */
  undo(hot, undoneCallback) {
    hot.addHookOnce("afterRemoveCol", undoneCallback);
    hot.alter("remove_col", this.index, this.amount, "UndoRedo.undo");
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} redoneCallback The callback to be called after the action is redone.
   */
  redo(hot, redoneCallback) {
    hot.addHookOnce("afterCreateCol", redoneCallback);
    hot.alter("insert_col_start", this.index, this.amount, "UndoRedo.redo");
  }
};

// node_modules/handsontable/plugins/undoRedo/actions/createRow.mjs
function _defineProperty69(e, r, t) {
  return (r = _toPropertyKey69(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey69(t) {
  var i = _toPrimitive69(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive69(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var CreateRowAction = class _CreateRowAction extends BaseAction {
  constructor(_ref) {
    let {
      index,
      amount
    } = _ref;
    super("insert_row");
    _defineProperty69(this, "index", void 0);
    _defineProperty69(this, "amount", void 0);
    this.index = index;
    this.amount = amount;
  }
  static startRegisteringEvents(hot, undoRedoPlugin) {
    hot.addHook("afterCreateRow", (index, amount, source) => {
      undoRedoPlugin.done(() => new _CreateRowAction({
        index,
        amount
      }), source);
    });
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} undoneCallback The callback to be called after the action is undone.
   */
  undo(hot, undoneCallback) {
    const rowCount = hot.countRows();
    const minSpareRows = hot.getSettings().minSpareRows;
    if (this.index >= rowCount && this.index - minSpareRows < rowCount) {
      this.index -= minSpareRows;
    }
    hot.addHookOnce("afterRemoveRow", undoneCallback);
    hot.alter("remove_row", this.index, this.amount, "UndoRedo.undo");
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} redoneCallback The callback to be called after the action is redone.
   */
  redo(hot, redoneCallback) {
    hot.addHookOnce("afterCreateRow", redoneCallback);
    hot.alter("insert_row_above", this.index, this.amount, "UndoRedo.redo");
  }
};

// node_modules/handsontable/plugins/undoRedo/actions/dataChange.mjs
function _defineProperty70(e, r, t) {
  return (r = _toPropertyKey70(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey70(t) {
  var i = _toPrimitive70(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive70(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var DataChangeAction = class _DataChangeAction extends BaseAction {
  constructor(_ref) {
    let {
      changes,
      selected,
      countCols,
      countRows
    } = _ref;
    super("change");
    _defineProperty70(this, "changes", void 0);
    _defineProperty70(this, "selected", void 0);
    _defineProperty70(this, "countCols", void 0);
    _defineProperty70(this, "countRows", void 0);
    this.changes = changes;
    this.selected = selected;
    this.countCols = countCols;
    this.countRows = countRows;
  }
  static startRegisteringEvents(hot, undoRedoPlugin) {
    hot.addHook("beforeChange", function(changes, source) {
      const changesLen = changes && changes.length;
      if (!changesLen) {
        return;
      }
      const hasDifferences = changes.find((change) => {
        const [, , oldValue, newValue] = change;
        return oldValue !== newValue;
      });
      if (!hasDifferences) {
        return;
      }
      const wrappedAction = () => {
        const clonedChanges = changes.reduce((arr, change) => {
          arr.push([...change]);
          return arr;
        }, []);
        clonedChanges.forEach((change) => {
          change[1] = hot.propToCol(change[1]);
        });
        const selected = changesLen > 1 ? this.getSelected() : [[clonedChanges[0][0], clonedChanges[0][1]]];
        return new _DataChangeAction({
          changes: clonedChanges,
          selected,
          countCols: hot.countCols(),
          countRows: hot.countRows()
        });
      };
      undoRedoPlugin.done(wrappedAction, source);
    });
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} undoneCallback The callback to be called after the action is undone.
   */
  undo(hot, undoneCallback) {
    const data = deepClone(this.changes);
    for (let i = 0, len = data.length; i < len; i++) {
      data[i].splice(3, 1);
    }
    hot.addHookOnce("afterChange", undoneCallback);
    hot.setDataAtCell(data, null, null, "UndoRedo.undo");
    const rowsToRemove = hot.countRows() - this.countRows;
    if (rowsToRemove > 0) {
      hot.alter("remove_row", null, rowsToRemove, "UndoRedo.undo");
    }
    const columnsToRemove = hot.countCols() - this.countCols;
    if (columnsToRemove > 0 && hot.isColumnModificationAllowed()) {
      hot.alter("remove_col", null, columnsToRemove, "UndoRedo.undo");
    }
    hot.scrollToFocusedCell();
    hot.selectCells(this.selected, false, false);
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} redoneCallback The callback to be called after the action is redone.
   */
  redo(hot, redoneCallback) {
    const data = deepClone(this.changes);
    for (let i = 0, len = data.length; i < len; i++) {
      data[i].splice(2, 1);
    }
    hot.addHookOnce("afterChange", redoneCallback);
    hot.setDataAtCell(data, null, null, "UndoRedo.redo");
    if (this.selected) {
      hot.selectCells(this.selected, false, false);
    }
  }
};

// node_modules/handsontable/plugins/undoRedo/actions/filters.mjs
function _defineProperty71(e, r, t) {
  return (r = _toPropertyKey71(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey71(t) {
  var i = _toPrimitive71(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive71(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var FiltersAction = class _FiltersAction extends BaseAction {
  constructor(_ref) {
    let {
      conditionsStack,
      previousConditionsStack
    } = _ref;
    super("filter");
    _defineProperty71(this, "conditionsStack", void 0);
    _defineProperty71(this, "previousConditionsStack", void 0);
    this.conditionsStack = conditionsStack;
    this.previousConditionsStack = previousConditionsStack;
  }
  static startRegisteringEvents(hot, undoRedoPlugin) {
    hot.addHook("beforeFilter", (conditionsStack, previousConditionsStack) => {
      undoRedoPlugin.done(() => new _FiltersAction({
        conditionsStack,
        previousConditionsStack
      }));
    });
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} undoneCallback The callback to be called after the action is undone.
   */
  undo(hot, undoneCallback) {
    const filters = hot.getPlugin("filters");
    hot.addHookOnce("afterViewRender", undoneCallback);
    filters.importConditions(this.previousConditionsStack);
    filters.filter();
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} redoneCallback The callback to be called after the action is redone.
   */
  redo(hot, redoneCallback) {
    const filters = hot.getPlugin("filters");
    hot.addHookOnce("afterViewRender", redoneCallback);
    filters.importConditions(this.conditionsStack);
    filters.filter();
  }
};

// node_modules/handsontable/plugins/undoRedo/actions/mergeCells.mjs
function _defineProperty72(e, r, t) {
  return (r = _toPropertyKey72(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey72(t) {
  var i = _toPrimitive72(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive72(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var MergeCellsAction = class _MergeCellsAction extends BaseAction {
  constructor(_ref) {
    let {
      data,
      cellRange
    } = _ref;
    super("merge_cells");
    _defineProperty72(this, "cellRange", void 0);
    this.cellRange = cellRange;
    this.data = data;
  }
  static startRegisteringEvents(hot, undoRedoPlugin) {
    hot.addHook("beforeMergeCells", (cellRange, auto) => {
      if (auto) {
        return;
      }
      const topStartCorner = cellRange.getTopStartCorner();
      const bottomEndCorner = cellRange.getBottomEndCorner();
      const data = hot.getData(topStartCorner.row, topStartCorner.col, bottomEndCorner.row, bottomEndCorner.col);
      undoRedoPlugin.done(() => new _MergeCellsAction({
        data,
        cellRange
      }));
    });
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} undoneCallback The callback to be called after the action is undone.
   */
  undo(hot, undoneCallback) {
    const mergeCellsPlugin = hot.getPlugin("mergeCells");
    hot.addHookOnce("afterViewRender", undoneCallback);
    mergeCellsPlugin.unmergeRange(this.cellRange, true);
    const topStartCorner = this.cellRange.getTopStartCorner();
    hot.populateFromArray(topStartCorner.row, topStartCorner.col, this.data, void 0, void 0, "MergeCells");
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} redoneCallback The callback to be called after the action is redone.
   */
  redo(hot, redoneCallback) {
    const mergeCellsPlugin = hot.getPlugin("mergeCells");
    hot.addHookOnce("afterViewRender", redoneCallback);
    mergeCellsPlugin.mergeRange(this.cellRange);
  }
};

// node_modules/handsontable/plugins/undoRedo/utils.mjs
function getCellMetas(hot, fromRow, toRow, fromColumn, toColumn) {
  const genericKeys = ["visualRow", "visualCol", "row", "col", "prop"];
  const genericKeysLength = genericKeys.length;
  const cellMetas = [];
  rangeEach(fromColumn, toColumn, (columnIndex) => {
    rangeEach(fromRow, toRow, (rowIndex) => {
      const cellMeta = hot.getCellMeta(rowIndex, columnIndex);
      if (Object.keys(cellMeta).length !== genericKeysLength) {
        const uniqueMeta = Object.fromEntries(Object.entries(cellMeta).filter((_ref) => {
          let [key] = _ref;
          return genericKeys.includes(key) === false;
        }));
        cellMetas.push([cellMeta.visualRow, cellMeta.visualCol, uniqueMeta]);
      }
    });
  });
  return cellMetas;
}

// node_modules/handsontable/plugins/undoRedo/actions/removeColumn.mjs
function _defineProperty73(e, r, t) {
  return (r = _toPropertyKey73(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey73(t) {
  var i = _toPrimitive73(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive73(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var RemoveColumnAction = class _RemoveColumnAction extends BaseAction {
  constructor(_ref) {
    let {
      index,
      indexes,
      data,
      amount,
      headers,
      columnPositions,
      rowPositions,
      fixedColumnsStart,
      removedCellMetas
    } = _ref;
    super("remove_col");
    _defineProperty73(this, "index", void 0);
    _defineProperty73(this, "indexes", void 0);
    _defineProperty73(this, "data", void 0);
    _defineProperty73(this, "amount", void 0);
    _defineProperty73(this, "headers", void 0);
    _defineProperty73(this, "columnPositions", void 0);
    _defineProperty73(this, "rowPositions", void 0);
    _defineProperty73(this, "fixedColumnsStart", void 0);
    _defineProperty73(this, "removedCellMetas", void 0);
    this.index = index;
    this.indexes = indexes;
    this.data = data;
    this.amount = amount;
    this.headers = headers;
    this.columnPositions = columnPositions.slice(0);
    this.rowPositions = rowPositions.slice(0);
    this.fixedColumnsStart = fixedColumnsStart;
    this.removedCellMetas = removedCellMetas;
  }
  static startRegisteringEvents(hot, undoRedoPlugin) {
    hot.addHook("beforeRemoveCol", (index, amount, logicColumns, source) => {
      const wrappedAction = () => {
        const originalData = hot.getSourceDataArray();
        const columnIndex = (hot.countCols() + index) % hot.countCols();
        const lastColumnIndex = columnIndex + amount - 1;
        const removedData = [];
        const headers = [];
        const indexes = [];
        rangeEach(originalData.length - 1, (i) => {
          const column = [];
          const origRow = originalData[i];
          rangeEach(columnIndex, lastColumnIndex, (j) => {
            column.push(origRow[hot.toPhysicalColumn(j)]);
          });
          removedData.push(column);
        });
        rangeEach(amount - 1, (i) => {
          indexes.push(hot.toPhysicalColumn(columnIndex + i));
        });
        if (Array.isArray(hot.getSettings().colHeaders)) {
          rangeEach(amount - 1, (i) => {
            headers.push(hot.getSettings().colHeaders[hot.toPhysicalColumn(columnIndex + i)] || null);
          });
        }
        return new _RemoveColumnAction({
          index: columnIndex,
          indexes,
          data: removedData,
          amount,
          headers,
          columnPositions: hot.columnIndexMapper.getIndexesSequence(),
          rowPositions: hot.rowIndexMapper.getIndexesSequence(),
          fixedColumnsStart: hot.getSettings().fixedColumnsStart,
          removedCellMetas: getCellMetas(hot, 0, hot.countRows(), columnIndex, lastColumnIndex)
        });
      };
      undoRedoPlugin.done(wrappedAction, source);
    });
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} undoneCallback The callback to be called after the action is undone.
   */
  undo(hot, undoneCallback) {
    const settings = hot.getSettings();
    settings.fixedColumnsStart = this.fixedColumnsStart;
    const ascendingIndexes = this.indexes.slice(0).sort();
    const sortByIndexes = (elem, j, arr) => arr[this.indexes.indexOf(ascendingIndexes[j])];
    const removedDataLength = this.data.length;
    const sortedData = [];
    for (let rowIndex = 0; rowIndex < removedDataLength; rowIndex++) {
      sortedData.push(arrayMap(this.data[rowIndex], sortByIndexes));
    }
    const sortedHeaders = arrayMap(this.headers, sortByIndexes);
    const changes = [];
    hot.columnIndexMapper.setIndexesSequence(this.columnPositions);
    hot.alter("insert_col_start", hot.toVisualColumn(this.indexes[0]), this.indexes.length, "UndoRedo.undo");
    hot.batchExecution(() => {
      hot.rowIndexMapper.setIndexesSequence(this.rowPositions);
      hot.columnIndexMapper.setIndexesSequence(this.columnPositions);
    }, true);
    arrayEach(hot.getSourceDataArray(), (rowData, rowIndex) => {
      arrayEach(ascendingIndexes, (changedIndex, contiquesIndex) => {
        rowData[changedIndex] = sortedData[rowIndex][contiquesIndex];
        changes.push([rowIndex, changedIndex, rowData[changedIndex]]);
      });
    });
    if (typeof this.headers !== "undefined") {
      arrayEach(sortedHeaders, (headerData, columnIndex) => {
        hot.getSettings().colHeaders[ascendingIndexes[columnIndex]] = headerData;
      });
    }
    this.removedCellMetas.forEach((_ref2) => {
      let [rowIndex, columnIndex, cellMeta] = _ref2;
      hot.setCellMetaObject(rowIndex, columnIndex, cellMeta);
    });
    hot.addHookOnce("afterViewRender", undoneCallback);
    hot.setSourceDataAtCell(changes, null, null, "UndoRedo.undo");
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} redoneCallback The callback to be called after the action is redone.
   */
  redo(hot, redoneCallback) {
    hot.addHookOnce("afterRemoveCol", redoneCallback);
    hot.alter("remove_col", this.index, this.amount, "UndoRedo.redo");
  }
};

// node_modules/handsontable/plugins/undoRedo/actions/removeRow.mjs
function _defineProperty74(e, r, t) {
  return (r = _toPropertyKey74(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey74(t) {
  var i = _toPrimitive74(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive74(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var RemoveRowAction = class _RemoveRowAction extends BaseAction {
  constructor(_ref) {
    let {
      index,
      data,
      fixedRowsBottom,
      fixedRowsTop,
      rowIndexesSequence,
      removedCellMetas
    } = _ref;
    super("remove_row");
    _defineProperty74(this, "index", void 0);
    _defineProperty74(this, "data", void 0);
    _defineProperty74(this, "fixedRowsBottom", void 0);
    _defineProperty74(this, "fixedRowsTop", void 0);
    _defineProperty74(this, "rowIndexesSequence", void 0);
    _defineProperty74(this, "removedCellMetas", void 0);
    this.index = index;
    this.data = data;
    this.fixedRowsBottom = fixedRowsBottom;
    this.fixedRowsTop = fixedRowsTop;
    this.rowIndexesSequence = rowIndexesSequence;
    this.removedCellMetas = removedCellMetas;
  }
  static startRegisteringEvents(hot, undoRedoPlugin) {
    hot.addHook("beforeRemoveRow", (index, amount, logicRows, source) => {
      const wrappedAction = () => {
        const physicalRowIndex = hot.toPhysicalRow(index);
        const lastRowIndex = physicalRowIndex + amount - 1;
        const removedData = deepClone(hot.getSourceData(physicalRowIndex, 0, physicalRowIndex + amount - 1, hot.countSourceCols() - 1));
        return new _RemoveRowAction({
          index: physicalRowIndex,
          data: removedData,
          fixedRowsBottom: hot.getSettings().fixedRowsBottom,
          fixedRowsTop: hot.getSettings().fixedRowsTop,
          rowIndexesSequence: hot.rowIndexMapper.getIndexesSequence(),
          removedCellMetas: getCellMetas(hot, physicalRowIndex, lastRowIndex, 0, hot.countCols() - 1)
        });
      };
      undoRedoPlugin.done(wrappedAction, source);
    });
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} undoneCallback The callback to be called after the action is undone.
   */
  undo(hot, undoneCallback) {
    const settings = hot.getSettings();
    const changes = [];
    settings.fixedRowsBottom = this.fixedRowsBottom;
    settings.fixedRowsTop = this.fixedRowsTop;
    this.data.forEach((dataRow, rowIndexDelta) => {
      Object.keys(dataRow).forEach((columnProp) => {
        const columnIndex = parseInt(columnProp, 10);
        changes.push([this.index + rowIndexDelta, isNaN(columnIndex) ? columnProp : columnIndex, dataRow[columnProp]]);
      });
    });
    hot.rowIndexMapper.setIndexesSequence(this.rowIndexesSequence);
    hot.alter("insert_row_above", hot.toVisualRow(this.index), this.data.length, "UndoRedo.undo");
    hot.rowIndexMapper.setIndexesSequence(this.rowIndexesSequence);
    this.removedCellMetas.forEach((_ref2) => {
      let [rowIndex, columnIndex, cellMeta] = _ref2;
      hot.setCellMetaObject(rowIndex, columnIndex, cellMeta);
    });
    hot.addHookOnce("afterViewRender", undoneCallback);
    hot.setSourceDataAtCell(changes, null, null, "UndoRedo.undo");
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} redoneCallback The callback to be called after the action is redone.
   */
  redo(hot, redoneCallback) {
    hot.addHookOnce("afterRemoveRow", redoneCallback);
    hot.alter("remove_row", hot.toVisualRow(this.index), this.data.length, "UndoRedo.redo");
  }
};

// node_modules/handsontable/plugins/undoRedo/actions/rowMove.mjs
function _defineProperty75(e, r, t) {
  return (r = _toPropertyKey75(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey75(t) {
  var i = _toPrimitive75(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive75(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var RowMoveAction = class _RowMoveAction extends BaseAction {
  constructor(_ref) {
    let {
      rows,
      finalIndex
    } = _ref;
    super("row_move");
    _defineProperty75(this, "rows", void 0);
    _defineProperty75(this, "finalRowIndex", void 0);
    this.rows = rows.slice();
    this.finalRowIndex = finalIndex;
  }
  static startRegisteringEvents(hot, undoRedoPlugin) {
    hot.addHook("beforeRowMove", (rows, finalIndex) => {
      if (rows === false) {
        return;
      }
      undoRedoPlugin.done(() => new _RowMoveAction({
        rows,
        finalIndex
      }));
    });
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} undoneCallback The callback to be called after the action is undone.
   */
  undo(hot, undoneCallback) {
    const manualRowMove = hot.getPlugin("manualRowMove");
    hot.addHookOnce("afterViewRender", undoneCallback);
    const rowMoves = getMoves(this.rows, this.finalRowIndex, hot.rowIndexMapper.getNumberOfIndexes());
    rowMoves.reverse().forEach((_ref2) => {
      let {
        from,
        to
      } = _ref2;
      if (from < to) {
        to -= 1;
      }
      manualRowMove.moveRow(to, from);
    });
    hot.render();
    hot.deselectCell();
    hot.selectRows(this.rows[0], this.rows[0] + this.rows.length - 1);
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} redoneCallback The callback to be called after the action is redone.
   */
  redo(hot, redoneCallback) {
    const manualRowMove = hot.getPlugin("manualRowMove");
    hot.addHookOnce("afterViewRender", redoneCallback);
    manualRowMove.moveRows(this.rows.slice(), this.finalRowIndex);
    hot.render();
    hot.deselectCell();
    hot.selectRows(this.finalRowIndex, this.finalRowIndex + this.rows.length - 1);
  }
};

// node_modules/handsontable/plugins/undoRedo/actions/unmergeCells.mjs
function _defineProperty76(e, r, t) {
  return (r = _toPropertyKey76(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey76(t) {
  var i = _toPrimitive76(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive76(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var UnmergeCellsAction = class _UnmergeCellsAction extends BaseAction {
  constructor(_ref) {
    let {
      cellRange
    } = _ref;
    super("unmerge_cells");
    _defineProperty76(this, "cellRange", void 0);
    this.cellRange = cellRange;
  }
  static startRegisteringEvents(hot, undoRedoPlugin) {
    hot.addHook("afterUnmergeCells", (cellRange, auto) => {
      if (auto) {
        return;
      }
      undoRedoPlugin.done(() => new _UnmergeCellsAction({
        cellRange
      }));
    });
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} undoneCallback The callback to be called after the action is undone.
   */
  undo(hot, undoneCallback) {
    const mergeCellsPlugin = hot.getPlugin("mergeCells");
    hot.addHookOnce("afterViewRender", undoneCallback);
    mergeCellsPlugin.mergeRange(this.cellRange, true);
  }
  /**
   * @param {Core} hot The Handsontable instance.
   * @param {function(): void} redoneCallback The callback to be called after the action is redone.
   */
  redo(hot, redoneCallback) {
    const mergeCellsPlugin = hot.getPlugin("mergeCells");
    hot.addHookOnce("afterViewRender", redoneCallback);
    mergeCellsPlugin.unmergeRange(this.cellRange, true);
    hot.render();
  }
};

// node_modules/handsontable/plugins/undoRedo/actions/index.mjs
function registerActions(hot, undoRedoPlugin) {
  [CellAlignmentAction, ColumnMoveAction, ColumnSortAction, CreateColumnAction, CreateRowAction, DataChangeAction, FiltersAction, MergeCellsAction, RemoveColumnAction, RemoveRowAction, RowMoveAction, UnmergeCellsAction].forEach((action) => action.startRegisteringEvents(hot, undoRedoPlugin));
}

// node_modules/handsontable/plugins/undoRedo/undoRedo.mjs
function _classPrivateMethodInitSpec47(e, a) {
  _checkPrivateRedeclaration60(e, a), a.add(e);
}
function _checkPrivateRedeclaration60(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _defineProperty77(e, r, t) {
  return (r = _toPropertyKey77(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey77(t) {
  var i = _toPrimitive77(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive77(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _assertClassBrand60(e, t, n) {
  if ("function" == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError("Private element is not present on this object");
}
var SHORTCUTS_GROUP15 = "undoRedo";
var PLUGIN_KEY35 = "undoRedo";
var PLUGIN_PRIORITY34 = 1e3;
Hooks.getSingleton().register("beforeUndo");
Hooks.getSingleton().register("afterUndo");
Hooks.getSingleton().register("beforeRedo");
Hooks.getSingleton().register("afterRedo");
var deprecationWarns = /* @__PURE__ */ new Set();
var _UndoRedo_brand = /* @__PURE__ */ new WeakSet();
var UndoRedo = class extends BasePlugin {
  static get PLUGIN_KEY() {
    return PLUGIN_KEY35;
  }
  static get PLUGIN_PRIORITY() {
    return PLUGIN_PRIORITY34;
  }
  static get SETTING_KEYS() {
    return true;
  }
  /**
   * The list of registered action do undo.
   *
   * @private
   * @type {Array}
   */
  constructor(hotInstance) {
    super(hotInstance);
    _classPrivateMethodInitSpec47(this, _UndoRedo_brand);
    _defineProperty77(this, "doneActions", []);
    _defineProperty77(this, "undoneActions", []);
    _defineProperty77(this, "ignoreNewActions", false);
    registerActions(hotInstance, this);
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link UndoRedo#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings().undo;
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var _this = this;
    if (this.enabled) {
      return;
    }
    this.addHook("afterChange", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _assertClassBrand60(_UndoRedo_brand, _this, _onAfterChange4).call(_this, ...args);
    });
    this.registerShortcuts();
    _assertClassBrand60(_UndoRedo_brand, this, _exposeAPIToCore).call(this);
    super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    super.disablePlugin();
    this.clear();
    this.unregisterShortcuts();
    _assertClassBrand60(_UndoRedo_brand, this, _removeAPIFromCore).call(this);
  }
  /**
   * Registers shortcuts responsible for performing undo/redo.
   *
   * @private
   */
  registerShortcuts() {
    const shortcutManager = this.hot.getShortcutManager();
    const gridContext = shortcutManager.getContext("grid");
    const runOnlyIf = (event) => {
      return !event.altKey;
    };
    const config = {
      runOnlyIf,
      group: SHORTCUTS_GROUP15
    };
    gridContext.addShortcuts([{
      keys: [["Control/Meta", "z"]],
      callback: () => {
        this.undo();
      }
    }, {
      keys: [["Control/Meta", "y"], ["Control/Meta", "Shift", "z"]],
      callback: () => {
        this.redo();
      }
    }], config);
  }
  /**
   * Unregister shortcuts responsible for performing undo/redo.
   *
   * @private
   */
  unregisterShortcuts() {
    const shortcutManager = this.hot.getShortcutManager();
    const gridContext = shortcutManager.getContext("grid");
    gridContext.removeShortcutsByGroup(SHORTCUTS_GROUP15);
  }
  /**
   * Stash information about performed actions.
   *
   * @fires Hooks#beforeUndoStackChange
   * @fires Hooks#afterUndoStackChange
   * @fires Hooks#beforeRedoStackChange
   * @fires Hooks#afterRedoStackChange
   * @param {Function} wrappedAction The action descriptor wrapped in a closure.
   * @param {string} [source] Source of the action. It is defined just for more general actions (not related to plugins).
   */
  done(wrappedAction, source) {
    if (this.ignoreNewActions) {
      return;
    }
    const isBlockedByDefault = source === "UndoRedo.undo" || source === "UndoRedo.redo" || source === "auto";
    if (isBlockedByDefault) {
      return;
    }
    const doneActionsCopy = this.doneActions.slice();
    const continueAction = this.hot.runHooks("beforeUndoStackChange", doneActionsCopy, source);
    if (continueAction === false) {
      return;
    }
    const newAction = wrappedAction();
    const undoneActionsCopy = this.undoneActions.slice();
    this.doneActions.push(newAction);
    this.hot.runHooks("afterUndoStackChange", doneActionsCopy, this.doneActions.slice());
    this.hot.runHooks("beforeRedoStackChange", undoneActionsCopy);
    this.undoneActions.length = 0;
    this.hot.runHooks("afterRedoStackChange", undoneActionsCopy, this.undoneActions.slice());
  }
  /**
   * Undo the last action performed to the table.
   *
   * @fires Hooks#beforeUndoStackChange
   * @fires Hooks#afterUndoStackChange
   * @fires Hooks#beforeRedoStackChange
   * @fires Hooks#afterRedoStackChange
   * @fires Hooks#beforeUndo
   * @fires Hooks#afterUndo
   */
  undo() {
    if (!this.isUndoAvailable()) {
      return;
    }
    const doneActionsCopy = this.doneActions.slice();
    this.hot.runHooks("beforeUndoStackChange", doneActionsCopy);
    const action = this.doneActions.pop();
    this.hot.runHooks("afterUndoStackChange", doneActionsCopy, this.doneActions.slice());
    const actionClone = deepClone(action);
    const continueAction = this.hot.runHooks("beforeUndo", actionClone);
    if (continueAction === false) {
      return;
    }
    this.ignoreNewActions = true;
    const undoneActionsCopy = this.undoneActions.slice();
    this.hot.runHooks("beforeRedoStackChange", undoneActionsCopy);
    action.undo(this.hot, () => {
      this.ignoreNewActions = false;
      this.undoneActions.push(action);
    });
    this.hot.runHooks("afterRedoStackChange", undoneActionsCopy, this.undoneActions.slice());
    this.hot.runHooks("afterUndo", actionClone);
  }
  /**
   * Redo the previous action performed to the table (used to reverse an undo).
   *
   * @fires Hooks#beforeUndoStackChange
   * @fires Hooks#afterUndoStackChange
   * @fires Hooks#beforeRedoStackChange
   * @fires Hooks#afterRedoStackChange
   * @fires Hooks#beforeRedo
   * @fires Hooks#afterRedo
   */
  redo() {
    if (!this.isRedoAvailable()) {
      return;
    }
    const undoneActionsCopy = this.undoneActions.slice();
    this.hot.runHooks("beforeRedoStackChange", undoneActionsCopy);
    const action = this.undoneActions.pop();
    this.hot.runHooks("afterRedoStackChange", undoneActionsCopy, this.undoneActions.slice());
    const actionClone = deepClone(action);
    const continueAction = this.hot.runHooks("beforeRedo", actionClone);
    if (continueAction === false) {
      return;
    }
    this.ignoreNewActions = true;
    const doneActionsCopy = this.doneActions.slice();
    this.hot.runHooks("beforeUndoStackChange", doneActionsCopy);
    action.redo(this.hot, () => {
      this.ignoreNewActions = false;
      this.doneActions.push(action);
    });
    this.hot.runHooks("afterUndoStackChange", doneActionsCopy, this.doneActions.slice());
    this.hot.runHooks("afterRedo", actionClone);
  }
  /**
   * Checks if undo action is available.
   *
   * @returns {boolean} Return `true` if undo can be performed, `false` otherwise.
   */
  isUndoAvailable() {
    return this.doneActions.length > 0;
  }
  /**
   * Checks if redo action is available.
   *
   * @returns {boolean} Return `true` if redo can be performed, `false` otherwise.
   */
  isRedoAvailable() {
    return this.undoneActions.length > 0;
  }
  /**
   * Clears undo and redo history.
   */
  clear() {
    this.doneActions.length = 0;
    this.undoneActions.length = 0;
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    this.clear();
    this.doneActions = null;
    this.undoneActions = null;
    super.destroy();
  }
};
function _onAfterChange4(changes, source) {
  if (source === "loadData") {
    this.clear();
  }
}
function _exposeAPIToCore() {
  const deprecatedWarn = (methodName) => {
    if (!deprecationWarns.has(methodName)) {
      warn(toSingleLine`The "${methodName}" method is deprecated and it will be removed\x20
          from the Core API in the future. Please use the method from the UndoRedo plugin\x20
          (e.g. \`hotInstance.getPlugin("undoRedo").${methodName}()\`).`);
      deprecationWarns.add(methodName);
    }
  };
  this.hot.undo = () => {
    deprecatedWarn("undo");
    this.undo();
  };
  this.hot.redo = () => {
    deprecatedWarn("redo");
    this.redo();
  };
  this.hot.isUndoAvailable = () => {
    deprecatedWarn("isUndoAvailable");
    return this.isUndoAvailable();
  };
  this.hot.isRedoAvailable = () => {
    deprecatedWarn("isRedoAvailable");
    return this.isRedoAvailable();
  };
  this.hot.clearUndo = () => {
    deprecatedWarn("clear");
    this.clear();
  };
  this.hot.undoRedo = this;
}
function _removeAPIFromCore() {
  delete this.hot.undo;
  delete this.hot.redo;
  delete this.hot.isUndoAvailable;
  delete this.hot.isRedoAvailable;
  delete this.hot.clearUndo;
  delete this.hot.undoRedo;
}

// node_modules/handsontable/plugins/index.mjs
function registerAllPlugins() {
  registerPlugin(AutoColumnSize);
  registerPlugin(Autofill);
  registerPlugin(AutoRowSize);
  registerPlugin(BindRowsWithHeaders);
  registerPlugin(CollapsibleColumns);
  registerPlugin(ColumnSorting);
  registerPlugin(ColumnSummary);
  registerPlugin(Comments);
  registerPlugin(ContextMenu);
  registerPlugin(CopyPaste);
  registerPlugin(CustomBorders);
  registerPlugin(DragToScroll);
  registerPlugin(DropdownMenu);
  registerPlugin(ExportFile);
  registerPlugin(Filters);
  registerPlugin(Formulas);
  registerPlugin(HiddenColumns);
  registerPlugin(HiddenRows);
  registerPlugin(ManualColumnFreeze);
  registerPlugin(ManualColumnMove);
  registerPlugin(ManualColumnResize);
  registerPlugin(ManualRowMove);
  registerPlugin(ManualRowResize);
  registerPlugin(MergeCells);
  registerPlugin(MultiColumnSorting);
  registerPlugin(MultipleSelectionHandles);
  registerPlugin(NestedHeaders);
  registerPlugin(NestedRows);
  registerPlugin(PersistentState);
  registerPlugin(Search);
  registerPlugin(StretchColumns);
  registerPlugin(TouchScroll);
  registerPlugin(TrimRows);
  registerPlugin(UndoRedo);
}

// node_modules/handsontable/registry.mjs
function registerAllModules() {
  registerAllEditors();
  registerAllRenderers();
  registerAllValidators();
  registerAllCellTypes();
  registerAllPlugins();
}

// node_modules/handsontable/helpers/wrappers/jquery.mjs
function jQueryWrapper(Handsontable) {
  const jQuery = typeof window === "undefined" ? false : window.jQuery;
  if (!jQuery) {
    return;
  }
  jQuery.fn.handsontable = function(action) {
    const $this = this.first();
    let instance = $this.data("handsontable");
    if (typeof action !== "string") {
      const userSettings = action || {};
      if (instance) {
        instance.updateSettings(userSettings);
      } else {
        instance = new Handsontable.Core($this[0], userSettings);
        $this.data("handsontable", instance);
        instance.init();
      }
      return $this;
    }
    let output;
    if (instance) {
      if (typeof instance[action] !== "undefined") {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        output = instance[action].call(instance, ...args);
        if (action === "destroy") {
          $this.removeData();
        }
      } else {
        throw new Error(`Handsontable do not provide action: ${action}`);
      }
    }
    return output;
  };
}

// node_modules/handsontable/index.mjs
var _Handsontable$cellTyp;
var _Handsontable$editors;
var _Handsontable$rendere;
var _Handsontable$validat;
var _Handsontable$plugins;
registerAllModules();
jQueryWrapper(base_default);
base_default.__GhostTable = ghostTable_default;
base_default._getListenersCounter = getListenersCounter;
base_default._getRegisteredMapsCounter = getRegisteredMapsCounter;
base_default.EventManager = eventManager_default;
var HELPERS = [array_exports, browser_exports, data_exports, date_exports, feature_exports, function_exports, mixed_exports, number_exports, object_exports, string_exports, unicode_exports, parseTable_exports];
var DOM = [element_exports, event_exports];
base_default.helper = {};
base_default.dom = {};
arrayEach(HELPERS, (helper) => {
  arrayEach(Object.getOwnPropertyNames(helper), (key) => {
    if (key.charAt(0) !== "_") {
      base_default.helper[key] = helper[key];
    }
  });
});
arrayEach(DOM, (helper) => {
  arrayEach(Object.getOwnPropertyNames(helper), (key) => {
    if (key.charAt(0) !== "_") {
      base_default.dom[key] = helper[key];
    }
  });
});
base_default.cellTypes = (_Handsontable$cellTyp = base_default.cellTypes) !== null && _Handsontable$cellTyp !== void 0 ? _Handsontable$cellTyp : {};
arrayEach(getNames4(), (cellTypeName) => {
  base_default.cellTypes[cellTypeName] = _getItem4(cellTypeName);
});
base_default.cellTypes.registerCellType = _register4;
base_default.cellTypes.getCellType = _getItem4;
base_default.editors = (_Handsontable$editors = base_default.editors) !== null && _Handsontable$editors !== void 0 ? _Handsontable$editors : {};
arrayEach(getNames(), (editorName) => {
  base_default.editors[`${toUpperCaseFirst(editorName)}Editor`] = _getItem(editorName);
});
base_default.editors.registerEditor = _register;
base_default.editors.getEditor = _getItem;
base_default.renderers = (_Handsontable$rendere = base_default.renderers) !== null && _Handsontable$rendere !== void 0 ? _Handsontable$rendere : {};
arrayEach(getNames2(), (rendererName) => {
  const renderer = _getItem2(rendererName);
  if (rendererName === "base") {
    base_default.renderers.cellDecorator = renderer;
  }
  base_default.renderers[`${toUpperCaseFirst(rendererName)}Renderer`] = renderer;
});
base_default.renderers.registerRenderer = _register2;
base_default.renderers.getRenderer = _getItem2;
base_default.validators = (_Handsontable$validat = base_default.validators) !== null && _Handsontable$validat !== void 0 ? _Handsontable$validat : {};
arrayEach(getNames3(), (validatorName) => {
  base_default.validators[`${toUpperCaseFirst(validatorName)}Validator`] = _getItem3(validatorName);
});
base_default.validators.registerValidator = _register3;
base_default.validators.getValidator = _getItem3;
base_default.plugins = (_Handsontable$plugins = base_default.plugins) !== null && _Handsontable$plugins !== void 0 ? _Handsontable$plugins : {};
arrayEach(getPluginsNames(), (pluginName) => {
  base_default.plugins[pluginName] = getPlugin(pluginName);
});
base_default.plugins[`${toUpperCaseFirst(BasePlugin.PLUGIN_KEY)}Plugin`] = BasePlugin;
base_default.plugins.registerPlugin = registerPlugin;
base_default.plugins.getPlugin = getPlugin;
var handsontable_default = base_default;
export {
  coords_default as CellCoords,
  range_default as CellRange,
  handsontable_default as default
};
/*! Bundled license information:

@handsontable/pikaday/pikaday.mjs:
  (*!
   * Pikaday
   *
   * Copyright © 2014 David Bushell | BSD & MIT license | https://github.com/Pikaday/Pikaday
   *)

numbro/dist/es/numbro.js:
  (*!
   * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   *)
*/
//# sourceMappingURL=handsontable.js.map
